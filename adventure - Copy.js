$(".input").keypress(function(e) {

    if (e.which == '13') {
        e.preventDefault();
        lastInput = $(".input").val();
        $(".input").val("");
    }

});

function sleep(n) {
    
    console.log("sleep")
    //var request = new XMLHttpRequest();
    //request.open('GET', 'http://www.editey.com/preview/0B-SZEiT_s4MAVkFEc1EtaGJySnM/sleep.php?n=' + n, false);  
    // `false` makes the request synchronous 
    var request = $.ajax({
        type: "POST",
            url: 'http://www.editey.com/preview/0B-SZEiT_s4MAVkFEc1EtaGJySnM/sleep.php?n=' + n,
            async: false,
            data:null
        });
    request.send(null);
    
}
var Module;
var lastInput = null;
var gettingInput = false;

function getInput() {
    $(".input").val("");
    var runs = 0;
    
    while (lastInput == null) {
        spawn(function*() {
         yield sleep(20);
        });
        runs++;
        if (runs > 100) {
            lastInput = window.prompt("input?");
            break;
        }
    }

    var inputEd = lastInput + "";
    lastInput = null;
    return inputEd;
}

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
    Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
    var loadPackage = function(metadata) {

        function runWithFS() {

            function assert(check, msg) {
                if (!check) throw msg + new Error().stack;
            }
            var fileData0 = [];
            fileData0.push.apply(fileData0, [49, 10, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 115, 116, 97, 110, 100, 105, 110, 103, 32, 97, 116, 32, 116, 104, 101, 32, 101, 110, 100, 32, 111, 102, 32, 97, 32, 114, 111, 97, 100, 32, 98, 101, 102, 111, 114, 101, 32, 97, 32, 115, 109, 97, 108, 108, 32, 98, 114, 105, 99, 107, 32, 98, 117, 105, 108, 100, 105, 110, 103, 46, 10, 49, 9, 65, 114, 111, 117, 110, 100, 32, 121, 111, 117, 32, 105, 115, 32, 97, 32, 102, 111, 114, 101, 115, 116, 46, 32, 32, 65, 32, 115, 109, 97, 108, 108, 32, 115, 116, 114, 101, 97, 109, 32, 102, 108, 111, 119, 115, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 98, 117, 105, 108, 100, 105, 110, 103, 32, 97, 110, 100, 10, 49, 9, 100, 111, 119, 110, 32, 97, 32, 103, 117, 108, 108, 121, 46, 10, 50, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 119, 97, 108, 107, 101, 100, 32, 117, 112, 32, 97, 32, 104, 105, 108, 108, 44, 32, 115, 116, 105, 108, 108, 32, 105, 110, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 32, 32, 84, 104, 101, 32, 114, 111, 97, 100, 32, 115, 108, 111, 112, 101, 115, 32, 98, 97, 99, 107, 10, 50, 9, 100, 111, 119, 110, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 115, 105, 100, 101, 32, 111, 102, 32, 116, 104, 101, 32, 104, 105, 108, 108, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 98, 117, 105, 108, 100, 105, 110, 103, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 115, 116, 97, 110, 99, 101, 46, 10, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 115, 105, 100, 101, 32, 97, 32, 98, 117, 105, 108, 100, 105, 110, 103, 44, 32, 97, 32, 119, 101, 108, 108, 32, 104, 111, 117, 115, 101, 32, 102, 111, 114, 32, 97, 32, 108, 97, 114, 103, 101, 32, 115, 112, 114, 105, 110, 103, 46, 10, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 118, 97, 108, 108, 101, 121, 32, 105, 110, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 32, 98, 101, 115, 105, 100, 101, 32, 97, 32, 115, 116, 114, 101, 97, 109, 32, 116, 117, 109, 98, 108, 105, 110, 103, 32, 97, 108, 111, 110, 103, 32, 97, 10, 52, 9, 114, 111, 99, 107, 121, 32, 98, 101, 100, 46, 10, 53, 9, 84, 104, 101, 32, 114, 111, 97, 100, 44, 32, 119, 104, 105, 99, 104, 32, 97, 112, 112, 114, 111, 97, 99, 104, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 101, 97, 115, 116, 44, 32, 101, 110, 100, 115, 32, 104, 101, 114, 101, 32, 97, 109, 105, 100, 32, 116, 104, 101, 32, 116, 114, 101, 101, 115, 46, 10, 54, 9, 84, 104, 101, 32, 102, 111, 114, 101, 115, 116, 32, 116, 104, 105, 110, 115, 32, 111, 117, 116, 32, 104, 101, 114, 101, 32, 116, 111, 32, 114, 101, 118, 101, 97, 108, 32, 97, 32, 115, 116, 101, 101, 112, 32, 99, 108, 105, 102, 102, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 119, 97, 121, 10, 54, 9, 100, 111, 119, 110, 44, 32, 98, 117, 116, 32, 97, 32, 115, 109, 97, 108, 108, 32, 108, 101, 100, 103, 101, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 101, 110, 32, 116, 111, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 46, 10, 55, 9, 65, 116, 32, 121, 111, 117, 114, 32, 102, 101, 101, 116, 32, 97, 108, 108, 32, 116, 104, 101, 32, 119, 97, 116, 101, 114, 32, 111, 102, 32, 116, 104, 101, 32, 115, 116, 114, 101, 97, 109, 32, 115, 112, 108, 97, 115, 104, 101, 115, 32, 105, 110, 116, 111, 32, 97, 32, 50, 45, 105, 110, 99, 104, 32, 115, 108, 105, 116, 10, 55, 9, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 46, 32, 32, 68, 111, 119, 110, 115, 116, 114, 101, 97, 109, 32, 116, 104, 101, 32, 115, 116, 114, 101, 97, 109, 98, 101, 100, 32, 105, 115, 32, 98, 97, 114, 101, 32, 114, 111, 99, 107, 46, 10, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 50, 48, 45, 102, 111, 111, 116, 32, 100, 101, 112, 114, 101, 115, 115, 105, 111, 110, 32, 102, 108, 111, 111, 114, 101, 100, 32, 119, 105, 116, 104, 32, 98, 97, 114, 101, 32, 100, 105, 114, 116, 46, 32, 32, 83, 101, 116, 32, 105, 110, 116, 111, 32, 116, 104, 101, 10, 56, 9, 100, 105, 114, 116, 32, 105, 115, 32, 97, 32, 115, 116, 114, 111, 110, 103, 32, 115, 116, 101, 101, 108, 32, 103, 114, 97, 116, 101, 32, 109, 111, 117, 110, 116, 101, 100, 32, 105, 110, 32, 99, 111, 110, 99, 114, 101, 116, 101, 46, 32, 32, 65, 32, 100, 114, 121, 32, 115, 116, 114, 101, 97, 109, 98, 101, 100, 10, 56, 9, 108, 101, 97, 100, 115, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 100, 101, 112, 114, 101, 115, 115, 105, 111, 110, 46, 10, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 104, 97, 109, 98, 101, 114, 32, 98, 101, 110, 101, 97, 116, 104, 32, 97, 32, 51, 120, 51, 32, 115, 116, 101, 101, 108, 32, 103, 114, 97, 116, 101, 32, 116, 111, 32, 116, 104, 101, 32, 115, 117, 114, 102, 97, 99, 101, 46, 10, 57, 9, 65, 32, 108, 111, 119, 32, 99, 114, 97, 119, 108, 32, 111, 118, 101, 114, 32, 99, 111, 98, 98, 108, 101, 115, 32, 108, 101, 97, 100, 115, 32, 105, 110, 119, 97, 114, 100, 32, 116, 111, 32, 116, 104, 101, 32, 119, 101, 115, 116, 46, 10, 49, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 99, 114, 97, 119, 108, 105, 110, 103, 32, 111, 118, 101, 114, 32, 99, 111, 98, 98, 108, 101, 115, 32, 105, 110, 32, 97, 32, 108, 111, 119, 32, 112, 97, 115, 115, 97, 103, 101, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 100, 105, 109, 32, 108, 105, 103, 104, 116, 10, 49, 48, 9, 97, 116, 32, 116, 104, 101, 32, 101, 97, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 49, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 100, 101, 98, 114, 105, 115, 32, 114, 111, 111, 109, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 115, 116, 117, 102, 102, 32, 119, 97, 115, 104, 101, 100, 32, 105, 110, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 117, 114, 102, 97, 99, 101, 46, 10, 49, 49, 9, 65, 32, 108, 111, 119, 32, 119, 105, 100, 101, 32, 112, 97, 115, 115, 97, 103, 101, 32, 119, 105, 116, 104, 32, 99, 111, 98, 98, 108, 101, 115, 32, 98, 101, 99, 111, 109, 101, 115, 32, 112, 108, 117, 103, 103, 101, 100, 32, 119, 105, 116, 104, 32, 109, 117, 100, 32, 97, 110, 100, 32, 100, 101, 98, 114, 105, 115, 10, 49, 49, 9, 104, 101, 114, 101, 44, 32, 98, 117, 116, 32, 97, 110, 32, 97, 119, 107, 119, 97, 114, 100, 32, 99, 97, 110, 121, 111, 110, 32, 108, 101, 97, 100, 115, 32, 117, 112, 119, 97, 114, 100, 32, 97, 110, 100, 32, 119, 101, 115, 116, 46, 32, 32, 73, 110, 32, 116, 104, 101, 32, 109, 117, 100, 32, 115, 111, 109, 101, 111, 110, 101, 10, 49, 49, 9, 104, 97, 115, 32, 115, 99, 114, 97, 119, 108, 101, 100, 44, 32, 34, 77, 65, 71, 73, 67, 32, 87, 79, 82, 68, 32, 88, 89, 90, 90, 89, 34, 46, 10, 49, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 110, 32, 97, 119, 107, 119, 97, 114, 100, 32, 115, 108, 111, 112, 105, 110, 103, 32, 101, 97, 115, 116, 47, 119, 101, 115, 116, 32, 99, 97, 110, 121, 111, 110, 46, 10, 49, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 112, 108, 101, 110, 100, 105, 100, 32, 99, 104, 97, 109, 98, 101, 114, 32, 116, 104, 105, 114, 116, 121, 32, 102, 101, 101, 116, 32, 104, 105, 103, 104, 46, 32, 32, 84, 104, 101, 32, 119, 97, 108, 108, 115, 32, 97, 114, 101, 32, 102, 114, 111, 122, 101, 110, 10, 49, 51, 9, 114, 105, 118, 101, 114, 115, 32, 111, 102, 32, 111, 114, 97, 110, 103, 101, 32, 115, 116, 111, 110, 101, 46, 32, 32, 65, 110, 32, 97, 119, 107, 119, 97, 114, 100, 32, 99, 97, 110, 121, 111, 110, 32, 97, 110, 100, 32, 97, 32, 103, 111, 111, 100, 32, 112, 97, 115, 115, 97, 103, 101, 32, 101, 120, 105, 116, 10, 49, 51, 9, 102, 114, 111, 109, 32, 101, 97, 115, 116, 32, 97, 110, 100, 32, 119, 101, 115, 116, 32, 115, 105, 100, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 99, 104, 97, 109, 98, 101, 114, 46, 10, 49, 52, 9, 65, 116, 32, 121, 111, 117, 114, 32, 102, 101, 101, 116, 32, 105, 115, 32, 97, 32, 115, 109, 97, 108, 108, 32, 112, 105, 116, 32, 98, 114, 101, 97, 116, 104, 105, 110, 103, 32, 116, 114, 97, 99, 101, 115, 32, 111, 102, 32, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 46, 32, 32, 65, 110, 32, 101, 97, 115, 116, 10, 49, 52, 9, 112, 97, 115, 115, 97, 103, 101, 32, 101, 110, 100, 115, 32, 104, 101, 114, 101, 32, 101, 120, 99, 101, 112, 116, 32, 102, 111, 114, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 114, 97, 99, 107, 32, 108, 101, 97, 100, 105, 110, 103, 32, 111, 110, 46, 10, 49, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 111, 110, 101, 32, 101, 110, 100, 32, 111, 102, 32, 97, 32, 118, 97, 115, 116, 32, 104, 97, 108, 108, 32, 115, 116, 114, 101, 116, 99, 104, 105, 110, 103, 32, 102, 111, 114, 119, 97, 114, 100, 32, 111, 117, 116, 32, 111, 102, 32, 115, 105, 103, 104, 116, 32, 116, 111, 10, 49, 53, 9, 116, 104, 101, 32, 119, 101, 115, 116, 46, 32, 32, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 111, 112, 101, 110, 105, 110, 103, 115, 32, 116, 111, 32, 101, 105, 116, 104, 101, 114, 32, 115, 105, 100, 101, 46, 32, 32, 78, 101, 97, 114, 98, 121, 44, 32, 97, 32, 119, 105, 100, 101, 32, 115, 116, 111, 110, 101, 10, 49, 53, 9, 115, 116, 97, 105, 114, 99, 97, 115, 101, 32, 108, 101, 97, 100, 115, 32, 100, 111, 119, 110, 119, 97, 114, 100, 46, 32, 32, 84, 104, 101, 32, 104, 97, 108, 108, 32, 105, 115, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 119, 105, 115, 112, 115, 32, 111, 102, 32, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 10, 49, 53, 9, 115, 119, 97, 121, 105, 110, 103, 32, 116, 111, 32, 97, 110, 100, 32, 102, 114, 111, 32, 97, 108, 109, 111, 115, 116, 32, 97, 115, 32, 105, 102, 32, 97, 108, 105, 118, 101, 46, 32, 32, 65, 32, 99, 111, 108, 100, 32, 119, 105, 110, 100, 32, 98, 108, 111, 119, 115, 32, 117, 112, 32, 116, 104, 101, 10, 49, 53, 9, 115, 116, 97, 105, 114, 99, 97, 115, 101, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 112, 97, 115, 115, 97, 103, 101, 32, 97, 116, 32, 116, 104, 101, 32, 116, 111, 112, 32, 111, 102, 32, 97, 32, 100, 111, 109, 101, 32, 98, 101, 104, 105, 110, 100, 32, 121, 111, 117, 46, 10, 49, 54, 9, 84, 104, 101, 32, 99, 114, 97, 99, 107, 32, 105, 115, 32, 102, 97, 114, 32, 116, 111, 111, 32, 115, 109, 97, 108, 108, 32, 102, 111, 114, 32, 121, 111, 117, 32, 116, 111, 32, 102, 111, 108, 108, 111, 119, 46, 32, 32, 65, 116, 32, 105, 116, 115, 32, 119, 105, 100, 101, 115, 116, 32, 105, 116, 32, 105, 115, 10, 49, 54, 9, 98, 97, 114, 101, 108, 121, 32, 119, 105, 100, 101, 32, 101, 110, 111, 117, 103, 104, 32, 116, 111, 32, 97, 100, 109, 105, 116, 32, 121, 111, 117, 114, 32, 102, 111, 111, 116, 46, 10, 49, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 116, 104, 101, 32, 101, 97, 115, 116, 32, 98, 97, 110, 107, 32, 111, 102, 32, 97, 32, 102, 105, 115, 115, 117, 114, 101, 32, 115, 108, 105, 99, 105, 110, 103, 32, 99, 108, 101, 97, 114, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 104, 97, 108, 108, 46, 10, 49, 55, 9, 84, 104, 101, 32, 109, 105, 115, 116, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 116, 104, 105, 99, 107, 32, 104, 101, 114, 101, 44, 32, 97, 110, 100, 32, 116, 104, 101, 32, 102, 105, 115, 115, 117, 114, 101, 32, 105, 115, 32, 116, 111, 111, 32, 119, 105, 100, 101, 32, 116, 111, 32, 106, 117, 109, 112, 46, 10, 49, 56, 9, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 108, 111, 119, 32, 114, 111, 111, 109, 32, 119, 105, 116, 104, 32, 97, 32, 99, 114, 117, 100, 101, 32, 110, 111, 116, 101, 32, 111, 110, 32, 116, 104, 101, 32, 119, 97, 108, 108, 46, 32, 32, 84, 104, 101, 32, 110, 111, 116, 101, 32, 115, 97, 121, 115, 44, 10, 49, 56, 9, 34, 89, 111, 117, 32, 119, 111, 110, 39, 116, 32, 103, 101, 116, 32, 105, 116, 32, 117, 112, 32, 116, 104, 101, 32, 115, 116, 101, 112, 115, 34, 46, 10, 49, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 72, 97, 108, 108, 32, 111, 102, 32, 116, 104, 101, 32, 77, 111, 117, 110, 116, 97, 105, 110, 32, 75, 105, 110, 103, 44, 32, 119, 105, 116, 104, 32, 112, 97, 115, 115, 97, 103, 101, 115, 32, 111, 102, 102, 32, 105, 110, 32, 97, 108, 108, 10, 49, 57, 9, 100, 105, 114, 101, 99, 116, 105, 111, 110, 115, 46, 10, 50, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 116, 104, 101, 32, 112, 105, 116, 32, 119, 105, 116, 104, 32, 97, 32, 98, 114, 111, 107, 101, 110, 32, 110, 101, 99, 107, 46, 10, 50, 49, 9, 89, 111, 117, 32, 100, 105, 100, 110, 39, 116, 32, 109, 97, 107, 101, 32, 105, 116, 46, 10, 50, 50, 9, 84, 104, 101, 32, 100, 111, 109, 101, 32, 105, 115, 32, 117, 110, 99, 108, 105, 109, 98, 97, 98, 108, 101, 46, 10, 50, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 84, 119, 111, 112, 105, 116, 32, 82, 111, 111, 109, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 97, 114, 103, 101, 32, 104, 111, 108, 101, 32, 105, 110, 10, 50, 51, 9, 116, 104, 101, 32, 119, 97, 108, 108, 32, 97, 98, 111, 118, 101, 32, 116, 104, 101, 32, 112, 105, 116, 32, 97, 116, 32, 116, 104, 105, 115, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 114, 111, 111, 109, 46, 10, 50, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 116, 104, 101, 32, 101, 97, 115, 116, 101, 114, 110, 32, 112, 105, 116, 32, 105, 110, 32, 116, 104, 101, 32, 84, 119, 111, 112, 105, 116, 32, 82, 111, 111, 109, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 10, 50, 52, 9, 97, 32, 115, 109, 97, 108, 108, 32, 112, 111, 111, 108, 32, 111, 102, 32, 111, 105, 108, 32, 105, 110, 32, 111, 110, 101, 32, 99, 111, 114, 110, 101, 114, 32, 111, 102, 32, 116, 104, 101, 32, 112, 105, 116, 46, 10, 50, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 116, 104, 101, 32, 119, 101, 115, 116, 101, 114, 110, 32, 112, 105, 116, 32, 105, 110, 32, 116, 104, 101, 32, 84, 119, 111, 112, 105, 116, 32, 82, 111, 111, 109, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 10, 50, 53, 9, 97, 32, 108, 97, 114, 103, 101, 32, 104, 111, 108, 101, 32, 105, 110, 32, 116, 104, 101, 32, 119, 97, 108, 108, 32, 97, 98, 111, 117, 116, 32, 50, 53, 32, 102, 101, 101, 116, 32, 97, 98, 111, 118, 101, 32, 121, 111, 117, 46, 10, 50, 54, 9, 89, 111, 117, 32, 99, 108, 97, 109, 98, 101, 114, 32, 117, 112, 32, 116, 104, 101, 32, 112, 108, 97, 110, 116, 32, 97, 110, 100, 32, 115, 99, 117, 114, 114, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 104, 111, 108, 101, 32, 97, 116, 32, 116, 104, 101, 32, 116, 111, 112, 46, 10, 50, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 115, 105, 100, 101, 32, 111, 102, 32, 116, 104, 101, 32, 102, 105, 115, 115, 117, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 105, 115, 116, 115, 46, 10, 50, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 111, 119, 32, 110, 47, 115, 32, 112, 97, 115, 115, 97, 103, 101, 32, 97, 116, 32, 97, 32, 104, 111, 108, 101, 32, 105, 110, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 46, 32, 32, 84, 104, 101, 32, 104, 111, 108, 101, 32, 103, 111, 101, 115, 10, 50, 56, 9, 100, 111, 119, 110, 32, 116, 111, 32, 97, 110, 32, 101, 47, 119, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 50, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 32, 115, 105, 100, 101, 32, 99, 104, 97, 109, 98, 101, 114, 46, 10, 51, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 115, 105, 100, 101, 32, 99, 104, 97, 109, 98, 101, 114, 32, 111, 102, 32, 116, 104, 101, 32, 72, 97, 108, 108, 32, 111, 102, 32, 116, 104, 101, 32, 77, 111, 117, 110, 116, 97, 105, 110, 32, 75, 105, 110, 103, 46, 10, 51, 48, 9, 65, 32, 112, 97, 115, 115, 97, 103, 101, 32, 99, 111, 110, 116, 105, 110, 117, 101, 115, 32, 119, 101, 115, 116, 32, 97, 110, 100, 32, 117, 112, 32, 104, 101, 114, 101, 46, 10, 51, 49, 9, 37, 33, 10, 51, 50, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 103, 101, 116, 32, 98, 121, 32, 116, 104, 101, 32, 115, 110, 97, 107, 101, 46, 10, 51, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 97, 114, 103, 101, 32, 114, 111, 111, 109, 44, 32, 119, 105, 116, 104, 32, 97, 32, 112, 97, 115, 115, 97, 103, 101, 32, 116, 111, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 44, 32, 97, 32, 112, 97, 115, 115, 97, 103, 101, 32, 116, 111, 32, 116, 104, 101, 10, 51, 51, 9, 119, 101, 115, 116, 44, 32, 97, 110, 100, 32, 97, 32, 119, 97, 108, 108, 32, 111, 102, 32, 98, 114, 111, 107, 101, 110, 32, 114, 111, 99, 107, 32, 116, 111, 32, 116, 104, 101, 32, 101, 97, 115, 116, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 97, 114, 103, 101, 32, 34, 89, 50, 34, 32, 111, 110, 10, 51, 51, 9, 97, 32, 114, 111, 99, 107, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 111, 109, 39, 115, 32, 99, 101, 110, 116, 101, 114, 46, 10, 51, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 106, 117, 109, 98, 108, 101, 32, 111, 102, 32, 114, 111, 99, 107, 44, 32, 119, 105, 116, 104, 32, 99, 114, 97, 99, 107, 115, 32, 101, 118, 101, 114, 121, 119, 104, 101, 114, 101, 46, 10, 51, 53, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 97, 32, 108, 111, 119, 32, 119, 105, 110, 100, 111, 119, 32, 111, 118, 101, 114, 108, 111, 111, 107, 105, 110, 103, 32, 97, 32, 104, 117, 103, 101, 32, 112, 105, 116, 44, 32, 119, 104, 105, 99, 104, 32, 101, 120, 116, 101, 110, 100, 115, 32, 117, 112, 32, 111, 117, 116, 32, 111, 102, 10, 51, 53, 9, 115, 105, 103, 104, 116, 46, 32, 32, 65, 32, 102, 108, 111, 111, 114, 32, 105, 115, 32, 105, 110, 100, 105, 115, 116, 105, 110, 99, 116, 108, 121, 32, 118, 105, 115, 105, 98, 108, 101, 32, 111, 118, 101, 114, 32, 53, 48, 32, 102, 101, 101, 116, 32, 98, 101, 108, 111, 119, 46, 32, 32, 84, 114, 97, 99, 101, 115, 32, 111, 102, 10, 51, 53, 9, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 32, 99, 111, 118, 101, 114, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 32, 111, 102, 32, 116, 104, 101, 32, 112, 105, 116, 44, 32, 98, 101, 99, 111, 109, 105, 110, 103, 32, 116, 104, 105, 99, 107, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 46, 10, 51, 53, 9, 77, 97, 114, 107, 115, 32, 105, 110, 32, 116, 104, 101, 32, 100, 117, 115, 116, 32, 97, 114, 111, 117, 110, 100, 32, 116, 104, 101, 32, 119, 105, 110, 100, 111, 119, 32, 119, 111, 117, 108, 100, 32, 115, 101, 101, 109, 32, 116, 111, 32, 105, 110, 100, 105, 99, 97, 116, 101, 32, 116, 104, 97, 116, 10, 51, 53, 9, 115, 111, 109, 101, 111, 110, 101, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 104, 101, 114, 101, 32, 114, 101, 99, 101, 110, 116, 108, 121, 46, 32, 32, 68, 105, 114, 101, 99, 116, 108, 121, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 112, 105, 116, 32, 102, 114, 111, 109, 32, 121, 111, 117, 32, 97, 110, 100, 10, 51, 53, 9, 50, 53, 32, 102, 101, 101, 116, 32, 97, 119, 97, 121, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 115, 105, 109, 105, 108, 97, 114, 32, 119, 105, 110, 100, 111, 119, 32, 108, 111, 111, 107, 105, 110, 103, 32, 105, 110, 116, 111, 32, 97, 32, 108, 105, 103, 104, 116, 101, 100, 32, 114, 111, 111, 109, 46, 32, 32, 65, 10, 51, 53, 9, 115, 104, 97, 100, 111, 119, 121, 32, 102, 105, 103, 117, 114, 101, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 101, 110, 32, 116, 104, 101, 114, 101, 32, 112, 101, 101, 114, 105, 110, 103, 32, 98, 97, 99, 107, 32, 97, 116, 32, 121, 111, 117, 46, 10, 51, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 100, 105, 114, 116, 121, 32, 98, 114, 111, 107, 101, 110, 32, 112, 97, 115, 115, 97, 103, 101, 46, 32, 32, 84, 111, 32, 116, 104, 101, 32, 101, 97, 115, 116, 32, 105, 115, 32, 97, 32, 99, 114, 97, 119, 108, 46, 32, 32, 84, 111, 32, 116, 104, 101, 10, 51, 54, 9, 119, 101, 115, 116, 32, 105, 115, 32, 97, 32, 108, 97, 114, 103, 101, 32, 112, 97, 115, 115, 97, 103, 101, 46, 32, 32, 65, 98, 111, 118, 101, 32, 121, 111, 117, 32, 105, 115, 32, 97, 32, 104, 111, 108, 101, 32, 116, 111, 32, 97, 110, 111, 116, 104, 101, 114, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 51, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 116, 104, 101, 32, 98, 114, 105, 110, 107, 32, 111, 102, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 108, 101, 97, 110, 32, 99, 108, 105, 109, 98, 97, 98, 108, 101, 32, 112, 105, 116, 46, 32, 32, 65, 32, 99, 114, 97, 119, 108, 32, 108, 101, 97, 100, 115, 10, 51, 55, 9, 119, 101, 115, 116, 46, 10, 51, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 97, 32, 115, 109, 97, 108, 108, 32, 112, 105, 116, 32, 119, 105, 116, 104, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 115, 116, 114, 101, 97, 109, 44, 32, 119, 104, 105, 99, 104, 10, 51, 56, 9, 101, 110, 116, 101, 114, 115, 32, 97, 110, 100, 32, 101, 120, 105, 116, 115, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 105, 110, 121, 32, 115, 108, 105, 116, 115, 46, 10, 51, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 97, 114, 103, 101, 32, 114, 111, 111, 109, 32, 102, 117, 108, 108, 32, 111, 102, 32, 100, 117, 115, 116, 121, 32, 114, 111, 99, 107, 115, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 98, 105, 103, 32, 104, 111, 108, 101, 32, 105, 110, 10, 51, 57, 9, 116, 104, 101, 32, 102, 108, 111, 111, 114, 46, 32, 32, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 99, 114, 97, 99, 107, 115, 32, 101, 118, 101, 114, 121, 119, 104, 101, 114, 101, 44, 32, 97, 110, 100, 32, 97, 32, 112, 97, 115, 115, 97, 103, 101, 32, 108, 101, 97, 100, 105, 110, 103, 32, 101, 97, 115, 116, 46, 10, 52, 48, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 99, 114, 97, 119, 108, 101, 100, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 118, 101, 114, 121, 32, 108, 111, 119, 32, 119, 105, 100, 101, 32, 112, 97, 115, 115, 97, 103, 101, 32, 112, 97, 114, 97, 108, 108, 101, 108, 32, 116, 111, 32, 97, 110, 100, 32, 110, 111, 114, 116, 104, 10, 52, 48, 9, 111, 102, 32, 116, 104, 101, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 105, 115, 116, 115, 46, 10, 52, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 105, 115, 116, 115, 46, 32, 32, 65, 32, 108, 111, 119, 32, 119, 105, 100, 101, 32, 99, 114, 97, 119, 108, 10, 52, 49, 9, 99, 111, 110, 116, 105, 110, 117, 101, 115, 32, 119, 101, 115, 116, 32, 97, 110, 100, 32, 97, 110, 111, 116, 104, 101, 114, 32, 103, 111, 101, 115, 32, 110, 111, 114, 116, 104, 46, 32, 32, 84, 111, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 32, 105, 115, 32, 97, 32, 108, 105, 116, 116, 108, 101, 10, 52, 49, 9, 112, 97, 115, 115, 97, 103, 101, 32, 54, 32, 102, 101, 101, 116, 32, 111, 102, 102, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 46, 10, 52, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 52, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 52, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 52, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 52, 54, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 52, 55, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 52, 56, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 52, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 53, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 53, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 53, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 53, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 53, 52, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 53, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 53, 54, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 53, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 116, 104, 101, 32, 98, 114, 105, 110, 107, 32, 111, 102, 32, 97, 32, 116, 104, 105, 114, 116, 121, 32, 102, 111, 111, 116, 32, 112, 105, 116, 32, 119, 105, 116, 104, 32, 97, 32, 109, 97, 115, 115, 105, 118, 101, 32, 111, 114, 97, 110, 103, 101, 32, 99, 111, 108, 117, 109, 110, 10, 53, 55, 9, 100, 111, 119, 110, 32, 111, 110, 101, 32, 119, 97, 108, 108, 46, 32, 32, 89, 111, 117, 32, 99, 111, 117, 108, 100, 32, 99, 108, 105, 109, 98, 32, 100, 111, 119, 110, 32, 104, 101, 114, 101, 32, 98, 117, 116, 32, 121, 111, 117, 32, 99, 111, 117, 108, 100, 32, 110, 111, 116, 32, 103, 101, 116, 32, 98, 97, 99, 107, 10, 53, 55, 9, 117, 112, 46, 32, 32, 84, 104, 101, 32, 109, 97, 122, 101, 32, 99, 111, 110, 116, 105, 110, 117, 101, 115, 32, 97, 116, 32, 116, 104, 105, 115, 32, 108, 101, 118, 101, 108, 46, 10, 53, 56, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 53, 57, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 99, 114, 97, 119, 108, 101, 100, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 118, 101, 114, 121, 32, 108, 111, 119, 32, 119, 105, 100, 101, 32, 112, 97, 115, 115, 97, 103, 101, 32, 112, 97, 114, 97, 108, 108, 101, 108, 32, 116, 111, 32, 97, 110, 100, 32, 110, 111, 114, 116, 104, 10, 53, 57, 9, 111, 102, 32, 116, 104, 101, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 105, 115, 116, 115, 46, 10, 54, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 101, 97, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 97, 32, 118, 101, 114, 121, 32, 108, 111, 110, 103, 32, 104, 97, 108, 108, 32, 97, 112, 112, 97, 114, 101, 110, 116, 108, 121, 32, 119, 105, 116, 104, 111, 117, 116, 32, 115, 105, 100, 101, 10, 54, 48, 9, 99, 104, 97, 109, 98, 101, 114, 115, 46, 32, 32, 84, 111, 32, 116, 104, 101, 32, 101, 97, 115, 116, 32, 97, 32, 108, 111, 119, 32, 119, 105, 100, 101, 32, 99, 114, 97, 119, 108, 32, 115, 108, 97, 110, 116, 115, 32, 117, 112, 46, 32, 32, 84, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 32, 97, 10, 54, 48, 9, 114, 111, 117, 110, 100, 32, 116, 119, 111, 32, 102, 111, 111, 116, 32, 104, 111, 108, 101, 32, 115, 108, 97, 110, 116, 115, 32, 100, 111, 119, 110, 46, 10, 54, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 97, 32, 118, 101, 114, 121, 32, 108, 111, 110, 103, 32, 102, 101, 97, 116, 117, 114, 101, 108, 101, 115, 115, 32, 104, 97, 108, 108, 46, 32, 32, 84, 104, 101, 32, 104, 97, 108, 108, 10, 54, 49, 9, 106, 111, 105, 110, 115, 32, 117, 112, 32, 119, 105, 116, 104, 32, 97, 32, 110, 97, 114, 114, 111, 119, 32, 110, 111, 114, 116, 104, 47, 115, 111, 117, 116, 104, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 54, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 97, 32, 99, 114, 111, 115, 115, 111, 118, 101, 114, 32, 111, 102, 32, 97, 32, 104, 105, 103, 104, 32, 110, 47, 115, 32, 112, 97, 115, 115, 97, 103, 101, 32, 97, 110, 100, 32, 97, 32, 108, 111, 119, 32, 101, 47, 119, 32, 111, 110, 101, 46, 10, 54, 51, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 54, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 97, 32, 99, 111, 109, 112, 108, 101, 120, 32, 106, 117, 110, 99, 116, 105, 111, 110, 46, 32, 32, 65, 32, 108, 111, 119, 32, 104, 97, 110, 100, 115, 32, 97, 110, 100, 32, 107, 110, 101, 101, 115, 32, 112, 97, 115, 115, 97, 103, 101, 32, 102, 114, 111, 109, 32, 116, 104, 101, 10, 54, 52, 9, 110, 111, 114, 116, 104, 32, 106, 111, 105, 110, 115, 32, 97, 32, 104, 105, 103, 104, 101, 114, 32, 99, 114, 97, 119, 108, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 101, 97, 115, 116, 32, 116, 111, 32, 109, 97, 107, 101, 32, 97, 32, 119, 97, 108, 107, 105, 110, 103, 32, 112, 97, 115, 115, 97, 103, 101, 10, 54, 52, 9, 103, 111, 105, 110, 103, 32, 119, 101, 115, 116, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 108, 115, 111, 32, 97, 32, 108, 97, 114, 103, 101, 32, 114, 111, 111, 109, 32, 97, 98, 111, 118, 101, 46, 32, 32, 84, 104, 101, 32, 97, 105, 114, 32, 105, 115, 32, 100, 97, 109, 112, 32, 104, 101, 114, 101, 46, 10, 54, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 66, 101, 100, 113, 117, 105, 108, 116, 44, 32, 97, 32, 108, 111, 110, 103, 32, 101, 97, 115, 116, 47, 119, 101, 115, 116, 32, 112, 97, 115, 115, 97, 103, 101, 32, 119, 105, 116, 104, 32, 104, 111, 108, 101, 115, 32, 101, 118, 101, 114, 121, 119, 104, 101, 114, 101, 46, 10, 54, 53, 9, 84, 111, 32, 101, 120, 112, 108, 111, 114, 101, 32, 97, 116, 32, 114, 97, 110, 100, 111, 109, 32, 115, 101, 108, 101, 99, 116, 32, 110, 111, 114, 116, 104, 44, 32, 115, 111, 117, 116, 104, 44, 32, 117, 112, 44, 32, 111, 114, 32, 100, 111, 119, 110, 46, 10, 54, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 114, 111, 111, 109, 32, 119, 104, 111, 115, 101, 32, 119, 97, 108, 108, 115, 32, 114, 101, 115, 101, 109, 98, 108, 101, 32, 115, 119, 105, 115, 115, 32, 99, 104, 101, 101, 115, 101, 46, 32, 32, 79, 98, 118, 105, 111, 117, 115, 32, 112, 97, 115, 115, 97, 103, 101, 115, 10, 54, 54, 9, 103, 111, 32, 119, 101, 115, 116, 44, 32, 101, 97, 115, 116, 44, 32, 110, 101, 44, 32, 97, 110, 100, 32, 110, 119, 46, 32, 32, 80, 97, 114, 116, 32, 111, 102, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 105, 115, 32, 111, 99, 99, 117, 112, 105, 101, 100, 32, 98, 121, 32, 97, 32, 108, 97, 114, 103, 101, 10, 54, 54, 9, 98, 101, 100, 114, 111, 99, 107, 32, 98, 108, 111, 99, 107, 46, 10, 54, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 101, 97, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 84, 119, 111, 112, 105, 116, 32, 82, 111, 111, 109, 46, 32, 32, 84, 104, 101, 32, 102, 108, 111, 111, 114, 32, 104, 101, 114, 101, 32, 105, 115, 10, 54, 55, 9, 108, 105, 116, 116, 101, 114, 101, 100, 32, 119, 105, 116, 104, 32, 116, 104, 105, 110, 32, 114, 111, 99, 107, 32, 115, 108, 97, 98, 115, 44, 32, 119, 104, 105, 99, 104, 32, 109, 97, 107, 101, 32, 105, 116, 32, 101, 97, 115, 121, 32, 116, 111, 32, 100, 101, 115, 99, 101, 110, 100, 32, 116, 104, 101, 32, 112, 105, 116, 115, 46, 10, 54, 55, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 112, 97, 116, 104, 32, 104, 101, 114, 101, 32, 98, 121, 112, 97, 115, 115, 105, 110, 103, 32, 116, 104, 101, 32, 112, 105, 116, 115, 32, 116, 111, 32, 99, 111, 110, 110, 101, 99, 116, 32, 112, 97, 115, 115, 97, 103, 101, 115, 32, 102, 114, 111, 109, 32, 101, 97, 115, 116, 10, 54, 55, 9, 97, 110, 100, 32, 119, 101, 115, 116, 46, 32, 32, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 104, 111, 108, 101, 115, 32, 97, 108, 108, 32, 111, 118, 101, 114, 44, 32, 98, 117, 116, 32, 116, 104, 101, 32, 111, 110, 108, 121, 32, 98, 105, 103, 32, 111, 110, 101, 32, 105, 115, 32, 111, 110, 32, 116, 104, 101, 10, 54, 55, 9, 119, 97, 108, 108, 32, 100, 105, 114, 101, 99, 116, 108, 121, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 112, 105, 116, 32, 119, 104, 101, 114, 101, 32, 121, 111, 117, 32, 99, 97, 110, 39, 116, 32, 103, 101, 116, 32, 116, 111, 32, 105, 116, 46, 10, 54, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 97, 114, 103, 101, 32, 108, 111, 119, 32, 99, 105, 114, 99, 117, 108, 97, 114, 32, 99, 104, 97, 109, 98, 101, 114, 32, 119, 104, 111, 115, 101, 32, 102, 108, 111, 111, 114, 32, 105, 115, 32, 97, 110, 32, 105, 109, 109, 101, 110, 115, 101, 32, 115, 108, 97, 98, 10, 54, 56, 9, 102, 97, 108, 108, 101, 110, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 99, 101, 105, 108, 105, 110, 103, 32, 40, 83, 108, 97, 98, 32, 82, 111, 111, 109, 41, 46, 32, 32, 69, 97, 115, 116, 32, 97, 110, 100, 32, 119, 101, 115, 116, 32, 116, 104, 101, 114, 101, 32, 111, 110, 99, 101, 32, 119, 101, 114, 101, 10, 54, 56, 9, 108, 97, 114, 103, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 98, 117, 116, 32, 116, 104, 101, 121, 32, 97, 114, 101, 32, 110, 111, 119, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 98, 111, 117, 108, 100, 101, 114, 115, 46, 32, 32, 76, 111, 119, 32, 115, 109, 97, 108, 108, 10, 54, 56, 9, 112, 97, 115, 115, 97, 103, 101, 115, 32, 103, 111, 32, 110, 111, 114, 116, 104, 32, 97, 110, 100, 32, 115, 111, 117, 116, 104, 44, 32, 97, 110, 100, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 32, 111, 110, 101, 32, 113, 117, 105, 99, 107, 108, 121, 32, 98, 101, 110, 100, 115, 32, 119, 101, 115, 116, 10, 54, 56, 9, 97, 114, 111, 117, 110, 100, 32, 116, 104, 101, 32, 98, 111, 117, 108, 100, 101, 114, 115, 46, 10, 54, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 101, 99, 114, 101, 116, 32, 110, 47, 115, 32, 99, 97, 110, 121, 111, 110, 32, 97, 98, 111, 118, 101, 32, 97, 32, 108, 97, 114, 103, 101, 32, 114, 111, 111, 109, 46, 10, 55, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 101, 99, 114, 101, 116, 32, 110, 47, 115, 32, 99, 97, 110, 121, 111, 110, 32, 97, 98, 111, 118, 101, 32, 97, 32, 115, 105, 122, 97, 98, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 55, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 101, 99, 114, 101, 116, 32, 99, 97, 110, 121, 111, 110, 32, 97, 116, 32, 97, 32, 106, 117, 110, 99, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 114, 101, 101, 32, 99, 97, 110, 121, 111, 110, 115, 44, 32, 98, 101, 97, 114, 105, 110, 103, 10, 55, 49, 9, 110, 111, 114, 116, 104, 44, 32, 115, 111, 117, 116, 104, 44, 32, 97, 110, 100, 32, 115, 101, 46, 32, 32, 84, 104, 101, 32, 110, 111, 114, 116, 104, 32, 111, 110, 101, 32, 105, 115, 32, 97, 115, 32, 116, 97, 108, 108, 32, 97, 115, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 116, 119, 111, 10, 55, 49, 9, 99, 111, 109, 98, 105, 110, 101, 100, 46, 10, 55, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 97, 114, 103, 101, 32, 108, 111, 119, 32, 114, 111, 111, 109, 46, 32, 32, 67, 114, 97, 119, 108, 115, 32, 108, 101, 97, 100, 32, 110, 111, 114, 116, 104, 44, 32, 115, 101, 44, 32, 97, 110, 100, 32, 115, 119, 46, 10, 55, 51, 9, 68, 101, 97, 100, 32, 101, 110, 100, 32, 99, 114, 97, 119, 108, 46, 10, 55, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 101, 99, 114, 101, 116, 32, 99, 97, 110, 121, 111, 110, 32, 119, 104, 105, 99, 104, 32, 104, 101, 114, 101, 32, 114, 117, 110, 115, 32, 101, 47, 119, 46, 32, 32, 73, 116, 32, 99, 114, 111, 115, 115, 101, 115, 32, 111, 118, 101, 114, 32, 97, 10, 55, 52, 9, 118, 101, 114, 121, 32, 116, 105, 103, 104, 116, 32, 99, 97, 110, 121, 111, 110, 32, 49, 53, 32, 102, 101, 101, 116, 32, 98, 101, 108, 111, 119, 46, 32, 32, 73, 102, 32, 121, 111, 117, 32, 103, 111, 32, 100, 111, 119, 110, 32, 121, 111, 117, 32, 109, 97, 121, 32, 110, 111, 116, 32, 98, 101, 32, 97, 98, 108, 101, 10, 55, 52, 9, 116, 111, 32, 103, 101, 116, 32, 98, 97, 99, 107, 32, 117, 112, 46, 10, 55, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 97, 32, 119, 105, 100, 101, 32, 112, 108, 97, 99, 101, 32, 105, 110, 32, 97, 32, 118, 101, 114, 121, 32, 116, 105, 103, 104, 116, 32, 110, 47, 115, 32, 99, 97, 110, 121, 111, 110, 46, 10, 55, 54, 9, 84, 104, 101, 32, 99, 97, 110, 121, 111, 110, 32, 104, 101, 114, 101, 32, 98, 101, 99, 111, 109, 101, 115, 32, 116, 111, 111, 32, 116, 105, 103, 104, 116, 32, 116, 111, 32, 103, 111, 32, 102, 117, 114, 116, 104, 101, 114, 32, 115, 111, 117, 116, 104, 46, 10, 55, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 116, 97, 108, 108, 32, 101, 47, 119, 32, 99, 97, 110, 121, 111, 110, 46, 32, 32, 65, 32, 108, 111, 119, 32, 116, 105, 103, 104, 116, 32, 99, 114, 97, 119, 108, 32, 103, 111, 101, 115, 32, 51, 32, 102, 101, 101, 116, 32, 110, 111, 114, 116, 104, 32, 97, 110, 100, 10, 55, 55, 9, 115, 101, 101, 109, 115, 32, 116, 111, 32, 111, 112, 101, 110, 32, 117, 112, 46, 10, 55, 56, 9, 84, 104, 101, 32, 99, 97, 110, 121, 111, 110, 32, 114, 117, 110, 115, 32, 105, 110, 116, 111, 32, 97, 32, 109, 97, 115, 115, 32, 111, 102, 32, 98, 111, 117, 108, 100, 101, 114, 115, 32, 45, 45, 32, 100, 101, 97, 100, 32, 101, 110, 100, 46, 10, 55, 57, 9, 84, 104, 101, 32, 115, 116, 114, 101, 97, 109, 32, 102, 108, 111, 119, 115, 32, 111, 117, 116, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 112, 97, 105, 114, 32, 111, 102, 32, 49, 32, 102, 111, 111, 116, 32, 100, 105, 97, 109, 101, 116, 101, 114, 32, 115, 101, 119, 101, 114, 32, 112, 105, 112, 101, 115, 46, 10, 55, 57, 9, 73, 116, 32, 119, 111, 117, 108, 100, 32, 98, 101, 32, 97, 100, 118, 105, 115, 97, 98, 108, 101, 32, 116, 111, 32, 117, 115, 101, 32, 116, 104, 101, 32, 101, 120, 105, 116, 46, 10, 56, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 56, 49, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 56, 50, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 56, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 56, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 56, 53, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 56, 54, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 56, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 97, 108, 105, 107, 101, 46, 10, 56, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 111, 110, 103, 44, 32, 110, 97, 114, 114, 111, 119, 32, 99, 111, 114, 114, 105, 100, 111, 114, 32, 115, 116, 114, 101, 116, 99, 104, 105, 110, 103, 32, 111, 117, 116, 32, 111, 102, 32, 115, 105, 103, 104, 116, 32, 116, 111, 32, 116, 104, 101, 10, 56, 56, 9, 119, 101, 115, 116, 46, 32, 32, 65, 116, 32, 116, 104, 101, 32, 101, 97, 115, 116, 101, 114, 110, 32, 101, 110, 100, 32, 105, 115, 32, 97, 32, 104, 111, 108, 101, 32, 116, 104, 114, 111, 117, 103, 104, 32, 119, 104, 105, 99, 104, 32, 121, 111, 117, 32, 99, 97, 110, 32, 115, 101, 101, 32, 97, 10, 56, 56, 9, 112, 114, 111, 102, 117, 115, 105, 111, 110, 32, 111, 102, 32, 108, 101, 97, 118, 101, 115, 46, 10, 56, 57, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 116, 111, 32, 99, 108, 105, 109, 98, 46, 32, 32, 85, 115, 101, 32, 34, 117, 112, 34, 32, 111, 114, 32, 34, 111, 117, 116, 34, 32, 116, 111, 32, 108, 101, 97, 118, 101, 32, 116, 104, 101, 32, 112, 105, 116, 46, 10, 57, 48, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 99, 108, 105, 109, 98, 101, 100, 32, 117, 112, 32, 116, 104, 101, 32, 112, 108, 97, 110, 116, 32, 97, 110, 100, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 112, 105, 116, 46, 10, 57, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 116, 111, 112, 32, 111, 102, 32, 97, 32, 115, 116, 101, 101, 112, 32, 105, 110, 99, 108, 105, 110, 101, 32, 97, 98, 111, 118, 101, 32, 97, 32, 108, 97, 114, 103, 101, 32, 114, 111, 111, 109, 46, 32, 32, 89, 111, 117, 32, 99, 111, 117, 108, 100, 10, 57, 49, 9, 99, 108, 105, 109, 98, 32, 100, 111, 119, 110, 32, 104, 101, 114, 101, 44, 32, 98, 117, 116, 32, 121, 111, 117, 32, 119, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 97, 98, 108, 101, 32, 116, 111, 32, 99, 108, 105, 109, 98, 32, 117, 112, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 10, 57, 49, 9, 112, 97, 115, 115, 97, 103, 101, 32, 108, 101, 97, 100, 105, 110, 103, 32, 98, 97, 99, 107, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 46, 10, 57, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 71, 105, 97, 110, 116, 32, 82, 111, 111, 109, 46, 32, 32, 84, 104, 101, 32, 99, 101, 105, 108, 105, 110, 103, 32, 104, 101, 114, 101, 32, 105, 115, 32, 116, 111, 111, 32, 104, 105, 103, 104, 32, 117, 112, 32, 102, 111, 114, 32, 121, 111, 117, 114, 10, 57, 50, 9, 108, 97, 109, 112, 32, 116, 111, 32, 115, 104, 111, 119, 32, 105, 116, 46, 32, 32, 67, 97, 118, 101, 114, 110, 111, 117, 115, 32, 112, 97, 115, 115, 97, 103, 101, 115, 32, 108, 101, 97, 100, 32, 101, 97, 115, 116, 44, 32, 110, 111, 114, 116, 104, 44, 32, 97, 110, 100, 32, 115, 111, 117, 116, 104, 46, 32, 32, 79, 110, 10, 57, 50, 9, 116, 104, 101, 32, 119, 101, 115, 116, 32, 119, 97, 108, 108, 32, 105, 115, 32, 115, 99, 114, 97, 119, 108, 101, 100, 32, 116, 104, 101, 32, 105, 110, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 34, 70, 69, 69, 32, 70, 73, 69, 32, 70, 79, 69, 32, 70, 79, 79, 34, 32, 91, 115, 105, 99, 93, 46, 10, 57, 51, 9, 84, 104, 101, 32, 112, 97, 115, 115, 97, 103, 101, 32, 104, 101, 114, 101, 32, 105, 115, 32, 98, 108, 111, 99, 107, 101, 100, 32, 98, 121, 32, 97, 32, 114, 101, 99, 101, 110, 116, 32, 99, 97, 118, 101, 45, 105, 110, 46, 10, 57, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 111, 110, 101, 32, 101, 110, 100, 32, 111, 102, 32, 97, 110, 32, 105, 109, 109, 101, 110, 115, 101, 32, 110, 111, 114, 116, 104, 47, 115, 111, 117, 116, 104, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 57, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 103, 110, 105, 102, 105, 99, 101, 110, 116, 32, 99, 97, 118, 101, 114, 110, 32, 119, 105, 116, 104, 32, 97, 32, 114, 117, 115, 104, 105, 110, 103, 32, 115, 116, 114, 101, 97, 109, 44, 32, 119, 104, 105, 99, 104, 32, 99, 97, 115, 99, 97, 100, 101, 115, 10, 57, 53, 9, 111, 118, 101, 114, 32, 97, 32, 115, 112, 97, 114, 107, 108, 105, 110, 103, 32, 119, 97, 116, 101, 114, 102, 97, 108, 108, 32, 105, 110, 116, 111, 32, 97, 32, 114, 111, 97, 114, 105, 110, 103, 32, 119, 104, 105, 114, 108, 112, 111, 111, 108, 32, 119, 104, 105, 99, 104, 32, 100, 105, 115, 97, 112, 112, 101, 97, 114, 115, 10, 57, 53, 9, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 104, 111, 108, 101, 32, 105, 110, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 46, 32, 32, 80, 97, 115, 115, 97, 103, 101, 115, 32, 101, 120, 105, 116, 32, 116, 111, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 32, 97, 110, 100, 32, 119, 101, 115, 116, 46, 10, 57, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 83, 111, 102, 116, 32, 82, 111, 111, 109, 46, 32, 32, 84, 104, 101, 32, 119, 97, 108, 108, 115, 32, 97, 114, 101, 32, 99, 111, 118, 101, 114, 101, 100, 32, 119, 105, 116, 104, 32, 104, 101, 97, 118, 121, 32, 99, 117, 114, 116, 97, 105, 110, 115, 44, 10, 57, 54, 9, 116, 104, 101, 32, 102, 108, 111, 111, 114, 32, 119, 105, 116, 104, 32, 97, 32, 116, 104, 105, 99, 107, 32, 112, 105, 108, 101, 32, 99, 97, 114, 112, 101, 116, 46, 32, 32, 77, 111, 115, 115, 32, 99, 111, 118, 101, 114, 115, 32, 116, 104, 101, 32, 99, 101, 105, 108, 105, 110, 103, 46, 10, 57, 55, 9, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 79, 114, 105, 101, 110, 116, 97, 108, 32, 82, 111, 111, 109, 46, 32, 32, 65, 110, 99, 105, 101, 110, 116, 32, 111, 114, 105, 101, 110, 116, 97, 108, 32, 99, 97, 118, 101, 32, 100, 114, 97, 119, 105, 110, 103, 115, 32, 99, 111, 118, 101, 114, 32, 116, 104, 101, 10, 57, 55, 9, 119, 97, 108, 108, 115, 46, 32, 32, 65, 32, 103, 101, 110, 116, 108, 121, 32, 115, 108, 111, 112, 105, 110, 103, 32, 112, 97, 115, 115, 97, 103, 101, 32, 108, 101, 97, 100, 115, 32, 117, 112, 119, 97, 114, 100, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 44, 32, 97, 110, 111, 116, 104, 101, 114, 10, 57, 55, 9, 112, 97, 115, 115, 97, 103, 101, 32, 108, 101, 97, 100, 115, 32, 115, 101, 44, 32, 97, 110, 100, 32, 97, 32, 104, 97, 110, 100, 115, 32, 97, 110, 100, 32, 107, 110, 101, 101, 115, 32, 99, 114, 97, 119, 108, 32, 108, 101, 97, 100, 115, 32, 119, 101, 115, 116, 46, 10, 57, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 97, 32, 119, 105, 100, 101, 32, 112, 97, 116, 104, 32, 97, 114, 111, 117, 110, 100, 32, 116, 104, 101, 32, 111, 117, 116, 101, 114, 32, 101, 100, 103, 101, 32, 111, 102, 32, 97, 32, 108, 97, 114, 103, 101, 32, 99, 97, 118, 101, 114, 110, 46, 10, 57, 56, 9, 70, 97, 114, 32, 98, 101, 108, 111, 119, 44, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 104, 101, 97, 118, 121, 32, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 44, 32, 115, 116, 114, 97, 110, 103, 101, 32, 115, 112, 108, 97, 115, 104, 105, 110, 103, 32, 110, 111, 105, 115, 101, 115, 32, 99, 97, 110, 32, 98, 101, 10, 57, 56, 9, 104, 101, 97, 114, 100, 46, 32, 32, 84, 104, 101, 32, 109, 105, 115, 116, 32, 114, 105, 115, 101, 115, 32, 117, 112, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 102, 105, 115, 115, 117, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 99, 101, 105, 108, 105, 110, 103, 46, 32, 32, 84, 104, 101, 32, 112, 97, 116, 104, 10, 57, 56, 9, 101, 120, 105, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 32, 97, 110, 100, 32, 119, 101, 115, 116, 46, 10, 57, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32]);
            fileData0.push.apply(fileData0, [97, 110, 32, 97, 108, 99, 111, 118, 101, 46, 32, 32, 65, 32, 115, 109, 97, 108, 108, 32, 110, 119, 32, 112, 97, 116, 104, 32, 115, 101, 101, 109, 115, 32, 116, 111, 32, 119, 105, 100, 101, 110, 32, 97, 102, 116, 101, 114, 32, 97, 32, 115, 104, 111, 114, 116, 10, 57, 57, 9, 100, 105, 115, 116, 97, 110, 99, 101, 46, 32, 32, 65, 110, 32, 101, 120, 116, 114, 101, 109, 101, 108, 121, 32, 116, 105, 103, 104, 116, 32, 116, 117, 110, 110, 101, 108, 32, 108, 101, 97, 100, 115, 32, 101, 97, 115, 116, 46, 32, 32, 73, 116, 32, 108, 111, 111, 107, 115, 32, 108, 105, 107, 101, 32, 97, 32, 118, 101, 114, 121, 10, 57, 57, 9, 116, 105, 103, 104, 116, 32, 115, 113, 117, 101, 101, 122, 101, 46, 32, 32, 65, 110, 32, 101, 101, 114, 105, 101, 32, 108, 105, 103, 104, 116, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 101, 110, 32, 97, 116, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 101, 110, 100, 46, 10, 49, 48, 48, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 104, 97, 109, 98, 101, 114, 32, 108, 105, 116, 32, 98, 121, 32, 97, 110, 32, 101, 101, 114, 105, 101, 32, 103, 114, 101, 101, 110, 32, 108, 105, 103, 104, 116, 46, 32, 32, 65, 110, 32, 101, 120, 116, 114, 101, 109, 101, 108, 121, 10, 49, 48, 48, 9, 110, 97, 114, 114, 111, 119, 32, 116, 117, 110, 110, 101, 108, 32, 101, 120, 105, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 119, 101, 115, 116, 46, 32, 32, 65, 32, 100, 97, 114, 107, 32, 99, 111, 114, 114, 105, 100, 111, 114, 32, 108, 101, 97, 100, 115, 32, 110, 101, 46, 10, 49, 48, 49, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 100, 97, 114, 107, 45, 114, 111, 111, 109, 46, 32, 32, 65, 32, 99, 111, 114, 114, 105, 100, 111, 114, 32, 108, 101, 97, 100, 105, 110, 103, 32, 115, 111, 117, 116, 104, 32, 105, 115, 32, 116, 104, 101, 32, 111, 110, 108, 121, 32, 101, 120, 105, 116, 46, 10, 49, 48, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 110, 32, 97, 114, 99, 104, 101, 100, 32, 104, 97, 108, 108, 46, 32, 32, 65, 32, 99, 111, 114, 97, 108, 32, 112, 97, 115, 115, 97, 103, 101, 32, 111, 110, 99, 101, 32, 99, 111, 110, 116, 105, 110, 117, 101, 100, 32, 117, 112, 32, 97, 110, 100, 32, 101, 97, 115, 116, 10, 49, 48, 50, 9, 102, 114, 111, 109, 32, 104, 101, 114, 101, 44, 32, 98, 117, 116, 32, 105, 115, 32, 110, 111, 119, 32, 98, 108, 111, 99, 107, 101, 100, 32, 98, 121, 32, 100, 101, 98, 114, 105, 115, 46, 32, 32, 84, 104, 101, 32, 97, 105, 114, 32, 115, 109, 101, 108, 108, 115, 32, 111, 102, 32, 115, 101, 97, 32, 119, 97, 116, 101, 114, 46, 10, 49, 48, 51, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 97, 32, 108, 97, 114, 103, 101, 32, 114, 111, 111, 109, 32, 99, 97, 114, 118, 101, 100, 32, 111, 117, 116, 32, 111, 102, 32, 115, 101, 100, 105, 109, 101, 110, 116, 97, 114, 121, 32, 114, 111, 99, 107, 46, 32, 32, 84, 104, 101, 32, 102, 108, 111, 111, 114, 32, 97, 110, 100, 10, 49, 48, 51, 9, 119, 97, 108, 108, 115, 32, 97, 114, 101, 32, 108, 105, 116, 116, 101, 114, 101, 100, 32, 119, 105, 116, 104, 32, 98, 105, 116, 115, 32, 111, 102, 32, 115, 104, 101, 108, 108, 115, 32, 105, 109, 98, 101, 100, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 115, 116, 111, 110, 101, 46, 32, 32, 65, 10, 49, 48, 51, 9, 115, 104, 97, 108, 108, 111, 119, 32, 112, 97, 115, 115, 97, 103, 101, 32, 112, 114, 111, 99, 101, 101, 100, 115, 32, 100, 111, 119, 110, 119, 97, 114, 100, 44, 32, 97, 110, 100, 32, 97, 32, 115, 111, 109, 101, 119, 104, 97, 116, 32, 115, 116, 101, 101, 112, 101, 114, 32, 111, 110, 101, 32, 108, 101, 97, 100, 115, 10, 49, 48, 51, 9, 117, 112, 46, 32, 32, 65, 32, 108, 111, 119, 32, 104, 97, 110, 100, 115, 32, 97, 110, 100, 32, 107, 110, 101, 101, 115, 32, 112, 97, 115, 115, 97, 103, 101, 32, 101, 110, 116, 101, 114, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 46, 10, 49, 48, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 111, 110, 103, 32, 115, 108, 111, 112, 105, 110, 103, 32, 99, 111, 114, 114, 105, 100, 111, 114, 32, 119, 105, 116, 104, 32, 114, 97, 103, 103, 101, 100, 32, 115, 104, 97, 114, 112, 32, 119, 97, 108, 108, 115, 46, 10, 49, 48, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 99, 117, 108, 45, 100, 101, 45, 115, 97, 99, 32, 97, 98, 111, 117, 116, 32, 101, 105, 103, 104, 116, 32, 102, 101, 101, 116, 32, 97, 99, 114, 111, 115, 115, 46, 10, 49, 48, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 110, 32, 97, 110, 116, 101, 114, 111, 111, 109, 32, 108, 101, 97, 100, 105, 110, 103, 32, 116, 111, 32, 97, 32, 108, 97, 114, 103, 101, 32, 112, 97, 115, 115, 97, 103, 101, 32, 116, 111, 32, 116, 104, 101, 32, 101, 97, 115, 116, 46, 32, 32, 83, 109, 97, 108, 108, 10, 49, 48, 54, 9, 112, 97, 115, 115, 97, 103, 101, 115, 32, 103, 111, 32, 119, 101, 115, 116, 32, 97, 110, 100, 32, 117, 112, 46, 32, 32, 84, 104, 101, 32, 114, 101, 109, 110, 97, 110, 116, 115, 32, 111, 102, 32, 114, 101, 99, 101, 110, 116, 32, 100, 105, 103, 103, 105, 110, 103, 32, 97, 114, 101, 32, 101, 118, 105, 100, 101, 110, 116, 46, 10, 49, 48, 54, 9, 65, 32, 115, 105, 103, 110, 32, 105, 110, 32, 109, 105, 100, 97, 105, 114, 32, 104, 101, 114, 101, 32, 115, 97, 121, 115, 32, 34, 67, 97, 118, 101, 32, 117, 110, 100, 101, 114, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 98, 101, 121, 111, 110, 100, 32, 116, 104, 105, 115, 32, 112, 111, 105, 110, 116, 46, 10, 49, 48, 54, 9, 80, 114, 111, 99, 101, 101, 100, 32, 97, 116, 32, 111, 119, 110, 32, 114, 105, 115, 107, 46, 32, 32, 91, 87, 105, 116, 116, 32, 67, 111, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 67, 111, 109, 112, 97, 110, 121, 93, 34, 10, 49, 48, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 48, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 87, 105, 116, 116, 39, 115, 32, 69, 110, 100, 46, 32, 32, 80, 97, 115, 115, 97, 103, 101, 115, 32, 108, 101, 97, 100, 32, 111, 102, 102, 32, 105, 110, 32, 42, 65, 76, 76, 42, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 115, 46, 10, 49, 48, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 110, 111, 114, 116, 104, 47, 115, 111, 117, 116, 104, 32, 99, 97, 110, 121, 111, 110, 32, 97, 98, 111, 117, 116, 32, 50, 53, 32, 102, 101, 101, 116, 32, 97, 99, 114, 111, 115, 115, 46, 32, 32, 84, 104, 101, 32, 102, 108, 111, 111, 114, 32, 105, 115, 10, 49, 48, 57, 9, 99, 111, 118, 101, 114, 101, 100, 32, 98, 121, 32, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 32, 115, 101, 101, 112, 105, 110, 103, 32, 105, 110, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 46, 32, 32, 84, 104, 101, 32, 119, 97, 108, 108, 115, 32, 101, 120, 116, 101, 110, 100, 10, 49, 48, 57, 9, 117, 112, 119, 97, 114, 100, 32, 102, 111, 114, 32, 119, 101, 108, 108, 32, 111, 118, 101, 114, 32, 49, 48, 48, 32, 102, 101, 101, 116, 46, 32, 32, 83, 117, 115, 112, 101, 110, 100, 101, 100, 32, 102, 114, 111, 109, 32, 115, 111, 109, 101, 32, 117, 110, 115, 101, 101, 110, 32, 112, 111, 105, 110, 116, 32, 102, 97, 114, 10, 49, 48, 57, 9, 97, 98, 111, 118, 101, 32, 121, 111, 117, 44, 32, 97, 110, 32, 101, 110, 111, 114, 109, 111, 117, 115, 32, 116, 119, 111, 45, 115, 105, 100, 101, 100, 32, 109, 105, 114, 114, 111, 114, 32, 105, 115, 32, 104, 97, 110, 103, 105, 110, 103, 32, 112, 97, 114, 97, 108, 108, 101, 108, 32, 116, 111, 32, 97, 110, 100, 10, 49, 48, 57, 9, 109, 105, 100, 119, 97, 121, 32, 98, 101, 116, 119, 101, 101, 110, 32, 116, 104, 101, 32, 99, 97, 110, 121, 111, 110, 32, 119, 97, 108, 108, 115, 46, 32, 32, 40, 84, 104, 101, 32, 109, 105, 114, 114, 111, 114, 32, 105, 115, 32, 111, 98, 118, 105, 111, 117, 115, 108, 121, 32, 112, 114, 111, 118, 105, 100, 101, 100, 10, 49, 48, 57, 9, 102, 111, 114, 32, 116, 104, 101, 32, 117, 115, 101, 32, 111, 102, 32, 116, 104, 101, 32, 100, 119, 97, 114, 118, 101, 115, 32, 119, 104, 111, 44, 32, 97, 115, 32, 121, 111, 117, 32, 107, 110, 111, 119, 44, 32, 97, 114, 101, 32, 101, 120, 116, 114, 101, 109, 101, 108, 121, 32, 118, 97, 105, 110, 46, 41, 32, 32, 65, 10, 49, 48, 57, 9, 115, 109, 97, 108, 108, 32, 119, 105, 110, 100, 111, 119, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 101, 110, 32, 105, 110, 32, 101, 105, 116, 104, 101, 114, 32, 119, 97, 108, 108, 44, 32, 115, 111, 109, 101, 32, 102, 105, 102, 116, 121, 32, 102, 101, 101, 116, 32, 117, 112, 46, 10, 49, 49, 48, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 97, 32, 108, 111, 119, 32, 119, 105, 110, 100, 111, 119, 32, 111, 118, 101, 114, 108, 111, 111, 107, 105, 110, 103, 32, 97, 32, 104, 117, 103, 101, 32, 112, 105, 116, 44, 32, 119, 104, 105, 99, 104, 32, 101, 120, 116, 101, 110, 100, 115, 32, 117, 112, 32, 111, 117, 116, 32, 111, 102, 10, 49, 49, 48, 9, 115, 105, 103, 104, 116, 46, 32, 32, 65, 32, 102, 108, 111, 111, 114, 32, 105, 115, 32, 105, 110, 100, 105, 115, 116, 105, 110, 99, 116, 108, 121, 32, 118, 105, 115, 105, 98, 108, 101, 32, 111, 118, 101, 114, 32, 53, 48, 32, 102, 101, 101, 116, 32, 98, 101, 108, 111, 119, 46, 32, 32, 84, 114, 97, 99, 101, 115, 32, 111, 102, 10, 49, 49, 48, 9, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 32, 99, 111, 118, 101, 114, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 32, 111, 102, 32, 116, 104, 101, 32, 112, 105, 116, 44, 32, 98, 101, 99, 111, 109, 105, 110, 103, 32, 116, 104, 105, 99, 107, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 108, 101, 102, 116, 46, 10, 49, 49, 48, 9, 77, 97, 114, 107, 115, 32, 105, 110, 32, 116, 104, 101, 32, 100, 117, 115, 116, 32, 97, 114, 111, 117, 110, 100, 32, 116, 104, 101, 32, 119, 105, 110, 100, 111, 119, 32, 119, 111, 117, 108, 100, 32, 115, 101, 101, 109, 32, 116, 111, 32, 105, 110, 100, 105, 99, 97, 116, 101, 32, 116, 104, 97, 116, 10, 49, 49, 48, 9, 115, 111, 109, 101, 111, 110, 101, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 104, 101, 114, 101, 32, 114, 101, 99, 101, 110, 116, 108, 121, 46, 32, 32, 68, 105, 114, 101, 99, 116, 108, 121, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 112, 105, 116, 32, 102, 114, 111, 109, 32, 121, 111, 117, 32, 97, 110, 100, 10, 49, 49, 48, 9, 50, 53, 32, 102, 101, 101, 116, 32, 97, 119, 97, 121, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 115, 105, 109, 105, 108, 97, 114, 32, 119, 105, 110, 100, 111, 119, 32, 108, 111, 111, 107, 105, 110, 103, 32, 105, 110, 116, 111, 32, 97, 32, 108, 105, 103, 104, 116, 101, 100, 32, 114, 111, 111, 109, 46, 32, 32, 65, 10, 49, 49, 48, 9, 115, 104, 97, 100, 111, 119, 121, 32, 102, 105, 103, 117, 114, 101, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 101, 110, 32, 116, 104, 101, 114, 101, 32, 112, 101, 101, 114, 105, 110, 103, 32, 98, 97, 99, 107, 32, 97, 116, 32, 121, 111, 117, 46, 10, 49, 49, 49, 9, 65, 32, 108, 97, 114, 103, 101, 32, 115, 116, 97, 108, 97, 99, 116, 105, 116, 101, 32, 101, 120, 116, 101, 110, 100, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 114, 111, 111, 102, 32, 97, 110, 100, 32, 97, 108, 109, 111, 115, 116, 32, 114, 101, 97, 99, 104, 101, 115, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 10, 49, 49, 49, 9, 98, 101, 108, 111, 119, 46, 32, 32, 89, 111, 117, 32, 99, 111, 117, 108, 100, 32, 99, 108, 105, 109, 98, 32, 100, 111, 119, 110, 32, 105, 116, 44, 32, 97, 110, 100, 32, 106, 117, 109, 112, 32, 102, 114, 111, 109, 32, 105, 116, 32, 116, 111, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 44, 32, 98, 117, 116, 10, 49, 49, 49, 9, 104, 97, 118, 105, 110, 103, 32, 100, 111, 110, 101, 32, 115, 111, 32, 121, 111, 117, 32, 119, 111, 117, 108, 100, 32, 98, 101, 32, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 114, 101, 97, 99, 104, 32, 105, 116, 32, 116, 111, 32, 99, 108, 105, 109, 98, 32, 98, 97, 99, 107, 32, 117, 112, 46, 10, 49, 49, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 105, 110, 103, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 49, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 101, 100, 103, 101, 32, 111, 102, 32, 97, 32, 108, 97, 114, 103, 101, 32, 117, 110, 100, 101, 114, 103, 114, 111, 117, 110, 100, 32, 114, 101, 115, 101, 114, 118, 111, 105, 114, 46, 32, 32, 65, 110, 32, 111, 112, 97, 113, 117, 101, 32, 99, 108, 111, 117, 100, 10, 49, 49, 51, 9, 111, 102, 32, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 32, 102, 105, 108, 108, 115, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 97, 110, 100, 32, 114, 105, 115, 101, 115, 32, 114, 97, 112, 105, 100, 108, 121, 32, 117, 112, 119, 97, 114, 100, 46, 32, 32, 84, 104, 101, 32, 108, 97, 107, 101, 32, 105, 115, 10, 49, 49, 51, 9, 102, 101, 100, 32, 98, 121, 32, 97, 32, 115, 116, 114, 101, 97, 109, 44, 32, 119, 104, 105, 99, 104, 32, 116, 117, 109, 98, 108, 101, 115, 32, 111, 117, 116, 32, 111, 102, 32, 97, 32, 104, 111, 108, 101, 32, 105, 110, 32, 116, 104, 101, 32, 119, 97, 108, 108, 32, 97, 98, 111, 117, 116, 32, 49, 48, 32, 102, 101, 101, 116, 10, 49, 49, 51, 9, 111, 118, 101, 114, 104, 101, 97, 100, 32, 97, 110, 100, 32, 115, 112, 108, 97, 115, 104, 101, 115, 32, 110, 111, 105, 115, 105, 108, 121, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 119, 97, 116, 101, 114, 32, 115, 111, 109, 101, 119, 104, 101, 114, 101, 32, 119, 105, 116, 104, 105, 110, 32, 116, 104, 101, 10, 49, 49, 51, 9, 109, 105, 115, 116, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 112, 97, 115, 115, 97, 103, 101, 32, 103, 111, 105, 110, 103, 32, 98, 97, 99, 107, 32, 116, 111, 119, 97, 114, 100, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 46, 10, 49, 49, 52, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 49, 49, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 101, 97, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 97, 110, 32, 105, 109, 109, 101, 110, 115, 101, 32, 114, 111, 111, 109, 44, 32, 101, 118, 101, 110, 32, 108, 97, 114, 103, 101, 114, 32, 116, 104, 97, 110, 32, 116, 104, 101, 10, 49, 49, 53, 9, 71, 105, 97, 110, 116, 32, 82, 111, 111, 109, 46, 32, 32, 73, 116, 32, 97, 112, 112, 101, 97, 114, 115, 32, 116, 111, 32, 98, 101, 32, 97, 32, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 32, 102, 111, 114, 32, 116, 104, 101, 32, 34, 65, 100, 118, 101, 110, 116, 117, 114, 101, 34, 10, 49, 49, 53, 9, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 77, 97, 115, 115, 105, 118, 101, 32, 116, 111, 114, 99, 104, 101, 115, 32, 102, 97, 114, 32, 111, 118, 101, 114, 104, 101, 97, 100, 32, 98, 97, 116, 104, 101, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 119, 105, 116, 104, 32, 115, 109, 111, 107, 121, 10, 49, 49, 53, 9, 121, 101, 108, 108, 111, 119, 32, 108, 105, 103, 104, 116, 46, 32, 32, 83, 99, 97, 116, 116, 101, 114, 101, 100, 32, 97, 98, 111, 117, 116, 32, 121, 111, 117, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 101, 110, 32, 97, 32, 112, 105, 108, 101, 32, 111, 102, 32, 98, 111, 116, 116, 108, 101, 115, 32, 40, 97, 108, 108, 10, 49, 49, 53, 9, 111, 102, 32, 116, 104, 101, 109, 32, 101, 109, 112, 116, 121, 41, 44, 32, 97, 32, 110, 117, 114, 115, 101, 114, 121, 32, 111, 102, 32, 121, 111, 117, 110, 103, 32, 98, 101, 97, 110, 115, 116, 97, 108, 107, 115, 32, 109, 117, 114, 109, 117, 114, 105, 110, 103, 32, 113, 117, 105, 101, 116, 108, 121, 44, 32, 97, 32, 98, 101, 100, 10, 49, 49, 53, 9, 111, 102, 32, 111, 121, 115, 116, 101, 114, 115, 44, 32, 97, 32, 98, 117, 110, 100, 108, 101, 32, 111, 102, 32, 98, 108, 97, 99, 107, 32, 114, 111, 100, 115, 32, 119, 105, 116, 104, 32, 114, 117, 115, 116, 121, 32, 115, 116, 97, 114, 115, 32, 111, 110, 32, 116, 104, 101, 105, 114, 32, 101, 110, 100, 115, 44, 32, 97, 110, 100, 10, 49, 49, 53, 9, 97, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 32, 111, 102, 32, 98, 114, 97, 115, 115, 32, 108, 97, 110, 116, 101, 114, 110, 115, 46, 32, 32, 79, 102, 102, 32, 116, 111, 32, 111, 110, 101, 32, 115, 105, 100, 101, 32, 97, 32, 103, 114, 101, 97, 116, 32, 109, 97, 110, 121, 32, 100, 119, 97, 114, 118, 101, 115, 10, 49, 49, 53, 9, 97, 114, 101, 32, 115, 108, 101, 101, 112, 105, 110, 103, 32, 111, 110, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 44, 32, 115, 110, 111, 114, 105, 110, 103, 32, 108, 111, 117, 100, 108, 121, 46, 32, 32, 65, 32, 110, 111, 116, 105, 99, 101, 32, 110, 101, 97, 114, 98, 121, 32, 114, 101, 97, 100, 115, 58, 32, 34, 68, 111, 10, 49, 49, 53, 9, 110, 111, 116, 32, 100, 105, 115, 116, 117, 114, 98, 32, 116, 104, 101, 32, 100, 119, 97, 114, 118, 101, 115, 33, 34, 32, 32, 65, 110, 32, 105, 109, 109, 101, 110, 115, 101, 32, 109, 105, 114, 114, 111, 114, 32, 105, 115, 32, 104, 97, 110, 103, 105, 110, 103, 32, 97, 103, 97, 105, 110, 115, 116, 32, 111, 110, 101, 10, 49, 49, 53, 9, 119, 97, 108, 108, 44, 32, 97, 110, 100, 32, 115, 116, 114, 101, 116, 99, 104, 101, 115, 32, 116, 111, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 114, 111, 111, 109, 44, 32, 119, 104, 101, 114, 101, 32, 118, 97, 114, 105, 111, 117, 115, 32, 111, 116, 104, 101, 114, 10, 49, 49, 53, 9, 115, 117, 110, 100, 114, 121, 32, 111, 98, 106, 101, 99, 116, 115, 32, 99, 97, 110, 32, 98, 101, 32, 103, 108, 105, 109, 112, 115, 101, 100, 32, 100, 105, 109, 108, 121, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 115, 116, 97, 110, 99, 101, 46, 10, 49, 49, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 119, 101, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 32, 32, 84, 111, 32, 111, 110, 101, 32, 115, 105, 100, 101, 32, 105, 115, 32, 97, 32, 112, 105, 116, 10, 49, 49, 54, 9, 102, 117, 108, 108, 32, 111, 102, 32, 102, 105, 101, 114, 99, 101, 32, 103, 114, 101, 101, 110, 32, 115, 110, 97, 107, 101, 115, 46, 32, 32, 79, 110, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 115, 105, 100, 101, 32, 105, 115, 32, 97, 32, 114, 111, 119, 32, 111, 102, 32, 115, 109, 97, 108, 108, 10, 49, 49, 54, 9, 119, 105, 99, 107, 101, 114, 32, 99, 97, 103, 101, 115, 44, 32, 101, 97, 99, 104, 32, 111, 102, 32, 119, 104, 105, 99, 104, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 115, 117, 108, 107, 105, 110, 103, 32, 98, 105, 114, 100, 46, 32, 32, 73, 110, 32, 111, 110, 101, 10, 49, 49, 54, 9, 99, 111, 114, 110, 101, 114, 32, 105, 115, 32, 97, 32, 98, 117, 110, 100, 108, 101, 32, 111, 102, 32, 98, 108, 97, 99, 107, 32, 114, 111, 100, 115, 32, 119, 105, 116, 104, 32, 114, 117, 115, 116, 121, 32, 109, 97, 114, 107, 115, 32, 111, 110, 32, 116, 104, 101, 105, 114, 32, 101, 110, 100, 115, 46, 32, 32, 65, 10, 49, 49, 54, 9, 108, 97, 114, 103, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 118, 101, 108, 118, 101, 116, 32, 112, 105, 108, 108, 111, 119, 115, 32, 97, 114, 101, 32, 115, 99, 97, 116, 116, 101, 114, 101, 100, 32, 97, 98, 111, 117, 116, 32, 111, 110, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 46, 32, 32, 65, 10, 49, 49, 54, 9, 118, 97, 115, 116, 32, 109, 105, 114, 114, 111, 114, 32, 115, 116, 114, 101, 116, 99, 104, 101, 115, 32, 111, 102, 102, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 101, 97, 115, 116, 46, 32, 32, 65, 116, 32, 121, 111, 117, 114, 32, 102, 101, 101, 116, 32, 105, 115, 32, 97, 32, 108, 97, 114, 103, 101, 10, 49, 49, 54, 9, 115, 116, 101, 101, 108, 32, 103, 114, 97, 116, 101, 44, 32, 110, 101, 120, 116, 32, 116, 111, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 115, 105, 103, 110, 32, 116, 104, 97, 116, 32, 114, 101, 97, 100, 115, 44, 32, 34, 84, 114, 101, 97, 115, 117, 114, 101, 32, 86, 97, 117, 108, 116, 46, 10, 49, 49, 54, 9, 75, 101, 121, 115, 32, 105, 110, 32, 109, 97, 105, 110, 32, 111, 102, 102, 105, 99, 101, 46, 34, 10, 49, 49, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 111, 110, 101, 32, 115, 105, 100, 101, 32, 111, 102, 32, 97, 32, 108, 97, 114, 103, 101, 44, 32, 100, 101, 101, 112, 32, 99, 104, 97, 115, 109, 46, 32, 32, 65, 32, 104, 101, 97, 118, 121, 32, 119, 104, 105, 116, 101, 32, 109, 105, 115, 116, 32, 114, 105, 115, 105, 110, 103, 10, 49, 49, 55, 9, 117, 112, 32, 102, 114, 111, 109, 32, 98, 101, 108, 111, 119, 32, 111, 98, 115, 99, 117, 114, 101, 115, 32, 97, 108, 108, 32, 118, 105, 101, 119, 32, 111, 102, 32, 116, 104, 101, 32, 102, 97, 114, 32, 115, 105, 100, 101, 46, 32, 32, 65, 32, 115, 119, 32, 112, 97, 116, 104, 32, 108, 101, 97, 100, 115, 32, 97, 119, 97, 121, 10, 49, 49, 55, 9, 102, 114, 111, 109, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 32, 105, 110, 116, 111, 32, 97, 32, 119, 105, 110, 100, 105, 110, 103, 32, 99, 111, 114, 114, 105, 100, 111, 114, 46, 10, 49, 49, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 111, 110, 103, 32, 119, 105, 110, 100, 105, 110, 103, 32, 99, 111, 114, 114, 105, 100, 111, 114, 32, 115, 108, 111, 112, 105, 110, 103, 32, 111, 117, 116, 32, 111, 102, 32, 115, 105, 103, 104, 116, 32, 105, 110, 32, 98, 111, 116, 104, 10, 49, 49, 56, 9, 100, 105, 114, 101, 99, 116, 105, 111, 110, 115, 46, 10, 49, 49, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 101, 99, 114, 101, 116, 32, 99, 97, 110, 121, 111, 110, 32, 119, 104, 105, 99, 104, 32, 101, 120, 105, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 32, 97, 110, 100, 32, 101, 97, 115, 116, 46, 10, 49, 50, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 101, 99, 114, 101, 116, 32, 99, 97, 110, 121, 111, 110, 32, 119, 104, 105, 99, 104, 32, 101, 120, 105, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 32, 97, 110, 100, 32, 101, 97, 115, 116, 46, 10, 49, 50, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 101, 99, 114, 101, 116, 32, 99, 97, 110, 121, 111, 110, 32, 119, 104, 105, 99, 104, 32, 101, 120, 105, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 32, 97, 110, 100, 32, 101, 97, 115, 116, 46, 10, 49, 50, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 116, 104, 101, 32, 102, 97, 114, 32, 115, 105, 100, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 46, 32, 32, 65, 32, 110, 101, 32, 112, 97, 116, 104, 32, 108, 101, 97, 100, 115, 32, 97, 119, 97, 121, 32, 102, 114, 111, 109, 32, 116, 104, 101, 10, 49, 50, 50, 9, 99, 104, 97, 115, 109, 32, 111, 110, 32, 116, 104, 105, 115, 32, 115, 105, 100, 101, 46, 10, 49, 50, 51, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 97, 32, 108, 111, 110, 103, 32, 101, 97, 115, 116, 47, 119, 101, 115, 116, 32, 99, 111, 114, 114, 105, 100, 111, 114, 46, 32, 32, 65, 32, 102, 97, 105, 110, 116, 32, 114, 117, 109, 98, 108, 105, 110, 103, 32, 110, 111, 105, 115, 101, 32, 99, 97, 110, 32, 98, 101, 10, 49, 50, 51, 9, 104, 101, 97, 114, 100, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 115, 116, 97, 110, 99, 101, 46, 10, 49, 50, 52, 9, 84, 104, 101, 32, 112, 97, 116, 104, 32, 102, 111, 114, 107, 115, 32, 104, 101, 114, 101, 46, 32, 32, 84, 104, 101, 32, 108, 101, 102, 116, 32, 102, 111, 114, 107, 32, 108, 101, 97, 100, 115, 32, 110, 111, 114, 116, 104, 101, 97, 115, 116, 46, 32, 32, 65, 32, 100, 117, 108, 108, 32, 114, 117, 109, 98, 108, 105, 110, 103, 10, 49, 50, 52, 9, 115, 101, 101, 109, 115, 32, 116, 111, 32, 103, 101, 116, 32, 108, 111, 117, 100, 101, 114, 32, 105, 110, 32, 116, 104, 97, 116, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 46, 32, 32, 84, 104, 101, 32, 114, 105, 103, 104, 116, 32, 102, 111, 114, 107, 32, 108, 101, 97, 100, 115, 32, 115, 111, 117, 116, 104, 101, 97, 115, 116, 10, 49, 50, 52, 9, 100, 111, 119, 110, 32, 97, 32, 103, 101, 110, 116, 108, 101, 32, 115, 108, 111, 112, 101, 46, 32, 32, 84, 104, 101, 32, 109, 97, 105, 110, 32, 99, 111, 114, 114, 105, 100, 111, 114, 32, 101, 110, 116, 101, 114, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 119, 101, 115, 116, 46, 10, 49, 50, 53, 9, 84, 104, 101, 32, 119, 97, 108, 108, 115, 32, 97, 114, 101, 32, 113, 117, 105, 116, 101, 32, 119, 97, 114, 109, 32, 104, 101, 114, 101, 46, 32, 32, 70, 114, 111, 109, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 32, 99, 97, 110, 32, 98, 101, 32, 104, 101, 97, 114, 100, 32, 97, 32, 115, 116, 101, 97, 100, 121, 10, 49, 50, 53, 9, 114, 111, 97, 114, 44, 32, 115, 111, 32, 108, 111, 117, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 101, 110, 116, 105, 114, 101, 32, 99, 97, 118, 101, 32, 115, 101, 101, 109, 115, 32, 116, 111, 32, 98, 101, 32, 116, 114, 101, 109, 98, 108, 105, 110, 103, 46, 32, 32, 65, 110, 111, 116, 104, 101, 114, 10, 49, 50, 53, 9, 112, 97, 115, 115, 97, 103, 101, 32, 108, 101, 97, 100, 115, 32, 115, 111, 117, 116, 104, 44, 32, 97, 110, 100, 32, 97, 32, 108, 111, 119, 32, 99, 114, 97, 119, 108, 32, 103, 111, 101, 115, 32, 101, 97, 115, 116, 46, 10, 49, 50, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 116, 104, 101, 32, 101, 100, 103, 101, 32, 111, 102, 32, 97, 32, 98, 114, 101, 97, 116, 104, 45, 116, 97, 107, 105, 110, 103, 32, 118, 105, 101, 119, 46, 32, 32, 70, 97, 114, 32, 98, 101, 108, 111, 119, 32, 121, 111, 117, 32, 105, 115, 32, 97, 110, 10, 49, 50, 54, 9, 97, 99, 116, 105, 118, 101, 32, 118, 111, 108, 99, 97, 110, 111, 44, 32, 102, 114, 111, 109, 32, 119, 104, 105, 99, 104, 32, 103, 114, 101, 97, 116, 32, 103, 111, 117, 116, 115, 32, 111, 102, 32, 109, 111, 108, 116, 101, 110, 32, 108, 97, 118, 97, 32, 99, 111, 109, 101, 32, 115, 117, 114, 103, 105, 110, 103, 10, 49, 50, 54, 9, 111, 117, 116, 44, 32, 99, 97, 115, 99, 97, 100, 105, 110, 103, 32, 98, 97, 99, 107, 32, 100, 111, 119, 110, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 100, 101, 112, 116, 104, 115, 46, 32, 32, 84, 104, 101, 32, 103, 108, 111, 119, 105, 110, 103, 32, 114, 111, 99, 107, 32, 102, 105, 108, 108, 115, 32, 116, 104, 101, 10, 49, 50, 54, 9, 102, 97, 114, 116, 104, 101, 115, 116, 32, 114, 101, 97, 99, 104, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 99, 97, 118, 101, 114, 110, 32, 119, 105, 116, 104, 32, 97, 32, 98, 108, 111, 111, 100, 45, 114, 101, 100, 32, 103, 108, 97, 114, 101, 44, 32, 103, 105, 118, 105, 110, 103, 32, 101, 118, 101, 114, 121, 45, 10, 49, 50, 54, 9, 116, 104, 105, 110, 103, 32, 97, 110, 32, 101, 101, 114, 105, 101, 44, 32, 109, 97, 99, 97, 98, 114, 101, 32, 97, 112, 112, 101, 97, 114, 97, 110, 99, 101, 46, 32, 32, 84, 104, 101, 32, 97, 105, 114, 32, 105, 115, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 102, 108, 105, 99, 107, 101, 114, 105, 110, 103, 10, 49, 50, 54, 9, 115, 112, 97, 114, 107, 115, 32, 111, 102, 32, 97, 115, 104, 32, 97, 110, 100, 32, 97, 32, 104, 101, 97, 118, 121, 32, 115, 109, 101, 108, 108, 32, 111, 102, 32, 98, 114, 105, 109, 115, 116, 111, 110, 101, 46, 32, 32, 84, 104, 101, 32, 119, 97, 108, 108, 115, 32, 97, 114, 101, 32, 104, 111, 116, 32, 116, 111, 10, 49, 50, 54, 9, 116, 104, 101, 32, 116, 111, 117, 99, 104, 44, 32, 97, 110, 100, 32, 116, 104, 101, 32, 116, 104, 117, 110, 100, 101, 114, 105, 110, 103, 32, 111, 102, 32, 116, 104, 101, 32, 118, 111, 108, 99, 97, 110, 111, 32, 100, 114, 111, 119, 110, 115, 32, 111, 117, 116, 32, 97, 108, 108, 32, 111, 116, 104, 101, 114, 10, 49, 50, 54, 9, 115, 111, 117, 110, 100, 115, 46, 32, 32, 69, 109, 98, 101, 100, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 106, 97, 103, 103, 101, 100, 32, 114, 111, 111, 102, 32, 102, 97, 114, 32, 111, 118, 101, 114, 104, 101, 97, 100, 32, 97, 114, 101, 32, 109, 121, 114, 105, 97, 100, 32, 116, 119, 105, 115, 116, 101, 100, 10, 49, 50, 54, 9, 102, 111, 114, 109, 97, 116, 105, 111, 110, 115, 32, 99, 111, 109, 112, 111, 115, 101, 100, 32, 111, 102, 32, 112, 117, 114, 101, 32, 119, 104, 105, 116, 101, 32, 97, 108, 97, 98, 97, 115, 116, 101, 114, 44, 32, 119, 104, 105, 99, 104, 32, 115, 99, 97, 116, 116, 101, 114, 32, 116, 104, 101, 32, 109, 117, 114, 107, 121, 10, 49, 50, 54, 9, 108, 105, 103, 104, 116, 32, 105, 110, 116, 111, 32, 115, 105, 110, 105, 115, 116, 101, 114, 32, 97, 112, 112, 97, 114, 105, 116, 105, 111, 110, 115, 32, 117, 112, 111, 110, 32, 116, 104, 101, 32, 119, 97, 108, 108, 115, 46, 32, 32, 84, 111, 32, 111, 110, 101, 32, 115, 105, 100, 101, 32, 105, 115, 32, 97, 32, 100, 101, 101, 112, 10, 49, 50, 54, 9, 103, 111, 114, 103, 101, 44, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 97, 32, 98, 105, 122, 97, 114, 114, 101, 32, 99, 104, 97, 111, 115, 32, 111, 102, 32, 116, 111, 114, 116, 117, 114, 101, 100, 32, 114, 111, 99, 107, 32, 119, 104, 105, 99, 104, 32, 115, 101, 101, 109, 115, 32, 116, 111, 10, 49, 50, 54, 9, 104, 97, 118, 101, 32, 98, 101, 101, 110, 32, 99, 114, 97, 102, 116, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 100, 101, 118, 105, 108, 32, 104, 105, 109, 115, 101, 108, 102, 46, 32, 32, 65, 110, 32, 105, 109, 109, 101, 110, 115, 101, 32, 114, 105, 118, 101, 114, 32, 111, 102, 32, 102, 105, 114, 101, 10, 49, 50, 54, 9, 99, 114, 97, 115, 104, 101, 115, 32, 111, 117, 116, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 100, 101, 112, 116, 104, 115, 32, 111, 102, 32, 116, 104, 101, 32, 118, 111, 108, 99, 97, 110, 111, 44, 32, 98, 117, 114, 110, 115, 32, 105, 116, 115, 32, 119, 97, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 10, 49, 50, 54, 9, 103, 111, 114, 103, 101, 44, 32, 97, 110, 100, 32, 112, 108, 117, 109, 109, 101, 116, 115, 32, 105, 110, 116, 111, 32, 97, 32, 98, 111, 116, 116, 111, 109, 108, 101, 115, 115, 32, 112, 105, 116, 32, 102, 97, 114, 32, 111, 102, 102, 32, 116, 111, 32, 121, 111, 117, 114, 32, 108, 101, 102, 116, 46, 32, 32, 84, 111, 10, 49, 50, 54, 9, 116, 104, 101, 32, 114, 105, 103, 104, 116, 44, 32, 97, 110, 32, 105, 109, 109, 101, 110, 115, 101, 32, 103, 101, 121, 115, 101, 114, 32, 111, 102, 32, 98, 108, 105, 115, 116, 101, 114, 105, 110, 103, 32, 115, 116, 101, 97, 109, 32, 101, 114, 117, 112, 116, 115, 32, 99, 111, 110, 116, 105, 110, 117, 111, 117, 115, 108, 121, 10, 49, 50, 54, 9, 102, 114, 111, 109, 32, 97, 32, 98, 97, 114, 114, 101, 110, 32, 105, 115, 108, 97, 110, 100, 32, 105, 110, 32, 116, 104, 101, 32, 99, 101, 110, 116, 101, 114, 32, 111, 102, 32, 97, 32, 115, 117, 108, 102, 117, 114, 111, 117, 115, 32, 108, 97, 107, 101, 44, 32, 119, 104, 105, 99, 104, 32, 98, 117, 98, 98, 108, 101, 115, 10, 49, 50, 54, 9, 111, 109, 105, 110, 111, 117, 115, 108, 121, 46, 32, 32, 84, 104, 101, 32, 102, 97, 114, 32, 114, 105, 103, 104, 116, 32, 119, 97, 108, 108, 32, 105, 115, 32, 97, 102, 108, 97, 109, 101, 32, 119, 105, 116, 104, 32, 97, 110, 32, 105, 110, 99, 97, 110, 100, 101, 115, 99, 101, 110, 99, 101, 32, 111, 102, 32, 105, 116, 115, 10, 49, 50, 54, 9, 111, 119, 110, 44, 32, 119, 104, 105, 99, 104, 32, 108, 101, 110, 100, 115, 32, 97, 110, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 105, 110, 102, 101, 114, 110, 97, 108, 32, 115, 112, 108, 101, 110, 100, 111, 114, 32, 116, 111, 32, 116, 104, 101, 32, 97, 108, 114, 101, 97, 100, 121, 10, 49, 50, 54, 9, 104, 101, 108, 108, 105, 115, 104, 32, 115, 99, 101, 110, 101, 46, 32, 32, 65, 32, 100, 97, 114, 107, 44, 32, 102, 111, 114, 101, 98, 111, 100, 105, 110, 103, 32, 112, 97, 115, 115, 97, 103, 101, 32, 101, 120, 105, 116, 115, 32, 116, 111, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 46, 10, 49, 50, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 104, 97, 109, 98, 101, 114, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 108, 97, 114, 103, 101, 32, 98, 111, 117, 108, 100, 101, 114, 115, 46, 32, 32, 84, 104, 101, 32, 119, 97, 108, 108, 115, 32, 97, 114, 101, 10, 49, 50, 55, 9, 118, 101, 114, 121, 32, 119, 97, 114, 109, 44, 32, 99, 97, 117, 115, 105, 110, 103, 32, 116, 104, 101, 32, 97, 105, 114, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 116, 111, 32, 98, 101, 32, 97, 108, 109, 111, 115, 116, 32, 115, 116, 105, 102, 108, 105, 110, 103, 32, 102, 114, 111, 109, 32, 116, 104, 101, 10, 49, 50, 55, 9, 104, 101, 97, 116, 46, 32, 32, 84, 104, 101, 32, 111, 110, 108, 121, 32, 101, 120, 105, 116, 32, 105, 115, 32, 97, 32, 99, 114, 97, 119, 108, 32, 104, 101, 97, 100, 105, 110, 103, 32, 119, 101, 115, 116, 44, 32, 116, 104, 114, 111, 117, 103, 104, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 99, 111, 109, 105, 110, 103, 10, 49, 50, 55, 9, 97, 32, 108, 111, 119, 32, 114, 117, 109, 98, 108, 105, 110, 103, 46, 10, 49, 50, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 108, 107, 105, 110, 103, 32, 97, 108, 111, 110, 103, 32, 97, 32, 103, 101, 110, 116, 108, 121, 32, 115, 108, 111, 112, 105, 110, 103, 32, 110, 111, 114, 116, 104, 47, 115, 111, 117, 116, 104, 32, 112, 97, 115, 115, 97, 103, 101, 32, 108, 105, 110, 101, 100, 32, 119, 105, 116, 104, 10, 49, 50, 56, 9, 111, 100, 100, 108, 121, 32, 115, 104, 97, 112, 101, 100, 32, 108, 105, 109, 101, 115, 116, 111, 110, 101, 32, 102, 111, 114, 109, 97, 116, 105, 111, 110, 115, 46, 10, 49, 50, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 115, 116, 97, 110, 100, 105, 110, 103, 32, 97, 116, 32, 116, 104, 101, 32, 101, 110, 116, 114, 97, 110, 99, 101, 32, 116, 111, 32, 97, 32, 108, 97, 114, 103, 101, 44, 32, 98, 97, 114, 114, 101, 110, 32, 114, 111, 111, 109, 46, 32, 32, 65, 32, 110, 111, 116, 105, 99, 101, 10, 49, 50, 57, 9, 97, 98, 111, 118, 101, 32, 116, 104, 101, 32, 101, 110, 116, 114, 97, 110, 99, 101, 32, 114, 101, 97, 100, 115, 58, 32, 32, 34, 67, 97, 117, 116, 105, 111, 110, 33, 32, 32, 66, 101, 97, 114, 32, 105, 110, 32, 114, 111, 111, 109, 33, 34, 10, 49, 51, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 115, 105, 100, 101, 32, 97, 32, 98, 97, 114, 114, 101, 110, 32, 114, 111, 111, 109, 46, 32, 32, 84, 104, 101, 32, 99, 101, 110, 116, 101, 114, 32, 111, 102, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 105, 115, 32, 99, 111, 109, 112, 108, 101, 116, 101, 108, 121, 10, 49, 51, 48, 9, 101, 109, 112, 116, 121, 32, 101, 120, 99, 101, 112, 116, 32, 102, 111, 114, 32, 115, 111, 109, 101, 32, 100, 117, 115, 116, 46, 32, 32, 77, 97, 114, 107, 115, 32, 105, 110, 32, 116, 104, 101, 32, 100, 117, 115, 116, 32, 108, 101, 97, 100, 32, 97, 119, 97, 121, 32, 116, 111, 119, 97, 114, 100, 32, 116, 104, 101, 10, 49, 51, 48, 9, 102, 97, 114, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 114, 111, 111, 109, 46, 32, 32, 84, 104, 101, 32, 111, 110, 108, 121, 32, 101, 120, 105, 116, 32, 105, 115, 32, 116, 104, 101, 32, 119, 97, 121, 32, 121, 111, 117, 32, 99, 97, 109, 101, 32, 105, 110, 46, 10, 49, 51, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 105, 110, 103, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 109, 97, 122, 101, 32, 111, 102, 32, 116, 119, 105, 115, 116, 121, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 116, 119, 105, 115, 116, 105, 110, 103, 32, 109, 97, 122, 101, 32, 111, 102, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 116, 119, 105, 115, 116, 105, 110, 103, 32, 108, 105, 116, 116, 108, 101, 32, 109, 97, 122, 101, 32, 111, 102, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 116, 119, 105, 115, 116, 121, 32, 108, 105, 116, 116, 108, 101, 32, 109, 97, 122, 101, 32, 111, 102, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 116, 119, 105, 115, 116, 121, 32, 109, 97, 122, 101, 32, 111, 102, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 116, 119, 105, 115, 116, 121, 32, 109, 97, 122, 101, 32, 111, 102, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 108, 105, 116, 116, 108, 101, 32, 116, 119, 105, 115, 116, 105, 110, 103, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 51, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 109, 97, 122, 101, 32, 111, 102, 32, 108, 105, 116, 116, 108, 101, 32, 116, 119, 105, 115, 116, 121, 32, 112, 97, 115, 115, 97, 103, 101, 115, 44, 32, 97, 108, 108, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 46, 10, 49, 52, 48, 9, 68, 101, 97, 100, 32, 101, 110, 100, 10, 49, 52, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 111, 110, 103, 44, 32, 114, 111, 117, 103, 104, 45, 104, 101, 119, 110, 44, 32, 110, 111, 114, 116, 104, 47, 115, 111, 117, 116, 104, 32, 99, 111, 114, 114, 105, 100, 111, 114, 46, 10, 49, 52, 50, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 119, 97, 121, 32, 116, 111, 32, 103, 111, 32, 116, 104, 97, 116, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 46, 10, 49, 52, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 97, 32, 108, 97, 114, 103, 101, 32, 99, 104, 97, 109, 98, 101, 114, 32, 119, 105, 116, 104, 32, 112, 97, 115, 115, 97, 103, 101, 115, 32, 116, 111, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 97, 110, 100, 32, 110, 111, 114, 116, 104, 46, 10, 49, 52, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 111, 103, 114, 101, 39, 115, 32, 115, 116, 111, 114, 101, 114, 111, 111, 109, 46, 32, 32, 84, 104, 101, 32, 111, 110, 108, 121, 32, 101, 120, 105, 116, 32, 105, 115, 32, 116, 111, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 46, 10, 49, 52, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 52, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 52, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 52, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 52, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 53, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 105, 109, 108, 101, 115, 115, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 55, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 108, 101, 100, 103, 101, 32, 111, 110, 32, 111, 110, 101, 32, 102, 97, 99, 101, 32, 111, 102, 32, 97, 32, 115, 104, 101, 101, 114, 32, 99, 108, 105, 102, 102, 46, 32, 32, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 110, 111, 10, 49, 54, 55, 9, 112, 97, 116, 104, 115, 32, 97, 119, 97, 121, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 108, 101, 100, 103, 101, 46, 32, 32, 65, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 32, 105, 115, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 108, 101, 97, 114, 105, 110, 103, 10, 49, 54, 55, 9, 115, 117, 114, 114, 111, 117, 110, 100, 101, 100, 32, 98, 121, 32, 102, 111, 114, 101, 115, 116, 46, 10, 49, 54, 56, 9, 89, 111, 117, 32, 97, 114, 101, 32, 119, 97, 108, 107, 105, 110, 103, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 116, 104, 101, 32, 114, 101, 115, 101, 114, 118, 111, 105, 114, 46, 32, 32, 87, 97, 108, 108, 115, 32, 111, 102, 32, 119, 97, 116, 101, 114, 10, 49, 54, 56, 9, 114, 101, 97, 114, 32, 117, 112, 32, 111, 110, 32, 101, 105, 116, 104, 101, 114, 32, 115, 105, 100, 101, 46, 32, 32, 84, 104, 101, 32, 114, 111, 97, 114, 32, 111, 102, 32, 116, 104, 101, 32, 119, 97, 116, 101, 114, 32, 99, 97, 115, 99, 97, 100, 105, 110, 103, 32, 112, 97, 115, 116, 32, 105, 115, 10, 49, 54, 56, 9, 110, 101, 97, 114, 108, 121, 32, 100, 101, 97, 102, 101, 110, 105, 110, 103, 44, 32, 97, 110, 100, 32, 116, 104, 101, 32, 109, 105, 115, 116, 32, 105, 115, 32, 115, 111, 32, 116, 104, 105, 99, 107, 32, 121, 111, 117, 32, 99, 97, 110, 32, 98, 97, 114, 101, 108, 121, 32, 115, 101, 101, 46, 10, 49, 54, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 101, 114, 110, 32, 101, 100, 103, 101, 32, 111, 102, 32, 116, 104, 101, 32, 114, 101, 115, 101, 114, 118, 111, 105, 114, 46, 32, 32, 65, 32, 110, 111, 114, 116, 104, 119, 101, 115, 116, 32, 112, 97, 115, 115, 97, 103, 101, 10, 49, 54, 57, 9, 108, 101, 97, 100, 115, 32, 115, 104, 97, 114, 112, 108, 121, 32, 117, 112, 32, 102, 114, 111, 109, 32, 104, 101, 114, 101, 46, 10, 49, 55, 48, 9, 89, 111, 117, 32, 97, 114, 101, 32, 115, 99, 114, 97, 109, 98, 108, 105, 110, 103, 32, 97, 108, 111, 110, 103, 32, 97, 32, 116, 114, 101, 97, 99, 104, 101, 114, 111, 117, 115, 108, 121, 32, 115, 116, 101, 101, 112, 44, 32, 114, 111, 99, 107, 121, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 49, 55, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 97, 32, 118, 101, 114, 121, 32, 115, 116, 101, 101, 112, 32, 105, 110, 99, 108, 105, 110, 101, 44, 32, 119, 104, 105, 99, 104, 32, 119, 105, 100, 101, 110, 115, 32, 97, 116, 32, 105, 116, 32, 103, 111, 101, 115, 32, 117, 112, 119, 97, 114, 100, 46, 10, 49, 55, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 98, 97, 115, 101, 32, 111, 102, 32, 97, 32, 110, 101, 97, 114, 108, 121, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 99, 108, 105, 102, 102, 46, 32, 32, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 115, 111, 109, 101, 10, 49, 55, 50, 9, 115, 108, 105, 109, 32, 102, 111, 111, 116, 104, 111, 108, 100, 115, 32, 119, 104, 105, 99, 104, 32, 119, 111, 117, 108, 100, 32, 101, 110, 97, 98, 108, 101, 32, 121, 111, 117, 32, 116, 111, 32, 99, 108, 105, 109, 98, 32, 117, 112, 44, 32, 98, 117, 116, 32, 105, 116, 32, 108, 111, 111, 107, 115, 10, 49, 55, 50, 9, 101, 120, 116, 114, 101, 109, 101, 108, 121, 32, 100, 97, 110, 103, 101, 114, 111, 117, 115, 46, 32, 32, 72, 101, 114, 101, 32, 97, 116, 32, 116, 104, 101, 32, 98, 97, 115, 101, 32, 111, 102, 32, 116, 104, 101, 32, 99, 108, 105]);
            fileData0.push.apply(fileData0, [102, 102, 32, 108, 105, 101, 32, 116, 104, 101, 32, 114, 101, 109, 97, 105, 110, 115, 10, 49, 55, 50, 9, 111, 102, 32, 115, 101, 118, 101, 114, 97, 108, 32, 101, 97, 114, 108, 105, 101, 114, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 114, 115, 32, 119, 104, 111, 32, 97, 112, 112, 97, 114, 101, 110, 116, 108, 121, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 109, 97, 107, 101, 32, 105, 116, 46, 10, 49, 55, 51, 9, 89, 111, 117, 32, 97, 114, 101, 32, 99, 108, 105, 109, 98, 105, 110, 103, 32, 97, 108, 111, 110, 103, 32, 97, 32, 110, 101, 97, 114, 108, 121, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 99, 108, 105, 102, 102, 46, 10, 49, 55, 52, 9, 74, 117, 115, 116, 32, 97, 115, 32, 121, 111, 117, 32, 114, 101, 97, 99, 104, 32, 116, 104, 101, 32, 116, 111, 112, 44, 32, 121, 111, 117, 114, 32, 102, 111, 111, 116, 32, 115, 108, 105, 112, 115, 32, 111, 110, 32, 97, 32, 108, 111, 111, 115, 101, 32, 114, 111, 99, 107, 32, 97, 110, 100, 32, 121, 111, 117, 10, 49, 55, 52, 9, 116, 117, 109, 98, 108, 101, 32, 115, 101, 118, 101, 114, 97, 108, 32, 104, 117, 110, 100, 114, 101, 100, 32, 102, 101, 101, 116, 32, 116, 111, 32, 106, 111, 105, 110, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 117, 110, 108, 117, 99, 107, 121, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 114, 115, 46, 10, 49, 55, 53, 9, 74, 117, 115, 116, 32, 97, 115, 32, 121, 111, 117, 32, 114, 101, 97, 99, 104, 32, 116, 104, 101, 32, 116, 111, 112, 44, 32, 121, 111, 117, 114, 32, 102, 111, 111, 116, 32, 115, 108, 105, 112, 115, 32, 111, 110, 32, 97, 32, 108, 111, 111, 115, 101, 32, 114, 111, 99, 107, 32, 97, 110, 100, 32, 121, 111, 117, 10, 49, 55, 53, 9, 109, 97, 107, 101, 32, 111, 110, 101, 32, 108, 97, 115, 116, 32, 100, 101, 115, 112, 101, 114, 97, 116, 101, 32, 103, 114, 97, 98, 46, 32, 32, 89, 111, 117, 114, 32, 108, 117, 99, 107, 32, 104, 111, 108, 100, 115, 44, 32, 97, 115, 32, 100, 111, 101, 115, 32, 121, 111, 117, 114, 32, 103, 114, 105, 112, 46, 10, 49, 55, 53, 9, 87, 105, 116, 104, 32, 97, 110, 32, 101, 110, 111, 114, 109, 111, 117, 115, 32, 104, 101, 97, 118, 101, 44, 32, 121, 111, 117, 32, 108, 105, 102, 116, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 116, 111, 32, 116, 104, 101, 32, 108, 101, 100, 103, 101, 32, 97, 98, 111, 118, 101, 46, 10, 49, 55, 54, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 108, 101, 100, 103, 101, 32, 97, 116, 32, 116, 104, 101, 32, 116, 111, 112, 32, 111, 102, 32, 97, 32, 110, 101, 97, 114, 108, 121, 32, 118, 101, 114, 116, 105, 99, 97, 108, 32, 99, 108, 105, 102, 102, 46, 10, 49, 55, 54, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 111, 119, 32, 99, 114, 97, 119, 108, 32, 108, 101, 97, 100, 105, 110, 103, 32, 111, 102, 102, 32, 116, 111, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 101, 97, 115, 116, 46, 10, 49, 55, 55, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 114, 101, 97, 99, 104, 101, 100, 32, 97, 32, 100, 101, 97, 100, 32, 101, 110, 100, 46, 10, 49, 55, 56, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 119, 32, 111, 110, 101, 32, 109, 111, 114, 101, 32, 103, 114, 117, 101, 115, 111, 109, 101, 32, 97, 115, 112, 101, 99, 116, 32, 116, 111, 32, 116, 104, 101, 32, 115, 112, 101, 99, 116, 97, 99, 117, 108, 97, 114, 32, 118, 105, 115, 116, 97, 46, 10, 49, 55, 57, 9, 62, 62, 70, 111, 111, 102, 33, 60, 60, 10, 49, 56, 48, 9, 62, 62, 70, 111, 111, 102, 33, 60, 60, 10, 49, 56, 49, 9, 62, 62, 70, 111, 111, 102, 33, 60, 60, 10, 49, 56, 50, 9, 62, 62, 70, 111, 111, 102, 33, 60, 60, 10, 49, 56, 51, 9, 62, 62, 70, 111, 111, 102, 33, 60, 60, 10, 49, 56, 52, 9, 62, 62, 70, 111, 111, 102, 33, 60, 60, 10, 45, 49, 10, 50, 10, 49, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 102, 114, 111, 110, 116, 32, 111, 102, 32, 98, 117, 105, 108, 100, 105, 110, 103, 46, 10, 50, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 104, 105, 108, 108, 32, 105, 110, 32, 114, 111, 97, 100, 46, 10, 51, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 115, 105, 100, 101, 32, 98, 117, 105, 108, 100, 105, 110, 103, 46, 10, 52, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 118, 97, 108, 108, 101, 121, 46, 10, 53, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 101, 110, 100, 32, 111, 102, 32, 114, 111, 97, 100, 46, 10, 54, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 99, 108, 105, 102, 102, 46, 10, 55, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 115, 108, 105, 116, 32, 105, 110, 32, 115, 116, 114, 101, 97, 109, 98, 101, 100, 46, 10, 56, 9, 89, 111, 117, 39, 114, 101, 32, 111, 117, 116, 115, 105, 100, 101, 32, 103, 114, 97, 116, 101, 46, 10, 57, 9, 89, 111, 117, 39, 114, 101, 32, 98, 101, 108, 111, 119, 32, 116, 104, 101, 32, 103, 114, 97, 116, 101, 46, 10, 49, 48, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 99, 111, 98, 98, 108, 101, 32, 99, 114, 97, 119, 108, 46, 10, 49, 49, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 100, 101, 98, 114, 105, 115, 32, 114, 111, 111, 109, 46, 10, 49, 51, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 98, 105, 114, 100, 32, 99, 104, 97, 109, 98, 101, 114, 46, 10, 49, 52, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 116, 111, 112, 32, 111, 102, 32, 115, 109, 97, 108, 108, 32, 112, 105, 116, 46, 10, 49, 53, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 105, 115, 116, 115, 46, 10, 49, 55, 9, 89, 111, 117, 39, 114, 101, 32, 111, 110, 32, 101, 97, 115, 116, 32, 98, 97, 110, 107, 32, 111, 102, 32, 102, 105, 115, 115, 117, 114, 101, 46, 10, 49, 56, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 110, 117, 103, 103, 101, 116, 45, 111, 102, 45, 103, 111, 108, 100, 32, 114, 111, 111, 109, 46, 10, 49, 57, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 116, 32, 75, 105, 110, 103, 46, 10, 50, 51, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 119, 101, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 84, 119, 111, 112, 105, 116, 32, 82, 111, 111, 109, 46, 10, 50, 52, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 101, 97, 115, 116, 32, 112, 105, 116, 46, 10, 50, 53, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 119, 101, 115, 116, 32, 112, 105, 116, 46, 10, 50, 55, 9, 89, 111, 117, 39, 114, 101, 32, 111, 110, 32, 119, 101, 115, 116, 32, 98, 97, 110, 107, 32, 111, 102, 32, 102, 105, 115, 115, 117, 114, 101, 46, 10, 50, 56, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 110, 47, 115, 32, 112, 97, 115, 115, 97, 103, 101, 32, 97, 98, 111, 118, 101, 32, 101, 47, 119, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 51, 48, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 115, 105, 100, 101, 32, 99, 104, 97, 109, 98, 101, 114, 46, 10, 51, 51, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 34, 89, 50, 34, 46, 10, 51, 53, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 119, 105, 110, 100, 111, 119, 32, 111, 110, 32, 112, 105, 116, 46, 10, 51, 54, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 100, 105, 114, 116, 121, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 51, 55, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 98, 114, 105, 110, 107, 32, 111, 102, 32, 115, 109, 97, 108, 108, 32, 112, 105, 116, 46, 10, 51, 56, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 112, 105, 116, 32, 119, 105, 116, 104, 32, 115, 116, 114, 101, 97, 109, 46, 10, 51, 57, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 100, 117, 115, 116, 121, 32, 114, 111, 99, 107, 32, 114, 111, 111, 109, 46, 10, 52, 49, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 119, 101, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 105, 115, 116, 115, 46, 10, 53, 55, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 98, 114, 105, 110, 107, 32, 111, 102, 32, 112, 105, 116, 46, 10, 54, 48, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 101, 97, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 108, 111, 110, 103, 32, 104, 97, 108, 108, 46, 10, 54, 49, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 119, 101, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 108, 111, 110, 103, 32, 104, 97, 108, 108, 46, 10, 54, 52, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 99, 111, 109, 112, 108, 101, 120, 32, 106, 117, 110, 99, 116, 105, 111, 110, 46, 10, 54, 53, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 66, 101, 100, 113, 117, 105, 108, 116, 46, 10, 54, 54, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 83, 119, 105, 115, 115, 32, 67, 104, 101, 101, 115, 101, 32, 82, 111, 111, 109, 46, 10, 54, 55, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 101, 97, 115, 116, 32, 101, 110, 100, 32, 111, 102, 32, 84, 119, 111, 112, 105, 116, 32, 82, 111, 111, 109, 46, 10, 54, 56, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 83, 108, 97, 98, 32, 82, 111, 111, 109, 46, 10, 55, 49, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 106, 117, 110, 99, 116, 105, 111, 110, 32, 111, 102, 32, 116, 104, 114, 101, 101, 32, 115, 101, 99, 114, 101, 116, 32, 99, 97, 110, 121, 111, 110, 115, 46, 10, 55, 50, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 108, 97, 114, 103, 101, 32, 108, 111, 119, 32, 114, 111, 111, 109, 46, 10, 55, 52, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 115, 101, 99, 114, 101, 116, 32, 101, 47, 119, 32, 99, 97, 110, 121, 111, 110, 32, 97, 98, 111, 118, 101, 32, 116, 105, 103, 104, 116, 32, 99, 97, 110, 121, 111, 110, 46, 10, 56, 56, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 110, 97, 114, 114, 111, 119, 32, 99, 111, 114, 114, 105, 100, 111, 114, 46, 10, 57, 49, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 115, 116, 101, 101, 112, 32, 105, 110, 99, 108, 105, 110, 101, 32, 97, 98, 111, 118, 101, 32, 108, 97, 114, 103, 101, 32, 114, 111, 111, 109, 46, 10, 57, 50, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 71, 105, 97, 110, 116, 32, 82, 111, 111, 109, 46, 10, 57, 53, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 99, 97, 118, 101, 114, 110, 32, 119, 105, 116, 104, 32, 119, 97, 116, 101, 114, 102, 97, 108, 108, 46, 10, 57, 54, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 83, 111, 102, 116, 32, 82, 111, 111, 109, 46, 10, 57, 55, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 79, 114, 105, 101, 110, 116, 97, 108, 32, 82, 111, 111, 109, 46, 10, 57, 56, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 109, 105, 115, 116, 121, 32, 99, 97, 118, 101, 114, 110, 46, 10, 57, 57, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 97, 108, 99, 111, 118, 101, 46, 10, 49, 48, 48, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 80, 108, 111, 118, 101, 114, 32, 82, 111, 111, 109, 46, 10, 49, 48, 49, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 100, 97, 114, 107, 45, 114, 111, 111, 109, 46, 10, 49, 48, 50, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 97, 114, 99, 104, 101, 100, 32, 104, 97, 108, 108, 46, 10, 49, 48, 51, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 83, 104, 101, 108, 108, 32, 82, 111, 111, 109, 46, 10, 49, 48, 54, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 97, 110, 116, 101, 114, 111, 111, 109, 46, 10, 49, 48, 56, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 87, 105, 116, 116, 39, 115, 32, 69, 110, 100, 46, 10, 49, 48, 57, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 77, 105, 114, 114, 111, 114, 32, 67, 97, 110, 121, 111, 110, 46, 10, 49, 49, 48, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 119, 105, 110, 100, 111, 119, 32, 111, 110, 32, 112, 105, 116, 46, 10, 49, 49, 49, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 116, 111, 112, 32, 111, 102, 32, 115, 116, 97, 108, 97, 99, 116, 105, 116, 101, 46, 10, 49, 49, 51, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 114, 101, 115, 101, 114, 118, 111, 105, 114, 46, 10, 49, 49, 53, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 110, 101, 32, 101, 110, 100, 46, 10, 49, 49, 54, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 115, 119, 32, 101, 110, 100, 46, 10, 49, 49, 55, 9, 89, 111, 117, 39, 114, 101, 32, 111, 110, 32, 115, 119, 32, 115, 105, 100, 101, 32, 111, 102, 32, 99, 104, 97, 115, 109, 46, 10, 49, 49, 56, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 115, 108, 111, 112, 105, 110, 103, 32, 99, 111, 114, 114, 105, 100, 111, 114, 46, 10, 49, 50, 50, 9, 89, 111, 117, 39, 114, 101, 32, 111, 110, 32, 110, 101, 32, 115, 105, 100, 101, 32, 111, 102, 32, 99, 104, 97, 115, 109, 46, 10, 49, 50, 51, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 99, 111, 114, 114, 105, 100, 111, 114, 46, 10, 49, 50, 52, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 102, 111, 114, 107, 32, 105, 110, 32, 112, 97, 116, 104, 46, 10, 49, 50, 53, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 106, 117, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 119, 97, 114, 109, 32, 119, 97, 108, 108, 115, 46, 10, 49, 50, 54, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 98, 114, 101, 97, 116, 104, 45, 116, 97, 107, 105, 110, 103, 32, 118, 105, 101, 119, 46, 10, 49, 50, 55, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 67, 104, 97, 109, 98, 101, 114, 32, 111, 102, 32, 66, 111, 117, 108, 100, 101, 114, 115, 46, 10, 49, 50, 56, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 108, 105, 109, 101, 115, 116, 111, 110, 101, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 49, 50, 57, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 102, 114, 111, 110, 116, 32, 111, 102, 32, 66, 97, 114, 114, 101, 110, 32, 82, 111, 111, 109, 46, 10, 49, 51, 48, 9, 89, 111, 117, 39, 114, 101, 32, 105, 110, 32, 66, 97, 114, 114, 101, 110, 32, 82, 111, 111, 109, 46, 10, 49, 54, 55, 9, 89, 111, 117, 39, 114, 101, 32, 111, 110, 32, 108, 101, 100, 103, 101, 46, 10, 49, 54, 56, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 114, 101, 115, 101, 114, 118, 111, 105, 114, 46, 10, 49, 54, 57, 9, 89, 111, 117, 39, 114, 101, 32, 110, 111, 114, 116, 104, 32, 111, 102, 32, 114, 101, 115, 101, 114, 118, 111, 105, 114, 46, 10, 49, 55, 50, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 98, 97, 115, 101, 32, 111, 102, 32, 99, 108, 105, 102, 102, 46, 10, 49, 55, 54, 9, 89, 111, 117, 39, 114, 101, 32, 97, 116, 32, 116, 111, 112, 32, 111, 102, 32, 99, 108, 105, 102, 102, 46, 10, 45, 49, 10, 51, 10, 49, 9, 50, 9, 50, 9, 52, 52, 9, 50, 57, 10, 49, 9, 51, 9, 51, 9, 49, 50, 9, 49, 57, 9, 52, 51, 10, 49, 9, 52, 9, 53, 9, 49, 51, 9, 49, 52, 9, 52, 54, 9, 51, 48, 10, 49, 9, 49, 52, 53, 9, 54, 9, 52, 53, 10, 49, 9, 56, 9, 54, 51, 10, 50, 9, 49, 9, 49, 50, 9, 52, 51, 10, 50, 9, 53, 9, 52, 52, 10, 50, 9, 49, 54, 52, 9, 52, 53, 10, 50, 9, 49, 53, 55, 9, 52, 54, 9, 54, 10, 50, 9, 53, 56, 48, 9, 51, 48, 10, 51, 9, 49, 9, 49, 49, 9, 51, 50, 9, 52, 52, 10, 51, 9, 49, 55, 57, 9, 54, 50, 10, 51, 9, 49, 56, 49, 9, 54, 53, 10, 51, 9, 55, 57, 9, 53, 9, 49, 52, 10, 52, 9, 49, 9, 52, 9, 49, 50, 9, 52, 53, 10, 52, 9, 49, 53, 48, 9, 52, 51, 9, 54, 10, 52, 9, 49, 53, 54, 9, 52, 52, 10, 52, 9, 55, 9, 53, 9, 52, 54, 9, 51, 48, 10, 52, 9, 56, 9, 54, 51, 10, 52, 9, 55, 52, 53, 9, 49, 52, 10, 53, 9, 50, 9, 50, 9, 52, 51, 9, 50, 57, 10, 53, 9, 49, 9, 49, 50, 10, 53, 9, 49, 53, 56, 9, 52, 54, 9, 54, 10, 53, 9, 49, 53, 57, 9, 52, 52, 10, 53, 9, 49, 54, 53, 9, 52, 53, 10, 54, 9, 49, 54, 49, 9, 52, 54, 9, 54, 10, 54, 9, 49, 54, 51, 9, 52, 51, 10, 54, 9, 50, 49, 9, 51, 57, 10, 55, 9, 49, 9, 49, 50, 10, 55, 9, 52, 9, 52, 9, 52, 53, 10, 55, 9, 49, 53, 48, 9, 52, 51, 9, 54, 10, 55, 9, 49, 53, 52, 9, 52, 52, 10, 55, 9, 56, 9, 53, 9, 49, 54, 9, 52, 54, 9, 54, 51, 10, 55, 9, 53, 57, 53, 9, 54, 48, 9, 49, 52, 9, 51, 48, 9, 49, 57, 9, 51, 10, 56, 9, 49, 53, 49, 9, 52, 51, 9, 54, 10, 56, 9, 49, 53, 52, 9, 52, 54, 10, 56, 9, 49, 53, 51, 9, 52, 52, 10, 56, 9, 49, 9, 49, 50, 10, 56, 9, 55, 9, 52, 9, 49, 51, 9, 52, 53, 10, 56, 9, 51, 48, 51, 48, 48, 57, 9, 51, 9, 49, 57, 9, 51, 48, 10, 56, 9, 53, 57, 51, 9, 51, 10, 57, 9, 51, 48, 51, 48, 48, 56, 9, 49, 49, 9, 50, 57, 10, 57, 9, 53, 57, 51, 9, 49, 49, 10, 57, 9, 49, 48, 9, 49, 55, 9, 49, 56, 9, 49, 57, 9, 52, 52, 10, 57, 9, 49, 52, 9, 51, 49, 10, 57, 9, 49, 49, 9, 53, 49, 10, 49, 48, 9, 57, 9, 49, 49, 9, 50, 48, 9, 50, 49, 9, 52, 51, 10, 49, 48, 9, 49, 49, 9, 49, 57, 9, 50, 50, 9, 52, 52, 9, 53, 49, 10, 49, 48, 9, 49, 52, 9, 51, 49, 10, 49, 49, 9, 51, 48, 51, 48, 48, 56, 9, 54, 51, 10, 49, 49, 9, 57, 9, 54, 52, 10, 49, 49, 9, 49, 48, 9, 49, 55, 9, 49, 56, 9, 50, 51, 9, 50, 52, 9, 52, 51, 10, 49, 49, 9, 49, 50, 9, 50, 53, 9, 49, 57, 9, 50, 57, 9, 52, 52, 10, 49, 49, 9, 49, 56, 48, 9, 54, 50, 10, 49, 49, 9, 49, 52, 9, 51, 49, 10, 49, 50, 9, 51, 48, 51, 48, 48, 56, 9, 54, 51, 10, 49, 50, 9, 57, 9, 54, 52, 10, 49, 50, 9, 49, 49, 9, 51, 48, 9, 52, 51, 9, 53, 49, 10, 49, 50, 9, 49, 51, 9, 49, 57, 9, 50, 57, 9, 52, 52, 10, 49, 50, 9, 49, 52, 9, 51, 49, 10, 49, 51, 9, 51, 48, 51, 48, 48, 56, 9, 54, 51, 10, 49, 51, 9, 57, 9, 54, 52, 10, 49, 51, 9, 49, 49, 9, 53, 49, 10, 49, 51, 9, 49, 50, 9, 50, 53, 9, 52, 51, 10, 49, 51, 9, 49, 52, 9, 50, 51, 9, 51, 49, 9, 52, 52, 10, 49, 52, 9, 51, 48, 51, 48, 48, 56, 9, 54, 51, 10, 49, 52, 9, 57, 9, 54, 52, 10, 49, 52, 9, 49, 49, 9, 53, 49, 10, 49, 52, 9, 49, 51, 9, 50, 51, 9, 52, 51, 10, 49, 52, 9, 49, 53, 48, 48, 50, 48, 9, 51, 48, 9, 51, 49, 9, 51, 52, 10, 49, 52, 9, 49, 53, 9, 51, 48, 10, 49, 52, 9, 49, 54, 9, 51, 51, 9, 52, 52, 10, 49, 53, 9, 49, 56, 9, 51, 54, 9, 52, 54, 10, 49, 53, 9, 49, 55, 9, 55, 9, 51, 56, 9, 52, 52, 10, 49, 53, 9, 49, 57, 9, 49, 48, 9, 51, 48, 9, 52, 53, 10, 49, 53, 9, 49, 53, 48, 48, 50, 50, 9, 50, 57, 9, 51, 49, 9, 51, 52, 9, 51, 53, 9, 50, 51, 9, 52, 51, 10, 49, 53, 9, 49, 52, 9, 50, 57, 10, 49, 53, 9, 51, 52, 9, 53, 53, 10, 49, 54, 9, 49, 52, 9, 49, 10, 49, 55, 9, 49, 53, 9, 51, 56, 9, 52, 51, 10, 49, 55, 9, 51, 49, 50, 53, 57, 54, 9, 51, 57, 10, 49, 55, 9, 52, 49, 50, 48, 50, 49, 9, 55, 10, 49, 55, 9, 52, 49, 50, 53, 57, 55, 9, 52, 49, 9, 52, 50, 9, 52, 52, 9, 54, 57, 10, 49, 55, 9, 50, 55, 9, 52, 49, 10, 49, 56, 9, 49, 53, 9, 51, 56, 9, 49, 49, 9, 52, 53, 10, 49, 57, 9, 49, 53, 9, 49, 48, 9, 50, 57, 9, 52, 51, 10, 49, 57, 9, 51, 49, 49, 48, 50, 56, 9, 52, 53, 9, 51, 55, 10, 49, 57, 9, 51, 49, 49, 48, 50, 57, 9, 52, 54, 9, 51, 54, 10, 49, 57, 9, 51, 49, 49, 48, 51, 48, 9, 52, 52, 9, 55, 10, 49, 57, 9, 51, 50, 9, 52, 53, 10, 49, 57, 9, 51, 53, 48, 55, 52, 9, 52, 57, 10, 49, 57, 9, 50, 49, 49, 48, 51, 50, 9, 52, 57, 10, 49, 57, 9, 55, 52, 9, 54, 54, 10, 50, 48, 9, 48, 9, 49, 10, 50, 49, 9, 48, 9, 49, 10, 50, 50, 9, 49, 53, 9, 49, 10, 50, 51, 9, 54, 55, 9, 52, 51, 9, 52, 50, 10, 50, 51, 9, 54, 56, 9, 52, 52, 9, 54, 49, 10, 50, 51, 9, 50, 53, 9, 51, 48, 9, 51, 49, 10, 50, 51, 9, 54, 52, 56, 9, 53, 50, 10, 50, 52, 9, 54, 55, 9, 50, 57, 9, 49, 49, 10, 50, 53, 9, 50, 51, 9, 50, 57, 9, 49, 49, 10, 50, 53, 9, 53, 50, 52, 48, 51, 49, 9, 53, 54, 10, 50, 53, 9, 50, 54, 9, 53, 54, 10, 50, 54, 9, 56, 56, 9, 49, 10, 50, 55, 9, 51, 49, 50, 53, 57, 54, 9, 51, 57, 10, 50, 55, 9, 52, 49, 50, 48, 50, 49, 9, 55, 10, 50, 55, 9, 52, 49, 50, 53, 57, 55, 9, 52, 49, 9, 52, 50, 9, 52, 51, 9, 54, 57, 10, 50, 55, 9, 49, 55, 9, 52, 49, 10, 50, 55, 9, 52, 48, 9, 52, 53, 10, 50, 55, 9, 52, 49, 9, 52, 52, 10, 50, 56, 9, 49, 57, 9, 51, 56, 9, 49, 49, 9, 52, 54, 10, 50, 56, 9, 51, 51, 9, 52, 53, 9, 53, 53, 10, 50, 56, 9, 51, 54, 9, 51, 48, 9, 53, 50, 10, 50, 57, 9, 49, 57, 9, 51, 56, 9, 49, 49, 9, 52, 53, 10, 51, 48, 9, 49, 57, 9, 51, 56, 9, 49, 49, 9, 52, 51, 10, 51, 48, 9, 54, 50, 9, 52, 52, 9, 50, 57, 10, 51, 49, 9, 52, 50, 52, 48, 56, 57, 9, 49, 10, 51, 49, 9, 57, 48, 9, 49, 10, 51, 50, 9, 49, 57, 9, 49, 10, 51, 51, 9, 49, 56, 50, 9, 54, 53, 10, 51, 51, 9, 50, 56, 9, 52, 54, 10, 51, 51, 9, 51, 52, 9, 52, 51, 9, 53, 51, 9, 53, 52, 10, 51, 51, 9, 51, 53, 9, 52, 52, 10, 51, 51, 9, 49, 53, 57, 51, 48, 50, 9, 55, 49, 10, 51, 51, 9, 49, 56, 51, 9, 55, 49, 10, 51, 52, 9, 51, 51, 9, 51, 48, 9, 53, 53, 10, 51, 52, 9, 49, 53, 9, 50, 57, 10, 51, 53, 9, 51, 51, 9, 52, 51, 9, 53, 53, 10, 51, 53, 9, 50, 48, 9, 51, 57, 10, 51, 54, 9, 51, 55, 9, 52, 51, 9, 49, 55, 10, 51, 54, 9, 50, 56, 9, 50, 57, 9, 53, 50, 10, 51, 54, 9, 51, 57, 9, 52, 52, 10, 51, 54, 9, 54, 53, 9, 55, 48, 10, 51, 55, 9, 51, 54, 9, 52, 52, 9, 49, 55, 10, 51, 55, 9, 51, 56, 9, 51, 48, 9, 51, 49, 9, 53, 54, 10, 51, 56, 9, 51, 55, 9, 53, 54, 9, 50, 57, 9, 49, 49, 10, 51, 56, 9, 53, 57, 53, 9, 54, 48, 9, 49, 52, 9, 51, 48, 9, 52, 9, 53, 9, 51, 9, 49, 57, 10, 51, 57, 9, 51, 54, 9, 52, 51, 9, 50, 51, 10, 51, 57, 9, 54, 52, 9, 51, 48, 9, 53, 50, 9, 53, 56, 10, 51, 57, 9, 54, 53, 9, 55, 48, 10, 52, 48, 9, 52, 49, 9, 49, 10, 52, 49, 9, 52, 50, 9, 52, 54, 9, 50, 57, 9, 50, 51, 9, 53, 54, 10, 52, 49, 9, 50, 55, 9, 52, 51, 10, 52, 49, 9, 53, 57, 9, 52, 53, 10, 52, 49, 9, 54, 48, 9, 52, 52, 9, 49, 55, 10, 52, 50, 9, 52, 49, 9, 50, 57, 10, 52, 50, 9, 52, 50, 9, 52, 53, 10, 52, 50, 9, 52, 51, 9, 52, 51, 10, 52, 50, 9, 52, 53, 9, 52, 54, 10, 52, 50, 9, 56, 48, 9, 52, 52, 10, 52, 51, 9, 52, 50, 9, 52, 52, 10, 52, 51, 9, 52, 52, 9, 52, 54, 10, 52, 51, 9, 52, 53, 9, 52, 51, 10, 52, 52, 9, 52, 51, 9, 52, 51, 10, 52, 52, 9, 52, 56, 9, 51, 48, 10, 52, 52, 9, 53, 48, 9, 52, 54, 10, 52, 52, 9, 56, 50, 9, 52, 53, 10, 52, 53, 9, 52, 50, 9, 52, 52, 10, 52, 53, 9, 52, 51, 9, 52, 53, 10, 52, 53, 9, 52, 54, 9, 52, 51, 10, 52, 53, 9, 52, 55, 9, 52, 54, 10, 52, 53, 9, 56, 55, 9, 50, 57, 9, 51, 48, 10, 52, 54, 9, 52, 53, 9, 52, 52, 9, 49, 49, 10, 52, 55, 9, 52, 53, 9, 52, 51, 9, 49, 49, 10, 52, 56, 9, 52, 52, 9, 50, 57, 9, 49, 49, 10, 52, 57, 9, 53, 48, 9, 52, 51, 10, 52, 57, 9, 53, 49, 9, 52, 52, 10, 53, 48, 9, 52, 52, 9, 52, 51, 10, 53, 48, 9, 52, 57, 9, 52, 52, 10, 53, 48, 9, 53, 49, 9, 51, 48, 10, 53, 48, 9, 53, 50, 9, 52, 54, 10, 53, 49, 9, 52, 57, 9, 52, 52, 10, 53, 49, 9, 53, 48, 9, 50, 57, 10, 53, 49, 9, 53, 50, 9, 52, 51, 10, 53, 49, 9, 53, 51, 9, 52, 54, 10, 53, 50, 9, 53, 48, 9, 52, 52, 10, 53, 50, 9, 53, 49, 9, 52, 51, 10, 53, 50, 9, 53, 50, 9, 52, 54, 10, 53, 50, 9, 53, 51, 9, 50, 57, 10, 53, 50, 9, 53, 53, 9, 52, 53, 10, 53, 50, 9, 56, 54, 9, 51, 48, 10, 53, 51, 9, 53, 49, 9, 52, 52, 10, 53, 51, 9, 53, 50, 9, 52, 53, 10, 53, 51, 9, 53, 52, 9, 52, 54, 10, 53, 52, 9, 53, 51, 9, 52, 52, 9, 49, 49, 10, 53, 53, 9, 53, 50, 9, 52, 52, 10, 53, 53, 9, 53, 53, 9, 52, 53, 10, 53, 53, 9, 53, 54, 9, 51, 48, 10, 53, 53, 9, 53, 55, 9, 52, 51, 10, 53, 54, 9, 53, 53, 9, 50, 57, 9, 49, 49, 10, 53, 55, 9, 49, 51, 9, 51, 48, 9, 53, 54, 10, 53, 55, 9, 53, 53, 9, 52, 52, 10, 53, 55, 9, 53, 56, 9, 52, 54, 10, 53, 55, 9, 56, 51, 9, 52, 53, 10, 53, 55, 9, 56, 52, 9, 52, 51, 10, 53, 56, 9, 53, 55, 9, 52, 51, 9, 49, 49, 10, 53, 57, 9, 50, 55, 9, 49, 10, 54, 48, 9, 52, 49, 9, 52, 51, 9, 50, 57, 9, 49, 55, 10, 54, 48, 9, 54, 49, 9, 52, 52, 10, 54, 48, 9, 54, 50, 9, 52, 53, 9, 51, 48, 9, 53, 50, 10, 54, 49, 9, 54, 48, 9, 52, 51, 10, 54, 49, 9, 54, 50, 9, 52, 53, 10, 54, 49, 9, 49, 48, 48, 49, 48, 55, 9, 52, 54, 10, 54, 50, 9, 54, 48, 9, 52, 52, 10, 54, 50, 9, 54, 51, 9, 52, 53, 10, 54, 50, 9, 51, 48, 9, 52, 51, 10, 54, 50, 9, 54, 49, 9, 52, 54, 10, 54, 51, 9, 54, 50, 9, 52, 54, 9, 49, 49, 10, 54, 52, 9, 51, 57, 9, 50, 57, 9, 53, 54, 9, 53, 57, 10, 54, 52, 9, 54, 53, 9, 52, 52, 9, 55, 48, 10, 54, 52, 9, 49, 48, 51, 9, 52, 53, 9, 55, 52, 10, 54, 52, 9, 49, 48, 54, 9, 52, 51, 10, 54, 53, 9, 54, 52, 9, 52, 51, 10, 54, 53, 9, 54, 54, 9, 52, 52, 10, 54, 53, 9, 54, 53, 53, 53, 54, 9, 52, 54, 10, 54, 53, 9, 54, 56, 9, 54, 49, 10, 54, 53, 9, 54, 48, 53, 53, 54, 9, 50, 57, 10, 54, 53, 9, 55, 48, 48, 55, 48, 9, 50, 57, 10, 54, 53, 9, 51, 57, 9, 50, 57, 10, 54, 53, 9, 53, 48, 53, 53, 54, 9, 52, 53, 10, 54, 53, 9, 55, 53, 48, 55, 50, 9, 52, 53, 10, 54, 53, 9, 55, 49, 9, 52, 53, 10, 54, 53, 9, 54, 53, 53, 53, 54, 9, 51, 48, 10, 54, 53, 9, 49, 48, 54, 9, 51, 48, 10, 54, 54, 9, 54, 53, 9, 52, 55, 10, 54, 54, 9, 54, 55, 9, 52, 52, 10, 54, 54, 9, 56, 48, 53, 53, 54, 9, 52, 54, 10, 54, 54, 9, 55, 55, 9, 50, 53, 10, 54, 54, 9, 57, 54, 9, 52, 51, 10, 54, 54, 9, 53, 48, 53, 53, 54, 9, 53, 48, 10, 54, 54, 9, 57, 55, 9, 55, 50, 10, 54, 55, 9, 54, 54, 9, 52, 51, 10, 54, 55, 9, 50, 51, 9, 52, 52, 9, 52, 50, 10, 54, 55, 9, 50, 52, 9, 51, 48, 9, 51, 49, 10, 54, 56, 9, 50, 51, 9, 52, 54, 10, 54, 56, 9, 54, 57, 9, 50, 57, 9, 53, 54, 10, 54, 56, 9, 54, 53, 9, 52, 53, 10, 54, 57, 9, 54, 56, 9, 51, 48, 9, 54, 49, 10, 54, 57, 9, 51, 51, 49, 49, 50, 48, 9, 52, 54, 10, 54, 57, 9, 49, 49, 57, 9, 52, 54, 10, 54, 57, 9, 49, 48, 57, 9, 52, 53, 10, 54, 57, 9, 49, 49, 51, 9, 55, 53, 10, 55, 48, 9, 55, 49, 9, 52, 53, 10, 55, 48, 9, 54, 53, 9, 51, 48, 9, 50, 51, 10, 55, 48, 9, 49, 49, 49, 9, 52, 54, 10, 55, 49, 9, 54, 53, 9, 52, 56, 10, 55, 49, 9, 55, 48, 9, 52, 54, 10, 55, 49, 9, 49, 49, 48, 9, 52, 53, 10, 55, 50, 9, 54, 53, 9, 55, 48, 10, 55, 50, 9, 49, 49, 56, 9, 52, 57, 10, 55, 50, 9, 55, 51, 9, 52, 53, 10, 55, 50, 9, 57, 55, 9, 52, 56, 9, 55, 50, 10, 55, 51, 9, 55, 50, 9, 52, 54, 9, 49, 55, 9, 49, 49, 10, 55, 52, 9, 49, 57, 9, 52, 51, 10, 55, 52, 9, 51, 51, 49, 49, 50, 48, 9, 52, 52, 10, 55, 52, 9, 49, 50, 49, 9, 52, 52, 10, 55, 52, 9, 55, 53, 9, 51, 48, 10, 55, 53, 9, 55, 54, 9, 52, 54, 10, 55, 53, 9, 55, 55, 9, 52, 53, 10, 55, 54, 9, 55, 53, 9, 52, 53, 10, 55, 55, 9, 55, 53, 9, 52, 51, 10, 55, 55, 9, 55, 56, 9, 52, 52, 10, 55, 55, 9, 54, 54, 9, 52, 53, 9, 49, 55, 10, 55, 56, 9, 55, 55, 9, 52, 54, 10, 55, 57, 9, 51, 9, 49, 10, 56, 48, 9, 52, 50, 9, 52, 53, 10, 56, 48, 9, 56, 48, 9, 52, 52, 10, 56, 48, 9, 56, 48, 9, 52, 54, 10, 56, 48, 9, 56, 49, 9, 52, 51, 10, 56, 49, 9, 56, 48, 9, 52, 52, 9, 49, 49, 10, 56, 50, 9, 52, 52, 9, 52, 54, 9, 49, 49, 10, 56, 51, 9, 53, 55, 9, 52, 54, 10, 56, 51, 9, 56, 52, 9, 52, 51, 10, 56, 51, 9, 56, 53, 9, 52, 52, 10, 56, 52, 9, 53, 55, 9, 52, 53, 10, 56, 52, 9, 56, 51, 9, 52, 52, 10, 56, 52, 9, 49, 49, 52, 9, 53, 48, 10, 56, 53, 9, 56, 51, 9, 52, 51, 9, 49, 49, 10, 56, 54, 9, 53, 50, 9, 50, 57, 9, 49, 49, 10, 56, 55, 9, 52, 53, 9, 50, 57, 9, 51, 48, 10, 56, 56, 9, 50, 53, 9, 51, 48, 9, 53, 54, 9, 52, 51, 10, 56, 56, 9, 50, 48, 9, 51, 57, 10, 56, 56, 9, 57, 50, 9, 52, 52, 9, 50, 55, 10, 56, 57, 9, 50, 53, 9, 49, 10, 57, 48, 9, 50, 51, 9, 49, 10, 57, 49, 9, 57, 53, 9, 52, 53, 9, 55, 51, 9, 50, 51, 10, 57, 49, 9, 55, 50, 9, 51, 48, 9, 53, 54, 10, 57, 50, 9, 56, 56, 9, 52, 54, 10, 57, 50, 9, 57, 51, 9, 52, 51, 10, 57, 50, 9, 57, 52, 9, 52, 53, 10, 57, 51, 9, 57, 50, 9, 52, 54, 9, 50, 55, 9, 49, 49, 10, 57, 52, 9, 57, 50, 9, 52, 54, 9, 50, 55, 9, 50, 51, 10, 57, 52, 9, 51, 48, 57, 48, 57, 53, 9, 52, 53, 9, 51, 9, 55, 51, 10, 57, 52, 9, 54, 49, 49, 9, 52, 53, 10, 57, 53, 9, 57, 52, 9, 52, 54, 9, 49, 49, 10, 57, 53, 9, 57, 50, 9, 50, 55, 10, 57, 53, 9, 57, 49, 9, 52, 52, 10, 57, 54, 9, 54, 54, 9, 52, 52, 9, 49, 49, 10, 57, 55, 9, 54, 54, 9, 52, 56, 10, 57, 55, 9, 55, 50, 9, 52, 52, 9, 49, 55, 10, 57, 55, 9, 57, 56, 9, 50, 57, 9, 52, 53, 9, 55, 51, 10, 57, 56, 9, 57, 55, 9, 52, 54, 9, 55, 50, 10, 57, 56, 9, 57, 57, 9, 52, 52, 10, 57, 57, 9, 57, 56, 9, 53, 48, 9, 55, 51, 10, 57, 57, 9, 51, 48, 49, 9, 52, 51, 9, 50, 51, 10, 57, 57, 9, 49, 48, 48, 9, 52, 51, 10, 49, 48, 48, 9, 51, 48, 49, 9, 52, 52, 9, 50, 51, 9, 49, 49, 10, 49, 48, 48, 9, 57, 57, 9, 52, 52, 10, 49, 48, 48, 9, 49, 53, 57, 51, 48, 50, 9, 55, 49, 10, 49, 48, 48, 9, 49, 56, 52, 9, 55, 49, 10, 49, 48, 48, 9, 49, 48, 49, 9, 52, 55, 9, 50, 50, 10, 49, 48, 49, 9, 49, 48, 48, 9, 52, 54, 9, 55, 49, 9, 49, 49, 10, 49, 48, 50, 9, 49, 48, 51, 9, 51, 48, 9, 55, 52, 9, 49, 49, 10, 49, 48, 51, 9, 49, 48, 50, 9, 50, 57, 9, 51, 56, 10, 49, 48, 51, 9, 49, 48, 52, 9, 51, 48, 10, 49, 48, 51, 9, 49, 49, 52, 54, 49, 56, 9, 52, 54, 10, 49, 48, 51, 9, 49, 49, 53, 54, 49, 57, 9, 52, 54, 10, 49, 48, 51, 9, 54, 52, 9, 52, 54, 10, 49, 48, 52, 9, 49, 48, 51, 9, 50, 57, 9, 55, 52, 10, 49, 48, 52, 9, 49, 48, 53, 9, 51, 48, 10, 49, 48, 53, 9, 49, 48, 52, 9, 50, 57, 9, 49, 49, 10, 49, 48, 53, 9, 49, 48, 51, 9, 55, 52, 10, 49, 48, 54, 9, 54, 52, 9, 50, 57, 10, 49, 48, 54, 9, 54, 53, 9, 52, 52, 10, 49, 48, 54, 9, 49, 48, 56, 9, 52, 51, 10, 49, 48, 55, 9, 49, 51, 49, 9, 52, 54, 10, 49, 48, 55, 9, 49, 51, 50, 9, 52, 57, 10, 49, 48, 55, 9, 49, 51, 51, 9, 52, 55, 10, 49, 48, 55, 9, 49, 51, 52, 9, 52, 56, 10, 49, 48, 55, 9, 49, 51, 53, 9, 50, 57, 10, 49, 48, 55, 9, 49, 51, 54, 9, 53, 48, 10, 49, 48, 55, 9, 49, 51, 55, 9, 52, 51, 10, 49, 48, 55, 9, 49, 51, 56, 9, 52, 52, 10, 49, 48, 55, 9, 49, 51, 57, 9, 52, 53, 10, 49, 48, 55, 9, 54, 49, 9, 51, 48, 10, 49, 48, 56, 9, 57, 53, 53, 53, 54, 9, 52, 51, 9, 52, 53, 9, 52, 54, 9, 52, 55, 9, 52, 56, 9, 52, 57, 9, 53, 48, 9, 50, 57, 9, 51, 48, 10, 49, 48, 56, 9, 49, 48, 54, 9, 52, 51, 10, 49, 48, 56, 9, 54, 50, 54, 9, 52, 52, 10, 49, 48, 57, 9, 54, 57, 9, 52, 54, 10, 49, 48, 57, 9, 49, 49, 51, 9, 52, 53, 9, 55, 53, 10, 49, 49, 48, 9, 55, 49, 9, 52, 52, 10, 49, 49, 48, 9, 50, 48, 9, 51, 57, 10, 49, 49, 49, 9, 55, 48, 9, 52, 53, 10, 49, 49, 49, 9, 52, 48, 48, 53, 48, 9, 51, 48, 9, 51, 57, 9, 53, 54, 10, 49, 49, 49, 9, 53, 48, 48, 53, 51, 9, 51, 48, 10, 49, 49, 49, 9, 52, 53, 9, 51, 48, 10, 49, 49, 50, 9, 49, 51, 49, 9, 52, 57, 10, 49, 49, 50, 9, 49, 51, 50, 9, 52, 53, 10, 49, 49, 50, 9, 49, 51, 51, 9, 52, 51, 10, 49, 49, 50, 9, 49, 51, 52, 9, 53, 48, 10, 49, 49, 50, 9, 49, 51, 53, 9, 52, 56, 10, 49, 49, 50, 9, 49, 51, 54, 9, 52, 55, 10, 49, 49, 50, 9, 49, 51, 55, 9, 52, 52, 10, 49, 49, 50, 9, 49, 51, 56, 9, 51, 48, 10, 49, 49, 50, 9, 49, 51, 57, 9, 50, 57, 10, 49, 49, 50, 9, 49, 52, 48, 9, 52, 54, 10, 49, 49, 51, 9, 49, 48, 57, 9, 52, 54, 9, 49, 49, 10, 49, 49, 51, 9, 52, 52, 53, 53, 53, 50, 9, 52, 53, 9, 52, 50, 9, 54, 57, 10, 49, 49, 51, 9, 49, 54, 56, 9, 52, 53, 10, 49, 49, 52, 9, 56, 52, 9, 52, 56, 10, 49, 49, 53, 9, 49, 49, 54, 9, 52, 57, 10, 49, 49, 54, 9, 49, 49, 53, 9, 52, 55, 10, 49, 49, 54, 9, 53, 57, 51, 9, 51, 48, 10, 49, 49, 55, 9, 49, 49, 56, 9, 52, 57, 10, 49, 49, 55, 9, 50, 51, 51, 54, 54, 48, 9, 52, 49, 9, 52, 50, 9, 54, 57, 9, 52, 55, 10, 49, 49, 55, 9, 51, 51, 50, 54, 54, 49, 9, 52, 49, 10, 49, 49, 55, 9, 51, 48, 51, 9, 52, 49, 10, 49, 49, 55, 9, 51, 51, 50, 48, 50, 49, 9, 51, 57, 10, 49, 49, 55, 9, 53, 57, 54, 9, 51, 57, 10, 49, 49, 56, 9, 55, 50, 9, 51, 48, 10, 49, 49, 56, 9, 49, 49, 55, 9, 50, 57, 10, 49, 49, 57, 9, 54, 57, 9, 52, 53, 9, 49, 49, 10, 49, 49, 57, 9, 54, 53, 51, 9, 52, 51, 9, 55, 10, 49, 50, 48, 9, 54, 57, 9, 52, 53, 10, 49, 50, 48, 9, 55, 52, 9, 52, 51, 10, 49, 50, 49, 9, 55, 52, 9, 52, 51, 9, 49, 49, 10, 49, 50, 49, 9, 54, 53, 51, 9, 52, 53, 9, 55, 10, 49, 50, 50, 9, 49, 50, 51, 9, 52, 55, 10, 49, 50, 50, 9, 50, 51, 51, 54, 54, 48, 9, 52, 49, 9, 52, 50, 9, 54, 57, 9, 52, 57, 10, 49, 50, 50, 9, 51, 48, 51, 9, 52, 49, 10, 49, 50, 50, 9, 53, 57, 54, 9, 51, 57, 10, 49, 50, 50, 9, 49, 50, 52, 9, 49, 53, 10, 49, 50, 50, 9, 49, 50, 54, 9, 50, 56, 10, 49, 50, 50, 9, 49, 50, 57, 9, 52, 48, 10, 49, 50, 51, 9, 49, 50, 50, 9, 52, 52, 10, 49, 50, 51, 9, 49, 50, 52, 9, 52, 51, 9, 49, 53, 10, 49, 50, 51, 9, 49, 50, 54, 9, 50, 56, 10, 49, 50, 51, 9, 49, 50, 57, 9, 52, 48, 10, 49, 50, 52, 9, 49, 50, 51, 9, 52, 52, 10, 49, 50, 52, 9, 49, 50, 53, 9, 52, 55, 9, 51, 54, 10, 49, 50, 52, 9, 49, 50, 56, 9, 52, 56, 9, 51, 55, 9, 51, 48, 10, 49, 50, 52, 9, 49, 50, 54, 9, 50, 56, 10, 49, 50, 52, 9, 49, 50, 57, 9, 52, 48, 10, 49, 50, 53, 9, 49, 50, 52, 9, 52, 54, 9, 49, 53, 10, 49, 50, 53, 9, 49, 50, 54, 9, 52, 53, 9, 50, 56, 10, 49, 50, 53, 9, 49, 50, 55, 9, 52, 51, 9, 49, 55, 10, 49, 50, 54, 9, 49, 50, 53, 9, 52, 54, 9, 50, 51, 9, 49, 49, 10, 49, 50, 54, 9, 49, 50, 52, 9, 49, 53, 10, 49, 50, 54, 9, 54, 49, 48, 9, 51, 48, 10, 49, 50, 54, 9, 49, 55, 56, 9, 51, 57, 10, 49, 50, 55, 9, 49, 50, 53, 9, 52, 52, 9, 49, 49, 9, 49, 55, 10, 49, 50, 55, 9, 49, 50, 52, 9, 49, 53, 10, 49, 50, 55, 9, 49, 50, 54, 9, 50, 56, 10, 49, 50, 56, 9, 49, 50, 52, 9, 52, 53, 9, 50, 57, 9, 49, 53, 10, 49, 50, 56, 9, 49, 50, 57, 9, 52, 54, 9, 51, 48, 9, 52, 48, 10, 49, 50, 56, 9, 49, 50, 54, 9, 50, 56, 10, 49, 50, 57, 9, 49, 50, 56, 9, 52, 52, 9, 50, 57, 10, 49, 50, 57, 9, 49, 50, 52, 9, 49, 53, 10, 49, 50, 57, 9, 49, 51, 48, 9, 52, 51, 9, 49, 57, 9, 52, 48, 9, 51, 10, 49, 50, 57, 9, 49, 50, 54, 9, 50, 56, 10, 49, 51, 48, 9, 49, 50, 57, 9, 52, 52, 9, 49, 49, 10, 49, 51, 48, 9, 49, 50, 52, 9, 49, 53, 10, 49, 51, 48, 9, 49, 50, 54, 9, 50, 56, 10, 49, 51, 49, 9, 49, 48, 55, 9, 52, 52, 10, 49, 51, 49, 9, 49, 51, 50, 9, 52, 56, 10, 49, 51, 49, 9, 49, 51, 51, 9, 53, 48, 10, 49, 51, 49, 9, 49, 51, 52, 9, 52, 57, 10, 49, 51, 49, 9, 49, 51, 53, 9, 52, 55, 10, 49, 51, 49, 9, 49, 51, 54, 9, 50, 57, 10, 49, 51, 49, 9, 49, 51, 55, 9, 51, 48, 10, 49, 51, 49, 9, 49, 51, 56, 9, 52, 53, 10, 49, 51, 49, 9, 49, 51, 57, 9, 52, 54, 10, 49, 51, 49, 9, 49, 49, 50, 9, 52, 51, 10, 49, 51, 50, 9, 49, 48, 55, 9, 53, 48, 10, 49, 51, 50, 9, 49, 51, 49, 9, 50, 57, 10, 49, 51, 50, 9, 49, 51, 51, 9, 52, 53, 10, 49, 51, 50, 9, 49, 51, 52, 9, 52, 54, 10, 49, 51, 50, 9, 49, 51, 53, 9, 52, 52, 10, 49, 51, 50, 9, 49, 51, 54, 9, 52, 57, 10, 49, 51, 50, 9, 49, 51, 55, 9, 52, 55, 10, 49, 51, 50, 9, 49, 51, 56, 9, 52, 51, 10, 49, 51, 50, 9, 49, 51, 57, 9, 51, 48, 10, 49, 51, 50, 9, 49, 49, 50, 9, 52, 56, 10, 49, 51, 51, 9, 49, 48, 55, 9, 50, 57, 10, 49, 51, 51, 9, 49, 51, 49, 9, 51, 48, 10, 49, 51, 51, 9, 49, 51, 50, 9, 52, 52, 10, 49, 51, 51, 9, 49, 51, 52, 9, 52, 55, 10, 49, 51, 51, 9, 49, 51, 53, 9, 52, 57, 10, 49, 51, 51, 9, 49, 51, 54, 9, 52, 51, 10, 49, 51, 51, 9, 49, 51, 55, 9, 52, 53, 10, 49, 51, 51, 9, 49, 51, 56, 9, 53, 48, 10, 49, 51, 51, 9, 49, 51, 57, 9, 52, 56, 10, 49, 51, 51, 9, 49, 49, 50, 9, 52, 54, 10, 49, 51, 52, 9, 49, 48, 55, 9, 52, 55, 10, 49, 51, 52, 9, 49, 51, 49, 9, 52, 53, 10, 49, 51, 52, 9, 49, 51, 50, 9, 53, 48, 10, 49, 51, 52, 9, 49, 51, 51, 9, 52, 56, 10, 49, 51, 52, 9, 49, 51, 53, 9, 52, 51, 10, 49, 51, 52, 9, 49, 51, 54, 9, 51, 48, 10, 49, 51, 52, 9, 49, 51, 55, 9, 52, 54, 10, 49, 51, 52, 9, 49, 51, 56, 9, 50, 57, 10, 49, 51, 52, 9, 49, 51, 57, 9, 52, 52, 10, 49, 51, 52, 9, 49, 49, 50, 9, 52, 57, 10, 49, 51, 53, 9, 49, 48, 55, 9, 52, 53, 10, 49, 51, 53, 9, 49, 51, 49, 9, 52, 56, 10, 49, 51, 53, 9, 49, 51, 50, 9, 51, 48, 10, 49, 51, 53, 9, 49, 51, 51, 9, 52, 54, 10, 49, 51, 53, 9, 49, 51, 52, 9, 52, 51, 10, 49, 51, 53, 9, 49, 51, 54, 9, 52, 52, 10, 49, 51, 53, 9, 49, 51, 55, 9, 52, 57, 10, 49, 51, 53, 9, 49, 51, 56, 9, 52, 55, 10, 49, 51, 53, 9, 49, 51, 57, 9, 53, 48, 10, 49, 51, 53, 9, 49, 49, 50, 9, 50, 57, 10, 49, 51, 54, 9, 49, 48, 55, 9, 52, 51, 10, 49, 51, 54, 9, 49, 51, 49, 9, 52, 52, 10, 49, 51, 54, 9, 49, 51, 50, 9, 50, 57, 10, 49, 51, 54, 9, 49, 51, 51, 9, 52, 57, 10, 49, 51, 54, 9, 49, 51, 52, 9, 51, 48, 10, 49, 51, 54, 9, 49, 51, 53, 9, 52, 54, 10, 49, 51, 54, 9, 49, 51, 55, 9, 53, 48, 10, 49, 51, 54, 9, 49, 51, 56, 9, 52, 56, 10, 49, 51, 54, 9, 49, 51, 57, 9, 52, 55, 10, 49, 51, 54, 9, 49, 49, 50, 9, 52, 53, 10, 49, 51, 55, 9, 49, 48, 55, 9, 52, 56, 10, 49, 51, 55, 9, 49, 51, 49, 9, 52, 55, 10, 49, 51, 55, 9, 49, 51, 50, 9, 52, 54, 10, 49, 51, 55, 9, 49, 51, 51, 9, 51, 48, 10, 49, 51, 55, 9, 49, 51, 52, 9, 50, 57, 10, 49, 51, 55, 9, 49, 51, 53, 9, 53, 48, 10, 49, 51, 55, 9, 49, 51, 54, 9, 52, 53, 10, 49, 51, 55, 9, 49, 51, 56, 9, 52, 57, 10, 49, 51, 55, 9, 49, 51, 57, 9, 52, 51, 10, 49, 51, 55, 9, 49, 49, 50, 9, 52, 52, 10, 49, 51, 56, 9, 49, 48, 55, 9, 51, 48, 10, 49, 51, 56, 9, 49, 51, 49, 9, 52, 51, 10, 49, 51, 56, 9, 49, 51, 50, 9, 52, 55, 10, 49, 51, 56, 9, 49, 51, 51, 9, 50, 57, 10, 49, 51, 56, 9, 49, 51, 52, 9, 52, 52, 10, 49, 51, 56, 9, 49, 51, 53, 9, 52, 53, 10, 49, 51, 56, 9, 49, 51, 54, 9, 52, 54, 10, 49, 51, 56, 9, 49, 51, 55, 9, 52, 56, 10, 49, 51, 56, 9, 49, 51, 57, 9, 52, 57, 10, 49, 51, 56, 9, 49, 49, 50, 9, 53, 48, 10, 49, 51, 57, 9, 49, 48, 55, 9, 52, 57, 10, 49, 51, 57, 9, 49, 51, 49, 9, 53, 48, 10, 49, 51, 57, 9, 49, 51, 50, 9, 52, 51, 10, 49, 51, 57, 9, 49, 51, 51, 9, 52, 52, 10, 49, 51, 57, 9, 49, 51, 52, 9, 52, 53, 10, 49, 51, 57, 9, 49, 51, 53, 9, 51, 48, 10, 49, 51, 57, 9, 49, 51, 54, 9, 52, 56, 10, 49, 51, 57, 9, 49, 51, 55, 9, 50, 57, 10, 49, 51, 57, 9, 49, 51, 56, 9, 52, 54, 10, 49, 51, 57, 9, 49, 49, 50, 9, 52, 55, 10, 49, 52, 48, 9, 49, 49, 50, 9, 52, 53, 9, 49, 49, 10, 49, 52, 48, 9, 51, 51, 56, 49, 52, 49, 9, 52, 54, 10, 49, 52, 48, 9, 49, 52, 50, 9, 52, 54, 10, 49, 52, 49, 9, 49, 52, 48, 9, 52, 53, 10, 49, 52, 49, 9, 49, 52, 51, 9, 52, 54, 10, 49, 52, 50, 9, 49, 52, 48, 9, 49, 10, 49, 52, 51, 9, 49, 52, 49, 9, 52, 52, 10, 49, 52, 51, 9, 50, 52, 49, 53, 54, 48, 9, 52, 53, 10, 49, 52, 51, 9, 49, 52, 52, 9, 52, 53, 10, 49, 52, 52, 9, 49, 52, 51, 9, 52, 54, 9, 49, 49, 10, 49, 52, 53, 9, 49, 9, 52, 51, 10, 49, 52, 53, 9, 49, 53, 55, 9, 52, 52, 10, 49, 52, 53, 9, 49, 52, 54, 9, 52, 53, 10, 49, 52, 53, 9, 49, 52, 55, 9, 52, 54, 10, 49, 52, 54, 9, 49, 52, 53, 9, 52, 51, 10, 49, 52, 54, 9, 49, 54, 51, 9, 52, 52, 10, 49, 52, 54, 9, 49, 52, 55, 9, 52, 53, 10, 49, 52, 54, 9, 49, 54, 50, 9, 52, 54, 10, 49, 52, 55, 9, 49, 52, 56, 9, 52, 51, 9, 52, 52, 10, 49, 52, 55, 9, 49, 52, 54, 9, 52, 53, 10, 49, 52, 55, 9, 49, 52, 53, 9, 52, 54, 10, 49, 52, 56, 9, 49, 52, 55, 9, 52, 51, 9, 52, 53, 10, 49, 52, 56, 9, 49, 52, 57, 9, 52, 52, 9, 52, 54, 10, 49, 52, 57, 9, 49, 52, 56, 9, 52, 51, 9, 52, 53, 10, 49, 52, 57, 9, 49, 53, 49, 9, 52, 52, 10, 49, 52, 57, 9, 49, 53, 48, 9, 52, 54, 10, 49, 53, 48, 9, 49, 52, 57, 9, 52, 51, 10, 49, 53, 48, 9, 49, 53, 49, 9, 52, 52, 10, 49, 53, 48, 9, 52, 9, 52, 53, 10, 49, 53, 48, 9, 55, 9, 52, 54, 10, 49, 53, 49, 9, 49, 52, 57, 9, 52, 51, 10, 49, 53, 49, 9, 49, 53, 48, 9, 52, 52, 10, 49, 53, 49, 9, 56, 9, 52, 53, 10, 49, 53, 49, 9, 49, 53, 50, 9, 52, 54, 10, 49, 53, 50, 9, 49, 53, 51, 9, 52, 51, 10, 49, 53, 50, 9, 49, 53, 53, 9, 52, 52, 10, 49, 53, 50, 9, 49, 54, 54, 9, 52, 53, 10, 49, 53, 50, 9, 49, 53, 49, 9, 52, 54, 10, 49, 53, 51, 9, 49, 53, 53, 9, 52, 51, 10, 49, 53, 51, 9, 49, 53, 50, 9, 52, 52, 10, 49, 53, 51, 9, 49, 53, 52, 9, 52, 53, 10, 49, 53, 51, 9, 56, 9, 52, 54, 10, 49, 53, 52, 9, 55, 9, 52, 51, 10, 49, 53, 52, 9, 49, 53, 53, 9, 52, 52, 10, 49, 53, 52, 9, 49, 53, 51, 9, 52, 53, 10, 49, 53, 52, 9, 56, 9, 52, 54, 10, 49, 53, 53, 9, 49, 53, 52, 9, 52, 51, 10, 49, 53, 53, 9, 49, 53, 50, 9, 52, 52, 10, 49, 53, 53, 9, 49, 54, 54, 9, 52, 53, 10, 49, 53, 53, 9, 49, 53, 51, 9, 52, 54, 10, 49, 53, 54, 9, 49, 53, 55, 9, 52, 51, 10, 49, 53, 54, 9, 49, 53, 56, 9, 52, 52, 10, 49, 53, 54, 9, 49, 54, 54, 9, 52, 53, 10, 49, 53, 54, 9, 52, 9, 52, 54, 10, 49, 53, 55, 9, 49, 52, 53, 9, 52, 51, 10, 49, 53, 55, 9, 49, 53, 54, 9, 52, 52, 10, 49, 53, 55, 9, 49, 54, 52, 9, 52, 53, 10, 49, 53, 55, 9, 50, 9, 52, 54, 10, 49, 53, 56, 9, 53, 9, 52, 51, 10, 49, 53, 56, 9, 49, 54, 48, 9, 52, 52, 10, 49, 53, 56, 9, 49, 53, 57, 9, 52, 53, 10, 49, 53, 56, 9, 49, 53, 54, 9, 52, 54, 10, 49, 53, 57, 9, 49, 54, 48, 9, 52, 51, 10, 49, 53, 57, 9, 49, 54, 54, 9, 52, 52, 10, 49, 53, 57, 9, 53, 9, 52, 53, 10, 49, 53, 57, 9, 49, 53, 56, 9, 52, 54, 10, 49, 54, 48, 9, 49, 54, 49, 9, 52, 51, 9, 52, 53, 10, 49, 54, 48, 9, 49, 53, 56, 9, 52, 52, 10, 49, 54, 48, 9, 49, 53, 57, 9, 52, 54, 10, 49, 54, 49, 9, 49, 54, 50, 9, 52, 51, 10, 49, 54, 49, 9, 49, 54, 48, 9, 52, 52, 9, 52, 54, 10, 49, 54, 49, 9, 54, 9, 52, 53, 10, 49, 54, 50, 9, 49, 54, 51, 9, 52, 51, 10, 49, 54, 50, 9, 49, 54, 49, 9, 52, 52, 10, 49, 54, 50, 9, 49, 52, 54, 9, 52, 53, 10, 49, 54, 50, 9, 49, 54, 53, 9, 52, 54, 10, 49, 54, 51, 9, 49, 52, 54, 9, 52, 51, 10, 49, 54, 51, 9, 49, 54, 50, 9, 52, 52, 10, 49, 54, 51, 9, 54, 9, 52, 53, 10, 49, 54, 51, 9, 49, 54, 52, 9, 52, 54, 10, 49, 54, 52, 9, 50, 9, 52, 51, 10, 49, 54, 52, 9, 49, 54, 53, 9, 52, 52, 10, 49, 54, 52, 9, 49, 54, 51, 9, 52, 53, 10, 49, 54, 52, 9, 49, 53, 55, 9, 52, 54, 10, 49, 54, 53, 9, 49, 54, 52, 9, 52, 51, 10, 49, 54, 53, 9, 53, 9, 52, 52, 10, 49, 54, 53, 9, 49, 54, 50, 9, 52, 53, 10, 49, 54, 53, 9, 49, 54, 53, 9, 52, 54, 10, 49, 54, 54, 9, 49, 53, 50, 9, 52, 51, 10, 49, 54, 54, 9, 49, 53, 53, 9, 52, 52, 10, 49, 54, 54, 9, 49, 53, 57, 9, 52, 53, 10, 49, 54, 54, 9, 49, 53, 54, 9, 52, 54, 10, 49, 54, 55, 9, 50, 49, 9, 51, 57, 10, 49, 54, 56, 9, 49, 54, 57, 9, 52, 53, 10, 49, 54, 56, 9, 49, 49, 51, 9, 52, 54, 10, 49, 54, 57, 9, 52, 52, 53, 53, 53, 50, 9, 52, 54, 9, 52, 50, 9, 54, 57, 10, 49, 54, 57, 9, 49, 54, 56, 9, 52, 54, 10, 49, 54, 57, 9, 49, 55, 48, 9, 53, 48, 9, 50, 57, 9, 49, 49, 10, 49, 55, 48, 9, 49, 55, 49, 9, 50, 57, 9, 53, 48, 10, 49, 55, 48, 9, 49, 54, 57, 9, 51, 48, 9, 52, 56, 10, 49, 55, 49, 9, 49, 55, 48, 9, 51, 48, 9, 52, 56, 10, 49, 55, 49, 9, 49, 55, 50, 9, 50, 57, 9, 53, 48, 10, 49, 55, 50, 9, 49, 55, 49, 9, 51, 48, 9, 52, 56, 10, 49, 55, 50, 9, 49, 55, 51, 9, 50, 57, 9, 53, 54, 10, 49, 55, 51, 9, 49, 55, 50, 9, 51, 48, 10, 49, 55, 51, 9, 49, 52, 54, 49, 55, 53, 9, 50, 57, 10, 49, 55, 51, 9, 49, 55, 52, 9, 50, 57, 10, 49, 55, 52, 9, 48, 9, 49, 10, 49, 55, 53, 9, 49, 55, 54, 9, 49, 10, 49, 55, 54, 9, 49, 55, 51, 9, 53, 54, 9, 51, 48, 10, 49, 55, 54, 9, 49, 55, 55, 9, 52, 55, 9, 49, 55, 10, 49, 55, 55, 9, 49, 55, 54, 9, 52, 57, 9, 49, 49, 9, 49, 55, 10, 49, 55, 56, 9, 48, 9, 49, 10, 49, 55, 57, 9, 49, 49, 9, 49, 10, 49, 56, 48, 9, 51, 9, 49, 10, 49, 56, 49, 9, 51, 51, 9, 49, 10, 49, 56, 50, 9, 51, 9, 49, 10, 49, 56, 51, 9, 49, 48, 48, 9, 49, 10, 49, 56, 52, 9, 51, 51, 9, 49, 10, 45, 49, 10, 52, 10, 50, 9, 82, 79, 65, 68, 10, 50, 9, 72, 73, 76, 76, 10, 51, 9, 69, 78, 84, 69, 82, 10, 52, 9, 85, 80, 83, 84, 82, 10, 53, 9, 68, 79, 87, 78, 83, 10, 54, 9, 70, 79, 82, 69, 83, 10, 55, 9, 70, 79, 82, 87, 65, 10, 55, 9, 67, 79, 78, 84, 73, 10, 55, 9, 79, 78, 87, 65, 82, 10, 56, 9, 66, 65, 67, 75, 10, 56, 9, 82, 69, 84, 85, 82, 10, 56, 9, 82, 69, 84, 82]);
            fileData0.push.apply(fileData0, [69, 10, 57, 9, 86, 65, 76, 76, 69, 10, 49, 48, 9, 83, 84, 65, 73, 82, 10, 49, 49, 9, 79, 85, 84, 10, 49, 49, 9, 79, 85, 84, 83, 73, 10, 49, 49, 9, 69, 88, 73, 84, 10, 49, 49, 9, 76, 69, 65, 86, 69, 10, 49, 50, 9, 66, 85, 73, 76, 68, 10, 49, 50, 9, 72, 79, 85, 83, 69, 10, 49, 51, 9, 71, 85, 76, 76, 89, 10, 49, 52, 9, 83, 84, 82, 69, 65, 10, 49, 53, 9, 70, 79, 82, 75, 10, 49, 54, 9, 66, 69, 68, 10, 49, 55, 9, 67, 82, 65, 87, 76, 10, 49, 56, 9, 67, 79, 66, 66, 76, 10, 49, 57, 9, 73, 78, 87, 65, 82, 10, 49, 57, 9, 73, 78, 83, 73, 68, 10, 49, 57, 9, 73, 78, 10, 50, 48, 9, 83, 85, 82, 70, 65, 10, 50, 49, 9, 78, 85, 76, 76, 10, 50, 49, 9, 78, 79, 87, 72, 69, 10, 50, 50, 9, 68, 65, 82, 75, 10, 50, 51, 9, 80, 65, 83, 83, 65, 10, 50, 51, 9, 84, 85, 78, 78, 69, 10, 50, 52, 9, 76, 79, 87, 10, 50, 53, 9, 67, 65, 78, 89, 79, 10, 50, 54, 9, 65, 87, 75, 87, 65, 10, 50, 55, 9, 71, 73, 65, 78, 84, 10, 50, 56, 9, 86, 73, 69, 87, 10, 50, 57, 9, 85, 80, 87, 65, 82, 10, 50, 57, 9, 85, 80, 10, 50, 57, 9, 85, 10, 50, 57, 9, 65, 66, 79, 86, 69, 10, 50, 57, 9, 65, 83, 67, 69, 78, 10, 51, 48, 9, 68, 10, 51, 48, 9, 68, 79, 87, 78, 87, 10, 51, 48, 9, 68, 79, 87, 78, 10, 51, 48, 9, 68, 69, 83, 67, 69, 10, 51, 49, 9, 80, 73, 84, 10, 51, 50, 9, 79, 85, 84, 68, 79, 10, 51, 51, 9, 67, 82, 65, 67, 75, 10, 51, 52, 9, 83, 84, 69, 80, 83, 10, 51, 53, 9, 68, 79, 77, 69, 10, 51, 54, 9, 76, 69, 70, 84, 10, 51, 55, 9, 82, 73, 71, 72, 84, 10, 51, 56, 9, 72, 65, 76, 76, 10, 51, 57, 9, 74, 85, 77, 80, 10, 52, 48, 9, 66, 65, 82, 82, 69, 10, 52, 49, 9, 79, 86, 69, 82, 10, 52, 50, 9, 65, 67, 82, 79, 83, 10, 52, 51, 9, 69, 65, 83, 84, 10, 52, 51, 9, 69, 10, 52, 52, 9, 87, 69, 83, 84, 10, 52, 52, 9, 87, 10, 52, 53, 9, 78, 79, 82, 84, 72, 10, 52, 53, 9, 78, 10, 52, 54, 9, 83, 79, 85, 84, 72, 10, 52, 54, 9, 83, 10, 52, 55, 9, 78, 69, 10, 52, 56, 9, 83, 69, 10, 52, 57, 9, 83, 87, 10, 53, 48, 9, 78, 87, 10, 53, 49, 9, 68, 69, 66, 82, 73, 10, 53, 50, 9, 72, 79, 76, 69, 10, 53, 51, 9, 87, 65, 76, 76, 10, 53, 52, 9, 66, 82, 79, 75, 69, 10, 53, 53, 9, 89, 50, 10, 53, 54, 9, 67, 76, 73, 77, 66, 10, 53, 55, 9, 76, 79, 79, 75, 10, 53, 55, 9, 69, 88, 65, 77, 73, 10, 53, 55, 9, 84, 79, 85, 67, 72, 10, 53, 55, 9, 68, 69, 83, 67, 82, 10, 53, 56, 9, 70, 76, 79, 79, 82, 10, 53, 57, 9, 82, 79, 79, 77, 10, 54, 48, 9, 83, 76, 73, 84, 10, 54, 49, 9, 83, 76, 65, 66, 10, 54, 49, 9, 83, 76, 65, 66, 82, 10, 54, 50, 9, 88, 89, 90, 90, 89, 10, 54, 51, 9, 68, 69, 80, 82, 69, 10, 54, 52, 9, 69, 78, 84, 82, 65, 10, 54, 53, 9, 80, 76, 85, 71, 72, 10, 54, 54, 9, 83, 69, 67, 82, 69, 10, 54, 55, 9, 67, 65, 86, 69, 10, 54, 57, 9, 67, 82, 79, 83, 83, 10, 55, 48, 9, 66, 69, 68, 81, 85, 10, 55, 49, 9, 80, 76, 79, 86, 69, 10, 55, 50, 9, 79, 82, 73, 69, 78, 10, 55, 51, 9, 67, 65, 86, 69, 82, 10, 55, 52, 9, 83, 72, 69, 76, 76, 10, 55, 53, 9, 82, 69, 83, 69, 82, 10, 55, 54, 9, 77, 65, 73, 78, 10, 55, 54, 9, 79, 70, 70, 73, 67, 10, 49, 48, 48, 49, 9, 75, 69, 89, 83, 10, 49, 48, 48, 49, 9, 75, 69, 89, 10, 49, 48, 48, 50, 9, 76, 65, 77, 80, 10, 49, 48, 48, 50, 9, 76, 65, 78, 84, 69, 10, 49, 48, 48, 51, 9, 71, 82, 65, 84, 69, 10, 49, 48, 48, 52, 9, 67, 65, 71, 69, 10, 49, 48, 48, 53, 9, 82, 79, 68, 10, 49, 48, 48, 54, 9, 82, 79, 68, 32, 32, 32, 32, 32, 40, 77, 85, 83, 84, 32, 66, 69, 32, 78, 69, 88, 84, 32, 79, 66, 74, 69, 67, 84, 32, 65, 70, 84, 69, 82, 32, 34, 82, 69, 65, 76, 34, 32, 82, 79, 68, 41, 10, 49, 48, 48, 55, 9, 83, 84, 69, 80, 83, 10, 49, 48, 48, 56, 9, 66, 73, 82, 68, 10, 49, 48, 48, 57, 9, 68, 79, 79, 82, 10, 49, 48, 49, 48, 9, 80, 73, 76, 76, 79, 10, 49, 48, 49, 48, 9, 86, 69, 76, 86, 69, 10, 49, 48, 49, 49, 9, 83, 78, 65, 75, 69, 10, 49, 48, 49, 50, 9, 70, 73, 83, 83, 85, 10, 49, 48, 49, 51, 9, 84, 65, 66, 76, 69, 10, 49, 48, 49, 52, 9, 67, 76, 65, 77, 10, 49, 48, 49, 53, 9, 79, 89, 83, 84, 69, 10, 49, 48, 49, 54, 9, 77, 65, 71, 65, 90, 10, 49, 48, 49, 54, 9, 73, 83, 83, 85, 69, 10, 49, 48, 49, 54, 9, 83, 80, 69, 76, 85, 10, 49, 48, 49, 54, 9, 34, 83, 80, 69, 76, 10, 49, 48, 49, 55, 9, 68, 87, 65, 82, 70, 10, 49, 48, 49, 55, 9, 68, 87, 65, 82, 86, 10, 49, 48, 49, 56, 9, 75, 78, 73, 70, 69, 10, 49, 48, 49, 56, 9, 75, 78, 73, 86, 69, 10, 49, 48, 49, 57, 9, 70, 79, 79, 68, 10, 49, 48, 49, 57, 9, 82, 65, 84, 73, 79, 10, 49, 48, 50, 48, 9, 66, 79, 84, 84, 76, 10, 49, 48, 50, 48, 9, 74, 65, 82, 10, 49, 48, 50, 49, 9, 87, 65, 84, 69, 82, 10, 49, 48, 50, 49, 9, 72, 50, 79, 10, 49, 48, 50, 50, 9, 79, 73, 76, 10, 49, 48, 50, 51, 9, 77, 73, 82, 82, 79, 10, 49, 48, 50, 52, 9, 80, 76, 65, 78, 84, 10, 49, 48, 50, 52, 9, 66, 69, 65, 78, 83, 10, 49, 48, 50, 53, 9, 80, 76, 65, 78, 84, 9, 40, 77, 85, 83, 84, 32, 66, 69, 32, 78, 69, 88, 84, 32, 79, 66, 74, 69, 67, 84, 32, 65, 70, 84, 69, 82, 32, 34, 82, 69, 65, 76, 34, 32, 80, 76, 65, 78, 84, 41, 10, 49, 48, 50, 54, 9, 83, 84, 65, 76, 65, 10, 49, 48, 50, 55, 9, 83, 72, 65, 68, 79, 10, 49, 48, 50, 55, 9, 70, 73, 71, 85, 82, 10, 49, 48, 50, 55, 9, 87, 73, 78, 68, 79, 9, 40, 83, 65, 77, 69, 32, 65, 83, 32, 70, 73, 71, 85, 82, 69, 41, 10, 49, 48, 50, 56, 9, 65, 88, 69, 10, 49, 48, 50, 57, 9, 68, 82, 65, 87, 73, 10, 49, 48, 51, 48, 9, 80, 73, 82, 65, 84, 10, 49, 48, 51, 48, 9, 71, 69, 78, 73, 69, 10, 49, 48, 51, 48, 9, 68, 74, 73, 78, 78, 10, 49, 48, 51, 49, 9, 68, 82, 65, 71, 79, 10, 49, 48, 51, 50, 9, 67, 72, 65, 83, 77, 10, 49, 48, 51, 51, 9, 84, 82, 79, 76, 76, 10, 49, 48, 51, 52, 9, 84, 82, 79, 76, 76, 9, 40, 77, 85, 83, 84, 32, 66, 69, 32, 78, 69, 88, 84, 32, 79, 66, 74, 69, 67, 84, 32, 65, 70, 84, 69, 82, 32, 34, 82, 69, 65, 76, 34, 32, 84, 82, 79, 76, 76, 41, 10, 49, 48, 51, 53, 9, 66, 69, 65, 82, 10, 49, 48, 51, 54, 9, 77, 69, 83, 83, 65, 10, 49, 48, 51, 55, 9, 86, 79, 76, 67, 65, 10, 49, 48, 51, 55, 9, 71, 69, 89, 83, 69, 9, 40, 83, 65, 77, 69, 32, 65, 83, 32, 86, 79, 76, 67, 65, 78, 79, 41, 10, 49, 48, 51, 56, 9, 77, 65, 67, 72, 73, 10, 49, 48, 51, 56, 9, 86, 69, 78, 68, 73, 10, 49, 48, 51, 57, 9, 66, 65, 84, 84, 69, 10, 49, 48, 52, 48, 9, 67, 65, 82, 80, 69, 10, 49, 48, 52, 48, 9, 77, 79, 83, 83, 10, 49, 48, 52, 48, 9, 67, 85, 82, 84, 65, 9, 40, 83, 65, 77, 69, 32, 65, 83, 32, 67, 65, 82, 80, 69, 84, 41, 10, 49, 48, 52, 49, 9, 79, 71, 82, 69, 10, 49, 48, 52, 50, 9, 85, 82, 78, 10, 49, 48, 52, 51, 9, 67, 65, 86, 73, 84, 10, 49, 48, 52, 52, 9, 66, 76, 79, 79, 68, 10, 49, 48, 52, 53, 9, 82, 69, 83, 69, 82, 9, 40, 86, 69, 82, 66, 32, 79, 86, 69, 82, 82, 73, 68, 69, 83, 41, 10, 49, 48, 52, 54, 9, 65, 80, 80, 69, 78, 10, 49, 48, 52, 54, 9, 76, 69, 80, 79, 82, 10, 49, 48, 52, 55, 9, 77, 85, 68, 10, 49, 48, 52, 56, 9, 78, 79, 84, 69, 10, 49, 48, 52, 57, 9, 83, 73, 71, 78, 10, 49, 48, 53, 48, 9, 71, 79, 76, 68, 10, 49, 48, 53, 48, 9, 78, 85, 71, 71, 69, 10, 49, 48, 53, 49, 9, 68, 73, 65, 77, 79, 10, 49, 48, 53, 50, 9, 83, 73, 76, 86, 69, 10, 49, 48, 53, 50, 9, 66, 65, 82, 83, 10, 49, 48, 53, 51, 9, 74, 69, 87, 69, 76, 10, 49, 48, 53, 52, 9, 67, 79, 73, 78, 83, 10, 49, 48, 53, 53, 9, 67, 72, 69, 83, 84, 10, 49, 48, 53, 53, 9, 66, 79, 88, 10, 49, 48, 53, 53, 9, 84, 82, 69, 65, 83, 10, 49, 48, 53, 54, 9, 69, 71, 71, 83, 10, 49, 48, 53, 54, 9, 69, 71, 71, 10, 49, 48, 53, 54, 9, 78, 69, 83, 84, 10, 49, 48, 53, 55, 9, 84, 82, 73, 68, 69, 10, 49, 48, 53, 56, 9, 86, 65, 83, 69, 10, 49, 48, 53, 56, 9, 77, 73, 78, 71, 10, 49, 48, 53, 56, 9, 83, 72, 65, 82, 68, 10, 49, 48, 53, 56, 9, 80, 79, 84, 84, 69, 10, 49, 48, 53, 57, 9, 69, 77, 69, 82, 65, 10, 49, 48, 54, 48, 9, 80, 76, 65, 84, 73, 10, 49, 48, 54, 48, 9, 80, 89, 82, 65, 77, 10, 49, 48, 54, 49, 9, 80, 69, 65, 82, 76, 10, 49, 48, 54, 50, 9, 82, 85, 71, 10, 49, 48, 54, 50, 9, 80, 69, 82, 83, 73, 10, 49, 48, 54, 51, 9, 83, 80, 73, 67, 69, 10, 49, 48, 54, 52, 9, 67, 72, 65, 73, 78, 10, 49, 48, 54, 53, 9, 82, 85, 66, 89, 10, 49, 48, 54, 54, 9, 74, 65, 68, 69, 10, 49, 48, 54, 54, 9, 78, 69, 67, 75, 76, 10, 49, 48, 54, 55, 9, 65, 77, 66, 69, 82, 10, 49, 48, 54, 55, 9, 71, 69, 77, 83, 84, 10, 49, 48, 54, 56, 9, 83, 65, 80, 80, 72, 10, 49, 48, 54, 57, 9, 69, 66, 79, 78, 89, 10, 49, 48, 54, 57, 9, 83, 84, 65, 84, 85, 10, 50, 48, 48, 49, 9, 67, 65, 82, 82, 89, 10, 50, 48, 48, 49, 9, 84, 65, 75, 69, 10, 50, 48, 48, 49, 9, 75, 69, 69, 80, 10, 50, 48, 48, 49, 9, 67, 65, 84, 67, 72, 10, 50, 48, 48, 49, 9, 83, 84, 69, 65, 76, 10, 50, 48, 48, 49, 9, 67, 65, 80, 84, 85, 10, 50, 48, 48, 49, 9, 71, 69, 84, 10, 50, 48, 48, 49, 9, 84, 79, 84, 69, 10, 50, 48, 48, 49, 9, 83, 78, 65, 82, 70, 10, 50, 48, 48, 50, 9, 68, 82, 79, 80, 10, 50, 48, 48, 50, 9, 82, 69, 76, 69, 65, 10, 50, 48, 48, 50, 9, 70, 82, 69, 69, 10, 50, 48, 48, 50, 9, 68, 73, 83, 67, 65, 10, 50, 48, 48, 50, 9, 68, 85, 77, 80, 10, 50, 48, 48, 51, 9, 83, 65, 89, 10, 50, 48, 48, 51, 9, 67, 72, 65, 78, 84, 10, 50, 48, 48, 51, 9, 83, 73, 78, 71, 10, 50, 48, 48, 51, 9, 85, 84, 84, 69, 82, 10, 50, 48, 48, 51, 9, 77, 85, 77, 66, 76, 10, 50, 48, 48, 52, 9, 85, 78, 76, 79, 67, 10, 50, 48, 48, 52, 9, 79, 80, 69, 78, 10, 50, 48, 48, 53, 9, 78, 79, 84, 72, 73, 10, 50, 48, 48, 54, 9, 76, 79, 67, 75, 10, 50, 48, 48, 54, 9, 67, 76, 79, 83, 69, 10, 50, 48, 48, 55, 9, 76, 73, 71, 72, 84, 10, 50, 48, 48, 55, 9, 79, 78, 10, 50, 48, 48, 56, 9, 69, 88, 84, 73, 78, 10, 50, 48, 48, 56, 9, 79, 70, 70, 10, 50, 48, 48, 57, 9, 87, 65, 86, 69, 10, 50, 48, 48, 57, 9, 83, 72, 65, 75, 69, 10, 50, 48, 48, 57, 9, 83, 87, 73, 78, 71, 10, 50, 48, 49, 48, 9, 67, 65, 76, 77, 10, 50, 48, 49, 48, 9, 80, 76, 65, 67, 65, 10, 50, 48, 49, 48, 9, 84, 65, 77, 69, 10, 50, 48, 49, 49, 9, 87, 65, 76, 75, 10, 50, 48, 49, 49, 9, 82, 85, 78, 10, 50, 48, 49, 49, 9, 84, 82, 65, 86, 69, 10, 50, 48, 49, 49, 9, 71, 79, 10, 50, 48, 49, 49, 9, 80, 82, 79, 67, 69, 10, 50, 48, 49, 49, 9, 67, 79, 78, 84, 73, 10, 50, 48, 49, 49, 9, 69, 88, 80, 76, 79, 10, 50, 48, 49, 49, 9, 70, 79, 76, 76, 79, 10, 50, 48, 49, 49, 9, 84, 85, 82, 78, 10, 50, 48, 49, 50, 9, 65, 84, 84, 65, 67, 10, 50, 48, 49, 50, 9, 75, 73, 76, 76, 10, 50, 48, 49, 50, 9, 70, 73, 71, 72, 84, 10, 50, 48, 49, 50, 9, 72, 73, 84, 10, 50, 48, 49, 50, 9, 83, 84, 82, 73, 75, 10, 50, 48, 49, 50, 9, 83, 76, 65, 89, 10, 50, 48, 49, 51, 9, 80, 79, 85, 82, 10, 50, 48, 49, 52, 9, 69, 65, 84, 10, 50, 48, 49, 52, 9, 68, 69, 86, 79, 85, 10, 50, 48, 49, 53, 9, 68, 82, 73, 78, 75, 10, 50, 48, 49, 54, 9, 82, 85, 66, 10, 50, 48, 49, 55, 9, 84, 72, 82, 79, 87, 10, 50, 48, 49, 55, 9, 84, 79, 83, 83, 10, 50, 48, 49, 56, 9, 81, 85, 73, 84, 10, 50, 48, 49, 57, 9, 70, 73, 78, 68, 10, 50, 48, 49, 57, 9, 87, 72, 69, 82, 69, 10, 50, 48, 50, 48, 9, 73, 78, 86, 69, 78, 10, 50, 48, 50, 49, 9, 70, 69, 69, 68, 10, 50, 48, 50, 50, 9, 70, 73, 76, 76, 10, 50, 48, 50, 51, 9, 66, 76, 65, 83, 84, 10, 50, 48, 50, 51, 9, 68, 69, 84, 79, 78, 10, 50, 48, 50, 51, 9, 73, 71, 78, 73, 84, 10, 50, 48, 50, 51, 9, 66, 76, 79, 87, 85, 10, 50, 48, 50, 52, 9, 83, 67, 79, 82, 69, 10, 50, 48, 50, 53, 9, 70, 69, 69, 10, 50, 48, 50, 53, 9, 70, 73, 69, 10, 50, 48, 50, 53, 9, 70, 79, 69, 10, 50, 48, 50, 53, 9, 70, 79, 79, 10, 50, 48, 50, 53, 9, 70, 85, 77, 10, 50, 48, 50, 54, 9, 66, 82, 73, 69, 70, 10, 50, 48, 50, 55, 9, 82, 69, 65, 68, 10, 50, 48, 50, 55, 9, 80, 69, 82, 85, 83, 10, 50, 48, 50, 56, 9, 66, 82, 69, 65, 75, 10, 50, 48, 50, 56, 9, 83, 72, 65, 84, 84, 10, 50, 48, 50, 56, 9, 83, 77, 65, 83, 72, 10, 50, 48, 50, 57, 9, 87, 65, 75, 69, 10, 50, 48, 50, 57, 9, 68, 73, 83, 84, 85, 10, 50, 48, 51, 48, 9, 83, 85, 83, 80, 69, 10, 50, 48, 51, 48, 9, 80, 65, 85, 83, 69, 10, 50, 48, 51, 48, 9, 83, 65, 86, 69, 10, 50, 48, 51, 49, 9, 82, 69, 83, 85, 77, 10, 50, 48, 51, 49, 9, 82, 69, 83, 84, 65, 10, 50, 48, 51, 50, 9, 70, 76, 89, 10, 50, 48, 51, 51, 9, 76, 73, 83, 84, 69, 10, 50, 48, 51, 52, 9, 90, 39, 90, 90, 90, 9, 40, 71, 69, 84, 83, 32, 82, 69, 80, 76, 65, 67, 69, 68, 41, 10, 51, 48, 48, 49, 9, 70, 69, 69, 10, 51, 48, 48, 50, 9, 70, 73, 69, 10, 51, 48, 48, 51, 9, 70, 79, 69, 10, 51, 48, 48, 52, 9, 70, 79, 79, 10, 51, 48, 48, 53, 9, 70, 85, 77, 10, 51, 48, 49, 51, 9, 84, 72, 65, 78, 75, 10, 51, 48, 53, 48, 9, 83, 69, 83, 65, 77, 10, 51, 48, 53, 48, 9, 79, 80, 69, 78, 83, 10, 51, 48, 53, 48, 9, 65, 66, 82, 65, 10, 51, 48, 53, 48, 9, 65, 66, 82, 65, 67, 10, 51, 48, 53, 48, 9, 83, 72, 65, 90, 65, 10, 51, 48, 53, 48, 9, 72, 79, 67, 85, 83, 10, 51, 48, 53, 48, 9, 80, 79, 67, 85, 83, 10, 51, 48, 53, 49, 9, 72, 69, 76, 80, 10, 51, 48, 53, 49, 9, 63, 10, 51, 48, 53, 52, 9, 78, 79, 10, 51, 48, 54, 52, 9, 84, 82, 69, 69, 10, 51, 48, 54, 52, 9, 84, 82, 69, 69, 83, 10, 51, 48, 54, 54, 9, 68, 73, 71, 10, 51, 48, 54, 54, 9, 69, 88, 67, 65, 86, 10, 51, 48, 54, 56, 9, 76, 79, 83, 84, 10, 51, 48, 54, 57, 9, 77, 73, 83, 84, 10, 51, 48, 55, 57, 9, 70, 85, 67, 75, 10, 51, 49, 51, 57, 9, 83, 84, 79, 80, 10, 51, 49, 52, 50, 9, 73, 78, 70, 79, 10, 51, 49, 52, 50, 9, 73, 78, 70, 79, 82, 10, 51, 49, 52, 55, 9, 83, 87, 73, 77, 10, 51, 50, 52, 54, 9, 87, 73, 90, 65, 82, 10, 51, 50, 55, 49, 9, 89, 69, 83, 10, 51, 50, 55, 53, 9, 78, 69, 87, 83, 10, 45, 49, 10, 53, 10, 49, 9, 83, 101, 116, 32, 111, 102, 32, 107, 101, 121, 115, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 115, 111, 109, 101, 32, 107, 101, 121, 115, 32, 111, 110, 32, 116, 104, 101, 32, 103, 114, 111, 117, 110, 100, 32, 104, 101, 114, 101, 46, 10, 50, 9, 66, 114, 97, 115, 115, 32, 108, 97, 110, 116, 101, 114, 110, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 115, 104, 105, 110, 121, 32, 98, 114, 97, 115, 115, 32, 108, 97, 109, 112, 32, 110, 101, 97, 114, 98, 121, 46, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 97, 109, 112, 32, 115, 104, 105, 110, 105, 110, 103, 32, 110, 101, 97, 114, 98, 121, 46, 10, 51, 9, 42, 103, 114, 97, 116, 101, 10, 48, 48, 48, 9, 84, 104, 101, 32, 103, 114, 97, 116, 101, 32, 105, 115, 32, 108, 111, 99, 107, 101, 100, 46, 10, 49, 48, 48, 9, 84, 104, 101, 32, 103, 114, 97, 116, 101, 32, 105, 115, 32, 111, 112, 101, 110, 46, 10, 52, 9, 87, 105, 99, 107, 101, 114, 32, 99, 97, 103, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 115, 109, 97, 108, 108, 32, 119, 105, 99, 107, 101, 114, 32, 99, 97, 103, 101, 32, 100, 105, 115, 99, 97, 114, 100, 101, 100, 32, 110, 101, 97, 114, 98, 121, 46, 10, 53, 9, 66, 108, 97, 99, 107, 32, 114, 111, 100, 10, 48, 48, 48, 9, 65, 32, 116, 104, 114, 101, 101, 32, 102, 111, 111, 116, 32, 98, 108, 97, 99, 107, 32, 114, 111, 100, 32, 119, 105, 116, 104, 32, 97, 32, 114, 117, 115, 116, 121, 32, 115, 116, 97, 114, 32, 111, 110, 32, 97, 110, 32, 101, 110, 100, 32, 108, 105, 101, 115, 32, 110, 101, 97, 114, 98, 121, 46, 10, 54, 9, 66, 108, 97, 99, 107, 32, 114, 111, 100, 10, 48, 48, 48, 9, 65, 32, 116, 104, 114, 101, 101, 32, 102, 111, 111, 116, 32, 98, 108, 97, 99, 107, 32, 114, 111, 100, 32, 119, 105, 116, 104, 32, 97, 32, 114, 117, 115, 116, 121, 32, 109, 97, 114, 107, 32, 111, 110, 32, 97, 110, 32, 101, 110, 100, 32, 108, 105, 101, 115, 32, 110, 101, 97, 114, 98, 121, 46, 10, 55, 9, 42, 115, 116, 101, 112, 115, 10, 48, 48, 48, 9, 82, 111, 117, 103, 104, 32, 115, 116, 111, 110, 101, 32, 115, 116, 101, 112, 115, 32, 108, 101, 97, 100, 32, 100, 111, 119, 110, 32, 116, 104, 101, 32, 112, 105, 116, 46, 10, 49, 48, 48, 9, 82, 111, 117, 103, 104, 32, 115, 116, 111, 110, 101, 32, 115, 116, 101, 112, 115, 32, 108, 101, 97, 100, 32, 117, 112, 32, 116, 104, 101, 32, 100, 111, 109, 101, 46, 10, 56, 9, 76, 105, 116, 116, 108, 101, 32, 98, 105, 114, 100, 32, 105, 110, 32, 99, 97, 103, 101, 10, 48, 48, 48, 9, 65, 32, 99, 104, 101, 101, 114, 102, 117, 108, 32, 108, 105, 116, 116, 108, 101, 32, 98, 105, 114, 100, 32, 105, 115, 32, 115, 105, 116, 116, 105, 110, 103, 32, 104, 101, 114, 101, 32, 115, 105, 110, 103, 105, 110, 103, 46, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 98, 105, 114, 100, 32, 105, 110, 32, 116, 104, 101, 32, 99, 97, 103, 101, 46, 10, 50, 48, 48, 9, 65, 32, 99, 104, 101, 101, 114, 102, 117, 108, 32, 108, 105, 116, 116, 108, 101, 32, 98, 105, 114, 100, 32, 105, 115, 32, 115, 105, 116, 116, 105, 110, 103, 32, 104, 101, 114, 101, 32, 115, 105, 110, 103, 105, 110, 103, 46, 10, 51, 48, 48, 9, 84, 104, 101, 32, 98, 105, 114, 100, 39, 115, 32, 115, 105, 110, 103, 105, 110, 103, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 109, 101, 108, 111, 100, 105, 111, 117, 115, 46, 10, 52, 48, 48, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 115, 101, 101, 109, 32, 105, 110, 99, 108, 105, 110, 101, 100, 32, 116, 111, 32, 115, 105, 110, 103, 32, 119, 104, 105, 108, 101, 32, 105, 110, 32, 116, 104, 101, 32, 99, 97, 103, 101, 46, 10, 53, 48, 48, 9, 73, 116, 32, 97, 108, 109, 111, 115, 116, 32, 115, 101, 101, 109, 115, 32, 97, 115, 32, 116, 104, 111, 117, 103, 104, 32, 116, 104, 101, 32, 98, 105, 114, 100, 32, 105, 115, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 116, 101, 108, 108, 32, 121, 111, 117, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 46, 10, 54, 48, 48, 9, 84, 111, 32, 121, 111, 117, 114, 32, 115, 117, 114, 112, 114, 105, 115, 101, 44, 32, 121, 111, 117, 32, 99, 97, 110, 32, 117, 110, 100, 101, 114, 115, 116, 97, 110, 100, 32, 116, 104, 101, 32, 98, 105, 114, 100, 39, 115, 32, 99, 104, 105, 114, 112, 105, 110, 103, 59, 32, 105, 116, 32, 105, 115, 10, 54, 48, 48, 9, 115, 105, 110, 103, 105, 110, 103, 32, 97, 98, 111, 117, 116, 32, 116, 104, 101, 32, 106, 111, 121, 115, 32, 111, 102, 32, 105, 116, 115, 32, 102, 111, 114, 101, 115, 116, 32, 104, 111, 109, 101, 46, 10, 55, 48, 48, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 115, 101, 101, 109, 32, 105, 110, 99, 108, 105, 110, 101, 100, 32, 116, 111, 32, 115, 105, 110, 103, 32, 119, 104, 105, 108, 101, 32, 105, 110, 32, 116, 104, 101, 32, 99, 97, 103, 101, 46, 10, 56, 48, 48, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 105, 115, 32, 115, 105, 110, 103, 105, 110, 103, 32, 116, 111, 32, 121, 111, 117, 32, 105, 110, 32, 103, 114, 97, 116, 105, 116, 117, 100, 101, 32, 102, 111, 114, 32, 121, 111, 117, 114, 32, 104, 97, 118, 105, 110, 103, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 105, 116, 32, 116, 111, 10, 56, 48, 48, 9, 105, 116, 115, 32, 104, 111, 109, 101, 46, 32, 32, 73, 110, 32, 114, 101, 116, 117, 114, 110, 44, 32, 105, 116, 32, 105, 110, 102, 111, 114, 109, 115, 32, 121, 111, 117, 32, 111, 102, 32, 97, 32, 109, 97, 103, 105, 99, 32, 119, 111, 114, 100, 32, 119, 104, 105, 99, 104, 32, 105, 116, 32, 116, 104, 105, 110, 107, 115, 10, 56, 48, 48, 9, 121, 111, 117, 32, 109, 97, 121, 32, 102, 105, 110, 100, 32, 117, 115, 101, 102, 117, 108, 32, 115, 111, 109, 101, 119, 104, 101, 114, 101, 32, 110, 101, 97, 114, 32, 116, 104, 101, 32, 72, 97, 108, 108, 32, 111, 102, 32, 77, 105, 115, 116, 115, 46, 32, 32, 84, 104, 101, 32, 109, 97, 103, 105, 99, 32, 119, 111, 114, 100, 10, 56, 48, 48, 9, 99, 104, 97, 110, 103, 101, 115, 32, 102, 114, 101, 113, 117, 101, 110, 116, 108, 121, 44, 32, 98, 117, 116, 32, 102, 111, 114, 32, 110, 111, 119, 32, 116, 104, 101, 32, 98, 105, 114, 100, 32, 98, 101, 108, 105, 101, 118, 101, 115, 32, 105, 116, 32, 105, 115, 32, 34, 37, 87, 34, 46, 32, 32, 89, 111, 117, 10, 56, 48, 48, 9, 116, 104, 97, 110, 107, 32, 116, 104, 101, 32, 98, 105, 114, 100, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 44, 32, 97, 110, 100, 32, 105, 116, 32, 102, 108, 105, 101, 115, 32, 111, 102, 102, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 10, 57, 9, 42, 114, 117, 115, 116, 121, 32, 100, 111, 111, 114, 10, 48, 48, 48, 9, 84, 104, 101, 32, 119, 97, 121, 32, 110, 111, 114, 116, 104, 32, 105, 115, 32, 98, 97, 114, 114, 101, 100, 32, 98, 121, 32, 97, 32, 109, 97, 115, 115, 105, 118, 101, 44, 32, 114, 117, 115, 116, 121, 44, 32, 105, 114, 111, 110, 32, 100, 111, 111, 114, 46, 10, 49, 48, 48, 9, 84, 104, 101, 32, 119, 97, 121, 32, 110, 111, 114, 116, 104, 32, 108, 101, 97, 100, 115, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 109, 97, 115, 115, 105, 118, 101, 44, 32, 114, 117, 115, 116, 121, 44, 32, 105, 114, 111, 110, 32, 100, 111, 111, 114, 46, 10, 49, 48, 9, 86, 101, 108, 118, 101, 116, 32, 112, 105, 108, 108, 111, 119, 10, 48, 48, 48, 9, 65, 32, 115, 109, 97, 108, 108, 32, 118, 101, 108, 118, 101, 116, 32, 112, 105, 108, 108, 111, 119, 32, 108, 105, 101, 115, 32, 111, 110, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 46, 10, 49, 49, 9, 42, 115, 110, 97, 107, 101, 10, 48, 48, 48, 9, 65, 32, 104, 117, 103, 101, 32, 103, 114, 101, 101, 110, 32, 102, 105, 101, 114, 99, 101, 32, 115, 110, 97, 107, 101, 32, 98, 97, 114, 115, 32, 116, 104, 101, 32, 119, 97, 121, 33, 10, 49, 48, 48, 9, 37, 33, 32, 32, 40, 99, 104, 97, 115, 101, 100, 32, 97, 119, 97, 121, 41, 10, 50, 48, 48, 9, 84, 104, 101, 32, 115, 110, 97, 107, 101, 32, 105, 115, 32, 104, 105, 115, 115, 105, 110, 103, 32, 118, 101, 110, 111, 109, 111, 117, 115, 108, 121, 46, 10, 49, 50, 9, 42, 102, 105, 115, 115, 117, 114, 101, 10, 48, 48, 48, 9, 37, 33, 10, 49, 48, 48, 9, 65, 32, 99, 114, 121, 115, 116, 97, 108, 32, 98, 114, 105, 100, 103, 101, 32, 110, 111, 119, 32, 115, 112, 97, 110, 115, 32, 116, 104, 101, 32, 102, 105, 115, 115, 117, 114, 101, 46, 10, 50, 48, 48, 9, 84, 104, 101, 32, 99, 114, 121, 115, 116, 97, 108, 32, 98, 114, 105, 100, 103, 101, 32, 104, 97, 115, 32, 118, 97, 110, 105, 115, 104, 101, 100, 33, 10, 49, 51, 9, 42, 115, 116, 111, 110, 101, 32, 116, 97, 98, 108, 101, 116, 10, 48, 48, 48, 9, 65, 32, 109, 97, 115, 115, 105, 118, 101, 32, 115, 116, 111, 110, 101, 32, 116, 97, 98, 108, 101, 116, 32, 105, 109, 98, 101, 100, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 119, 97, 108, 108, 32, 114, 101, 97, 100, 115, 58, 10, 48, 48, 48, 9, 34, 67, 111, 110, 103, 114, 97, 116, 117, 108, 97, 116, 105, 111, 110, 115, 32, 111, 110, 32, 98, 114, 105, 110, 103, 105, 110, 103, 32, 108, 105, 103, 104, 116, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 100, 97, 114, 107, 45, 114, 111, 111, 109, 33, 34, 10, 49, 48, 48, 9, 34, 67, 111, 110, 103, 114, 97, 116, 117, 108, 97, 116, 105, 111, 110, 115, 32, 111, 110, 32, 98, 114, 105, 110, 103, 105, 110, 103, 32, 108, 105, 103, 104, 116, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 100, 97, 114, 107, 45, 114, 111, 111, 109, 33, 34, 10, 49, 52, 9, 71, 105, 97, 110, 116, 32, 99, 108, 97, 109, 32, 32, 62, 71, 82, 85, 78, 84, 33, 60, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 110, 32, 101, 110, 111, 114, 109, 111, 117, 115, 32, 99, 108, 97, 109, 32, 104, 101, 114, 101, 32, 119, 105, 116, 104, 32, 105, 116, 115, 32, 115, 104, 101, 108, 108, 32, 116, 105, 103, 104, 116, 108, 121, 32, 99, 108, 111, 115, 101, 100, 46, 10, 49, 48, 48, 9, 84, 104, 101, 32, 99, 108, 97, 109, 32, 105, 115, 32, 97, 115, 32, 116, 105, 103, 104, 116, 45, 109, 111, 117, 116, 104, 101, 100, 32, 97, 115, 32, 97, 44, 32, 101, 114, 44, 32, 99, 108, 97, 109, 46, 10, 49, 53, 9, 71, 105, 97, 110, 116, 32, 111, 121, 115, 116, 101, 114, 32, 32, 62, 71, 82, 79, 65, 78, 33, 60, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 110, 32, 101, 110, 111, 114, 109, 111, 117, 115, 32, 111, 121, 115, 116, 101, 114, 32, 104, 101, 114, 101, 32, 119, 105, 116, 104, 32, 105, 116, 115, 32, 115, 104, 101, 108, 108, 32, 116, 105, 103, 104, 116, 108, 121, 32, 99, 108, 111, 115, 101, 100, 46, 10, 49, 48, 48, 9, 73, 110, 116, 101, 114, 101, 115, 116, 105, 110, 103, 46, 32, 32, 84, 104, 101, 114, 101, 32, 115, 101, 101, 109, 115, 32, 116, 111, 32, 98, 101, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 119, 114, 105, 116, 116, 101, 110, 32, 111, 110, 32, 116, 104, 101, 32, 117, 110, 100, 101, 114, 115, 105, 100, 101, 32, 111, 102, 10, 49, 48, 48, 9, 116, 104, 101, 32, 111, 121, 115, 116, 101, 114, 46, 10, 50, 48, 48, 9, 69, 118, 101, 110, 32, 116, 104, 111, 117, 103, 104, 32, 105, 116, 39, 115, 32, 97, 110, 32, 111, 121, 115, 116, 101, 114, 44, 32, 116, 104, 101, 32, 99, 114, 105, 116, 116, 101, 114, 39, 115, 32, 97, 115, 32, 116, 105, 103, 104, 116, 45, 109, 111, 117, 116, 104, 101, 100, 32, 97, 115, 32, 97, 32, 99, 108, 97, 109, 46, 10, 51, 48, 48, 9, 73, 116, 32, 115, 97, 121, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 116, 104, 105, 110, 103, 32, 105, 116, 32, 100, 105, 100, 32, 98, 101, 102, 111, 114, 101, 46, 32, 32, 72, 109, 44, 32, 109, 97, 121, 98, 101, 32, 105, 116, 39, 115, 32, 97, 32, 112, 117, 110, 63, 10, 49, 54, 9, 34, 83, 112, 101, 108, 117, 110, 107, 101, 114, 32, 84, 111, 100, 97, 121, 34, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 97, 32, 102, 101, 119, 32, 114, 101, 99, 101, 110, 116, 32, 105, 115, 115, 117, 101, 115, 32, 111, 102, 32, 34, 83, 112, 101, 108, 117, 110, 107, 101, 114, 32, 84, 111, 100, 97, 121, 34, 32, 109, 97, 103, 97, 122, 105, 110, 101, 32, 104, 101, 114, 101, 46, 10, 49, 48, 48, 9, 73, 39, 109, 32, 97, 102, 114, 97, 105, 100, 32, 116, 104, 101, 32, 109, 97, 103, 97, 122, 105, 110, 101, 32, 105, 115, 32, 119, 114, 105, 116, 116, 101, 110, 32, 105, 110, 32, 100, 119, 97, 114, 118, 105, 115, 104, 46, 32, 32, 66, 117, 116, 32, 112, 101, 110, 99, 105, 108, 108, 101, 100, 32, 111, 110, 32, 111, 110, 101, 10, 49, 48, 48, 9, 99, 111, 118, 101, 114, 32, 121, 111, 117, 32, 115, 101, 101, 44, 32, 34, 80, 108, 101, 97, 115, 101, 32, 108, 101, 97, 118, 101, 32, 116, 104, 101, 32, 109, 97, 103, 97, 122, 105, 110, 101, 115, 32, 97, 116, 32, 116, 104, 101, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 115, 105, 116, 101, 46, 34, 10, 49, 57, 9, 84, 97, 115, 116, 121, 32, 102, 111, 111, 100, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 102, 111, 111, 100, 32, 104, 101, 114, 101, 46, 10, 50, 48, 9, 83, 109, 97, 108, 108, 32, 98, 111, 116, 116, 108, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 98, 111, 116, 116, 108, 101, 32, 111, 102, 32, 119, 97, 116, 101, 114, 32, 104, 101, 114, 101, 46, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 110, 32, 101, 109, 112, 116, 121, 32, 98, 111, 116, 116, 108, 101, 32, 104, 101, 114, 101, 46, 10, 50, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 98, 111, 116, 116, 108, 101, 32, 111, 102, 32, 111, 105, 108, 32, 104, 101, 114, 101, 46, 10, 50, 49, 9, 87, 97, 116, 101, 114, 32, 105, 110, 32, 116, 104, 101, 32, 98, 111, 116, 116, 108, 101, 10, 50, 50, 9, 79, 105, 108, 32, 105, 110, 32, 116, 104, 101, 32, 98, 111, 116, 116, 108, 101, 10, 50, 51, 9, 42, 109, 105, 114, 114, 111, 114, 10, 48, 48, 48, 9, 37, 33, 10, 50, 52, 9, 42, 112, 108, 97, 110, 116, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 116, 105, 110, 121, 32, 108, 105, 116, 116, 108, 101, 32, 112, 108, 97, 110, 116, 32, 105, 110, 32, 116, 104, 101, 32, 112, 105, 116, 44, 32, 109, 117, 114, 109, 117, 114, 105, 110, 103, 32, 34, 119, 97, 116, 101, 114, 44, 32, 119, 97, 116, 101, 114, 44, 32, 46, 46, 46, 34, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 49, 50, 45, 102, 111, 111, 116, 45, 116, 97, 108, 108, 32, 98, 101, 97, 110, 115, 116, 97, 108, 107, 32, 115, 116, 114, 101, 116, 99, 104, 105, 110, 103, 32, 117, 112, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 112, 105, 116, 44, 10, 49, 48, 48, 9, 98, 101, 108, 108, 111, 119, 105, 110, 103, 32, 34, 87, 65, 84, 69, 82, 33, 33, 32, 87, 65, 84, 69, 82, 33, 33, 34, 10, 50, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 103, 105, 103, 97, 110, 116, 105, 99, 32, 98, 101, 97, 110, 115, 116, 97, 108, 107, 32, 115, 116, 114, 101, 116, 99, 104, 105, 110, 103, 32, 97, 108, 108, 32, 116, 104, 101, 32, 119, 97, 121, 32, 117, 112, 32, 116, 111, 32, 116, 104, 101, 32, 104, 111, 108, 101, 46, 10, 51, 48, 48, 9, 84, 104, 101, 32, 112, 108, 97, 110, 116, 32, 115, 112, 117, 114, 116, 115, 32, 105, 110, 116, 111, 32, 102, 117, 114, 105, 111, 117, 115, 32, 103, 114, 111, 119, 116, 104, 32, 102, 111, 114, 32, 97, 32, 102, 101, 119, 32, 115, 101, 99, 111, 110, 100, 115, 46, 10, 52, 48, 48, 9, 84, 104, 101, 32, 112, 108, 97, 110, 116, 32, 103, 114, 111, 119, 115, 32, 101, 120, 112, 108, 111, 115, 105, 118, 101, 108, 121, 44, 32, 97, 108, 109, 111, 115, 116, 32, 102, 105, 108, 108, 105, 110, 103, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 32, 111, 102, 32, 116, 104, 101, 32, 112, 105, 116, 46, 10, 53, 48, 48, 9, 89, 111, 117, 39, 118, 101, 32, 111, 118, 101, 114, 45, 119, 97, 116, 101, 114, 101, 100, 32, 116, 104, 101, 32, 112, 108, 97, 110, 116, 33, 32, 32, 73, 116, 39, 115, 32, 115, 104, 114, 105, 118, 101, 108, 105, 110, 103, 32, 117, 112, 33, 32, 32, 65, 110, 100, 32, 110, 111, 119, 32, 46, 32, 46, 32, 46, 10, 54, 48, 48, 9, 84, 104, 101, 32, 112, 108, 97, 110, 116, 32, 99, 111, 110, 116, 105, 110, 117, 101, 115, 32, 116, 111, 32, 97, 115, 107, 32, 112, 108, 97, 105, 110, 116, 105, 118, 101, 108, 121, 32, 102, 111, 114, 32, 119, 97, 116, 101, 114, 46, 10, 55, 48, 48, 9, 84, 104, 101, 32, 112, 108, 97, 110, 116, 32, 99, 111, 110, 116, 105, 110, 117, 101, 115, 32, 116, 111, 32, 100, 101, 109, 97, 110, 100, 32, 119, 97, 116, 101, 114, 46, 10, 56, 48, 48, 9, 84, 104, 101, 32, 112, 108, 97, 110, 116, 32, 110, 111, 119, 32, 109, 97, 105, 110, 116, 97, 105, 110, 115, 32, 97, 32, 99, 111, 110, 116, 101, 110, 116, 101, 100, 32, 115, 105, 108, 101, 110, 99, 101, 46, 10, 50, 53, 9, 42, 112, 104, 111, 110, 121, 32, 112, 108, 97, 110, 116, 32, 40, 115, 101, 101, 110, 32, 105, 110, 32, 84, 119, 111, 112, 105, 116, 32, 82, 111, 111, 109, 32, 111, 110, 108, 121, 32, 119, 104, 101, 110, 32, 116, 97, 108, 108, 32, 101, 110, 111, 117, 103, 104, 41, 10, 48, 48, 48, 9, 37, 33, 10, 49, 48, 48, 9, 84, 104, 101, 32, 116, 111, 112, 32, 111, 102, 32, 97, 32, 49, 50, 45, 102, 111, 111, 116, 45, 116, 97, 108, 108, 32, 98, 101, 97, 110, 115, 116, 97, 108, 107, 32, 105, 115, 32, 112, 111, 107, 105, 110, 103, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 112, 105, 116, 46, 10, 50, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 104, 117, 103, 101, 32, 98, 101, 97, 110, 115, 116, 97, 108, 107, 32, 103, 114, 111, 119, 105, 110, 103, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 119, 101, 115, 116, 32, 112, 105, 116, 32, 117, 112, 32, 116, 111, 32, 116, 104, 101, 32, 104, 111, 108, 101, 46, 10, 50, 54, 9, 42, 115, 116, 97, 108, 97, 99, 116, 105, 116, 101, 10, 48, 48, 48, 9, 37, 33, 10, 50, 55, 9, 42, 115, 104, 97, 100, 111, 119, 121, 32, 102, 105, 103, 117, 114, 101, 32, 97, 110, 100, 47, 111, 114, 32, 119, 105, 110, 100, 111, 119, 10, 48, 48, 48, 9, 84, 104, 101, 32, 115, 104, 97, 100, 111, 119, 121, 32, 102, 105, 103, 117, 114, 101, 32, 115, 101, 101, 109, 115, 32, 116, 111, 32, 98, 101, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 97, 116, 116, 114, 97, 99, 116, 32, 121, 111, 117, 114, 32, 97, 116, 116, 101, 110, 116, 105, 111, 110, 46, 10, 50, 56, 9, 68, 119, 97, 114, 102, 39, 115, 32, 97, 120, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 97, 120, 101, 32, 104, 101, 114, 101, 46, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 97, 120, 101, 32, 108, 121, 105, 110, 103, 32, 98, 101, 115, 105, 100, 101, 32, 116, 104, 101, 32, 98, 101, 97, 114, 46, 10, 50, 57, 9, 42, 99, 97, 118, 101, 32, 100, 114, 97, 119, 105, 110, 103, 115, 10, 48, 48, 48, 9, 37, 33, 10, 51, 48, 9, 42, 112, 105, 114, 97, 116, 101, 47, 103, 101, 110, 105, 101, 10, 48, 48, 48, 9, 37, 33, 32, 32, 40, 110, 101, 118, 101, 114, 32, 112, 114, 101, 115, 101, 110, 116, 41, 10, 51, 49, 9, 42, 100, 114, 97, 103, 111, 110, 10, 48, 48, 48, 9, 65, 32, 104, 117, 103, 101, 32, 103, 114, 101, 101, 110, 32, 102, 105, 101, 114, 99, 101, 32, 100, 114, 97, 103, 111, 110, 32, 98, 97, 114, 115, 32, 116, 104, 101, 32, 119, 97, 121, 33, 10, 49, 48, 48, 9, 84, 104, 101, 32, 98, 108, 111, 111, 100, 45, 115, 112, 101, 99, 107, 101, 100, 32, 98, 111, 100, 121, 32, 111, 102, 32, 97, 32, 104, 117, 103, 101, 32, 103, 114, 101, 101, 110, 32, 100, 101, 97, 100, 32, 100, 114, 97, 103, 111, 110, 32, 108, 105, 101, 115, 32, 116, 111, 32, 111, 110, 101, 32, 115, 105, 100, 101, 46, 10, 50, 48, 48, 9, 84, 104, 101, 32, 98, 111, 100, 121, 32, 111, 102, 32, 97, 32, 104, 117, 103, 101, 32, 103, 114, 101, 101, 110, 32, 100, 101, 97, 100, 32, 100, 114, 97, 103, 111, 110, 32, 105, 115, 32, 108, 121, 105, 110, 103, 32, 111, 102, 102, 32, 116, 111, 32, 111, 110, 101, 32, 115, 105, 100, 101, 46, 10, 51, 48, 48, 9, 67, 111, 110, 103, 114, 97, 116, 117, 108, 97, 116, 105, 111, 110, 115, 33, 32, 32, 89, 111, 117, 32, 104, 97, 118, 101, 32, 106, 117, 115, 116, 32, 118, 97, 110, 113, 117, 105, 115, 104, 101, 100, 32, 97, 32, 100, 114, 97, 103, 111, 110, 32, 119, 105, 116, 104, 32, 121, 111, 117, 114, 32, 98, 97, 114, 101, 10, 51, 48, 48, 9, 104, 97, 110, 100, 115, 33, 32, 32, 40, 85, 110, 98, 101, 108, 105, 101, 118, 97, 98, 108, 101, 44, 32, 105, 115, 110, 39, 116, 32, 105, 116, 63, 41, 10, 52, 48, 48, 9, 84, 104, 101, 32, 100, 114, 97, 103, 111, 110, 39, 115, 32, 111, 109, 105, 110, 111, 117, 115, 32, 104, 105, 115, 115, 105, 110, 103, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 98, 111, 100, 101, 32, 119, 101, 108, 108, 32, 102, 111, 114, 32, 121, 111, 117, 46, 10, 53, 48, 48, 9, 84, 104, 101, 32, 100, 114, 97, 103, 111, 110, 32, 105, 115, 44, 32, 110, 111, 116, 32, 115, 117, 114, 112, 114, 105, 115, 105, 110, 103, 108, 121, 44, 32, 115, 105, 108, 101, 110, 116, 46, 10, 54, 48, 48, 9, 84, 104, 101, 32, 100, 114, 97, 103, 111, 110, 32, 105, 115, 44, 32, 110, 111, 116, 32, 115, 117, 114, 112, 114, 105, 115, 105, 110, 103, 108, 121, 44, 32, 115, 105, 108, 101, 110, 116, 46, 10, 51, 50, 9, 42, 99, 104, 97, 115, 109, 10, 48, 48, 48, 9, 65, 32, 114, 105, 99, 107, 101, 116, 121, 32, 119, 111, 111, 100, 101, 110, 32, 98, 114, 105, 100, 103, 101, 32, 101, 120, 116, 101, 110, 100, 115, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 44, 32, 118, 97, 110, 105, 115, 104, 105, 110, 103, 32, 105, 110, 116, 111, 32, 116, 104, 101, 10, 48, 48, 48, 9, 109, 105, 115, 116, 46, 32, 32, 65, 32, 110, 111, 116, 105, 99, 101, 32, 112, 111, 115, 116, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 98, 114, 105, 100, 103, 101, 32, 114, 101, 97, 100, 115, 44, 32, 34, 83, 116, 111, 112, 33, 32, 80, 97, 121, 32, 116, 114, 111, 108, 108, 33, 34, 10, 49, 48, 48, 9, 84, 104, 101, 32, 119, 114, 101, 99, 107, 97, 103, 101, 32, 111, 102, 32, 97, 32, 98, 114, 105, 100, 103, 101, 32, 40, 97, 110, 100, 32, 97, 32, 100, 101, 97, 100, 32, 98, 101, 97, 114, 41, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 101, 110, 32, 97, 116, 32, 116, 104, 101, 32, 98, 111, 116, 116, 111, 109, 10, 49, 48, 48, 9, 111, 102, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 46, 10, 51, 51, 9, 42, 116, 114, 111, 108, 108, 10, 48, 48, 48, 9, 65, 32, 98, 117, 114, 108, 121, 32, 116, 114, 111, 108, 108, 32, 115, 116, 97, 110, 100, 115, 32, 98, 121, 32, 116, 104, 101, 32, 98, 114, 105, 100, 103, 101, 32, 97, 110, 100, 32, 105, 110, 115, 105, 115, 116, 115, 32, 121, 111, 117, 32, 116, 104, 114, 111, 119, 32, 104, 105, 109, 32, 97, 10, 48, 48, 48, 9, 116, 114, 101, 97, 115, 117, 114, 101, 32, 98, 101, 102, 111, 114, 101, 32, 121, 111, 117, 32, 109, 97, 121, 32, 99, 114, 111, 115, 115, 46, 10, 49, 48, 48, 9, 84, 104, 101, 32, 116, 114, 111, 108, 108, 32, 115, 116, 101, 112, 115, 32, 111, 117, 116, 32, 102, 114, 111, 109, 32, 98, 101, 110, 101, 97, 116, 104, 32, 116, 104, 101, 32, 98, 114, 105, 100, 103, 101, 32, 97, 110, 100, 32, 98, 108, 111, 99, 107, 115, 32, 121, 111, 117, 114, 32, 119, 97, 121, 46, 10, 50, 48, 48, 9, 37, 33, 32, 32, 40, 99, 104, 97, 115, 101, 100, 32, 97, 119, 97, 121, 41, 10, 51, 48, 48, 9, 84, 104, 101, 32, 116, 114, 111, 108, 108, 32, 115, 111, 117, 110, 100, 115, 32, 113, 117, 105, 116, 101, 32, 97, 100, 97, 109, 97, 110, 116, 32, 105, 110, 32, 104, 105, 115, 32, 100, 101, 109, 97, 110, 100, 32, 102, 111, 114, 32, 97, 32, 116, 114, 101, 97, 115, 117, 114, 101, 46, 10, 51, 52, 9, 42, 112, 104, 111, 110, 121, 32, 116, 114, 111, 108, 108, 10, 48, 48, 48, 9, 84, 104, 101, 32, 116, 114, 111, 108, 108, 32, 105, 115, 32, 110, 111, 119, 104, 101, 114, 101, 32, 116, 111, 32, 98, 101, 32, 115, 101, 101, 110, 46, 10, 51, 53, 9, 37, 33, 32, 32, 40, 98, 101, 97, 114, 32, 117, 115, 101, 115, 32, 114, 116, 101, 120, 116, 32, 49, 52, 49, 41, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 102, 101, 114, 111, 99, 105, 111, 117, 115, 32, 99, 97, 118, 101, 32, 98, 101, 97, 114, 32, 101, 121, 105, 110, 103, 32, 121, 111, 117, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 102, 97, 114, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 114, 111, 111, 109, 33, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 103, 101, 110, 116, 108, 101, 32, 99, 97, 118, 101, 32, 98, 101, 97, 114, 32, 115, 105, 116, 116, 105, 110, 103, 32, 112, 108, 97, 99, 105, 100, 108, 121, 32, 105, 110, 32, 111, 110, 101, 32, 99, 111, 114, 110, 101, 114, 46, 10, 50, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 99, 111, 110, 116, 101, 110, 116, 101, 100, 45, 108, 111, 111, 107, 105, 110, 103, 32, 98, 101, 97, 114, 32, 119, 97, 110, 100, 101, 114, 105, 110, 103, 32, 97, 98, 111, 117, 116, 32, 110, 101, 97, 114, 98, 121, 46, 10, 51, 48, 48, 9, 37, 33, 32, 32, 40, 100, 101, 97, 100, 41, 10, 51, 54, 9, 42, 109, 101, 115, 115, 97, 103, 101, 32, 105, 110, 32, 115, 101, 99, 111, 110, 100, 32, 109, 97, 122, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 109, 101, 115, 115, 97, 103, 101, 32, 115, 99, 114, 97, 119, 108, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 100, 117, 115, 116, 32, 105, 110, 32, 97, 32, 102, 108, 111, 119, 101, 114, 121, 32, 115, 99, 114, 105, 112, 116, 44, 32, 114, 101, 97, 100, 105, 110, 103, 58, 10, 48, 48, 48, 9, 34, 84, 104, 105, 115, 32, 105, 115, 32, 110, 111, 116, 32, 116, 104, 101, 32, 109, 97, 122, 101, 32, 119, 104, 101, 114, 101, 32, 116, 104, 101, 32, 112, 105, 114, 97, 116, 101, 32, 108, 101, 97, 118, 101, 115, 32, 104, 105, 115, 32, 116, 114, 101, 97, 115, 117, 114, 101, 32, 99, 104, 101, 115, 116, 46, 34, 10, 49, 48, 48, 9, 34, 84, 104, 105, 115, 32, 105, 115, 32, 110, 111, 116, 32, 116, 104, 101, 32, 109, 97, 122, 101, 32, 119, 104, 101, 114, 101, 32, 116, 104, 101, 32, 112, 105, 114, 97, 116, 101, 32, 108, 101, 97, 118, 101, 115, 32, 104, 105, 115, 32, 116, 114, 101, 97, 115, 117, 114, 101, 32, 99, 104, 101, 115, 116, 46, 34, 10, 51, 55, 9, 42, 118, 111, 108, 99, 97, 110, 111, 32, 97, 110, 100, 47, 111, 114, 32, 103, 101, 121, 115, 101, 114, 10, 48, 48, 48, 9, 37, 33, 10, 51, 56, 9, 42, 118, 101, 110, 100, 105, 110, 103, 32, 109, 97, 99, 104, 105, 110, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 109, 97, 115, 115, 105, 118, 101, 32, 97, 110, 100, 32, 115, 111, 109, 101, 119, 104, 97, 116, 32, 98, 97, 116, 116, 101, 114, 101, 100, 32, 118, 101, 110, 100, 105, 110, 103, 32, 109, 97, 99, 104, 105, 110, 101, 32, 104, 101, 114, 101, 46, 32, 32, 84, 104, 101, 10, 48, 48, 48, 9, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 115, 32, 111, 110, 32, 105, 116, 32, 114, 101, 97, 100, 58, 32, 34, 68, 114, 111, 112, 32, 99, 111, 105, 110, 115, 32, 104, 101, 114, 101, 32, 116, 111, 32, 114, 101, 99, 101, 105, 118, 101, 32, 102, 114, 101, 115, 104, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 46, 34, 10, 49, 48, 48, 9, 34, 68, 114, 111, 112, 32, 99, 111, 105, 110, 115, 32, 104, 101, 114, 101, 32, 116, 111, 32, 114, 101, 99, 101, 105, 118, 101, 32, 102, 114, 101, 115, 104, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 46, 34, 10, 50, 48, 48, 9, 65, 115, 32, 121, 111, 117, 32, 115, 116, 114, 105, 107, 101, 32, 116, 104, 101, 32, 118, 101, 110, 100, 105, 110, 103, 32, 109, 97, 99, 104, 105, 110, 101, 44, 32, 105, 116, 32, 112, 105, 118, 111, 116, 115, 32, 98, 97, 99, 107, 119, 97, 114, 100, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 97, 10, 50, 48, 48, 9, 115, 101, 99, 116, 105, 111, 110, 32, 111, 102, 32, 119, 97, 108, 108, 44, 32, 114, 101, 118, 101, 97, 108, 105, 110, 103, 32, 97, 32, 100, 97, 114, 107, 32, 112, 97, 115, 115, 97, 103, 101, 32, 108, 101, 97, 100, 105, 110, 103, 32, 115, 111, 117, 116, 104, 46, 10, 51, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 109, 97, 115, 115, 105, 118, 101, 32, 118, 101, 110, 100, 105, 110, 103, 32, 109, 97, 99, 104, 105, 110, 101, 32, 104, 101, 114, 101, 44, 32, 115, 119, 117, 110, 103, 32, 98, 97, 99, 107, 32, 116, 111, 32, 114, 101, 118, 101, 97, 108, 32, 97, 10, 51, 48, 48, 9, 115, 111, 117, 116, 104, 119, 97, 114, 100, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 52, 48, 48, 9, 34, 68, 114, 111, 112, 32, 99, 111, 105, 110, 115, 32, 104, 101, 114, 101, 32, 116, 111, 32, 114, 101, 99, 101, 105, 118, 101, 32, 102, 114, 101, 115, 104, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 46, 34, 10, 53, 48, 48, 9, 84, 104, 101, 32, 118, 101, 110, 100, 105, 110, 103, 32, 109, 97, 99, 104, 105, 110, 101, 32, 115, 119, 105, 110, 103, 115, 32, 98, 97, 99, 107, 32, 116, 111, 32, 98, 108, 111, 99, 107, 32, 116, 104, 101, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 51, 57, 9, 66, 97, 116, 116, 101, 114, 105, 101, 115, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 102, 114, 101, 115, 104, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 32, 104, 101, 114, 101, 46, 10, 49, 48, 48, 9, 83, 111, 109, 101, 32, 119, 111, 114, 110, 45, 111, 117, 116, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 32, 104, 97, 118, 101, 32, 98, 101, 101, 110, 32, 100, 105, 115, 99, 97, 114, 100, 101, 100, 32, 110, 101, 97, 114, 98, 121, 46, 10, 52, 48, 9, 42, 99, 97, 114, 112, 101, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 115, 115, 32, 97, 110, 100, 47, 111, 114, 32, 99, 117, 114, 116, 97, 105, 110, 115, 10, 48, 48, 48, 9, 37, 33, 10, 52, 49, 9, 42, 111, 103, 114, 101, 10, 48, 48, 48, 9, 65, 32, 102, 111, 114, 109, 105, 100, 97, 98, 108, 101, 32, 111, 103, 114, 101, 32, 98, 97, 114, 115, 32, 116, 104, 101, 32, 110, 111, 114, 116, 104, 101, 114, 110, 32, 101, 120, 105, 116, 46, 10, 49, 48, 48, 9, 84, 104, 101, 32, 111, 103, 114, 101, 32, 105, 115, 32, 97, 112, 112, 97, 114, 101, 110, 116, 108, 121, 32, 116, 104, 101, 32, 115, 116, 114, 111, 110, 103, 44, 32, 115, 105, 108, 101, 110, 116, 32, 116, 121, 112, 101, 46, 10, 52, 50, 9, 42, 117, 114, 110, 10, 48, 48, 48, 9, 65, 32, 115, 109, 97, 108, 108, 32, 117, 114, 110, 32, 105, 115, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 46, 10, 49, 48, 48, 9, 65, 32, 115, 109, 97, 108, 108, 32, 117, 114, 110, 32, 102, 117, 108, 108, 32, 111, 102, 32, 111, 105, 108, 32, 105, 115, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 46, 10, 50, 48, 48, 9, 65, 32, 115, 109, 97, 108, 108, 32, 111, 105, 108, 32, 102, 108, 97, 109, 101, 32, 101, 120, 116, 114, 117, 100, 101, 115, 32, 102, 114, 111, 109, 32, 97, 110, 32, 117, 114, 110, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 46, 10, 52, 51, 9, 42, 99, 97, 118, 105, 116, 121, 10, 48, 48, 48, 9, 37, 33, 32, 32, 40, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 105, 110, 32, 105, 116, 41, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 115, 109, 97, 108, 108, 32, 117, 114, 110, 45, 115, 104, 97, 112, 101, 100, 32, 99, 97, 118, 105, 116, 121, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 46, 10, 52, 52, 9, 42, 98, 108, 111, 111, 100, 10, 48, 48, 48, 9, 37, 33, 32, 32, 40, 100, 101, 115, 99, 114, 105, 98, 101, 100, 32, 119, 105, 116, 104, 32, 100, 114, 97, 103, 111, 110, 41, 10, 52, 53, 9, 42, 114, 101, 115, 101, 114, 118, 111, 105, 114, 10, 48, 48, 48, 9, 37, 33, 10, 49, 48, 48, 9, 84, 104, 101, 32, 119, 97, 116, 101, 114, 115, 32, 104, 97, 118, 101, 32, 112, 97, 114, 116, 101, 100, 32, 116, 111, 32, 102, 111, 114, 109, 32, 97, 32, 110, 97, 114, 114, 111, 119, 32, 112, 97, 116, 104, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 114, 101, 115, 101, 114, 118, 111, 105, 114, 46, 10, 50, 48, 48, 9, 84, 104, 101, 32, 119, 97, 116, 101, 114, 115, 32, 99, 114, 97, 115, 104, 32, 116, 111, 103, 101, 116, 104, 101, 114, 32, 97, 103, 97, 105, 110, 46, 10, 52, 54, 9, 76, 101, 112, 111, 114, 105, 110, 101, 32, 97, 112, 112, 101, 110, 100, 97, 103, 101, 10, 48, 48, 48, 9, 89, 111, 117, 114, 32, 107, 101, 101, 110, 32, 101, 121, 101, 32, 115, 112, 111, 116, 115, 32, 97, 32, 115, 101, 118, 101, 114, 101, 100, 32, 108, 101, 112, 111, 114, 105, 110, 101, 32, 97, 112, 112, 101, 110, 100, 97, 103, 101, 32, 108, 121, 105, 110, 103, 32, 111, 110, 32, 116, 104, 101, 32, 103, 114, 111, 117, 110, 100, 46, 10, 52, 55, 9, 42, 109, 117, 100, 10, 48, 48, 48, 9, 37, 33, 10, 49, 48, 48, 9, 34, 77, 65, 71, 73, 67, 32, 87, 79, 82, 68, 32, 88, 89, 90, 90, 89, 34, 10, 52, 56, 9, 42, 110, 111, 116, 101, 10, 48, 48, 48, 9, 37, 33, 10, 49, 48, 48, 9, 34, 89, 111]);
            fileData0.push.apply(fileData0, [117, 32, 119, 111, 110, 39, 116, 32, 103, 101, 116, 32, 105, 116, 32, 117, 112, 32, 116, 104, 101, 32, 115, 116, 101, 112, 115, 34, 10, 52, 57, 9, 42, 115, 105, 103, 110, 10, 48, 48, 48, 9, 37, 33, 10, 49, 48, 48, 9, 67, 97, 118, 101, 32, 117, 110, 100, 101, 114, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 98, 101, 121, 111, 110, 100, 32, 116, 104, 105, 115, 32, 112, 111, 105, 110, 116, 46, 10, 49, 48, 48, 9, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 80, 114, 111, 99, 101, 101, 100, 32, 97, 116, 32, 111, 119, 110, 32, 114, 105, 115, 107, 46, 10, 49, 48, 48, 9, 32, 32, 32, 32, 32, 32, 32, 91, 87, 105, 116, 116, 32, 67, 111, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 67, 111, 109, 112, 97, 110, 121, 93, 10, 50, 48, 48, 9, 34, 84, 114, 101, 97, 115, 117, 114, 101, 32, 86, 97, 117, 108, 116, 46, 32, 32, 75, 101, 121, 115, 32, 105, 110, 32, 109, 97, 105, 110, 32, 111, 102, 102, 105, 99, 101, 46, 34, 10, 53, 48, 9, 76, 97, 114, 103, 101, 32, 103, 111, 108, 100, 32, 110, 117, 103, 103, 101, 116, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 97, 114, 103, 101, 32, 115, 112, 97, 114, 107, 108, 105, 110, 103, 32, 110, 117, 103, 103, 101, 116, 32, 111, 102, 32, 103, 111, 108, 100, 32, 104, 101, 114, 101, 33, 10, 53, 49, 9, 83, 101, 118, 101, 114, 97, 108, 32, 100, 105, 97, 109, 111, 110, 100, 115, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 100, 105, 97, 109, 111, 110, 100, 115, 32, 104, 101, 114, 101, 33, 10, 53, 50, 9, 66, 97, 114, 115, 32, 111, 102, 32, 115, 105, 108, 118, 101, 114, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 98, 97, 114, 115, 32, 111, 102, 32, 115, 105, 108, 118, 101, 114, 32, 104, 101, 114, 101, 33, 10, 53, 51, 9, 80, 114, 101, 99, 105, 111, 117, 115, 32, 106, 101, 119, 101, 108, 114, 121, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 112, 114, 101, 99, 105, 111, 117, 115, 32, 106, 101, 119, 101, 108, 114, 121, 32, 104, 101, 114, 101, 33, 10, 53, 52, 9, 82, 97, 114, 101, 32, 99, 111, 105, 110, 115, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 109, 97, 110, 121, 32, 99, 111, 105, 110, 115, 32, 104, 101, 114, 101, 33, 10, 53, 53, 9, 84, 114, 101, 97, 115, 117, 114, 101, 32, 99, 104, 101, 115, 116, 10, 48, 48, 48, 9, 84, 104, 101, 32, 112, 105, 114, 97, 116, 101, 39, 115, 32, 116, 114, 101, 97, 115, 117, 114, 101, 32, 99, 104, 101, 115, 116, 32, 105, 115, 32, 104, 101, 114, 101, 33, 10, 53, 54, 9, 71, 111, 108, 100, 101, 110, 32, 101, 103, 103, 115, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 97, 114, 103, 101, 32, 110, 101, 115, 116, 32, 104, 101, 114, 101, 44, 32, 102, 117, 108, 108, 32, 111, 102, 32, 103, 111, 108, 100, 101, 110, 32, 101, 103, 103, 115, 33, 10, 49, 48, 48, 9, 84, 104, 101, 32, 110, 101, 115, 116, 32, 111, 102, 32, 103, 111, 108, 100, 101, 110, 32, 101, 103, 103, 115, 32, 104, 97, 115, 32, 118, 97, 110, 105, 115, 104, 101, 100, 33, 10, 50, 48, 48, 9, 68, 111, 110, 101, 33, 10, 53, 55, 9, 74, 101, 119, 101, 108, 101, 100, 32, 116, 114, 105, 100, 101, 110, 116, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 106, 101, 119, 101, 108, 45, 101, 110, 99, 114, 117, 115, 116, 101, 100, 32, 116, 114, 105, 100, 101, 110, 116, 32, 104, 101, 114, 101, 33, 10, 53, 56, 9, 77, 105, 110, 103, 32, 118, 97, 115, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 100, 101, 108, 105, 99, 97, 116, 101, 44, 32, 112, 114, 101, 99, 105, 111, 117, 115, 44, 32, 109, 105, 110, 103, 32, 118, 97, 115, 101, 32, 104, 101, 114, 101, 33, 10, 49, 48, 48, 9, 84, 104, 101, 32, 118, 97, 115, 101, 32, 105, 115, 32, 110, 111, 119, 32, 114, 101, 115, 116, 105, 110, 103, 44, 32, 100, 101, 108, 105, 99, 97, 116, 101, 108, 121, 44, 32, 111, 110, 32, 97, 32, 118, 101, 108, 118, 101, 116, 32, 112, 105, 108, 108, 111, 119, 46, 10, 50, 48, 48, 9, 84, 104, 101, 32, 102, 108, 111, 111, 114, 32, 105, 115, 32, 108, 105, 116, 116, 101, 114, 101, 100, 32, 119, 105, 116, 104, 32, 119, 111, 114, 116, 104, 108, 101, 115, 115, 32, 115, 104, 97, 114, 100, 115, 32, 111, 102, 32, 112, 111, 116, 116, 101, 114, 121, 46, 10, 51, 48, 48, 9, 84, 104, 101, 32, 109, 105, 110, 103, 32, 118, 97, 115, 101, 32, 100, 114, 111, 112, 115, 32, 119, 105, 116, 104, 32, 97, 32, 100, 101, 108, 105, 99, 97, 116, 101, 32, 99, 114, 97, 115, 104, 46, 10, 53, 57, 9, 69, 103, 103, 45, 115, 105, 122, 101, 100, 32, 101, 109, 101, 114, 97, 108, 100, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 110, 32, 101, 109, 101, 114, 97, 108, 100, 32, 104, 101, 114, 101, 32, 116, 104, 101, 32, 115, 105, 122, 101, 32, 111, 102, 32, 97, 32, 112, 108, 111, 118, 101, 114, 39, 115, 32, 101, 103, 103, 33, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 110, 32, 101, 109, 101, 114, 97, 108, 100, 32, 114, 101, 115, 116, 105, 110, 103, 32, 105, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 97, 118, 105, 116, 121, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 33, 10, 54, 48, 9, 80, 108, 97, 116, 105, 110, 117, 109, 32, 112, 121, 114, 97, 109, 105, 100, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 112, 108, 97, 116, 105, 110, 117, 109, 32, 112, 121, 114, 97, 109, 105, 100, 32, 104, 101, 114, 101, 44, 32, 56, 32, 105, 110, 99, 104, 101, 115, 32, 111, 110, 32, 97, 32, 115, 105, 100, 101, 33, 10, 54, 49, 9, 71, 108, 105, 115, 116, 101, 110, 105, 110, 103, 32, 112, 101, 97, 114, 108, 10, 48, 48, 48, 9, 79, 102, 102, 32, 116, 111, 32, 111, 110, 101, 32, 115, 105, 100, 101, 32, 108, 105, 101, 115, 32, 97, 32, 103, 108, 105, 115, 116, 101, 110, 105, 110, 103, 32, 112, 101, 97, 114, 108, 33, 10, 54, 50, 9, 80, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 32, 115, 112, 114, 101, 97, 100, 32, 111, 117, 116, 32, 111, 110, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 33, 10, 49, 48, 48, 9, 84, 104, 101, 32, 100, 114, 97, 103, 111, 110, 32, 105, 115, 32, 115, 112, 114, 97, 119, 108, 101, 100, 32, 111, 117, 116, 32, 111, 110, 32, 97, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 33, 33, 10, 50, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 32, 104, 101, 114, 101, 44, 32, 104, 111, 118, 101, 114, 105, 110, 103, 32, 105, 110, 32, 109, 105, 100, 45, 97, 105, 114, 33, 10, 54, 51, 9, 82, 97, 114, 101, 32, 115, 112, 105, 99, 101, 115, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 114, 97, 114, 101, 32, 115, 112, 105, 99, 101, 115, 32, 104, 101, 114, 101, 33, 10, 54, 52, 9, 71, 111, 108, 100, 101, 110, 32, 99, 104, 97, 105, 110, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 103, 111, 108, 100, 101, 110, 32, 99, 104, 97, 105, 110, 32, 108, 121, 105, 110, 103, 32, 105, 110, 32, 97, 32, 104, 101, 97, 112, 32, 111, 110, 32, 116, 104, 101, 32, 102, 108, 111, 111, 114, 33, 10, 49, 48, 48, 9, 84, 104, 101, 32, 98, 101, 97, 114, 32, 105, 115, 32, 108, 111, 99, 107, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 119, 97, 108, 108, 32, 119, 105, 116, 104, 32, 97, 32, 103, 111, 108, 100, 101, 110, 32, 99, 104, 97, 105, 110, 33, 10, 50, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 103, 111, 108, 100, 101, 110, 32, 99, 104, 97, 105, 110, 32, 108, 111, 99, 107, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 119, 97, 108, 108, 33, 10, 54, 53, 9, 71, 105, 97, 110, 116, 32, 114, 117, 98, 121, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 110, 32, 101, 110, 111, 114, 109, 111, 117, 115, 32, 114, 117, 98, 121, 32, 104, 101, 114, 101, 33, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 114, 117, 98, 121, 32, 114, 101, 115, 116, 105, 110, 103, 32, 105, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 97, 118, 105, 116, 121, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 33, 10, 54, 54, 9, 74, 97, 100, 101, 32, 110, 101, 99, 107, 108, 97, 99, 101, 10, 48, 48, 48, 9, 65, 32, 112, 114, 101, 99, 105, 111, 117, 115, 32, 106, 97, 100, 101, 32, 110, 101, 99, 107, 108, 97, 99, 101, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 100, 114, 111, 112, 112, 101, 100, 32, 104, 101, 114, 101, 33, 10, 54, 55, 9, 65, 109, 98, 101, 114, 32, 103, 101, 109, 115, 116, 111, 110, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 114, 97, 114, 101, 32, 97, 109, 98, 101, 114, 32, 103, 101, 109, 115, 116, 111, 110, 101, 32, 104, 101, 114, 101, 33, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 110, 32, 97, 109, 98, 101, 114, 32, 103, 101, 109, 115, 116, 111, 110, 101, 32, 114, 101, 115, 116, 105, 110, 103, 32, 105, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 97, 118, 105, 116, 121, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 33, 10, 54, 56, 9, 83, 116, 97, 114, 32, 115, 97, 112, 112, 104, 105, 114, 101, 10, 48, 48, 48, 9, 65, 32, 98, 114, 105, 108, 108, 105, 97, 110, 116, 32, 98, 108, 117, 101, 32, 115, 116, 97, 114, 32, 115, 97, 112, 112, 104, 105, 114, 101, 32, 105, 115, 32, 104, 101, 114, 101, 33, 10, 49, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 115, 116, 97, 114, 32, 115, 97, 112, 112, 104, 105, 114, 101, 32, 114, 101, 115, 116, 105, 110, 103, 32, 105, 110, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 97, 118, 105, 116, 121, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 33, 10, 54, 57, 9, 69, 98, 111, 110, 121, 32, 115, 116, 97, 116, 117, 101, 116, 116, 101, 10, 48, 48, 48, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 114, 105, 99, 104, 108, 121, 45, 99, 97, 114, 118, 101, 100, 32, 101, 98, 111, 110, 121, 32, 115, 116, 97, 116, 117, 101, 116, 116, 101, 32, 104, 101, 114, 101, 33, 10, 45, 49, 10, 54, 10, 49, 9, 83, 111, 109, 101, 119, 104, 101, 114, 101, 32, 110, 101, 97, 114, 98, 121, 32, 105, 115, 32, 67, 111, 108, 111, 115, 115, 97, 108, 32, 67, 97, 118, 101, 44, 32, 119, 104, 101, 114, 101, 32, 111, 116, 104, 101, 114, 115, 32, 104, 97, 118, 101, 32, 102, 111, 117, 110, 100, 32, 102, 111, 114, 116, 117, 110, 101, 115, 32, 105, 110, 10, 49, 9, 116, 114, 101, 97, 115, 117, 114, 101, 32, 97, 110, 100, 32, 103, 111, 108, 100, 44, 32, 116, 104, 111, 117, 103, 104, 32, 105, 116, 32, 105, 115, 32, 114, 117, 109, 111, 114, 101, 100, 32, 116, 104, 97, 116, 32, 115, 111, 109, 101, 32, 119, 104, 111, 32, 101, 110, 116, 101, 114, 32, 97, 114, 101, 32, 110, 101, 118, 101, 114, 10, 49, 9, 115, 101, 101, 110, 32, 97, 103, 97, 105, 110, 46, 32, 32, 77, 97, 103, 105, 99, 32, 105, 115, 32, 115, 97, 105, 100, 32, 116, 111, 32, 119, 111, 114, 107, 32, 105, 110, 32, 116, 104, 101, 32, 99, 97, 118, 101, 46, 32, 32, 73, 32, 119, 105, 108, 108, 32, 98, 101, 32, 121, 111, 117, 114, 32, 101, 121, 101, 115, 10, 49, 9, 97, 110, 100, 32, 104, 97, 110, 100, 115, 46, 32, 32, 68, 105, 114, 101, 99, 116, 32, 109, 101, 32, 119, 105, 116, 104, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 111, 102, 32, 49, 32, 111, 114, 32, 50, 32, 119, 111, 114, 100, 115, 46, 32, 32, 73, 32, 115, 104, 111, 117, 108, 100, 32, 119, 97, 114, 110, 10, 49, 9, 121, 111, 117, 32, 116, 104, 97, 116, 32, 73, 32, 108, 111, 111, 107, 32, 97, 116, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 102, 105, 118, 101, 32, 108, 101, 116, 116, 101, 114, 115, 32, 111, 102, 32, 101, 97, 99, 104, 32, 119, 111, 114, 100, 44, 32, 115, 111, 32, 121, 111, 117, 39, 108, 108, 10, 49, 9, 104, 97, 118, 101, 32, 116, 111, 32, 101, 110, 116, 101, 114, 32, 34, 110, 111, 114, 116, 104, 101, 97, 115, 116, 34, 32, 97, 115, 32, 34, 110, 101, 34, 32, 116, 111, 32, 100, 105, 115, 116, 105, 110, 103, 117, 105, 115, 104, 32, 105, 116, 32, 102, 114, 111, 109, 32, 34, 110, 111, 114, 116, 104, 34, 46, 10, 49, 9, 89, 111, 117, 32, 99, 97, 110, 32, 116, 121, 112, 101, 32, 34, 104, 101, 108, 112, 34, 32, 102, 111, 114, 32, 115, 111, 109, 101, 32, 103, 101, 110, 101, 114, 97, 108, 32, 104, 105, 110, 116, 115, 46, 32, 32, 70, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 111, 110, 32, 104, 111, 119, 10, 49, 9, 116, 111, 32, 101, 110, 100, 32, 121, 111, 117, 114, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 44, 32, 115, 99, 111, 114, 105, 110, 103, 44, 32, 101, 116, 99, 46, 44, 32, 116, 121, 112, 101, 32, 34, 105, 110, 102, 111, 34, 46, 10, 49, 9, 9, 9, 9, 32, 32, 32, 32, 32, 32, 45, 32, 45, 32, 45, 10, 49, 9, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 119, 97, 115, 32, 111, 114, 105, 103, 105, 110, 97, 108, 108, 121, 32, 100, 101, 118, 101, 108, 111, 112, 101, 100, 32, 98, 121, 32, 87, 105, 108, 108, 105, 101, 32, 67, 114, 111, 119, 116, 104, 101, 114, 46, 32, 32, 77, 111, 115, 116, 32, 111, 102, 32, 116, 104, 101, 10, 49, 9, 102, 101, 97, 116, 117, 114, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 112, 114, 111, 103, 114, 97, 109, 32, 119, 101, 114, 101, 32, 97, 100, 100, 101, 100, 32, 98, 121, 32, 68, 111, 110, 32, 87, 111, 111, 100, 115, 46, 32, 32, 67, 111, 110, 116, 97, 99, 116, 32, 68, 111, 110, 10, 49, 9, 105, 102, 32, 121, 111, 117, 32, 104, 97, 118, 101, 32, 97, 110, 121, 32, 113, 117, 101, 115, 116, 105, 111, 110, 115, 44, 32, 99, 111, 109, 109, 101, 110, 116, 115, 44, 32, 101, 116, 99, 46, 10, 50, 9, 65, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 102, 32, 119, 105, 116, 104, 32, 97, 32, 98, 105, 103, 32, 107, 110, 105, 102, 101, 32, 98, 108, 111, 99, 107, 115, 32, 121, 111, 117, 114, 32, 119, 97, 121, 46, 10, 51, 9, 65, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 102, 32, 106, 117, 115, 116, 32, 119, 97, 108, 107, 101, 100, 32, 97, 114, 111, 117, 110, 100, 32, 97, 32, 99, 111, 114, 110, 101, 114, 44, 32, 115, 97, 119, 32, 121, 111, 117, 44, 32, 116, 104, 114, 101, 119, 32, 97, 32, 108, 105, 116, 116, 108, 101, 10, 51, 9, 97, 120, 101, 32, 97, 116, 32, 121, 111, 117, 32, 119, 104, 105, 99, 104, 32, 109, 105, 115, 115, 101, 100, 44, 32, 99, 117, 114, 115, 101, 100, 44, 32, 97, 110, 100, 32, 114, 97, 110, 32, 97, 119, 97, 121, 46, 10, 52, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 37, 49, 32, 116, 104, 114, 101, 97, 116, 101, 110, 105, 110, 103, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 118, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 119, 105, 116, 104, 32, 121, 111, 117, 46, 10, 53, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 116, 104, 114, 101, 97, 116, 101, 110, 105, 110, 103, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 102, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 119, 105, 116, 104, 32, 121, 111, 117, 33, 10, 54, 9, 79, 110, 101, 32, 115, 104, 97, 114, 112, 32, 110, 97, 115, 116, 121, 32, 107, 110, 105, 102, 101, 32, 105, 115, 32, 116, 104, 114, 111, 119, 110, 32, 97, 116, 32, 121, 111, 117, 33, 10, 55, 9, 65, 32, 104, 111, 108, 108, 111, 119, 32, 118, 111, 105, 99, 101, 32, 115, 97, 121, 115, 32, 34, 80, 76, 85, 71, 72, 34, 46, 10, 56, 9, 73, 116, 32, 103, 101, 116, 115, 32, 121, 111, 117, 33, 10, 57, 9, 73, 116, 32, 109, 105, 115, 115, 101, 115, 33, 10, 49, 48, 9, 73, 32, 97, 109, 32, 117, 110, 115, 117, 114, 101, 32, 104, 111, 119, 32, 121, 111, 117, 32, 97, 114, 101, 32, 102, 97, 99, 105, 110, 103, 46, 32, 32, 85, 115, 101, 32, 99, 111, 109, 112, 97, 115, 115, 32, 112, 111, 105, 110, 116, 115, 32, 111, 114, 32, 110, 101, 97, 114, 98, 121, 32, 111, 98, 106, 101, 99, 116, 115, 46, 10, 49, 49, 9, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 105, 110, 32, 102, 114, 111, 109, 32, 111, 117, 116, 32, 104, 101, 114, 101, 46, 32, 32, 85, 115, 101, 32, 99, 111, 109, 112, 97, 115, 115, 32, 112, 111, 105, 110, 116, 115, 32, 111, 114, 32, 110, 97, 109, 101, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 10, 49, 49, 9, 105, 110, 32, 116, 104, 101, 32, 103, 101, 110, 101, 114, 97, 108, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 111, 32, 103, 111, 46, 10, 49, 50, 9, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 104, 111, 119, 32, 116, 111, 32, 97, 112, 112, 108, 121, 32, 116, 104, 97, 116, 32, 119, 111, 114, 100, 32, 104, 101, 114, 101, 46, 10, 49, 51, 9, 89, 111, 117, 39, 114, 101, 32, 113, 117, 105, 116, 101, 32, 119, 101, 108, 99, 111, 109, 101, 46, 10, 49, 52, 9, 73, 39, 109, 32, 103, 97, 109, 101, 46, 32, 32, 87, 111, 117, 108, 100, 32, 121, 111, 117, 32, 99, 97, 114, 101, 32, 116, 111, 32, 101, 120, 112, 108, 97, 105, 110, 32, 104, 111, 119, 63, 10, 49, 53, 9, 83, 111, 114, 114, 121, 44, 32, 98, 117, 116, 32, 73, 32, 97, 109, 32, 110, 111, 116, 32, 97, 108, 108, 111, 119, 101, 100, 32, 116, 111, 32, 103, 105, 118, 101, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 46, 32, 32, 73, 32, 119, 105, 108, 108, 32, 114, 101, 112, 101, 97, 116, 32, 116, 104, 101, 10, 49, 53, 9, 108, 111, 110, 103, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 111, 102, 32, 121, 111, 117, 114, 32, 108, 111, 99, 97, 116, 105, 111, 110, 46, 10, 49, 54, 9, 73, 116, 32, 105, 115, 32, 110, 111, 119, 32, 112, 105, 116, 99, 104, 32, 100, 97, 114, 107, 46, 32, 32, 73, 102, 32, 121, 111, 117, 32, 112, 114, 111, 99, 101, 101, 100, 32, 121, 111, 117, 32, 119, 105, 108, 108, 32, 108, 105, 107, 101, 108, 121, 32, 102, 97, 108, 108, 32, 105, 110, 116, 111, 32, 97, 32, 112, 105, 116, 46, 10, 49, 55, 9, 73, 102, 32, 121, 111, 117, 32, 112, 114, 101, 102, 101, 114, 44, 32, 115, 105, 109, 112, 108, 121, 32, 116, 121, 112, 101, 32, 119, 32, 114, 97, 116, 104, 101, 114, 32, 116, 104, 97, 110, 32, 119, 101, 115, 116, 46, 10, 49, 56, 9, 65, 114, 101, 32, 121, 111, 117, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 99, 97, 116, 99, 104, 32, 116, 104, 101, 32, 98, 105, 114, 100, 63, 10, 49, 57, 9, 83, 111, 109, 101, 116, 104, 105, 110, 103, 32, 97, 98, 111, 117, 116, 32, 121, 111, 117, 32, 115, 101, 101, 109, 115, 32, 116, 111, 32, 98, 101, 32, 102, 114, 105, 103, 104, 116, 101, 110, 105, 110, 103, 32, 116, 104, 101, 32, 98, 105, 114, 100, 46, 32, 32, 80, 101, 114, 104, 97, 112, 115, 32, 121, 111, 117, 10, 49, 57, 9, 109, 105, 103, 104, 116, 32, 102, 105, 103, 117, 114, 101, 32, 111, 117, 116, 32, 119, 104, 97, 116, 32, 105, 116, 32, 105, 115, 46, 10, 50, 48, 9, 65, 114, 101, 32, 121, 111, 117, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 115, 111, 109, 101, 104, 111, 119, 32, 100, 101, 97, 108, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 115, 110, 97, 107, 101, 63, 10, 50, 49, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 107, 105, 108, 108, 32, 116, 104, 101, 32, 115, 110, 97, 107, 101, 44, 32, 111, 114, 32, 100, 114, 105, 118, 101, 32, 105, 116, 32, 97, 119, 97, 121, 44, 32, 111, 114, 32, 97, 118, 111, 105, 100, 32, 105, 116, 44, 32, 111, 114, 32, 97, 110, 121, 116, 104, 105, 110, 103, 10, 50, 49, 9, 108, 105, 107, 101, 32, 116, 104, 97, 116, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 119, 97, 121, 32, 116, 111, 32, 103, 101, 116, 32, 98, 121, 44, 32, 98, 117, 116, 32, 121, 111, 117, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 116, 104, 101, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 50, 49, 9, 114, 101, 115, 111, 117, 114, 99, 101, 115, 32, 114, 105, 103, 104, 116, 32, 110, 111, 119, 46, 10, 50, 50, 9, 68, 111, 32, 121, 111, 117, 32, 114, 101, 97, 108, 108, 121, 32, 119, 97, 110, 116, 32, 116, 111, 32, 113, 117, 105, 116, 32, 110, 111, 119, 63, 10, 50, 51, 9, 89, 111, 117, 32, 102, 101, 108, 108, 32, 105, 110, 116, 111, 32, 97, 32, 112, 105, 116, 32, 97, 110, 100, 32, 98, 114, 111, 107, 101, 32, 101, 118, 101, 114, 121, 32, 98, 111, 110, 101, 32, 105, 110, 32, 121, 111, 117, 114, 32, 98, 111, 100, 121, 33, 10, 50, 52, 9, 89, 111, 117, 32, 97, 114, 101, 32, 97, 108, 114, 101, 97, 100, 121, 32, 99, 97, 114, 114, 121, 105, 110, 103, 32, 105, 116, 33, 10, 50, 53, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 98, 101, 32, 115, 101, 114, 105, 111, 117, 115, 33, 10, 50, 54, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 115, 101, 101, 109, 101, 100, 32, 117, 110, 97, 102, 114, 97, 105, 100, 32, 97, 116, 32, 102, 105, 114, 115, 116, 44, 32, 98, 117, 116, 32, 97, 115, 32, 121, 111, 117, 32, 97, 112, 112, 114, 111, 97, 99, 104, 32, 105, 116, 32, 98, 101, 99, 111, 109, 101, 115, 10, 50, 54, 9, 100, 105, 115, 116, 117, 114, 98, 101, 100, 32, 97, 110, 100, 32, 121, 111, 117, 32, 99, 97, 110, 110, 111, 116, 32, 99, 97, 116, 99, 104, 32, 105, 116, 46, 10, 50, 55, 9, 89, 111, 117, 32, 99, 97, 110, 32, 99, 97, 116, 99, 104, 32, 116, 104, 101, 32, 98, 105, 114, 100, 44, 32, 98, 117, 116, 32, 121, 111, 117, 32, 99, 97, 110, 110, 111, 116, 32, 99, 97, 114, 114, 121, 32, 105, 116, 46, 10, 50, 56, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 119, 105, 116, 104, 32, 97, 32, 108, 111, 99, 107, 33, 10, 50, 57, 9, 89, 111, 117, 32, 97, 114, 101, 110, 39, 116, 32, 99, 97, 114, 114, 121, 105, 110, 103, 32, 105, 116, 33, 10, 51, 48, 9, 84, 104, 101, 32, 108, 105, 116, 116, 108, 101, 32, 98, 105, 114, 100, 32, 97, 116, 116, 97, 99, 107, 115, 32, 116, 104, 101, 32, 103, 114, 101, 101, 110, 32, 115, 110, 97, 107, 101, 44, 32, 97, 110, 100, 32, 105, 110, 32, 97, 110, 32, 97, 115, 116, 111, 117, 110, 100, 105, 110, 103, 32, 102, 108, 117, 114, 114, 121, 10, 51, 48, 9, 100, 114, 105, 118, 101, 115, 32, 116, 104, 101, 32, 115, 110, 97, 107, 101, 32, 97, 119, 97, 121, 46, 10, 51, 49, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 110, 111, 32, 107, 101, 121, 115, 33, 10, 51, 50, 9, 73, 116, 32, 104, 97, 115, 32, 110, 111, 32, 108, 111, 99, 107, 46, 10, 51, 51, 9, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 104, 111, 119, 32, 116, 111, 32, 108, 111, 99, 107, 32, 111, 114, 32, 117, 110, 108, 111, 99, 107, 32, 115, 117, 99, 104, 32, 97, 32, 116, 104, 105, 110, 103, 46, 10, 51, 52, 9, 73, 116, 32, 119, 97, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 108, 111, 99, 107, 101, 100, 46, 10, 51, 53, 9, 84, 104, 101, 32, 103, 114, 97, 116, 101, 32, 105, 115, 32, 110, 111, 119, 32, 108, 111, 99, 107, 101, 100, 46, 10, 51, 54, 9, 84, 104, 101, 32, 103, 114, 97, 116, 101, 32, 105, 115, 32, 110, 111, 119, 32, 117, 110, 108, 111, 99, 107, 101, 100, 46, 10, 51, 55, 9, 73, 116, 32, 119, 97, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 117, 110, 108, 111, 99, 107, 101, 100, 46, 10, 51, 56, 9, 84, 104, 101, 32, 117, 114, 110, 32, 105, 115, 32, 101, 109, 112, 116, 121, 32, 97, 110, 100, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 108, 105, 103, 104, 116, 46, 10, 51, 57, 9, 89, 111, 117, 114, 32, 108, 97, 109, 112, 32, 105, 115, 32, 110, 111, 119, 32, 111, 110, 46, 10, 52, 48, 9, 89, 111, 117, 114, 32, 108, 97, 109, 112, 32, 105, 115, 32, 110, 111, 119, 32, 111, 102, 102, 46, 10, 52, 49, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 119, 97, 121, 32, 116, 111, 32, 103, 101, 116, 32, 112, 97, 115, 116, 32, 116, 104, 101, 32, 98, 101, 97, 114, 32, 116, 111, 32, 117, 110, 108, 111, 99, 107, 32, 116, 104, 101, 32, 99, 104, 97, 105, 110, 44, 32, 119, 104, 105, 99, 104, 32, 105, 115, 10, 52, 49, 9, 112, 114, 111, 98, 97, 98, 108, 121, 32, 106, 117, 115, 116, 32, 97, 115, 32, 119, 101, 108, 108, 46, 10, 52, 50, 9, 78, 111, 116, 104, 105, 110, 103, 32, 104, 97, 112, 112, 101, 110, 115, 46, 10, 52, 51, 9, 87, 104, 101, 114, 101, 63, 10, 52, 52, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 116, 111, 32, 97, 116, 116, 97, 99, 107, 46, 10, 52, 53, 9, 84, 104, 101, 32, 108, 105, 116, 116, 108, 101, 32, 98, 105, 114, 100, 32, 105, 115, 32, 110, 111, 119, 32, 100, 101, 97, 100, 46, 32, 32, 73, 116, 115, 32, 98, 111, 100, 121, 32, 100, 105, 115, 97, 112, 112, 101, 97, 114, 115, 46, 10, 52, 54, 9, 65, 116, 116, 97, 99, 107, 105, 110, 103, 32, 116, 104, 101, 32, 115, 110, 97, 107, 101, 32, 98, 111, 116, 104, 32, 100, 111, 101, 115, 110, 39, 116, 32, 119, 111, 114, 107, 32, 97, 110, 100, 32, 105, 115, 32, 118, 101, 114, 121, 32, 100, 97, 110, 103, 101, 114, 111, 117, 115, 46, 10, 52, 55, 9, 89, 111, 117, 32, 107, 105, 108, 108, 101, 100, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 102, 46, 10, 52, 56, 9, 89, 111, 117, 32, 97, 116, 116, 97, 99, 107, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 102, 44, 32, 98, 117, 116, 32, 104, 101, 32, 100, 111, 100, 103, 101, 115, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 119, 97, 121, 46, 10, 52, 57, 9, 87, 105, 116, 104, 32, 119, 104, 97, 116, 63, 32, 32, 89, 111, 117, 114, 32, 98, 97, 114, 101, 32, 104, 97, 110, 100, 115, 63, 10, 53, 48, 9, 71, 111, 111, 100, 32, 116, 114, 121, 44, 32, 98, 117, 116, 32, 116, 104, 97, 116, 32, 105, 115, 32, 97, 110, 32, 111, 108, 100, 32, 119, 111, 114, 110, 45, 111, 117, 116, 32, 109, 97, 103, 105, 99, 32, 119, 111, 114, 100, 46, 10, 53, 49, 9, 73, 32, 107, 110, 111, 119, 32, 111, 102, 32, 112, 108, 97, 99, 101, 115, 44, 32, 97, 99, 116, 105, 111, 110, 115, 44, 32, 97, 110, 100, 32, 116, 104, 105, 110, 103, 115, 46, 32, 32, 77, 111, 115, 116, 32, 111, 102, 32, 109, 121, 32, 118, 111, 99, 97, 98, 117, 108, 97, 114, 121, 10, 53, 49, 9, 100, 101, 115, 99, 114, 105, 98, 101, 115, 32, 112, 108, 97, 99, 101, 115, 32, 97, 110, 100, 32, 105, 115, 32, 117, 115, 101, 100, 32, 116, 111, 32, 109, 111, 118, 101, 32, 121, 111, 117, 32, 116, 104, 101, 114, 101, 46, 32, 32, 84, 111, 32, 109, 111, 118, 101, 44, 32, 116, 114, 121, 32, 119, 111, 114, 100, 115, 10, 53, 49, 9, 108, 105, 107, 101, 32, 102, 111, 114, 101, 115, 116, 44, 32, 98, 117, 105, 108, 100, 105, 110, 103, 44, 32, 100, 111, 119, 110, 115, 116, 114, 101, 97, 109, 44, 32, 101, 110, 116, 101, 114, 44, 32, 101, 97, 115, 116, 44, 32, 119, 101, 115, 116, 44, 32, 110, 111, 114, 116, 104, 44, 32, 115, 111, 117, 116, 104, 44, 10, 53, 49, 9, 117, 112, 44, 32, 111, 114, 32, 100, 111, 119, 110, 46, 32, 32, 73, 32, 107, 110, 111, 119, 32, 97, 98, 111, 117, 116, 32, 97, 32, 102, 101, 119, 32, 115, 112, 101, 99, 105, 97, 108, 32, 111, 98, 106, 101, 99, 116, 115, 44, 32, 108, 105, 107, 101, 32, 97, 32, 98, 108, 97, 99, 107, 32, 114, 111, 100, 10, 53, 49, 9, 104, 105, 100, 100, 101, 110, 32, 105, 110, 32, 116, 104, 101, 32, 99, 97, 118, 101, 46, 32, 32, 84, 104, 101, 115, 101, 32, 111, 98, 106, 101, 99, 116, 115, 32, 99, 97, 110, 32, 98, 101, 32, 109, 97, 110, 105, 112, 117, 108, 97, 116, 101, 100, 32, 117, 115, 105, 110, 103, 32, 115, 111, 109, 101, 32, 111, 102, 10, 53, 49, 9, 116, 104, 101, 32, 97, 99, 116, 105, 111, 110, 32, 119, 111, 114, 100, 115, 32, 116, 104, 97, 116, 32, 73, 32, 107, 110, 111, 119, 46, 32, 32, 85, 115, 117, 97, 108, 108, 121, 32, 121, 111, 117, 32, 119, 105, 108, 108, 32, 110, 101, 101, 100, 32, 116, 111, 32, 103, 105, 118, 101, 32, 98, 111, 116, 104, 32, 116, 104, 101, 10, 53, 49, 9, 111, 98, 106, 101, 99, 116, 32, 97, 110, 100, 32, 97, 99, 116, 105, 111, 110, 32, 119, 111, 114, 100, 115, 32, 40, 105, 110, 32, 101, 105, 116, 104, 101, 114, 32, 111, 114, 100, 101, 114, 41, 44, 32, 98, 117, 116, 32, 115, 111, 109, 101, 116, 105, 109, 101, 115, 32, 73, 32, 99, 97, 110, 32, 105, 110, 102, 101, 114, 10, 53, 49, 9, 116, 104, 101, 32, 111, 98, 106, 101, 99, 116, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 118, 101, 114, 98, 32, 97, 108, 111, 110, 101, 46, 32, 32, 83, 111, 109, 101, 32, 111, 98, 106, 101, 99, 116, 115, 32, 97, 108, 115, 111, 32, 105, 109, 112, 108, 121, 32, 118, 101, 114, 98, 115, 59, 32, 105, 110, 10, 53, 49, 9, 112, 97, 114, 116, 105, 99, 117, 108, 97, 114, 44, 32, 34, 105, 110, 118, 101, 110, 116, 111, 114, 121, 34, 32, 105, 109, 112, 108, 105, 101, 115, 32, 34, 116, 97, 107, 101, 32, 105, 110, 118, 101, 110, 116, 111, 114, 121, 34, 44, 32, 119, 104, 105, 99, 104, 32, 99, 97, 117, 115, 101, 115, 32, 109, 101, 32, 116, 111, 10, 53, 49, 9, 103, 105, 118, 101, 32, 121, 111, 117, 32, 97, 32, 108, 105, 115, 116, 32, 111, 102, 32, 119, 104, 97, 116, 32, 121, 111, 117, 39, 114, 101, 32, 99, 97, 114, 114, 121, 105, 110, 103, 46, 32, 32, 83, 111, 109, 101, 32, 111, 98, 106, 101, 99, 116, 115, 32, 104, 97, 118, 101, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 10, 53, 49, 9, 101, 102, 102, 101, 99, 116, 115, 59, 32, 116, 104, 101, 32, 101, 102, 102, 101, 99, 116, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 97, 108, 119, 97, 121, 115, 32, 100, 101, 115, 105, 114, 97, 98, 108, 101, 33, 32, 32, 85, 115, 117, 97, 108, 108, 121, 32, 112, 101, 111, 112, 108, 101, 32, 104, 97, 118, 105, 110, 103, 10, 53, 49, 9, 116, 114, 111, 117, 98, 108, 101, 32, 109, 111, 118, 105, 110, 103, 32, 106, 117, 115, 116, 32, 110, 101, 101, 100, 32, 116, 111, 32, 116, 114, 121, 32, 97, 32, 102, 101, 119, 32, 109, 111, 114, 101, 32, 119, 111, 114, 100, 115, 46, 32, 32, 85, 115, 117, 97, 108, 108, 121, 32, 112, 101, 111, 112, 108, 101, 10, 53, 49, 9, 116, 114, 121, 105, 110, 103, 32, 117, 110, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 108, 121, 32, 116, 111, 32, 109, 97, 110, 105, 112, 117, 108, 97, 116, 101, 32, 97, 110, 32, 111, 98, 106, 101, 99, 116, 32, 97, 114, 101, 32, 97, 116, 116, 101, 109, 112, 116, 105, 110, 103, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 10, 53, 49, 9, 98, 101, 121, 111, 110, 100, 32, 116, 104, 101, 105, 114, 32, 40, 111, 114, 32, 109, 121, 33, 41, 32, 99, 97, 112, 97, 98, 105, 108, 105, 116, 105, 101, 115, 32, 97, 110, 100, 32, 115, 104, 111, 117, 108, 100, 32, 116, 114, 121, 32, 97, 32, 99, 111, 109, 112, 108, 101, 116, 101, 108, 121, 10, 53, 49, 9, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 97, 99, 107, 46, 32, 32, 79, 110, 101, 32, 112, 111, 105, 110, 116, 32, 111, 102, 116, 101, 110, 32, 99, 111, 110, 102, 117, 115, 105, 110, 103, 32, 116, 111, 32, 98, 101, 103, 105, 110, 110, 101, 114, 115, 32, 105, 115, 32, 116, 104, 97, 116, 44, 32, 119, 104, 101, 110, 10, 53, 49, 9, 116, 104, 101, 114, 101, 32, 97, 114, 101, 32, 115, 101, 118, 101, 114, 97, 108, 32, 119, 97, 121, 115, 32, 116, 111, 32, 103, 111, 32, 105, 110, 32, 97, 32, 99, 101, 114, 116, 97, 105, 110, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 40, 101, 46, 103, 46, 44, 32, 105, 102, 32, 116, 104, 101, 114, 101, 10, 53, 49, 9, 97, 114, 101, 32, 115, 101, 118, 101, 114, 97, 108, 32, 104, 111, 108, 101, 115, 32, 105, 110, 32, 97, 32, 119, 97, 108, 108, 41, 44, 32, 99, 104, 111, 111, 115, 105, 110, 103, 32, 116, 104, 97, 116, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 105, 110, 32, 101, 102, 102, 101, 99, 116, 10, 53, 49, 9, 99, 104, 111, 111, 115, 101, 115, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 119, 97, 121, 115, 32, 97, 116, 32, 114, 97, 110, 100, 111, 109, 59, 32, 111, 102, 116, 101, 110, 44, 32, 116, 104, 111, 117, 103, 104, 44, 32, 98, 121, 32, 115, 112, 101, 99, 105, 102, 121, 105, 110, 103, 32, 116, 104, 101, 10, 53, 49, 9, 112, 108, 97, 99, 101, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 111, 32, 114, 101, 97, 99, 104, 32, 121, 111, 117, 32, 99, 97, 110, 32, 103, 117, 97, 114, 97, 110, 116, 101, 101, 32, 99, 104, 111, 111, 115, 105, 110, 103, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 32, 112, 97, 116, 104, 46, 10, 53, 49, 9, 65, 108, 115, 111, 44, 32, 116, 111, 32, 115, 112, 101, 101, 100, 32, 116, 104, 101, 32, 103, 97, 109, 101, 32, 121, 111, 117, 32, 99, 97, 110, 32, 115, 111, 109, 101, 116, 105, 109, 101, 115, 32, 109, 111, 118, 101, 32, 108, 111, 110, 103, 32, 100, 105, 115, 116, 97, 110, 99, 101, 115, 32, 119, 105, 116, 104, 32, 97, 10, 53, 49, 9, 115, 105, 110, 103, 108, 101, 32, 119, 111, 114, 100, 46, 32, 32, 70, 111, 114, 32, 101, 120, 97, 109, 112, 108, 101, 44, 32, 34, 98, 117, 105, 108, 100, 105, 110, 103, 34, 32, 117, 115, 117, 97, 108, 108, 121, 32, 103, 101, 116, 115, 32, 121, 111, 117, 32, 116, 111, 32, 116, 104, 101, 32, 98, 117, 105, 108, 100, 105, 110, 103, 10, 53, 49, 9, 102, 114, 111, 109, 32, 97, 110, 121, 119, 104, 101, 114, 101, 32, 97, 98, 111, 118, 101, 32, 103, 114, 111, 117, 110, 100, 32, 101, 120, 99, 101, 112, 116, 32, 119, 104, 101, 110, 32, 108, 111, 115, 116, 32, 105, 110, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 46, 32, 32, 65, 108, 115, 111, 44, 32, 110, 111, 116, 101, 10, 53, 49, 9, 116, 104, 97, 116, 32, 99, 97, 118, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 32, 97, 110, 100, 32, 102, 111, 114, 101, 115, 116, 32, 112, 97, 116, 104, 115, 32, 116, 117, 114, 110, 32, 97, 32, 108, 111, 116, 44, 32, 115, 111, 32, 108, 101, 97, 118, 105, 110, 103, 32, 111, 110, 101, 32, 112, 108, 97, 99, 101, 10, 53, 49, 9, 104, 101, 97, 100, 105, 110, 103, 32, 110, 111, 114, 116, 104, 32, 100, 111, 101, 115, 110, 39, 116, 32, 103, 117, 97, 114, 97, 110, 116, 101, 101, 32, 101, 110, 116, 101, 114, 105, 110, 103, 32, 116, 104, 101, 32, 110, 101, 120, 116, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 111, 117, 116, 104, 46, 10, 53, 49, 9, 72, 111, 119, 101, 118, 101, 114, 32, 40, 97, 110, 111, 116, 104, 101, 114, 32, 105, 109, 112, 111, 114, 116, 97, 110, 116, 32, 112, 111, 105, 110, 116, 41, 44, 32, 101, 120, 99, 101, 112, 116, 32, 119, 104, 101, 110, 32, 121, 111, 117, 39, 118, 101, 32, 117, 115, 101, 100, 32, 97, 32, 34, 108, 111, 110, 103, 10, 53, 49, 9, 100, 105, 115, 116, 97, 110, 99, 101, 34, 32, 119, 111, 114, 100, 32, 115, 117, 99, 104, 32, 97, 115, 32, 34, 98, 117, 105, 108, 100, 105, 110, 103, 34, 44, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 97, 108, 119, 97, 121, 115, 32, 97, 32, 119, 97, 121, 32, 116, 111, 32, 103, 111, 32, 98, 97, 99, 107, 10, 53, 49, 9, 119, 104, 101, 114, 101, 32, 121, 111, 117, 32, 106, 117, 115, 116, 32, 99, 97, 109, 101, 32, 102, 114, 111, 109, 32, 117, 110, 108, 101, 115, 115, 32, 73, 32, 119, 97, 114, 110, 32, 121, 111, 117, 32, 116, 111, 32, 116, 104, 101, 32, 99, 111, 110, 116, 114, 97, 114, 121, 44, 32, 101, 118, 101, 110, 10, 53, 49, 9, 116, 104, 111, 117, 103, 104, 32, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 116, 104, 97, 116, 32, 116, 97, 107, 101, 115, 32, 121, 111, 117, 32, 98, 97, 99, 107, 32, 109, 105, 103, 104, 116, 32, 110, 111, 116, 32, 98, 101, 32, 116, 104, 101, 32, 114, 101, 118, 101, 114, 115, 101, 32, 111, 102, 10, 53, 49, 9, 119, 104, 97, 116, 32, 103, 111, 116, 32, 121, 111, 117, 32, 104, 101, 114, 101, 46, 32, 32, 71, 111, 111, 100, 32, 108, 117, 99, 107, 44, 32, 97, 110, 100, 32, 104, 97, 118, 101, 32, 102, 117, 110, 33, 10, 53, 50, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 119, 97, 121, 32, 116, 111, 32, 103, 111, 32, 116, 104, 97, 116, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 46, 10, 53, 51, 9, 80, 108, 101, 97, 115, 101, 32, 115, 116, 105, 99, 107, 32, 116, 111, 32, 49, 45, 32, 97, 110, 100, 32, 50, 45, 119, 111, 114, 100, 32, 99, 111, 109, 109, 97, 110, 100, 115, 46, 10, 53, 52, 9, 79, 75, 10, 53, 53, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 117, 110, 108, 111, 99, 107, 32, 116, 104, 101, 32, 107, 101, 121, 115, 46, 10, 53, 54, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 99, 114, 97, 119, 108, 101, 100, 32, 97, 114, 111, 117, 110, 100, 32, 105, 110, 32, 115, 111, 109, 101, 32, 108, 105, 116, 116, 108, 101, 32, 104, 111, 108, 101, 115, 32, 97, 110, 100, 32, 119, 111, 117, 110, 100, 32, 117, 112, 32, 98, 97, 99, 107, 32, 105, 110, 32, 116, 104, 101, 10, 53, 54, 9, 109, 97, 105, 110, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 53, 55, 9, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 119, 104, 101, 114, 101, 32, 116, 104, 101, 32, 99, 97, 118, 101, 32, 105, 115, 44, 32, 98, 117, 116, 32, 104, 101, 114, 101, 97, 98, 111, 117, 116, 115, 32, 110, 111, 32, 115, 116, 114, 101, 97, 109, 32, 99, 97, 110, 32, 114, 117, 110, 32, 111, 110, 10, 53, 55, 9, 116, 104, 101, 32, 115, 117, 114, 102, 97, 99, 101, 32, 102, 111, 114, 32, 108, 111, 110, 103, 46, 32, 32, 73, 32, 119, 111, 117, 108, 100, 32, 116, 114, 121, 32, 116, 104, 101, 32, 115, 116, 114, 101, 97, 109, 46, 10, 53, 56, 9, 73, 32, 110, 101, 101, 100, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 101, 100, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 115, 32, 116, 111, 32, 100, 111, 32, 116, 104, 97, 116, 46, 10, 53, 57, 9, 73, 32, 99, 97, 110, 32, 111, 110, 108, 121, 32, 116, 101, 108, 108, 32, 121, 111, 117, 32, 119, 104, 97, 116, 32, 121, 111, 117, 32, 115, 101, 101, 32, 97, 115, 32, 121, 111, 117, 32, 109, 111, 118, 101, 32, 97, 98, 111, 117, 116, 32, 97, 110, 100, 32, 109, 97, 110, 105, 112, 117, 108, 97, 116, 101, 10, 53, 57, 9, 116, 104, 105, 110, 103, 115, 46, 32, 32, 73, 32, 99, 97, 110, 110, 111, 116, 32, 116, 101, 108, 108, 32, 121, 111, 117, 32, 119, 104, 101, 114, 101, 32, 114, 101, 109, 111, 116, 101, 32, 116, 104, 105, 110, 103, 115, 32, 97, 114, 101, 46, 10, 54, 48, 9, 84, 104, 101, 32, 111, 103, 114, 101, 32, 115, 110, 97, 114, 108, 115, 32, 97, 110, 100, 32, 115, 104, 111, 118, 101, 115, 32, 121, 111, 117, 32, 98, 97, 99, 107, 46, 10, 54, 49, 9, 72, 117, 104, 63, 10, 54, 50, 9, 65, 114, 101, 32, 121, 111, 117, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 103, 101, 116, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 99, 97, 118, 101, 63, 10, 54, 51, 9, 84, 104, 101, 32, 103, 114, 97, 116, 101, 32, 105, 115, 32, 118, 101, 114, 121, 32, 115, 111, 108, 105, 100, 32, 97, 110, 100, 32, 104, 97, 115, 32, 97, 32, 104, 97, 114, 100, 101, 110, 101, 100, 32, 115, 116, 101, 101, 108, 32, 108, 111, 99, 107, 46, 32, 32, 89, 111, 117, 32, 99, 97, 110, 110, 111, 116, 10, 54, 51, 9, 101, 110, 116, 101, 114, 32, 119, 105, 116, 104, 111, 117, 116, 32, 97, 32, 107, 101, 121, 44, 32, 97, 110, 100, 32, 116, 104, 101, 114, 101, 32, 97, 114, 101, 32, 110, 111, 32, 107, 101, 121, 115, 32, 110, 101, 97, 114, 98, 121, 46, 32, 32, 73, 32, 119, 111, 117, 108, 100, 32, 114, 101, 99, 111, 109, 109, 101, 110, 100, 10, 54, 51, 9, 108, 111, 111, 107, 105, 110, 103, 32, 101, 108, 115, 101, 119, 104, 101, 114, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 107, 101, 121, 115, 46, 10, 54, 52, 9, 84, 104, 101, 32, 116, 114, 101, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 32, 97, 114, 101, 32, 108, 97, 114, 103, 101, 32, 104, 97, 114, 100, 119, 111, 111, 100, 32, 111, 97, 107, 32, 97, 110, 100, 32, 109, 97, 112, 108, 101, 44, 32, 119, 105, 116, 104, 32, 97, 110, 10, 54, 52, 9, 111, 99, 99, 97, 115, 105, 111, 110, 97, 108, 32, 103, 114, 111, 118, 101, 32, 111, 102, 32, 112, 105, 110, 101, 32, 111, 114, 32, 115, 112, 114, 117, 99, 101, 46, 32, 32, 84, 104, 101, 114, 101, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 97, 32, 98, 105, 116, 32, 111, 102, 32, 117, 110, 100, 101, 114, 45, 10, 54, 52, 9, 103, 114, 111, 119, 116, 104, 44, 32, 108, 97, 114, 103, 101, 108, 121, 32, 98, 105, 114, 99, 104, 32, 97, 110, 100, 32, 97, 115, 104, 32, 115, 97, 112, 108, 105, 110, 103, 115, 32, 112, 108, 117, 115, 32, 110, 111, 110, 100, 101, 115, 99, 114, 105, 112, 116, 32, 98, 117, 115, 104, 101, 115, 32, 111, 102, 10, 54, 52, 9, 118, 97, 114, 105, 111, 117, 115, 32, 115, 111, 114, 116, 115, 46, 32, 32, 84, 104, 105, 115, 32, 116, 105, 109, 101, 32, 111, 102, 32, 121, 101, 97, 114, 32, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 32, 98, 121, 10, 54, 52, 9, 97, 108, 108, 32, 116, 104, 101, 32, 108, 101, 97, 118, 101, 115, 44, 32, 98, 117, 116, 32, 116, 114, 97, 118, 101, 108, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 101, 97, 115, 121, 32, 105, 102, 32, 121, 111, 117, 32, 100, 101, 116, 111, 117, 114, 32, 97, 114, 111, 117, 110, 100, 32, 116, 104, 101, 10, 54, 52, 9, 115, 112, 114, 117, 99, 101, 32, 97, 110, 100, 32, 98, 101, 114, 114, 121, 32, 98, 117, 115, 104, 101, 115, 46, 10, 54, 53, 9, 87, 101, 108, 99, 111, 109, 101, 32, 116, 111, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 33, 33, 32, 32, 87, 111, 117, 108, 100, 32, 121, 111, 117, 32, 108, 105, 107, 101, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 115, 63, 10, 54, 54, 9, 68, 105, 103, 103, 105, 110, 103, 32, 119, 105, 116, 104, 111, 117, 116, 32, 97, 32, 115, 104, 111, 118, 101, 108, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 105, 109, 112, 114, 97, 99, 116, 105, 99, 97, 108, 46, 32, 32, 69, 118, 101, 110, 32, 119, 105, 116, 104, 32, 97, 32, 115, 104, 111, 118, 101, 108, 10, 54, 54, 9, 112, 114, 111, 103, 114, 101, 115, 115, 32, 105, 115, 32, 117, 110, 108, 105, 107, 101, 108, 121, 46, 10, 54, 55, 9, 66, 108, 97, 115, 116, 105, 110, 103, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 100, 121, 110, 97, 109, 105, 116, 101, 46, 10, 54, 56, 9, 73, 39, 109, 32, 97, 115, 32, 99, 111, 110, 102, 117, 115, 101, 100, 32, 97, 115, 32, 121, 111, 117, 32, 97, 114, 101, 46, 10, 54, 57, 9, 77, 105, 115, 116, 32, 105, 115, 32, 97, 32, 119, 104, 105, 116, 101, 32, 118, 97, 112, 111, 114, 44, 32, 117, 115, 117, 97, 108, 108, 121, 32, 119, 97, 116, 101, 114, 44, 32, 115, 101, 101, 110, 32, 102, 114, 111, 109, 32, 116, 105, 109, 101, 32, 116, 111, 32, 116, 105, 109, 101, 32, 105, 110, 10, 54, 57, 9, 99, 97, 118, 101, 114, 110, 115, 46, 32, 32, 73, 116, 32, 99, 97, 110, 32, 98, 101, 32, 102, 111, 117, 110, 100, 32, 97, 110, 121, 119, 104, 101, 114, 101, 32, 98, 117, 116, 32, 105, 115, 32, 102, 114, 101, 113, 117, 101, 110, 116, 108, 121, 32, 97, 32, 115, 105, 103, 110, 32, 111, 102, 32, 97, 32, 100, 101, 101, 112, 10, 54, 57, 9, 112, 105, 116, 32, 108, 101, 97, 100, 105, 110, 103, 32, 100, 111, 119, 110, 32, 116, 111, 32, 119, 97, 116, 101, 114, 46, 10, 55, 48, 9, 89, 111, 117, 114, 32, 102, 101, 101, 116, 32, 97, 114, 101, 32, 110, 111, 119, 32, 119, 101, 116, 46, 10, 55, 49, 9, 73, 32, 116, 104, 105, 110, 107, 32, 73, 32, 106, 117, 115, 116, 32, 108, 111, 115, 116, 32, 109, 121, 32, 97, 112, 112, 101, 116, 105, 116, 101, 46, 10, 55, 50, 9, 84, 104, 97, 110, 107, 32, 121, 111, 117, 44, 32, 105, 116, 32, 119, 97, 115, 32, 100, 101, 108, 105, 99, 105, 111, 117, 115, 33, 10, 55, 51, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 116, 97, 107, 101, 110, 32, 97, 32, 100, 114, 105, 110, 107, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 116, 114, 101, 97, 109, 46, 32, 32, 84, 104, 101, 32, 119, 97, 116, 101, 114, 32, 116, 97, 115, 116, 101, 115, 32, 115, 116, 114, 111, 110, 103, 108, 121, 32, 111, 102, 10, 55, 51, 9, 109, 105, 110, 101, 114, 97, 108, 115, 44, 32, 98, 117, 116, 32, 105, 115, 32, 110, 111, 116, 32, 117, 110, 112, 108, 101, 97, 115, 97, 110, 116, 46, 32, 32, 73, 116, 32, 105, 115, 32, 101, 120, 116, 114, 101, 109, 101, 108, 121, 32, 99, 111, 108, 100, 46, 10, 55, 52, 9, 84, 104, 101, 32, 98, 111, 116, 116, 108, 101, 32, 111, 102, 32, 119, 97, 116, 101, 114, 32, 105, 115, 32, 110, 111, 119, 32, 101, 109, 112, 116, 121, 46, 10, 55, 53, 9, 82, 117, 98, 98, 105, 110, 103, 32, 116, 104, 101, 32, 101, 108, 101, 99, 116, 114, 105, 99, 32, 108, 97, 109, 112, 32, 105, 115, 32, 110, 111, 116, 32, 112, 97, 114, 116, 105, 99, 117, 108, 97, 114, 108, 121, 32, 114, 101, 119, 97, 114, 100, 105, 110, 103, 46, 32, 32, 65, 110, 121, 119, 97, 121, 44, 10, 55, 53, 9, 110, 111, 116, 104, 105, 110, 103, 32, 101, 120, 99, 105, 116, 105, 110, 103, 32, 104, 97, 112, 112, 101, 110, 115, 46, 10, 55, 54, 9, 80, 101, 99, 117, 108, 105, 97, 114, 46, 32, 32, 78, 111, 116, 104, 105, 110, 103, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 104, 97, 112, 112, 101, 110, 115, 46, 10, 55, 55, 9, 89, 111, 117, 114, 32, 98, 111, 116, 116, 108, 101, 32, 105, 115, 32, 101, 109, 112, 116, 121, 32, 97, 110, 100, 32, 116, 104, 101, 32, 103, 114, 111, 117, 110, 100, 32, 105, 115, 32, 119, 101, 116, 46, 10, 55, 56, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 112, 111, 117, 114, 32, 116, 104, 97, 116, 46, 10, 55, 57, 9, 87, 97, 116, 99, 104, 32, 105, 116, 33, 10, 56, 48, 9, 87, 104, 105, 99, 104, 32, 119, 97, 121, 63, 10, 56, 49, 9, 79, 104, 32, 100, 101, 97, 114, 44, 32, 121, 111, 117, 32, 115, 101, 101, 109, 32, 116, 111, 32, 104, 97, 118, 101, 32, 103, 111, 116, 116, 101, 110, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 107, 105, 108, 108, 101, 100, 46, 32, 32, 73, 32, 109, 105, 103, 104, 116, 32, 98, 101, 32, 97, 98, 108, 101, 32, 116, 111, 10, 56, 49, 9, 104, 101, 108, 112, 32, 121, 111, 117, 32, 111, 117, 116, 44, 32, 98, 117, 116, 32, 73, 39, 118, 101, 32, 110, 101, 118, 101, 114, 32, 114, 101, 97, 108, 108, 121, 32, 100, 111, 110, 101, 32, 116, 104, 105, 115, 32, 98, 101, 102, 111, 114, 101, 46, 32, 32, 68, 111, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 109, 101, 10, 56, 49, 9, 116, 111, 32, 116, 114, 121, 32, 116, 111, 32, 114, 101, 105, 110, 99, 97, 114, 110, 97, 116, 101, 32, 121, 111, 117, 63, 10, 56, 50, 9, 65, 108, 108, 32, 114, 105, 103, 104, 116, 46, 32, 32, 66, 117, 116, 32, 100, 111, 110, 39, 116, 32, 98, 108, 97, 109, 101, 32, 109, 101, 32, 105, 102, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 103, 111, 101, 115, 32, 119, 114, 46, 46, 46, 46, 46, 46, 10, 56, 50, 9, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 45, 32, 80, 79, 79, 70, 33, 33, 32, 45, 45, 45, 10, 56, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 101, 110, 103, 117, 108, 102, 101, 100, 32, 105, 110, 32, 97, 32, 99, 108, 111, 117, 100, 32, 111, 102, 32, 111, 114, 97, 110, 103, 101, 32, 115, 109, 111, 107, 101, 46, 32, 32, 67, 111, 117, 103, 104, 105, 110, 103, 32, 97, 110, 100, 32, 103, 97, 115, 112, 105, 110, 103, 44, 10, 56, 50, 9, 121, 111, 117, 32, 101, 109, 101, 114, 103, 101, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 109, 111, 107, 101, 32, 97, 110, 100, 32, 102, 105, 110, 100, 46, 46, 46, 46, 10, 56, 51, 9, 89, 111, 117, 32, 99, 108, 117, 109, 115, 121, 32, 111, 97, 102, 44, 32, 121, 111, 117, 39, 118, 101, 32, 100, 111, 110, 101, 32, 105, 116, 32, 97, 103, 97, 105, 110, 33, 32, 32, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 104, 111, 119, 32, 108, 111, 110, 103, 32, 73, 32, 99, 97, 110, 10, 56, 51, 9, 107, 101, 101, 112, 32, 116, 104, 105, 115, 32, 117, 112, 46, 32, 32, 68, 111, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 109, 101, 32, 116, 111, 32, 116, 114, 121, 32, 114, 101, 105, 110, 99, 97, 114, 110, 97, 116, 105, 110, 103, 32, 121, 111, 117, 32, 97, 103, 97, 105, 110, 63, 10, 56, 52, 9, 79, 107, 97, 121, 44, 32, 110, 111, 119, 32, 119, 104, 101, 114, 101, 32, 100, 105, 100, 32, 73, 32, 112, 117, 116, 32, 109, 121, 32, 111, 114, 97, 110, 103, 101, 32, 115, 109, 111, 107, 101, 63, 46, 46, 46, 46, 32, 32, 62, 80, 79, 79, 70, 33, 60, 10, 56, 52, 9, 69, 118, 101, 114, 121, 116, 104, 105, 110, 103, 32, 100, 105, 115, 97, 112, 112, 101, 97, 114, 115, 32, 105, 110, 32, 97, 32, 100, 101, 110, 115, 101, 32, 99, 108, 111, 117, 100, 32, 111, 102, 32, 111, 114, 97, 110, 103, 101, 32, 115, 109, 111, 107, 101, 46, 10, 56, 53, 9, 78, 111, 119, 32, 121, 111, 117, 39, 118, 101, 32, 114, 101, 97, 108, 108, 121, 32, 100, 111, 110, 101, 32, 105, 116, 33, 32, 32, 73, 39, 109, 32, 111, 117, 116, 32, 111, 102, 32, 111, 114, 97, 110, 103, 101, 32, 115, 109, 111, 107, 101, 33, 32, 32, 89, 111, 117, 32, 100, 111, 110, 39, 116, 32, 101, 120, 112, 101, 99, 116, 10, 56, 53, 9, 109, 101, 32, 116, 111, 32, 100, 111, 32, 97, 32, 100, 101, 99, 101, 110, 116, 32, 114, 101, 105, 110, 99, 97, 114, 110, 97, 116, 105, 111, 110, 32, 119, 105, 116, 104, 111]);
            fileData0.push.apply(fileData0, [117, 116, 32, 97, 110, 121, 32, 111, 114, 97, 110, 103, 101, 32, 115, 109, 111, 107, 101, 44, 32, 100, 111, 32, 121, 111, 117, 63, 10, 56, 54, 9, 79, 107, 97, 121, 44, 32, 105, 102, 32, 121, 111, 117, 39, 114, 101, 32, 115, 111, 32, 115, 109, 97, 114, 116, 44, 32, 100, 111, 32, 105, 116, 32, 121, 111, 117, 114, 115, 101, 108, 102, 33, 32, 32, 73, 39, 109, 32, 108, 101, 97, 118, 105, 110, 103, 33, 10, 57, 48, 9, 62, 62, 62, 32, 109, 101, 115, 115, 97, 103, 101, 115, 32, 56, 49, 32, 116, 104, 114, 117, 32, 57, 48, 32, 97, 114, 101, 32, 114, 101, 115, 101, 114, 118, 101, 100, 32, 102, 111, 114, 32, 34, 111, 98, 105, 116, 117, 97, 114, 105, 101, 115, 34, 46, 32, 60, 60, 60, 10, 57, 49, 9, 83, 111, 114, 114, 121, 44, 32, 98, 117, 116, 32, 73, 32, 110, 111, 32, 108, 111, 110, 103, 101, 114, 32, 115, 101, 101, 109, 32, 116, 111, 32, 114, 101, 109, 101, 109, 98, 101, 114, 32, 104, 111, 119, 32, 105, 116, 32, 119, 97, 115, 32, 121, 111, 117, 32, 103, 111, 116, 32, 104, 101, 114, 101, 46, 10, 57, 50, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 99, 97, 114, 114, 121, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 109, 111, 114, 101, 46, 32, 32, 89, 111, 117, 39, 108, 108, 32, 104, 97, 118, 101, 32, 116, 111, 32, 100, 114, 111, 112, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 102, 105, 114, 115, 116, 46, 10, 57, 51, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 103, 111, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 108, 111, 99, 107, 101, 100, 32, 115, 116, 101, 101, 108, 32, 103, 114, 97, 116, 101, 33, 10, 57, 52, 9, 73, 32, 98, 101, 108, 105, 101, 118, 101, 32, 119, 104, 97, 116, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 105, 115, 32, 114, 105, 103, 104, 116, 32, 104, 101, 114, 101, 32, 119, 105, 116, 104, 32, 121, 111, 117, 46, 10, 57, 53, 9, 89, 111, 117, 32, 100, 111, 110, 39, 116, 32, 102, 105, 116, 32, 116, 104, 114, 111, 117, 103, 104, 32, 97, 32, 116, 119, 111, 45, 105, 110, 99, 104, 32, 115, 108, 105, 116, 33, 10, 57, 54, 9, 73, 32, 114, 101, 115, 112, 101, 99, 116, 102, 117, 108, 108, 121, 32, 115, 117, 103, 103, 101, 115, 116, 32, 121, 111, 117, 32, 103, 111, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 98, 114, 105, 100, 103, 101, 32, 105, 110, 115, 116, 101, 97, 100, 32, 111, 102, 32, 106, 117, 109, 112, 105, 110, 103, 46, 10, 57, 55, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 119, 97, 121, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 102, 105, 115, 115, 117, 114, 101, 46, 10, 57, 56, 9, 89, 111, 117, 39, 114, 101, 32, 110, 111, 116, 32, 99, 97, 114, 114, 121, 105, 110, 103, 32, 97, 110, 121, 116, 104, 105, 110, 103, 46, 10, 57, 57, 9, 89, 111, 117, 32, 97, 114, 101, 32, 99, 117, 114, 114, 101, 110, 116, 108, 121, 32, 104, 111, 108, 100, 105, 110, 103, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 58, 10, 49, 48, 48, 9, 73, 116, 39, 115, 32, 110, 111, 116, 32, 104, 117, 110, 103, 114, 121, 32, 40, 105, 116, 39, 115, 32, 109, 101, 114, 101, 108, 121, 32, 112, 105, 110, 105, 110, 39, 32, 102, 111, 114, 32, 116, 104, 101, 32, 102, 106, 111, 114, 100, 115, 41, 46, 32, 32, 66, 101, 115, 105, 100, 101, 115, 44, 32, 121, 111, 117, 10, 49, 48, 48, 9, 104, 97, 118, 101, 32, 110, 111, 32, 98, 105, 114, 100, 32, 115, 101, 101, 100, 46, 10, 49, 48, 49, 9, 84, 104, 101, 32, 115, 110, 97, 107, 101, 32, 104, 97, 115, 32, 110, 111, 119, 32, 100, 101, 118, 111, 117, 114, 101, 100, 32, 121, 111, 117, 114, 32, 98, 105, 114, 100, 46, 10, 49, 48, 50, 9, 84, 104, 101, 114, 101, 39, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 105, 116, 32, 119, 97, 110, 116, 115, 32, 116, 111, 32, 101, 97, 116, 32, 40, 101, 120, 99, 101, 112, 116, 32, 112, 101, 114, 104, 97, 112, 115, 32, 121, 111, 117, 41, 46, 10, 49, 48, 51, 9, 89, 111, 117, 32, 102, 111, 111, 108, 44, 32, 100, 119, 97, 114, 118, 101, 115, 32, 101, 97, 116, 32, 111, 110, 108, 121, 32, 99, 111, 97, 108, 33, 32, 32, 78, 111, 119, 32, 121, 111, 117, 39, 118, 101, 32, 109, 97, 100, 101, 32, 104, 105, 109, 32, 42, 82, 69, 65, 76, 76, 89, 42, 32, 109, 97, 100, 33, 33, 10, 49, 48, 52, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 110, 111, 116, 104, 105, 110, 103, 32, 105, 110, 32, 119, 104, 105, 99, 104, 32, 116, 111, 32, 99, 97, 114, 114, 121, 32, 105, 116, 46, 10, 49, 48, 53, 9, 89, 111, 117, 114, 32, 98, 111, 116, 116, 108, 101, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 102, 117, 108, 108, 46, 10, 49, 48, 54, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 119, 105, 116, 104, 32, 119, 104, 105, 99, 104, 32, 116, 111, 32, 102, 105, 108, 108, 32, 116, 104, 101, 32, 98, 111, 116, 116, 108, 101, 46, 10, 49, 48, 55, 9, 89, 111, 117, 114, 32, 98, 111, 116, 116, 108, 101, 32, 105, 115, 32, 110, 111, 119, 32, 102, 117, 108, 108, 32, 111, 102, 32, 119, 97, 116, 101, 114, 46, 10, 49, 48, 56, 9, 89, 111, 117, 114, 32, 98, 111, 116, 116, 108, 101, 32, 105, 115, 32, 110, 111, 119, 32, 102, 117, 108, 108, 32, 111, 102, 32, 111, 105, 108, 46, 10, 49, 48, 57, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 102, 105, 108, 108, 32, 116, 104, 97, 116, 46, 10, 49, 49, 48, 9, 68, 111, 110, 39, 116, 32, 98, 101, 32, 114, 105, 100, 105, 99, 117, 108, 111, 117, 115, 33, 10, 49, 49, 49, 9, 84, 104, 101, 32, 100, 111, 111, 114, 32, 105, 115, 32, 101, 120, 116, 114, 101, 109, 101, 108, 121, 32, 114, 117, 115, 116, 121, 32, 97, 110, 100, 32, 114, 101, 102, 117, 115, 101, 115, 32, 116, 111, 32, 111, 112, 101, 110, 46, 10, 49, 49, 50, 9, 84, 104, 101, 32, 112, 108, 97, 110, 116, 32, 105, 110, 100, 105, 103, 110, 97, 110, 116, 108, 121, 32, 115, 104, 97, 107, 101, 115, 32, 116, 104, 101, 32, 111, 105, 108, 32, 111, 102, 102, 32, 105, 116, 115, 32, 108, 101, 97, 118, 101, 115, 32, 97, 110, 100, 32, 97, 115, 107, 115, 44, 32, 34, 87, 97, 116, 101, 114, 63, 34, 10, 49, 49, 51, 9, 84, 104, 101, 32, 104, 105, 110, 103, 101, 115, 32, 97, 114, 101, 32, 113, 117, 105, 116, 101, 32, 116, 104, 111, 114, 111, 117, 103, 104, 108, 121, 32, 114, 117, 115, 116, 101, 100, 32, 110, 111, 119, 32, 97, 110, 100, 32, 119, 111, 110, 39, 116, 32, 98, 117, 100, 103, 101, 46, 10, 49, 49, 52, 9, 84, 104, 101, 32, 111, 105, 108, 32, 104, 97, 115, 32, 102, 114, 101, 101, 100, 32, 117, 112, 32, 116, 104, 101, 32, 104, 105, 110, 103, 101, 115, 32, 115, 111, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 100, 111, 111, 114, 32, 119, 105, 108, 108, 32, 110, 111, 119, 32, 109, 111, 118, 101, 44, 10, 49, 49, 52, 9, 97, 108, 116, 104, 111, 117, 103, 104, 32, 105, 116, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 115, 111, 109, 101, 32, 101, 102, 102, 111, 114, 116, 46, 10, 49, 49, 53, 9, 84, 104, 101, 32, 112, 108, 97, 110, 116, 32, 104, 97, 115, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 97, 108, 108, 121, 32, 100, 101, 101, 112, 32, 114, 111, 111, 116, 115, 32, 97, 110, 100, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 112, 117, 108, 108, 101, 100, 32, 102, 114, 101, 101, 46, 10, 49, 49, 54, 9, 84, 104, 101, 32, 100, 119, 97, 114, 118, 101, 115, 39, 32, 107, 110, 105, 118, 101, 115, 32, 118, 97, 110, 105, 115, 104, 32, 97, 115, 32, 116, 104, 101, 121, 32, 115, 116, 114, 105, 107, 101, 32, 116, 104, 101, 32, 119, 97, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 99, 97, 118, 101, 46, 10, 49, 49, 55, 9, 83, 111, 109, 101, 116, 104, 105, 110, 103, 32, 121, 111, 117, 39, 114, 101, 32, 99, 97, 114, 114, 121, 105, 110, 103, 32, 119, 111, 110, 39, 116, 32, 102, 105, 116, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 116, 117, 110, 110, 101, 108, 32, 119, 105, 116, 104, 32, 121, 111, 117, 46, 10, 49, 49, 55, 9, 89, 111, 117, 39, 100, 32, 98, 101, 115, 116, 32, 116, 97, 107, 101, 32, 105, 110, 118, 101, 110, 116, 111, 114, 121, 32, 97, 110, 100, 32, 100, 114, 111, 112, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 46, 10, 49, 49, 56, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 102, 105, 116, 32, 116, 104, 105, 115, 32, 102, 105, 118, 101, 45, 102, 111, 111, 116, 32, 99, 108, 97, 109, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 97, 116, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 33, 10, 49, 49, 57, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 102, 105, 116, 32, 116, 104, 105, 115, 32, 102, 105, 118, 101, 45, 102, 111, 111, 116, 32, 111, 121, 115, 116, 101, 114, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 97, 116, 32, 108, 105, 116, 116, 108, 101, 32, 112, 97, 115, 115, 97, 103, 101, 33, 10, 49, 50, 48, 9, 73, 32, 97, 100, 118, 105, 115, 101, 32, 121, 111, 117, 32, 116, 111, 32, 112, 117, 116, 32, 100, 111, 119, 110, 32, 116, 104, 101, 32, 99, 108, 97, 109, 32, 98, 101, 102, 111, 114, 101, 32, 111, 112, 101, 110, 105, 110, 103, 32, 105, 116, 46, 32, 32, 62, 83, 84, 82, 65, 73, 78, 33, 60, 10, 49, 50, 49, 9, 73, 32, 97, 100, 118, 105, 115, 101, 32, 121, 111, 117, 32, 116, 111, 32, 112, 117, 116, 32, 100, 111, 119, 110, 32, 116, 104, 101, 32, 111, 121, 115, 116, 101, 114, 32, 98, 101, 102, 111, 114, 101, 32, 111, 112, 101, 110, 105, 110, 103, 32, 105, 116, 46, 32, 32, 62, 87, 82, 69, 78, 67, 72, 33, 60, 10, 49, 50, 50, 9, 89, 111, 117, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 115, 116, 114, 111, 110, 103, 32, 101, 110, 111, 117, 103, 104, 32, 116, 111, 32, 111, 112, 101, 110, 32, 116, 104, 101, 32, 99, 108, 97, 109, 46, 10, 49, 50, 51, 9, 89, 111, 117, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 115, 116, 114, 111, 110, 103, 32, 101, 110, 111, 117, 103, 104, 32, 116, 111, 32, 111, 112, 101, 110, 32, 116, 104, 101, 32, 111, 121, 115, 116, 101, 114, 46, 10, 49, 50, 52, 9, 65, 32, 103, 108, 105, 115, 116, 101, 110, 105, 110, 103, 32, 112, 101, 97, 114, 108, 32, 102, 97, 108, 108, 115, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 99, 108, 97, 109, 32, 97, 110, 100, 32, 114, 111, 108, 108, 115, 32, 97, 119, 97, 121, 46, 32, 32, 71, 111, 111, 100, 110, 101, 115, 115, 44, 10, 49, 50, 52, 9, 116, 104, 105, 115, 32, 109, 117, 115, 116, 32, 114, 101, 97, 108, 108, 121, 32, 98, 101, 32, 97, 110, 32, 111, 121, 115, 116, 101, 114, 46, 32, 32, 40, 73, 32, 110, 101, 118, 101, 114, 32, 119, 97, 115, 32, 118, 101, 114, 121, 32, 103, 111, 111, 100, 32, 97, 116, 32, 105, 100, 101, 110, 116, 105, 102, 121, 105, 110, 103, 10, 49, 50, 52, 9, 98, 105, 118, 97, 108, 118, 101, 115, 46, 41, 32, 32, 87, 104, 97, 116, 101, 118, 101, 114, 32, 105, 116, 32, 105, 115, 44, 32, 105, 116, 32, 104, 97, 115, 32, 110, 111, 119, 32, 115, 110, 97, 112, 112, 101, 100, 32, 115, 104, 117, 116, 32, 97, 103, 97, 105, 110, 46, 10, 49, 50, 53, 9, 84, 104, 101, 32, 111, 121, 115, 116, 101, 114, 32, 99, 114, 101, 97, 107, 115, 32, 111, 112, 101, 110, 44, 32, 114, 101, 118, 101, 97, 108, 105, 110, 103, 32, 110, 111, 116, 104, 105, 110, 103, 32, 98, 117, 116, 32, 111, 121, 115, 116, 101, 114, 32, 105, 110, 115, 105, 100, 101, 46, 32, 32, 73, 116, 10, 49, 50, 53, 9, 112, 114, 111, 109, 112, 116, 108, 121, 32, 115, 110, 97, 112, 115, 32, 115, 104, 117, 116, 32, 97, 103, 97, 105, 110, 46, 10, 49, 50, 54, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 99, 114, 97, 119, 108, 101, 100, 32, 97, 114, 111, 117, 110, 100, 32, 105, 110, 32, 115, 111, 109, 101, 32, 108, 105, 116, 116, 108, 101, 32, 104, 111, 108, 101, 115, 32, 97, 110, 100, 32, 102, 111, 117, 110, 100, 32, 121, 111, 117, 114, 32, 119, 97, 121, 10, 49, 50, 54, 9, 98, 108, 111, 99, 107, 101, 100, 32, 98, 121, 32, 97, 32, 114, 101, 99, 101, 110, 116, 32, 99, 97, 118, 101, 45, 105, 110, 46, 32, 32, 89, 111, 117, 32, 97, 114, 101, 32, 110, 111, 119, 32, 98, 97, 99, 107, 32, 105, 110, 32, 116, 104, 101, 32, 109, 97, 105, 110, 32, 112, 97, 115, 115, 97, 103, 101, 46, 10, 49, 50, 55, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 102, 97, 105, 110, 116, 32, 114, 117, 115, 116, 108, 105, 110, 103, 32, 110, 111, 105, 115, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 100, 97, 114, 107, 110, 101, 115, 115, 32, 98, 101, 104, 105, 110, 100, 32, 121, 111, 117, 46, 10, 49, 50, 56, 9, 79, 117, 116, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 104, 97, 100, 111, 119, 115, 32, 98, 101, 104, 105, 110, 100, 32, 121, 111, 117, 32, 112, 111, 117, 110, 99, 101, 115, 32, 97, 32, 98, 101, 97, 114, 100, 101, 100, 32, 112, 105, 114, 97, 116, 101, 33, 32, 32, 34, 72, 97, 114, 44, 32, 104, 97, 114, 44, 34, 10, 49, 50, 56, 9, 104, 101, 32, 99, 104, 111, 114, 116, 108, 101, 115, 44, 32, 34, 73, 39, 108, 108, 32, 106, 117, 115, 116, 32, 116, 97, 107, 101, 32, 97, 108, 108, 32, 116, 104, 105, 115, 32, 98, 111, 111, 116, 121, 32, 97, 110, 100, 32, 104, 105, 100, 101, 32, 105, 116, 32, 97, 119, 97, 121, 32, 119, 105, 116, 104, 32, 109, 101, 10, 49, 50, 56, 9, 99, 104, 101, 115, 116, 32, 100, 101, 101, 112, 32, 105, 110, 32, 116, 104, 101, 32, 109, 97, 122, 101, 33, 34, 32, 32, 72, 101, 32, 115, 110, 97, 116, 99, 104, 101, 115, 32, 121, 111, 117, 114, 32, 116, 114, 101, 97, 115, 117, 114, 101, 32, 97, 110, 100, 32, 118, 97, 110, 105, 115, 104, 101, 115, 32, 105, 110, 116, 111, 10, 49, 50, 56, 9, 116, 104, 101, 32, 103, 108, 111, 111, 109, 46, 10, 49, 50, 57, 9, 65, 32, 115, 101, 112, 117, 108, 99, 104, 114, 97, 108, 32, 118, 111, 105, 99, 101, 32, 114, 101, 118, 101, 114, 98, 101, 114, 97, 116, 105, 110, 103, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 99, 97, 118, 101, 44, 32, 115, 97, 121, 115, 44, 32, 34, 67, 97, 118, 101, 32, 99, 108, 111, 115, 105, 110, 103, 10, 49, 50, 57, 9, 115, 111, 111, 110, 46, 32, 32, 65, 108, 108, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 114, 115, 32, 101, 120, 105, 116, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 32, 116, 104, 114, 111, 117, 103, 104, 32, 109, 97, 105, 110, 32, 111, 102, 102, 105, 99, 101, 46, 34, 10, 49, 51, 48, 9, 65, 32, 109, 121, 115, 116, 101, 114, 105, 111, 117, 115, 32, 114, 101, 99, 111, 114, 100, 101, 100, 32, 118, 111, 105, 99, 101, 32, 103, 114, 111, 97, 110, 115, 32, 105, 110, 116, 111, 32, 108, 105, 102, 101, 32, 97, 110, 100, 32, 97, 110, 110, 111, 117, 110, 99, 101, 115, 58, 10, 49, 51, 48, 9, 32, 32, 32, 34, 84, 104, 105, 115, 32, 101, 120, 105, 116, 32, 105, 115, 32, 99, 108, 111, 115, 101, 100, 46, 32, 32, 80, 108, 101, 97, 115, 101, 32, 108, 101, 97, 118, 101, 32, 118, 105, 97, 32, 109, 97, 105, 110, 32, 111, 102, 102, 105, 99, 101, 46, 34, 10, 49, 51, 49, 9, 73, 116, 32, 108, 111, 111, 107, 115, 32, 97, 115, 32, 116, 104, 111, 117, 103, 104, 32, 121, 111, 117, 39, 114, 101, 32, 100, 101, 97, 100, 46, 32, 32, 87, 101, 108, 108, 44, 32, 115, 101, 101, 105, 110, 103, 32, 97, 115, 32, 104, 111, 119, 32, 105, 116, 39, 115, 32, 115, 111, 32, 99, 108, 111, 115, 101, 32, 116, 111, 10, 49, 51, 49, 9, 99, 108, 111, 115, 105, 110, 103, 32, 116, 105, 109, 101, 32, 97, 110, 121, 119, 97, 121, 44, 32, 73, 32, 116, 104, 105, 110, 107, 32, 119, 101, 39, 108, 108, 32, 106, 117, 115, 116, 32, 99, 97, 108, 108, 32, 105, 116, 32, 97, 32, 100, 97, 121, 46, 10, 49, 51, 50, 9, 84, 104, 101, 32, 115, 101, 112, 117, 108, 99, 104, 114, 97, 108, 32, 118, 111, 105, 99, 101, 32, 105, 110, 116, 111, 110, 101, 115, 44, 32, 34, 84, 104, 101, 32, 99, 97, 118, 101, 32, 105, 115, 32, 110, 111, 119, 32, 99, 108, 111, 115, 101, 100, 46, 34, 32, 32, 65, 115, 32, 116, 104, 101, 32, 101, 99, 104, 111, 101, 115, 10, 49, 51, 50, 9, 102, 97, 100, 101, 44, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 98, 108, 105, 110, 100, 105, 110, 103, 32, 102, 108, 97, 115, 104, 32, 111, 102, 32, 108, 105, 103, 104, 116, 32, 40, 97, 110, 100, 32, 97, 32, 115, 109, 97, 108, 108, 32, 112, 117, 102, 102, 32, 111, 102, 32, 111, 114, 97, 110, 103, 101, 10, 49, 51, 50, 9, 115, 109, 111, 107, 101, 41, 46, 32, 46, 32, 46, 32, 46, 32, 32, 32, 32, 65, 115, 32, 121, 111, 117, 114, 32, 101, 121, 101, 115, 32, 114, 101, 102, 111, 99, 117, 115, 44, 32, 121, 111, 117, 32, 108, 111, 111, 107, 32, 97, 114, 111, 117, 110, 100, 32, 97, 110, 100, 32, 102, 105, 110, 100, 46, 46, 46, 10, 49, 51, 51, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 111, 117, 100, 32, 101, 120, 112, 108, 111, 115, 105, 111, 110, 44, 32, 97, 110, 100, 32, 97, 32, 116, 119, 101, 110, 116, 121, 45, 102, 111, 111, 116, 32, 104, 111, 108, 101, 32, 97, 112, 112, 101, 97, 114, 115, 32, 105, 110, 32, 116, 104, 101, 32, 102, 97, 114, 10, 49, 51, 51, 9, 119, 97, 108, 108, 44, 32, 98, 117, 114, 121, 105, 110, 103, 32, 116, 104, 101, 32, 100, 119, 97, 114, 118, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 114, 117, 98, 98, 108, 101, 46, 32, 32, 89, 111, 117, 32, 109, 97, 114, 99, 104, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 104, 111, 108, 101, 10, 49, 51, 51, 9, 97, 110, 100, 32, 102, 105, 110, 100, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 105, 110, 32, 116, 104, 101, 32, 109, 97, 105, 110, 32, 111, 102, 102, 105, 99, 101, 44, 32, 119, 104, 101, 114, 101, 32, 97, 32, 99, 104, 101, 101, 114, 105, 110, 103, 32, 98, 97, 110, 100, 32, 111, 102, 10, 49, 51, 51, 9, 102, 114, 105, 101, 110, 100, 108, 121, 32, 101, 108, 118, 101, 115, 32, 99, 97, 114, 114, 121, 32, 116, 104, 101, 32, 99, 111, 110, 113, 117, 101, 114, 105, 110, 103, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 114, 32, 111, 102, 102, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 115, 117, 110, 115, 101, 116, 46, 10, 49, 51, 52, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 111, 117, 100, 32, 101, 120, 112, 108, 111, 115, 105, 111, 110, 44, 32, 97, 110, 100, 32, 97, 32, 116, 119, 101, 110, 116, 121, 45, 102, 111, 111, 116, 32, 104, 111, 108, 101, 32, 97, 112, 112, 101, 97, 114, 115, 32, 105, 110, 32, 116, 104, 101, 32, 102, 97, 114, 10, 49, 51, 52, 9, 119, 97, 108, 108, 44, 32, 98, 117, 114, 121, 105, 110, 103, 32, 116, 104, 101, 32, 115, 110, 97, 107, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 114, 117, 98, 98, 108, 101, 46, 32, 32, 65, 32, 114, 105, 118, 101, 114, 32, 111, 102, 32, 109, 111, 108, 116, 101, 110, 32, 108, 97, 118, 97, 32, 112, 111, 117, 114, 115, 10, 49, 51, 52, 9, 105, 110, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 104, 111, 108, 101, 44, 32, 100, 101, 115, 116, 114, 111, 121, 105, 110, 103, 32, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 32, 105, 110, 32, 105, 116, 115, 32, 112, 97, 116, 104, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 121, 111, 117, 33, 10, 49, 51, 53, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 111, 117, 100, 32, 101, 120, 112, 108, 111, 115, 105, 111, 110, 44, 32, 97, 110, 100, 32, 121, 111, 117, 32, 97, 114, 101, 32, 115, 117, 100, 100, 101, 110, 108, 121, 32, 115, 112, 108, 97, 115, 104, 101, 100, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 10, 49, 51, 53, 9, 119, 97, 108, 108, 115, 32, 111, 102, 32, 116, 104, 101, 32, 114, 111, 111, 109, 46, 10, 49, 51, 54, 9, 84, 104, 101, 32, 114, 101, 115, 117, 108, 116, 105, 110, 103, 32, 114, 117, 99, 107, 117, 115, 32, 104, 97, 115, 32, 97, 119, 97, 107, 101, 110, 101, 100, 32, 116, 104, 101, 32, 100, 119, 97, 114, 118, 101, 115, 46, 32, 32, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 110, 111, 119, 32, 115, 101, 118, 101, 114, 97, 108, 10, 49, 51, 54, 9, 116, 104, 114, 101, 97, 116, 101, 110, 105, 110, 103, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 118, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 111, 109, 32, 119, 105, 116, 104, 32, 121, 111, 117, 33, 32, 32, 77, 111, 115, 116, 32, 111, 102, 32, 116, 104, 101, 109, 32, 116, 104, 114, 111, 119, 10, 49, 51, 54, 9, 107, 110, 105, 118, 101, 115, 32, 97, 116, 32, 121, 111, 117, 33, 32, 32, 65, 108, 108, 32, 111, 102, 32, 116, 104, 101, 109, 32, 103, 101, 116, 32, 121, 111, 117, 33, 10, 49, 51, 55, 9, 79, 104, 44, 32, 108, 101, 97, 118, 101, 32, 116, 104, 101, 32, 112, 111, 111, 114, 32, 117, 110, 104, 97, 112, 112, 121, 32, 98, 105, 114, 100, 32, 97, 108, 111, 110, 101, 46, 10, 49, 51, 56, 9, 73, 32, 100, 97, 114, 101, 115, 97, 121, 32, 119, 104, 97, 116, 101, 118, 101, 114, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 105, 115, 32, 97, 114, 111, 117, 110, 100, 32, 104, 101, 114, 101, 32, 115, 111, 109, 101, 119, 104, 101, 114, 101, 46, 10, 49, 51, 57, 9, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 116, 104, 101, 32, 119, 111, 114, 100, 32, 34, 115, 116, 111, 112, 34, 46, 32, 32, 85, 115, 101, 32, 34, 113, 117, 105, 116, 34, 32, 105, 102, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 111, 32, 103, 105, 118, 101, 32, 117, 112, 46, 10, 49, 52, 48, 9, 89, 111, 117, 32, 99, 97, 110, 39, 116, 32, 103, 101, 116, 32, 116, 104, 101, 114, 101, 32, 102, 114, 111, 109, 32, 104, 101, 114, 101, 46, 10, 49, 52, 49, 9, 89, 111, 117, 32, 97, 114, 101, 32, 98, 101, 105, 110, 103, 32, 102, 111, 108, 108, 111, 119, 101, 100, 32, 98, 121, 32, 97, 32, 118, 101, 114, 121, 32, 108, 97, 114, 103, 101, 44, 32, 116, 97, 109, 101, 32, 98, 101, 97, 114, 46, 10, 49, 52, 50, 9, 70, 111, 114, 32, 97, 32, 115, 117, 109, 109, 97, 114, 121, 32, 111, 102, 32, 116, 104, 101, 32, 109, 111, 115, 116, 32, 114, 101, 99, 101, 110, 116, 32, 99, 104, 97, 110, 103, 101, 115, 32, 116, 111, 32, 116, 104, 101, 32, 103, 97, 109, 101, 44, 32, 115, 97, 121, 32, 34, 110, 101, 119, 115, 34, 46, 10, 49, 52, 50, 9, 73, 102, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 111, 32, 101, 110, 100, 32, 121, 111, 117, 114, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 32, 101, 97, 114, 108, 121, 44, 32, 115, 97, 121, 32, 34, 113, 117, 105, 116, 34, 46, 32, 32, 84, 111, 32, 115, 117, 115, 112, 101, 110, 100, 32, 121, 111, 117, 114, 10, 49, 52, 50, 9, 97, 100, 118, 101, 110, 116, 117, 114, 101, 32, 115, 117, 99, 104, 32, 116, 104, 97, 116, 32, 121, 111, 117, 32, 99, 97, 110, 32, 99, 111, 110, 116, 105, 110, 117, 101, 32, 108, 97, 116, 101, 114, 44, 32, 115, 97, 121, 32, 34, 115, 117, 115, 112, 101, 110, 100, 34, 32, 40, 111, 114, 32, 34, 112, 97, 117, 115, 101, 34, 10, 49, 52, 50, 9, 111, 114, 32, 34, 115, 97, 118, 101, 34, 41, 46, 32, 32, 84, 111, 32, 115, 101, 101, 32, 104, 111, 119, 32, 119, 101, 108, 108, 32, 121, 111, 117, 39, 114, 101, 32, 100, 111, 105, 110, 103, 44, 32, 115, 97, 121, 32, 34, 115, 99, 111, 114, 101, 34, 46, 32, 32, 84, 111, 32, 103, 101, 116, 32, 102, 117, 108, 108, 10, 49, 52, 50, 9, 99, 114, 101, 100, 105, 116, 32, 102, 111, 114, 32, 97, 32, 116, 114, 101, 97, 115, 117, 114, 101, 44, 32, 121, 111, 117, 32, 109, 117, 115, 116, 32, 104, 97, 118, 101, 32, 108, 101, 102, 116, 32, 105, 116, 32, 115, 97, 102, 101, 108, 121, 32, 105, 110, 32, 116, 104, 101, 32, 98, 117, 105, 108, 100, 105, 110, 103, 44, 10, 49, 52, 50, 9, 116, 104, 111, 117, 103, 104, 32, 121, 111, 117, 32, 103, 101, 116, 32, 112, 97, 114, 116, 105, 97, 108, 32, 99, 114, 101, 100, 105, 116, 32, 106, 117, 115, 116, 32, 102, 111, 114, 32, 108, 111, 99, 97, 116, 105, 110, 103, 32, 105, 116, 46, 32, 32, 89, 111, 117, 32, 108, 111, 115, 101, 32, 112, 111, 105, 110, 116, 115, 10, 49, 52, 50, 9, 102, 111, 114, 32, 103, 101, 116, 116, 105, 110, 103, 32, 107, 105, 108, 108, 101, 100, 44, 32, 111, 114, 32, 102, 111, 114, 32, 113, 117, 105, 116, 116, 105, 110, 103, 44, 32, 116, 104, 111, 117, 103, 104, 32, 116, 104, 101, 32, 102, 111, 114, 109, 101, 114, 32, 99, 111, 115, 116, 115, 32, 121, 111, 117, 32, 109, 111, 114, 101, 46, 10, 49, 52, 50, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 97, 108, 115, 111, 32, 112, 111, 105, 110, 116, 115, 32, 98, 97, 115, 101, 100, 32, 111, 110, 32, 104, 111, 119, 32, 109, 117, 99, 104, 32, 40, 105, 102, 32, 97, 110, 121, 41, 32, 111, 102, 32, 116, 104, 101, 32, 99, 97, 118, 101, 32, 121, 111, 117, 39, 118, 101, 10, 49, 52, 50, 9, 109, 97, 110, 97, 103, 101, 100, 32, 116, 111, 32, 101, 120, 112, 108, 111, 114, 101, 59, 32, 105, 110, 32, 112, 97, 114, 116, 105, 99, 117, 108, 97, 114, 44, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 108, 97, 114, 103, 101, 32, 98, 111, 110, 117, 115, 32, 106, 117, 115, 116, 32, 102, 111, 114, 10, 49, 52, 50, 9, 103, 101, 116, 116, 105, 110, 103, 32, 105, 110, 32, 40, 116, 111, 32, 100, 105, 115, 116, 105, 110, 103, 117, 105, 115, 104, 32, 116, 104, 101, 32, 98, 101, 103, 105, 110, 110, 101, 114, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 114, 101, 115, 116, 32, 111, 102, 32, 116, 104, 101, 32, 112, 97, 99, 107, 41, 44, 10, 49, 52, 50, 9, 97, 110, 100, 32, 116, 104, 101, 114, 101, 32, 97, 114, 101, 32, 111, 116, 104, 101, 114, 32, 119, 97, 121, 115, 32, 116, 111, 32, 100, 101, 116, 101, 114, 109, 105, 110, 101, 32, 119, 104, 101, 116, 104, 101, 114, 32, 121, 111, 117, 39, 118, 101, 32, 98, 101, 101, 110, 32, 116, 104, 114, 111, 117, 103, 104, 32, 115, 111, 109, 101, 10, 49, 52, 50, 9, 111, 102, 32, 116, 104, 101, 32, 109, 111, 114, 101, 32, 104, 97, 114, 114, 111, 119, 105, 110, 103, 32, 115, 101, 99, 116, 105, 111, 110, 115, 46, 32, 32, 73, 102, 32, 121, 111, 117, 32, 116, 104, 105, 110, 107, 32, 121, 111, 117, 39, 118, 101, 32, 102, 111, 117, 110, 100, 32, 97, 108, 108, 32, 116, 104, 101, 10, 49, 52, 50, 9, 116, 114, 101, 97, 115, 117, 114, 101, 115, 44, 32, 106, 117, 115, 116, 32, 107, 101, 101, 112, 32, 101, 120, 112, 108, 111, 114, 105, 110, 103, 32, 102, 111, 114, 32, 97, 32, 119, 104, 105, 108, 101, 46, 32, 32, 73, 102, 32, 110, 111, 116, 104, 105, 110, 103, 32, 105, 110, 116, 101, 114, 101, 115, 116, 105, 110, 103, 10, 49, 52, 50, 9, 104, 97, 112, 112, 101, 110, 115, 44, 32, 121, 111, 117, 32, 104, 97, 118, 101, 110, 39, 116, 32, 102, 111, 117, 110, 100, 32, 116, 104, 101, 109, 32, 97, 108, 108, 32, 121, 101, 116, 46, 32, 32, 73, 102, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 105, 110, 116, 101, 114, 101, 115, 116, 105, 110, 103, 10, 49, 52, 50, 9, 42, 68, 79, 69, 83, 42, 32, 104, 97, 112, 112, 101, 110, 32, 40, 105, 110, 99, 105, 100, 101, 110, 116, 97, 108, 108, 121, 44, 32, 116, 104, 101, 114, 101, 32, 42, 65, 82, 69, 42, 32, 119, 97, 121, 115, 32, 116, 111, 32, 104, 97, 115, 116, 101, 110, 32, 116, 104, 105, 110, 103, 115, 32, 97, 108, 111, 110, 103, 41, 44, 10, 49, 52, 50, 9, 105, 116, 32, 109, 101, 97, 110, 115, 32, 121, 111, 117, 39, 114, 101, 32, 103, 101, 116, 116, 105, 110, 103, 32, 97, 32, 98, 111, 110, 117, 115, 32, 97, 110, 100, 32, 104, 97, 118, 101, 32, 97, 110, 32, 111, 112, 112, 111, 114, 116, 117, 110, 105, 116, 121, 32, 116, 111, 32, 103, 97, 114, 110, 101, 114, 32, 109, 97, 110, 121, 10, 49, 52, 50, 9, 109, 111, 114, 101, 32, 112, 111, 105, 110, 116, 115, 32, 105, 110, 32, 116, 104, 101, 32, 77, 97, 115, 116, 101, 114, 39, 115, 32, 115, 101, 99, 116, 105, 111, 110, 46, 32, 32, 73, 32, 109, 97, 121, 32, 111, 99, 99, 97, 115, 105, 111, 110, 97, 108, 108, 121, 32, 111, 102, 102, 101, 114, 32, 104, 105, 110, 116, 115, 10, 49, 52, 50, 9, 105, 102, 32, 121, 111, 117, 32, 115, 101, 101, 109, 32, 116, 111, 32, 98, 101, 32, 104, 97, 118, 105, 110, 103, 32, 116, 114, 111, 117, 98, 108, 101, 46, 32, 32, 73, 102, 32, 73, 32, 100, 111, 44, 32, 73, 39, 108, 108, 32, 119, 97, 114, 110, 32, 121, 111, 117, 32, 105, 110, 32, 97, 100, 118, 97, 110, 99, 101, 10, 49, 52, 50, 9, 104, 111, 119, 32, 109, 117, 99, 104, 32, 105, 116, 32, 119, 105, 108, 108, 32, 97, 102, 102, 101, 99, 116, 32, 121, 111, 117, 114, 32, 115, 99, 111, 114, 101, 32, 116, 111, 32, 97, 99, 99, 101, 112, 116, 32, 116, 104, 101, 32, 104, 105, 110, 116, 115, 46, 32, 32, 70, 105, 110, 97, 108, 108, 121, 44, 32, 116, 111, 10, 49, 52, 50, 9, 115, 97, 118, 101, 32, 116, 105, 109, 101, 44, 32, 121, 111, 117, 32, 109, 97, 121, 32, 115, 112, 101, 99, 105, 102, 121, 32, 34, 98, 114, 105, 101, 102, 34, 44, 32, 119, 104, 105, 99, 104, 32, 116, 101, 108, 108, 115, 32, 109, 101, 32, 110, 101, 118, 101, 114, 32, 116, 111, 32, 114, 101, 112, 101, 97, 116, 32, 116, 104, 101, 10, 49, 52, 50, 9, 102, 117, 108, 108, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 111, 102, 32, 97, 32, 112, 108, 97, 99, 101, 32, 117, 110, 108, 101, 115, 115, 32, 121, 111, 117, 32, 101, 120, 112, 108, 105, 99, 105, 116, 108, 121, 32, 97, 115, 107, 32, 109, 101, 32, 116, 111, 46, 10, 49, 52, 51, 9, 78, 111, 119, 32, 108, 101, 116, 39, 115, 32, 115, 101, 101, 32, 121, 111, 117, 32, 100, 111, 32, 105, 116, 32, 119, 105, 116, 104, 111, 117, 116, 32, 115, 117, 115, 112, 101, 110, 100, 105, 110, 103, 32, 105, 110, 32, 109, 105, 100, 45, 65, 100, 118, 101, 110, 116, 117, 114, 101, 46, 10, 49, 52, 52, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 119, 105, 116, 104, 32, 119, 104, 105, 99, 104, 32, 116, 111, 32, 102, 105, 108, 108, 32, 105, 116, 46, 10, 49, 52, 53, 9, 84, 104, 101, 32, 115, 117, 100, 100, 101, 110, 32, 99, 104, 97, 110, 103, 101, 32, 105, 110, 32, 116, 101, 109, 112, 101, 114, 97, 116, 117, 114, 101, 32, 104, 97, 115, 32, 100, 101, 108, 105, 99, 97, 116, 101, 108, 121, 32, 115, 104, 97, 116, 116, 101, 114, 101, 100, 32, 116, 104, 101, 32, 118, 97, 115, 101, 46, 10, 49, 52, 54, 9, 73, 116, 32, 105, 115, 32, 98, 101, 121, 111, 110, 100, 32, 121, 111, 117, 114, 32, 112, 111, 119, 101, 114, 32, 116, 111, 32, 100, 111, 32, 116, 104, 97, 116, 46, 10, 49, 52, 55, 9, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 104, 111, 119, 46, 10, 49, 52, 56, 9, 73, 116, 32, 105, 115, 32, 116, 111, 111, 32, 102, 97, 114, 32, 117, 112, 32, 102, 111, 114, 32, 121, 111, 117, 32, 116, 111, 32, 114, 101, 97, 99, 104, 46, 10, 49, 52, 57, 9, 89, 111, 117, 32, 107, 105, 108, 108, 101, 100, 32, 97, 32, 108, 105, 116, 116, 108, 101, 32, 100, 119, 97, 114, 102, 46, 32, 32, 84, 104, 101, 32, 98, 111, 100, 121, 32, 118, 97, 110, 105, 115, 104, 101, 115, 32, 105, 110, 32, 97, 32, 99, 108, 111, 117, 100, 32, 111, 102, 32, 103, 114, 101, 97, 115, 121, 10, 49, 52, 57, 9, 98, 108, 97, 99, 107, 32, 115, 109, 111, 107, 101, 46, 10, 49, 53, 48, 9, 84, 104, 101, 32, 115, 104, 101, 108, 108, 32, 105, 115, 32, 118, 101, 114, 121, 32, 115, 116, 114, 111, 110, 103, 32, 97, 110, 100, 32, 105, 115, 32, 105, 109, 112, 101, 114, 118, 105, 111, 117, 115, 32, 116, 111, 32, 97, 116, 116, 97, 99, 107, 46, 10, 49, 53, 49, 9, 87, 104, 97, 116, 39, 115, 32, 116, 104, 101, 32, 109, 97, 116, 116, 101, 114, 44, 32, 99, 97, 110, 39, 116, 32, 121, 111, 117, 32, 114, 101, 97, 100, 63, 32, 32, 78, 111, 119, 32, 121, 111, 117, 39, 100, 32, 98, 101, 115, 116, 32, 115, 116, 97, 114, 116, 32, 111, 118, 101, 114, 46, 10, 49, 53, 50, 9, 84, 104, 101, 32, 97, 120, 101, 32, 98, 111, 117, 110, 99, 101, 115, 32, 104, 97, 114, 109, 108, 101, 115, 115, 108, 121, 32, 111, 102, 102, 32, 116, 104, 101, 32, 100, 114, 97, 103, 111, 110, 39, 115, 32, 116, 104, 105, 99, 107, 32, 115, 99, 97, 108, 101, 115, 46, 10, 49, 53, 51, 9, 84, 104, 101, 32, 100, 114, 97, 103, 111, 110, 32, 108, 111, 111, 107, 115, 32, 114, 97, 116, 104, 101, 114, 32, 110, 97, 115, 116, 121, 46, 32, 32, 89, 111, 117, 39, 100, 32, 98, 101, 115, 116, 32, 110, 111, 116, 32, 116, 114, 121, 32, 116, 111, 32, 103, 101, 116, 32, 98, 121, 46, 10, 49, 53, 52, 9, 84, 104, 101, 32, 108, 105, 116, 116, 108, 101, 32, 98, 105, 114, 100, 32, 97, 116, 116, 97, 99, 107, 115, 32, 116, 104, 101, 32, 103, 114, 101, 101, 110, 32, 100, 114, 97, 103, 111, 110, 44, 32, 97, 110, 100, 32, 105, 110, 32, 97, 110, 32, 97, 115, 116, 111, 117, 110, 100, 105, 110, 103, 32, 102, 108, 117, 114, 114, 121, 10, 49, 53, 52, 9, 103, 101, 116, 115, 32, 98, 117, 114, 110, 116, 32, 116, 111, 32, 97, 32, 99, 105, 110, 100, 101, 114, 46, 32, 32, 84, 104, 101, 32, 97, 115, 104, 101, 115, 32, 98, 108, 111, 119, 32, 97, 119, 97, 121, 46, 10, 49, 53, 53, 9, 79, 110, 32, 119, 104, 97, 116, 63, 10, 49, 53, 54, 9, 79, 107, 97, 121, 44, 32, 102, 114, 111, 109, 32, 110, 111, 119, 32, 111, 110, 32, 73, 39, 108, 108, 32, 111, 110, 108, 121, 32, 100, 101, 115, 99, 114, 105, 98, 101, 32, 97, 32, 112, 108, 97, 99, 101, 32, 105, 110, 32, 102, 117, 108, 108, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 116, 105, 109, 101, 10, 49, 53, 54, 9, 121, 111, 117, 32, 99, 111, 109, 101, 32, 116, 111, 32, 105, 116, 46, 32, 32, 84, 111, 32, 103, 101, 116, 32, 116, 104, 101, 32, 102, 117, 108, 108, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 97, 121, 32, 34, 108, 111, 111, 107, 34, 46, 10, 49, 53, 55, 9, 84, 114, 111, 108, 108, 115, 32, 97, 114, 101, 32, 99, 108, 111, 115, 101, 32, 114, 101, 108, 97, 116, 105, 118, 101, 115, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 114, 111, 99, 107, 115, 32, 97, 110, 100, 32, 104, 97, 118, 101, 32, 115, 107, 105, 110, 32, 97, 115, 32, 116, 111, 117, 103, 104, 32, 97, 115, 10, 49, 53, 55, 9, 116, 104, 97, 116, 32, 111, 102, 32, 97, 32, 114, 104, 105, 110, 111, 99, 101, 114, 111, 115, 46, 32, 32, 84, 104, 101, 32, 116, 114, 111, 108, 108, 32, 102, 101, 110, 100, 115, 32, 111, 102, 102, 32, 121, 111, 117, 114, 32, 98, 108, 111, 119, 115, 32, 101, 102, 102, 111, 114, 116, 108, 101, 115, 115, 108, 121, 46, 10, 49, 53, 56, 9, 84, 104, 101, 32, 116, 114, 111, 108, 108, 32, 100, 101, 102, 116, 108, 121, 32, 99, 97, 116, 99, 104, 101, 115, 32, 116, 104, 101, 32, 97, 120, 101, 44, 32, 101, 120, 97, 109, 105, 110, 101, 115, 32, 105, 116, 32, 99, 97, 114, 101, 102, 117, 108, 108, 121, 44, 32, 97, 110, 100, 32, 116, 111, 115, 115, 101, 115, 32, 105, 116, 10, 49, 53, 56, 9, 98, 97, 99, 107, 44, 32, 100, 101, 99, 108, 97, 114, 105, 110, 103, 44, 32, 34, 71, 111, 111, 100, 32, 119, 111, 114, 107, 109, 97, 110, 115, 104, 105, 112, 44, 32, 98, 117, 116, 32, 105, 116, 39, 115, 32, 110, 111, 116, 32, 118, 97, 108, 117, 97, 98, 108, 101, 32, 101, 110, 111, 117, 103, 104, 46, 34, 10, 49, 53, 57, 9, 84, 104, 101, 32, 116, 114, 111, 108, 108, 32, 99, 97, 116, 99, 104, 101, 115, 32, 121, 111, 117, 114, 32, 116, 114, 101, 97, 115, 117, 114, 101, 32, 97, 110, 100, 32, 115, 99, 117, 114, 114, 105, 101, 115, 32, 97, 119, 97, 121, 32, 111, 117, 116, 32, 111, 102, 32, 115, 105, 103, 104, 116, 46, 10, 49, 54, 48, 9, 84, 104, 101, 32, 116, 114, 111, 108, 108, 32, 114, 101, 102, 117, 115, 101, 115, 32, 116, 111, 32, 108, 101, 116, 32, 121, 111, 117, 32, 99, 114, 111, 115, 115, 46, 10, 49, 54, 49, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 32, 108, 111, 110, 103, 101, 114, 32, 97, 110, 121, 32, 119, 97, 121, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 46, 10, 49, 54, 50, 9, 74, 117, 115, 116, 32, 97, 115, 32, 121, 111, 117, 32, 114, 101, 97, 99, 104, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 115, 105, 100, 101, 44, 32, 116, 104, 101, 32, 98, 114, 105, 100, 103, 101, 32, 98, 117, 99, 107, 108, 101, 115, 32, 98, 101, 110, 101, 97, 116, 104, 32, 116, 104, 101, 10, 49, 54, 50, 9, 119, 101, 105, 103, 104, 116, 32, 111, 102, 32, 116, 104, 101, 32, 98, 101, 97, 114, 44, 32, 119, 104, 105, 99, 104, 32, 119, 97, 115, 32, 115, 116, 105, 108, 108, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 121, 111, 117, 32, 97, 114, 111, 117, 110, 100, 46, 32, 32, 89, 111, 117, 10, 49, 54, 50, 9, 115, 99, 114, 97, 98, 98, 108, 101, 32, 100, 101, 115, 112, 101, 114, 97, 116, 101, 108, 121, 32, 102, 111, 114, 32, 115, 117, 112, 112, 111, 114, 116, 44, 32, 98, 117, 116, 32, 97, 115, 32, 116, 104, 101, 32, 98, 114, 105, 100, 103, 101, 32, 99, 111, 108, 108, 97, 112, 115, 101, 115, 32, 121, 111, 117, 10, 49, 54, 50, 9, 115, 116, 117, 109, 98, 108, 101, 32, 98, 97, 99, 107, 32, 97, 110, 100, 32, 102, 97, 108, 108, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 46, 10, 49, 54, 51, 9, 84, 104, 101, 32, 98, 101, 97, 114, 32, 108, 117, 109, 98, 101, 114, 115, 32, 116, 111, 119, 97, 114, 100, 32, 116, 104, 101, 32, 116, 114, 111, 108, 108, 44, 32, 119, 104, 111, 32, 108, 101, 116, 115, 32, 111, 117, 116, 32, 97, 32, 115, 116, 97, 114, 116, 108, 101, 100, 32, 115, 104, 114, 105, 101, 107, 32, 97, 110, 100, 10, 49, 54, 51, 9, 115, 99, 117, 114, 114, 105, 101, 115, 32, 97, 119, 97, 121, 46, 32, 32, 84, 104, 101, 32, 98, 101, 97, 114, 32, 115, 111, 111, 110, 32, 103, 105, 118, 101, 115, 32, 117, 112, 32, 116, 104, 101, 32, 112, 117, 114, 115, 117, 105, 116, 32, 97, 110, 100, 32, 119, 97, 110, 100, 101, 114, 115, 32, 98, 97, 99, 107, 46, 10, 49, 54, 52, 9, 84, 104, 101, 32, 97, 120, 101, 32, 109, 105, 115, 115, 101, 115, 32, 97, 110, 100, 32, 108, 97, 110, 100, 115, 32, 110, 101, 97, 114, 32, 116, 104, 101, 32, 98, 101, 97, 114, 32, 119, 104, 101, 114, 101, 32, 121, 111, 117, 32, 99, 97, 110, 39, 116, 32, 103, 101, 116, 32, 97, 116, 32, 105, 116, 46, 10, 49, 54, 53, 9, 87, 105, 116, 104, 32, 119, 104, 97, 116, 63, 32, 32, 89, 111, 117, 114, 32, 98, 97, 114, 101, 32, 104, 97, 110, 100, 115, 63, 32, 32, 65, 103, 97, 105, 110, 115, 116, 32, 42, 72, 73, 83, 42, 32, 98, 101, 97, 114, 32, 104, 97, 110, 100, 115, 63, 63, 10, 49, 54, 54, 9, 84, 104, 101, 32, 98, 101, 97, 114, 32, 105, 115, 32, 99, 111, 110, 102, 117, 115, 101, 100, 59, 32, 104, 101, 32, 111, 110, 108, 121, 32, 119, 97, 110, 116, 115, 32, 116, 111, 32, 98, 101, 32, 121, 111, 117, 114, 32, 102, 114, 105, 101, 110, 100, 46, 10, 49, 54, 55, 9, 70, 111, 114, 32, 99, 114, 121, 105, 110, 103, 32, 111, 117, 116, 32, 108, 111, 117, 100, 44, 32, 116, 104, 101, 32, 112, 111, 111, 114, 32, 116, 104, 105, 110, 103, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 100, 101, 97, 100, 33, 10, 49, 54, 56, 9, 84, 104, 101, 32, 98, 101, 97, 114, 32, 101, 97, 103, 101, 114, 108, 121, 32, 119, 111, 108, 102, 115, 32, 100, 111, 119, 110, 32, 121, 111, 117, 114, 32, 102, 111, 111, 100, 44, 32, 97, 102, 116, 101, 114, 32, 119, 104, 105, 99, 104, 32, 104, 101, 32, 115, 101, 101, 109, 115, 32, 116, 111, 32, 99, 97, 108, 109, 10, 49, 54, 56, 9, 100, 111, 119, 110, 32, 99, 111, 110, 115, 105, 100, 101, 114, 97, 98, 108, 121, 32, 97, 110, 100, 32, 101, 118, 101, 110, 32, 98, 101, 99, 111, 109, 101, 115, 32, 114, 97, 116, 104, 101, 114, 32, 102, 114, 105, 101, 110, 100, 108, 121, 46, 10, 49, 54, 57, 9, 84, 104, 101, 32, 98, 101, 97, 114, 32, 105, 115, 32, 115, 116, 105, 108, 108, 32, 99, 104, 97, 105, 110, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 119, 97, 108, 108, 46, 10, 49, 55, 48, 9, 84, 104, 101, 32, 99, 104, 97, 105, 110, 32, 105, 115, 32, 115, 116, 105, 108, 108, 32, 108, 111, 99, 107, 101, 100, 46, 10, 49, 55, 49, 9, 84, 104, 101, 32, 99, 104, 97, 105, 110, 32, 105, 115, 32, 110, 111, 119, 32, 117, 110, 108, 111, 99, 107, 101, 100, 46, 10, 49, 55, 50, 9, 84, 104, 101, 32, 99, 104, 97, 105, 110, 32, 105, 115, 32, 110, 111, 119, 32, 108, 111, 99, 107, 101, 100, 46, 10, 49, 55, 51, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 116, 111, 32, 119, 104, 105, 99, 104, 32, 116, 104, 101, 32, 99, 104, 97, 105, 110, 32, 99, 97, 110, 32, 98, 101, 32, 108, 111, 99, 107, 101, 100, 46, 10, 49, 55, 52, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 104, 101, 114, 101, 32, 116, 111, 32, 101, 97, 116, 46, 10, 49, 55, 53, 9, 68, 111, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 104, 101, 32, 104, 105, 110, 116, 63, 10, 49, 55, 54, 9, 68, 111, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 104, 101, 108, 112, 32, 103, 101, 116, 116, 105, 110, 103, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 109, 97, 122, 101, 63, 10, 49, 55, 55, 9, 89, 111, 117, 32, 99, 97, 110, 32, 109, 97, 107, 101, 32, 116, 104, 101, 32, 112, 97, 115, 115, 97, 103, 101, 115, 32, 108, 111, 111, 107, 32, 108, 101, 115, 115, 32, 97, 108, 105, 107, 101, 32, 98, 121, 32, 100, 114, 111, 112, 112, 105, 110, 103, 32, 116, 104, 105, 110, 103, 115, 46, 10, 49, 55, 56, 9, 65, 114, 101, 32, 121, 111, 117, 32, 116, 114, 121, 105, 110, 103, 32, 116, 111, 32, 101, 120, 112, 108, 111, 114, 101, 32, 98, 101, 121, 111, 110, 100, 32, 116, 104, 101, 32, 112, 108, 111, 118, 101, 114, 32, 114, 111, 111, 109, 63, 10, 49, 55, 57, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 119, 97, 121, 32, 116, 111, 32, 101, 120, 112, 108, 111, 114, 101, 32, 116, 104, 97, 116, 32, 114, 101, 103, 105, 111, 110, 32, 119, 105, 116, 104, 111, 117, 116, 32, 104, 97, 118, 105, 110, 103, 32, 116, 111, 32, 119, 111, 114, 114, 121, 32, 97, 98, 111, 117, 116, 10, 49, 55, 57, 9, 102, 97, 108, 108, 105, 110, 103, 32, 105, 110, 116, 111, 32, 97, 32, 112, 105, 116, 46, 32, 32, 78, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 111, 98, 106, 101, 99, 116, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 105, 115, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 10, 49, 55, 57, 9, 117, 115, 101, 102, 117, 108, 32, 105, 110, 32, 100, 105, 115, 99, 111, 118, 101, 114, 105, 110, 103, 32, 116, 104, 101, 32, 115, 101, 99, 114, 101, 116, 46, 10, 49, 56, 48, 9, 68, 111, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 104, 101, 108, 112, 32, 103, 101, 116, 116, 105, 110, 103, 32, 111, 117, 116, 32, 111, 102, 32, 104, 101, 114, 101, 63, 10, 49, 56, 49, 9, 68, 111, 110, 39, 116, 32, 103, 111, 32, 119, 101, 115, 116, 46, 10, 49, 56, 50, 9, 71, 108, 117, 116, 116, 111, 110, 121, 32, 105, 115, 32, 110, 111, 116, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 116, 114, 111, 108, 108, 39, 115, 32, 118, 105, 99, 101, 115, 46, 32, 32, 65, 118, 97, 114, 105, 99, 101, 44, 32, 104, 111, 119, 101, 118, 101, 114, 44, 32, 105, 115, 46, 10, 49, 56, 51, 9, 89, 111, 117, 114, 32, 108, 97, 109, 112, 32, 105, 115, 32, 103, 101, 116, 116, 105, 110, 103, 32, 100, 105, 109, 46, 32, 32, 89, 111, 117, 39, 100, 32, 98, 101, 115, 116, 32, 115, 116, 97, 114, 116, 32, 119, 114, 97, 112, 112, 105, 110, 103, 32, 116, 104, 105, 115, 32, 117, 112, 44, 32, 117, 110, 108, 101, 115, 115, 10, 49, 56, 51, 9, 121, 111, 117, 32, 99, 97, 110, 32, 102, 105, 110, 100, 32, 115, 111, 109, 101, 32, 102, 114, 101, 115, 104, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 46, 32, 32, 73, 32, 115, 101, 101, 109, 32, 116, 111, 32, 114, 101, 99, 97, 108, 108, 32, 116, 104, 101, 114, 101, 39, 115, 32, 97, 32, 118, 101, 110, 100, 105, 110, 103, 10, 49, 56, 51, 9, 109, 97, 99, 104, 105, 110, 101, 32, 105, 110, 32, 116, 104, 101, 32, 109, 97, 122, 101, 46, 32, 32, 66, 114, 105, 110, 103, 32, 115, 111, 109, 101, 32, 99, 111, 105, 110, 115, 32, 119, 105, 116, 104, 32, 121, 111, 117, 46, 10, 49, 56, 52, 9, 89, 111, 117, 114, 32, 108, 97, 109, 112, 32, 104, 97, 115, 32, 114, 117, 110, 32, 111, 117, 116, 32, 111, 102, 32, 112, 111, 119, 101, 114, 46, 10, 49, 56, 53, 9, 80, 108, 101, 97, 115, 101, 32, 97, 110, 115, 119, 101, 114, 32, 116, 104, 101, 32, 113, 117, 101, 115, 116, 105, 111, 110, 46, 10, 49, 56, 54, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 102, 97, 105, 110, 116, 32, 114, 117, 115, 116, 108, 105, 110, 103, 32, 110, 111, 105, 115, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 100, 97, 114, 107, 110, 101, 115, 115, 32, 98, 101, 104, 105, 110, 100, 32, 121, 111, 117, 46, 32, 32, 65, 115, 32, 121, 111, 117, 10, 49, 56, 54, 9, 116, 117, 114, 110, 32, 116, 111, 119, 97, 114, 100, 32, 116, 104, 101, 109, 44, 32, 116, 104, 101, 32, 98, 101, 97, 109, 32, 111, 102, 32, 121, 111, 117, 114, 32, 108, 97, 109, 112, 32, 102, 97, 108, 108, 115, 32, 97, 99, 114, 111, 115, 115, 32, 97, 32, 98, 101, 97, 114, 100, 101, 100, 32, 112, 105, 114, 97, 116, 101, 46, 10, 49, 56, 54, 9, 72, 101, 32, 105, 115, 32, 99, 97, 114, 114, 121, 105, 110, 103, 32, 97, 32, 108, 97, 114, 103, 101, 32, 99, 104, 101, 115, 116, 46, 32, 32, 34, 83, 104, 105, 118, 101, 114, 32, 109, 101, 32, 116, 105, 109, 98, 101, 114, 115, 33, 34, 32, 104, 101, 32, 99, 114, 105, 101, 115, 44, 32, 34, 73, 39, 118, 101, 10, 49, 56, 54, 9, 98, 101, 101, 110, 32, 115, 112, 111, 116, 116, 101, 100, 33, 32, 32, 73, 39, 100, 32, 98, 101, 115, 116, 32, 104, 105, 101, 32, 109, 101, 115, 101, 108, 102, 32, 111, 102, 102, 32, 116, 111, 32, 116, 104, 101, 32, 109, 97, 122, 101, 32, 116, 111, 32, 104, 105, 100, 101, 32, 109, 101, 32, 99, 104, 101, 115, 116, 33, 34, 10, 49, 56, 54, 9, 87, 105, 116, 104, 32, 116, 104, 97, 116, 44, 32, 104, 101, 32, 118, 97, 110, 105, 115, 104, 101, 115, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 103, 108, 111, 111, 109, 46, 10, 49, 56, 55, 9, 89, 111, 117, 114, 32, 108, 97, 109, 112, 32, 105, 115, 32, 103, 101, 116, 116, 105, 110, 103, 32, 100, 105, 109, 46, 32, 32, 89, 111, 117, 39, 100, 32, 98, 101, 115, 116, 32, 103, 111, 32, 98, 97, 99, 107, 32, 102, 111, 114, 32, 116, 104, 111, 115, 101, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 46, 10, 49, 56, 56, 9, 89, 111, 117, 114, 32, 108, 97, 109, 112, 32, 105, 115, 32, 103, 101, 116, 116, 105, 110, 103, 32, 100, 105, 109, 46, 32, 32, 73, 39, 109, 32, 116, 97, 107, 105, 110, 103, 32, 116, 104, 101, 32, 108, 105, 98, 101, 114, 116, 121, 32, 111, 102, 32, 114, 101, 112, 108, 97, 99, 105, 110, 103, 32, 116, 104, 101, 10, 49, 56, 56, 9, 98, 97, 116, 116, 101, 114, 105, 101, 115, 46, 10, 49, 56, 57, 9, 89, 111, 117, 114, 32, 108, 97, 109, 112, 32, 105, 115, 32, 103, 101, 116, 116, 105, 110, 103, 32, 100, 105, 109, 44, 32, 97, 110, 100, 32, 121, 111, 117, 39, 114, 101, 32, 111, 117, 116, 32, 111, 102, 32, 115, 112, 97, 114, 101, 32, 98, 97, 116, 116, 101, 114, 105, 101, 115, 46, 32, 32, 89, 111, 117, 39, 100, 10, 49, 56, 57, 9, 98, 101, 115, 116, 32, 115, 116, 97, 114, 116, 32, 119, 114, 97, 112, 112, 105, 110, 103, 32, 116, 104, 105, 115, 32, 117, 112, 46, 10, 49, 57, 48, 9, 89, 111, 117, 32, 115, 105, 102, 116, 32, 121, 111, 117, 114, 32, 102, 105, 110, 103, 101, 114, 115, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 104, 101, 32, 100, 117, 115, 116, 44, 32, 98, 117, 116, 32, 115, 117, 99, 99, 101, 101, 100, 32, 111, 110, 108, 121, 32, 105, 110, 10, 49, 57, 48, 9, 111, 98, 108, 105, 116, 101, 114, 97, 116, 105, 110, 103, 32, 116, 104, 101, 32, 99, 114, 121, 112, 116, 105, 99, 32, 109, 101, 115, 115, 97, 103, 101, 46, 10, 49, 57, 49, 9, 68, 111, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 104, 101, 108, 112, 32, 100, 101, 97, 108, 105, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 111, 103, 114, 101, 63, 10, 49, 57, 50, 9, 72, 109, 109, 109, 44, 32, 116, 104, 105, 115, 32, 108, 111, 111, 107, 115, 32, 108, 105, 107, 101, 32, 97, 32, 99, 108, 117, 101, 44, 32, 119, 104, 105, 99, 104, 32, 109, 101, 97, 110, 115, 32, 105, 116, 39, 108, 108, 32, 99, 111, 115, 116, 32, 121, 111, 117, 32, 49, 48, 32, 112, 111, 105, 110, 116, 115, 32, 116, 111, 10, 49, 57, 50, 9, 114, 101, 97, 100, 32, 105, 116, 46, 32, 32, 83, 104, 111, 117, 108, 100, 32, 73, 32, 103, 111, 32, 97, 104, 101, 97, 100, 32, 97, 110, 100, 32, 114, 101, 97, 100, 32, 105, 116, 32, 97, 110, 121, 119, 97, 121, 63, 10, 49, 57, 51, 9, 73, 116, 32, 115, 97, 121, 115, 44, 32, 34, 84, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 119, 97, 121, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 105, 115, 32, 112, 108, 97, 99, 101, 46, 32, 32, 68, 111, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 97, 110, 121, 32, 109, 111, 114, 101, 10, 49, 57, 51, 9, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 116, 111, 32, 101, 115, 99, 97, 112, 101, 63, 32, 32, 83, 111, 114, 114, 121, 44, 32, 98, 117, 116, 32, 116, 104, 105, 115, 32, 105, 110, 105, 116, 105, 97, 108, 32, 104, 105, 110, 116, 32, 105, 115, 32, 97, 108, 108, 32, 121, 111, 117, 32, 103, 101, 116, 46, 34, 10, 49, 57, 52, 9, 84, 104, 101, 114, 101, 32, 105, 115, 32, 110, 111, 116, 104, 105, 110, 103, 32, 116, 104, 101, 32, 112, 114, 101, 115, 101, 110, 99, 101, 32, 111, 102, 32, 119, 104, 105, 99, 104, 32, 119, 105, 108, 108, 32, 112, 114, 101, 118, 101, 110, 116, 32, 121, 111, 117, 32, 102, 114, 111, 109, 32]);
            fileData0.push.apply(fileData0, [100, 101, 102, 101, 97, 116, 105, 110, 103, 10, 49, 57, 52, 9, 104, 105, 109, 59, 32, 116, 104, 117, 115, 32, 105, 116, 32, 99, 97, 110, 39, 116, 32, 104, 117, 114, 116, 32, 116, 111, 32, 102, 101, 116, 99, 104, 32, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 32, 121, 111, 117, 32, 112, 111, 115, 115, 105, 98, 108, 121, 32, 99, 97, 110, 46, 10, 49, 57, 53, 9, 73, 39, 109, 32, 97, 102, 114, 97, 105, 100, 32, 73, 32, 100, 111, 110, 39, 116, 32, 117, 110, 100, 101, 114, 115, 116, 97, 110, 100, 46, 10, 49, 57, 54, 9, 89, 111, 117, 114, 32, 104, 97, 110, 100, 32, 112, 97, 115, 115, 101, 115, 32, 116, 104, 114, 111, 117, 103, 104, 32, 105, 116, 32, 97, 115, 32, 116, 104, 111, 117, 103, 104, 32, 105, 116, 32, 119, 101, 114, 101, 110, 39, 116, 32, 116, 104, 101, 114, 101, 46, 10, 49, 57, 55, 9, 89, 111, 117, 32, 115, 116, 114, 105, 107, 101, 32, 116, 104, 101, 32, 109, 105, 114, 114, 111, 114, 32, 97, 32, 114, 101, 115, 111, 117, 110, 100, 105, 110, 103, 32, 98, 108, 111, 119, 44, 32, 119, 104, 101, 114, 101, 117, 112, 111, 110, 32, 105, 116, 32, 115, 104, 97, 116, 116, 101, 114, 115, 32, 105, 110, 116, 111, 32, 97, 10, 49, 57, 55, 9, 109, 121, 114, 105, 97, 100, 32, 116, 105, 110, 121, 32, 102, 114, 97, 103, 109, 101, 110, 116, 115, 46, 10, 49, 57, 56, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 116, 97, 107, 101, 110, 32, 116, 104, 101, 32, 118, 97, 115, 101, 32, 97, 110, 100, 32, 104, 117, 114, 108, 101, 100, 32, 105, 116, 32, 100, 101, 108, 105, 99, 97, 116, 101, 108, 121, 32, 116, 111, 32, 116, 104, 101, 32, 103, 114, 111, 117, 110, 100, 46, 10, 49, 57, 57, 9, 89, 111, 117, 32, 112, 114, 111, 100, 32, 116, 104, 101, 32, 110, 101, 97, 114, 101, 115, 116, 32, 100, 119, 97, 114, 102, 44, 32, 119, 104, 111, 32, 119, 97, 107, 101, 115, 32, 117, 112, 32, 103, 114, 117, 109, 112, 105, 108, 121, 44, 32, 116, 97, 107, 101, 115, 32, 111, 110, 101, 32, 108, 111, 111, 107, 32, 97, 116, 10, 49, 57, 57, 9, 121, 111, 117, 44, 32, 99, 117, 114, 115, 101, 115, 44, 32, 97, 110, 100, 32, 103, 114, 97, 98, 115, 32, 102, 111, 114, 32, 104, 105, 115, 32, 97, 120, 101, 46, 10, 50, 48, 48, 9, 73, 115, 32, 116, 104, 105, 115, 32, 97, 99, 99, 101, 112, 116, 97, 98, 108, 101, 63, 10, 50, 48, 49, 9, 84, 104, 105, 115, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 111, 118, 101, 114, 46, 32, 32, 84, 111, 32, 115, 116, 97, 114, 116, 32, 97, 32, 110, 101, 119, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 44, 32, 111, 114, 32, 116, 111, 10, 50, 48, 49, 9, 114, 101, 115, 117, 109, 101, 32, 97, 110, 32, 101, 97, 114, 108, 105, 101, 114, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 44, 32, 112, 108, 101, 97, 115, 101, 32, 114, 117, 110, 32, 97, 32, 102, 114, 101, 115, 104, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 46, 10, 50, 48, 50, 9, 84, 104, 101, 32, 111, 103, 114, 101, 32, 100, 111, 101, 115, 110, 39, 116, 32, 97, 112, 112, 101, 97, 114, 32, 116, 111, 32, 98, 101, 32, 104, 117, 110, 103, 114, 121, 46, 10, 50, 48, 51, 9, 84, 104, 101, 32, 111, 103, 114, 101, 44, 32, 119, 104, 111, 32, 100, 101, 115, 112, 105, 116, 101, 32, 104, 105, 115, 32, 98, 117, 108, 107, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 97, 103, 105, 108, 101, 44, 32, 101, 97, 115, 105, 108, 121, 32, 100, 111, 100, 103, 101, 115, 32, 121, 111, 117, 114, 10, 50, 48, 51, 9, 97, 116, 116, 97, 99, 107, 46, 32, 32, 72, 101, 32, 115, 101, 101, 109, 115, 32, 97, 108, 109, 111, 115, 116, 32, 97, 109, 117, 115, 101, 100, 32, 98, 121, 32, 121, 111, 117, 114, 32, 112, 117, 110, 121, 32, 101, 102, 102, 111, 114, 116, 46, 10, 50, 48, 52, 9, 84, 104, 101, 32, 111, 103, 114, 101, 44, 32, 100, 105, 115, 116, 114, 97, 99, 116, 101, 100, 32, 98, 121, 32, 121, 111, 117, 114, 32, 114, 117, 115, 104, 44, 32, 105, 115, 32, 115, 116, 114, 117, 99, 107, 32, 98, 121, 32, 116, 104, 101, 32, 107, 110, 105, 102, 101, 46, 32, 32, 87, 105, 116, 104, 32, 97, 10, 50, 48, 52, 9, 98, 108, 111, 111, 100, 45, 99, 117, 114, 100, 108, 105, 110, 103, 32, 121, 101, 108, 108, 32, 104, 101, 32, 116, 117, 114, 110, 115, 32, 97, 110, 100, 32, 98, 111, 117, 110, 100, 115, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 100, 119, 97, 114, 118, 101, 115, 44, 32, 119, 104, 111, 32, 102, 108, 101, 101, 10, 50, 48, 52, 9, 105, 110, 32, 112, 97, 110, 105, 99, 46, 32, 32, 89, 111, 117, 32, 97, 114, 101, 32, 108, 101, 102, 116, 32, 97, 108, 111, 110, 101, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 111, 109, 46, 10, 50, 48, 53, 9, 84, 104, 101, 32, 111, 103, 114, 101, 44, 32, 100, 105, 115, 116, 114, 97, 99, 116, 101, 100, 32, 98, 121, 32, 121, 111, 117, 114, 32, 114, 117, 115, 104, 44, 32, 105, 115, 32, 115, 116, 114, 117, 99, 107, 32, 98, 121, 32, 116, 104, 101, 32, 107, 110, 105, 102, 101, 46, 32, 32, 87, 105, 116, 104, 32, 97, 10, 50, 48, 53, 9, 98, 108, 111, 111, 100, 45, 99, 117, 114, 100, 108, 105, 110, 103, 32, 121, 101, 108, 108, 32, 104, 101, 32, 116, 117, 114, 110, 115, 32, 97, 110, 100, 32, 98, 111, 117, 110, 100, 115, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 100, 119, 97, 114, 102, 44, 32, 119, 104, 111, 32, 102, 108, 101, 101, 115, 10, 50, 48, 53, 9, 105, 110, 32, 112, 97, 110, 105, 99, 46, 32, 32, 89, 111, 117, 32, 97, 114, 101, 32, 108, 101, 102, 116, 32, 97, 108, 111, 110, 101, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 111, 109, 46, 10, 50, 48, 54, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 102, 108, 105, 101, 115, 32, 97, 98, 111, 117, 116, 32, 97, 103, 105, 116, 97, 116, 101, 100, 108, 121, 32, 102, 111, 114, 32, 97, 32, 109, 111, 109, 101, 110, 116, 46, 10, 50, 48, 55, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 102, 108, 105, 101, 115, 32, 97, 103, 105, 116, 97, 116, 101, 100, 108, 121, 32, 97, 98, 111, 117, 116, 32, 116, 104, 101, 32, 99, 97, 103, 101, 46, 10, 50, 48, 56, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 102, 108, 105, 101, 115, 32, 97, 98, 111, 117, 116, 32, 97, 103, 105, 116, 97, 116, 101, 100, 108, 121, 32, 102, 111, 114, 32, 97, 32, 109, 111, 109, 101, 110, 116, 44, 32, 116, 104, 101, 110, 32, 100, 105, 115, 97, 112, 112, 101, 97, 114, 115, 32, 116, 104, 114, 111, 117, 103, 104, 10, 50, 48, 56, 9, 116, 104, 101, 32, 99, 114, 97, 99, 107, 46, 32, 32, 73, 116, 32, 114, 101, 97, 112, 112, 101, 97, 114, 115, 32, 115, 104, 111, 114, 116, 108, 121, 44, 32, 99, 97, 114, 114, 121, 105, 110, 103, 32, 105, 110, 32, 105, 116, 115, 32, 98, 101, 97, 107, 32, 97, 32, 106, 97, 100, 101, 10, 50, 48, 56, 9, 110, 101, 99, 107, 108, 97, 99, 101, 44, 32, 119, 104, 105, 99, 104, 32, 105, 116, 32, 100, 114, 111, 112, 115, 32, 97, 116, 32, 121, 111, 117, 114, 32, 102, 101, 101, 116, 46, 10, 50, 48, 57, 9, 84, 104, 101, 32, 117, 114, 110, 32, 105, 115, 32, 110, 111, 119, 32, 108, 105, 116, 46, 10, 50, 49, 48, 9, 84, 104, 101, 32, 117, 114, 110, 32, 105, 115, 32, 110, 111, 119, 32, 100, 97, 114, 107, 46, 10, 50, 49, 49, 9, 89, 111, 117, 32, 101, 109, 112, 116, 121, 32, 116, 104, 101, 32, 98, 111, 116, 116, 108, 101, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 117, 114, 110, 44, 32, 119, 104, 105, 99, 104, 32, 112, 114, 111, 109, 112, 116, 108, 121, 32, 101, 106, 101, 99, 116, 115, 32, 116, 104, 101, 32, 119, 97, 116, 101, 114, 10, 50, 49, 49, 9, 119, 105, 116, 104, 32, 117, 110, 99, 97, 110, 110, 121, 32, 97, 99, 99, 117, 114, 97, 99, 121, 44, 32, 115, 113, 117, 105, 114, 116, 105, 110, 103, 32, 121, 111, 117, 32, 100, 105, 114, 101, 99, 116, 108, 121, 32, 98, 101, 116, 119, 101, 101, 110, 32, 116, 104, 101, 32, 101, 121, 101, 115, 46, 10, 50, 49, 50, 9, 89, 111, 117, 114, 32, 98, 111, 116, 116, 108, 101, 32, 105, 115, 32, 110, 111, 119, 32, 101, 109, 112, 116, 121, 32, 97, 110, 100, 32, 116, 104, 101, 32, 117, 114, 110, 32, 105, 115, 32, 102, 117, 108, 108, 32, 111, 102, 32, 111, 105, 108, 46, 10, 50, 49, 51, 9, 84, 104, 101, 32, 117, 114, 110, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 102, 117, 108, 108, 32, 111, 102, 32, 111, 105, 108, 46, 10, 50, 49, 52, 9, 84, 104, 101, 114, 101, 39, 115, 32, 110, 111, 32, 119, 97, 121, 32, 116, 111, 32, 103, 101, 116, 32, 116, 104, 101, 32, 111, 105, 108, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 117, 114, 110, 46, 10, 50, 49, 53, 9, 84, 104, 101, 32, 117, 114, 110, 32, 105, 115, 32, 102, 97, 114, 32, 116, 111, 111, 32, 102, 105, 114, 109, 108, 121, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 102, 111, 114, 32, 121, 111, 117, 114, 32, 112, 117, 110, 121, 32, 115, 116, 114, 101, 110, 103, 116, 104, 32, 116, 111, 32, 98, 117, 100, 103, 101, 32, 105, 116, 46, 10, 50, 49, 54, 9, 65, 115, 32, 121, 111, 117, 32, 114, 117, 98, 32, 116, 104, 101, 32, 117, 114, 110, 44, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 97, 32, 102, 108, 97, 115, 104, 32, 111, 102, 32, 108, 105, 103, 104, 116, 32, 97, 110, 100, 32, 97, 32, 103, 101, 110, 105, 101, 32, 97, 112, 112, 101, 97, 114, 115, 46, 10, 50, 49, 54, 9, 72, 105, 115, 32, 97, 115, 112, 101, 99, 116, 32, 105, 115, 32, 115, 116, 101, 114, 110, 32, 97, 115, 32, 104, 101, 32, 97, 100, 118, 105, 115, 101, 115, 58, 32, 34, 79, 110, 101, 32, 119, 104, 111, 32, 119, 111, 117, 108, 100, 115, 116, 32, 116, 114, 97, 102, 102, 105, 99, 32, 105, 110, 10, 50, 49, 54, 9, 112, 114, 101, 99, 105, 111, 117, 115, 32, 115, 116, 111, 110, 101, 115, 32, 109, 117, 115, 116, 32, 102, 105, 114, 115, 116, 32, 108, 101, 97, 114, 110, 32, 116, 111, 32, 114, 101, 99, 111, 103, 110, 105, 122, 101, 32, 116, 104, 101, 32, 115, 105, 103, 110, 97, 108, 115, 32, 116, 104, 101, 114, 101, 111, 102, 46, 34, 10, 50, 49, 54, 9, 72, 101, 32, 119, 114, 101, 115, 116, 115, 32, 116, 104, 101, 32, 117, 114, 110, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 116, 111, 110, 101, 44, 32, 108, 101, 97, 118, 105, 110, 103, 32, 97, 32, 115, 109, 97, 108, 108, 32, 99, 97, 118, 105, 116, 121, 46, 32, 32, 84, 117, 114, 110, 105, 110, 103, 32, 116, 111, 10, 50, 49, 54, 9, 102, 97, 99, 101, 32, 121, 111, 117, 32, 97, 103, 97, 105, 110, 44, 32, 104, 101, 32, 102, 105, 120, 101, 115, 32, 121, 111, 117, 32, 119, 105, 116, 104, 32, 97, 32, 115, 116, 101, 101, 108, 121, 32, 101, 121, 101, 32, 97, 110, 100, 32, 105, 110, 116, 111, 110, 101, 115, 58, 32, 34, 67, 97, 117, 116, 105, 111, 110, 33, 34, 10, 50, 49, 54, 9, 71, 101, 110, 105, 101, 32, 97, 110, 100, 32, 117, 114, 110, 32, 118, 97, 110, 105, 115, 104, 32, 105, 110, 32, 97, 32, 99, 108, 111, 117, 100, 32, 111, 102, 32, 97, 109, 98, 101, 114, 32, 115, 109, 111, 107, 101, 46, 32, 32, 84, 104, 101, 32, 115, 109, 111, 107, 101, 32, 99, 111, 110, 100, 101, 110, 115, 101, 115, 10, 50, 49, 54, 9, 116, 111, 32, 102, 111, 114, 109, 32, 97, 32, 114, 97, 114, 101, 32, 97, 109, 98, 101, 114, 32, 103, 101, 109, 115, 116, 111, 110, 101, 44, 32, 114, 101, 115, 116, 105, 110, 103, 32, 105, 110, 32, 116, 104, 101, 32, 99, 97, 118, 105, 116, 121, 32, 105, 110, 32, 116, 104, 101, 32, 114, 111, 99, 107, 46, 10, 50, 49, 55, 9, 73, 32, 115, 117, 112, 112, 111, 115, 101, 32, 121, 111, 117, 32, 99, 111, 108, 108, 101, 99, 116, 32, 100, 111, 117, 103, 104, 110, 117, 116, 32, 104, 111, 108, 101, 115, 44, 32, 116, 111, 111, 63, 10, 50, 49, 56, 9, 84, 104, 101, 32, 103, 101, 109, 32, 102, 105, 116, 115, 32, 101, 97, 115, 105, 108, 121, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 99, 97, 118, 105, 116, 121, 46, 10, 50, 49, 57, 9, 84, 104, 101, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 32, 115, 116, 105, 102, 102, 101, 110, 115, 32, 97, 110, 100, 32, 114, 105, 115, 101, 115, 32, 97, 32, 102, 111, 111, 116, 32, 111, 114, 32, 115, 111, 32, 111, 102, 102, 32, 116, 104, 101, 32, 103, 114, 111, 117, 110, 100, 46, 10, 50, 50, 48, 9, 84, 104, 101, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 32, 100, 114, 97, 112, 101, 100, 32, 111, 118, 101, 114, 32, 121, 111, 117, 114, 32, 115, 104, 111, 117, 108, 100, 101, 114, 32, 115, 101, 101, 109, 115, 32, 116, 111, 32, 119, 114, 105, 103, 103, 108, 101, 32, 102, 111, 114, 32, 97, 10, 50, 50, 48, 9, 109, 111, 109, 101, 110, 116, 44, 32, 98, 117, 116, 32, 116, 104, 101, 110, 32, 115, 117, 98, 115, 105, 100, 101, 115, 46, 10, 50, 50, 49, 9, 84, 104, 101, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 32, 115, 101, 116, 116, 108, 101, 115, 32, 103, 101, 110, 116, 108, 121, 32, 116, 111, 32, 116, 104, 101, 32, 103, 114, 111, 117, 110, 100, 46, 10, 50, 50, 50, 9, 84, 104, 101, 32, 114, 117, 103, 32, 104, 111, 118, 101, 114, 115, 32, 115, 116, 117, 98, 98, 111, 114, 110, 108, 121, 32, 119, 104, 101, 114, 101, 32, 105, 116, 32, 105, 115, 46, 10, 50, 50, 51, 9, 84, 104, 101, 32, 114, 117, 103, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 97, 112, 112, 101, 97, 114, 32, 105, 110, 99, 108, 105, 110, 101, 100, 32, 116, 111, 32, 99, 111, 111, 112, 101, 114, 97, 116, 101, 46, 10, 50, 50, 52, 9, 73, 102, 32, 121, 111, 117, 32, 109, 101, 97, 110, 32, 116, 111, 32, 117, 115, 101, 32, 116, 104, 101, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 44, 32, 105, 116, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 97, 112, 112, 101, 97, 114, 32, 105, 110, 99, 108, 105, 110, 101, 100, 32, 116, 111, 10, 50, 50, 52, 9, 99, 111, 111, 112, 101, 114, 97, 116, 101, 46, 10, 50, 50, 53, 9, 84, 104, 111, 117, 103, 104, 32, 121, 111, 117, 32, 102, 108, 97, 112, 32, 121, 111, 117, 114, 32, 97, 114, 109, 115, 32, 102, 117, 114, 105, 111, 117, 115, 108, 121, 44, 32, 105, 116, 32, 105, 115, 32, 116, 111, 32, 110, 111, 32, 97, 118, 97, 105, 108, 46, 10, 50, 50, 54, 9, 89, 111, 117, 32, 98, 111, 97, 114, 100, 32, 116, 104, 101, 32, 112, 101, 114, 115, 105, 97, 110, 32, 114, 117, 103, 44, 32, 119, 104, 105, 99, 104, 32, 112, 114, 111, 109, 112, 116, 108, 121, 32, 119, 104, 105, 115, 107, 115, 32, 121, 111, 117, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 46, 10, 50, 50, 54, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 116, 105, 109, 101, 32, 102, 111, 114, 32, 97, 32, 102, 108, 101, 101, 116, 105, 110, 103, 32, 103, 108, 105, 109, 112, 115, 101, 32, 111, 102, 32, 97, 32, 116, 119, 111, 32, 116, 104, 111, 117, 115, 97, 110, 100, 32, 102, 111, 111, 116, 32, 100, 114, 111, 112, 32, 116, 111, 32, 97, 10, 50, 50, 54, 9, 109, 105, 103, 104, 116, 121, 32, 114, 105, 118, 101, 114, 59, 32, 116, 104, 101, 110, 32, 121, 111, 117, 32, 102, 105, 110, 100, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 111, 110, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 115, 105, 100, 101, 46, 10, 50, 50, 55, 9, 84, 104, 101, 32, 114, 117, 103, 32, 102, 101, 114, 114, 105, 101, 115, 32, 121, 111, 117, 32, 98, 97, 99, 107, 32, 97, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 99, 104, 97, 115, 109, 46, 10, 50, 50, 56, 9, 65, 108, 108, 32, 105, 115, 32, 115, 105, 108, 101, 110, 116, 46, 10, 50, 50, 57, 9, 84, 104, 101, 32, 115, 116, 114, 101, 97, 109, 32, 105, 115, 32, 103, 117, 114, 103, 108, 105, 110, 103, 32, 112, 108, 97, 99, 105, 100, 108, 121, 46, 10, 50, 51, 48, 9, 84, 104, 101, 32, 119, 105, 110, 100, 32, 119, 104, 105, 115, 116, 108, 101, 115, 32, 99, 111, 108, 100, 108, 121, 32, 112, 97, 115, 116, 32, 121, 111, 117, 114, 32, 101, 97, 114, 115, 46, 10, 50, 51, 49, 9, 84, 104, 101, 32, 115, 116, 114, 101, 97, 109, 32, 115, 112, 108, 97, 115, 104, 101, 115, 32, 108, 111, 117, 100, 108, 121, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 112, 111, 111, 108, 46, 10, 50, 51, 50, 9, 89, 111, 117, 32, 97, 114, 101, 32, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 109, 97, 107, 101, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 111, 102, 32, 116, 104, 101, 32, 115, 112, 108, 97, 115, 104, 105, 110, 103, 32, 110, 111, 105, 115, 101, 46, 10, 50, 51, 51, 9, 89, 111, 117, 32, 99, 97, 110, 32, 104, 101, 97, 114, 32, 116, 104, 101, 32, 109, 117, 114, 109, 117, 114, 105, 110, 103, 32, 111, 102, 32, 116, 104, 101, 32, 98, 101, 97, 110, 115, 116, 97, 108, 107, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 115, 110, 111, 114, 105, 110, 103, 32, 111, 102, 32, 116, 104, 101, 10, 50, 51, 51, 9, 100, 119, 97, 114, 118, 101, 115, 46, 10, 50, 51, 52, 9, 65, 32, 108, 111, 117, 100, 32, 104, 105, 115, 115, 105, 110, 103, 32, 101, 109, 97, 110, 97, 116, 101, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 110, 97, 107, 101, 32, 112, 105, 116, 46, 10, 50, 51, 53, 9, 84, 104, 101, 32, 97, 105, 114, 32, 105, 115, 32, 102, 105, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 97, 32, 100, 117, 108, 108, 32, 114, 117, 109, 98, 108, 105, 110, 103, 32, 115, 111, 117, 110, 100, 46, 10, 50, 51, 54, 9, 84, 104, 101, 32, 114, 111, 97, 114, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 108, 111, 117, 100, 32, 104, 101, 114, 101, 46, 10, 50, 51, 55, 9, 84, 104, 101, 32, 114, 111, 97, 114, 105, 110, 103, 32, 105, 115, 32, 115, 111, 32, 108, 111, 117, 100, 32, 116, 104, 97, 116, 32, 105, 116, 32, 100, 114, 111, 119, 110, 115, 32, 111, 117, 116, 32, 97, 108, 108, 32, 111, 116, 104, 101, 114, 32, 115, 111, 117, 110, 100, 46, 10, 50, 51, 56, 9, 84, 104, 101, 32, 98, 105, 114, 100, 32, 101, 121, 101, 115, 32, 121, 111, 117, 32, 115, 117, 115, 112, 105, 99, 105, 111, 117, 115, 108, 121, 32, 97, 110, 100, 32, 102, 108, 117, 116, 116, 101, 114, 115, 32, 97, 119, 97, 121, 46, 32, 32, 65, 32, 109, 111, 109, 101, 110, 116, 32, 108, 97, 116, 101, 114, 32, 121, 111, 117, 10, 50, 51, 56, 9, 102, 101, 101, 108, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 119, 101, 116, 32, 108, 97, 110, 100, 32, 111, 110, 32, 121, 111, 117, 114, 32, 104, 101, 97, 100, 44, 32, 98, 117, 116, 32, 117, 112, 111, 110, 32, 108, 111, 111, 107, 105, 110, 103, 32, 117, 112, 32, 121, 111, 117, 32, 99, 97, 110, 32, 115, 101, 101, 10, 50, 51, 56, 9, 110, 111, 32, 115, 105, 103, 110, 32, 111, 102, 32, 116, 104, 101, 32, 99, 117, 108, 112, 114, 105, 116, 46, 10, 50, 51, 57, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 111, 110, 108, 121, 32, 97, 32, 102, 101, 119, 32, 100, 114, 111, 112, 115, 45, 45, 110, 111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 116, 111, 32, 99, 97, 114, 114, 121, 46, 10, 50, 52, 48, 9, 89, 111, 117, 114, 32, 104, 101, 97, 100, 32, 98, 117, 122, 122, 101, 115, 32, 115, 116, 114, 97, 110, 103, 101, 108, 121, 32, 102, 111, 114, 32, 97, 32, 109, 111, 109, 101, 110, 116, 46, 10, 50, 52, 49, 9, 40, 85, 104, 44, 32, 121, 39, 107, 110, 111, 119, 44, 32, 116, 104, 97, 116, 32, 119, 97, 115, 110, 39, 116, 32, 118, 101, 114, 121, 32, 98, 114, 105, 103, 104, 116, 46, 41, 10, 50, 52, 50, 9, 73, 116, 39, 115, 32, 97, 32, 112, 105, 116, 121, 32, 121, 111, 117, 32, 116, 111, 111, 107, 32, 115, 111, 32, 108, 111, 110, 103, 32, 97, 98, 111, 117, 116, 32, 105, 116, 46, 10, 50, 52, 51, 9, 65, 114, 101, 32, 121, 111, 117, 32, 119, 111, 110, 100, 101, 114, 105, 110, 103, 32, 119, 104, 97, 116, 32, 116, 111, 32, 100, 111, 32, 104, 101, 114, 101, 63, 10, 50, 52, 52, 9, 84, 104, 105, 115, 32, 115, 101, 99, 116, 105, 111, 110, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 97, 100, 118, 97, 110, 99, 101, 100, 46, 32, 32, 70, 105, 110, 100, 32, 116, 104, 101, 32, 99, 97, 118, 101, 32, 102, 105, 114, 115, 116, 46, 10, 50, 52, 53, 9, 85, 112, 115, 116, 114, 101, 97, 109, 32, 111, 114, 32, 100, 111, 119, 110, 115, 116, 114, 101, 97, 109, 63, 10, 50, 52, 54, 9, 87, 105, 122, 97, 114, 100, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 116, 111, 32, 98, 101, 32, 100, 105, 115, 116, 117, 114, 98, 101, 100, 32, 98, 121, 32, 115, 117, 99, 104, 32, 97, 115, 32, 121, 111, 117, 46, 10, 50, 52, 55, 9, 87, 111, 117, 108, 100, 32, 121, 111, 117, 32, 108, 105, 107, 101, 32, 116, 111, 32, 98, 101, 32, 115, 104, 111, 119, 110, 32, 111, 117, 116, 32, 111, 102, 32, 116, 104, 101, 32, 102, 111, 114, 101, 115, 116, 63, 10, 50, 52, 56, 9, 71, 111, 32, 101, 97, 115, 116, 32, 116, 101, 110, 32, 116, 105, 109, 101, 115, 46, 32, 32, 73, 102, 32, 116, 104, 97, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 103, 101, 116, 32, 121, 111, 117, 32, 111, 117, 116, 44, 32, 116, 104, 101, 110, 32, 103, 111, 32, 115, 111, 117, 116, 104, 44, 32, 116, 104, 101, 110, 10, 50, 52, 56, 9, 119, 101, 115, 116, 32, 116, 119, 105, 99, 101, 44, 32, 116, 104, 101, 110, 32, 115, 111, 117, 116, 104, 46, 10, 50, 52, 57, 9, 84, 104, 101, 32, 119, 97, 116, 101, 114, 115, 32, 97, 114, 101, 32, 99, 114, 97, 115, 104, 105, 110, 103, 32, 108, 111, 117, 100, 108, 121, 32, 97, 103, 97, 105, 110, 115, 116, 32, 116, 104, 101, 32, 115, 104, 111, 114, 101, 46, 10, 50, 53, 48, 9, 37, 49, 32, 111, 102, 32, 116, 104, 101, 109, 32, 116, 104, 114, 111, 119, 32, 107, 110, 105, 118, 101, 115, 32, 97, 116, 32, 121, 111, 117, 33, 10, 50, 53, 49, 9, 37, 49, 32, 111, 102, 32, 116, 104, 101, 109, 32, 103, 101, 116, 32, 121, 111, 117, 33, 10, 50, 53, 50, 9, 79, 110, 101, 32, 111, 102, 32, 116, 104, 101, 109, 32, 103, 101, 116, 115, 32, 121, 111, 117, 33, 10, 50, 53, 51, 9, 78, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 109, 32, 104, 105, 116, 115, 32, 121, 111, 117, 33, 10, 50, 53, 52, 9, 83, 111, 114, 114, 121, 44, 32, 73, 32, 100, 111, 110, 39, 116, 32, 107, 110, 111, 119, 32, 116, 104, 101, 32, 119, 111, 114, 100, 32, 34, 37, 87, 34, 46, 10, 50, 53, 53, 9, 87, 104, 97, 116, 32, 100, 111, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 111, 32, 100, 111, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 37, 76, 63, 10, 50, 53, 54, 9, 73, 32, 115, 101, 101, 32, 110, 111, 32, 37, 76, 32, 104, 101, 114, 101, 46, 10, 50, 53, 55, 9, 37, 67, 32, 119, 104, 97, 116, 63, 10, 50, 53, 56, 9, 79, 107, 97, 121, 44, 32, 34, 37, 87, 34, 46, 10, 50, 53, 57, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 103, 97, 114, 110, 101, 114, 101, 100, 32, 37, 51, 32, 111, 117, 116, 32, 111, 102, 32, 97, 32, 112, 111, 115, 115, 105, 98, 108, 101, 32, 37, 51, 32, 112, 111, 105, 110, 116, 115, 44, 32, 117, 115, 105, 110, 103, 32, 37, 53, 32, 116, 117, 114, 110, 37, 83, 46, 10, 50, 54, 48, 9, 73, 32, 99, 97, 110, 32, 115, 117, 115, 112, 101, 110, 100, 32, 121, 111, 117, 114, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 32, 102, 111, 114, 32, 121, 111, 117, 32, 115, 111, 32, 116, 104, 97, 116, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 115, 117, 109, 101, 32, 108, 97, 116, 101, 114, 44, 32, 98, 117, 116, 10, 50, 54, 48, 9, 105, 116, 32, 119, 105, 108, 108, 32, 99, 111, 115, 116, 32, 121, 111, 117, 32, 53, 32, 112, 111, 105, 110, 116, 115, 46, 10, 50, 54, 49, 9, 73, 32, 97, 109, 32, 112, 114, 101, 112, 97, 114, 101, 100, 32, 116, 111, 32, 103, 105, 118, 101, 32, 121, 111, 117, 32, 97, 32, 104, 105, 110, 116, 44, 32, 98, 117, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 99, 111, 115, 116, 32, 121, 111, 117, 32, 37, 49, 32, 112, 111, 105, 110, 116, 37, 83, 46, 10, 50, 54, 50, 9, 89, 111, 117, 32, 115, 99, 111, 114, 101, 100, 32, 37, 51, 32, 111, 117, 116, 32, 111, 102, 32, 97, 32, 112, 111, 115, 115, 105, 98, 108, 101, 32, 37, 51, 44, 32, 117, 115, 105, 110, 103, 37, 53, 32, 116, 117, 114, 110, 37, 83, 46, 10, 50, 54, 51, 9, 84, 111, 32, 97, 99, 104, 105, 101, 118, 101, 32, 116, 104, 101, 32, 110, 101, 120, 116, 32, 104, 105, 103, 104, 101, 114, 32, 114, 97, 116, 105, 110, 103, 44, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 37, 50, 32, 109, 111, 114, 101, 32, 112, 111, 105, 110, 116, 37, 83, 46, 10, 50, 54, 52, 9, 84, 111, 32, 97, 99, 104, 105, 101, 118, 101, 32, 116, 104, 101, 32, 110, 101, 120, 116, 32, 104, 105, 103, 104, 101, 114, 32, 114, 97, 116, 105, 110, 103, 32, 119, 111, 117, 108, 100, 32, 98, 101, 32, 97, 32, 110, 101, 97, 116, 32, 116, 114, 105, 99, 107, 33, 10, 50, 54, 52, 9, 67, 111, 110, 103, 114, 97, 116, 117, 108, 97, 116, 105, 111, 110, 115, 33, 33, 10, 50, 54, 53, 9, 89, 111, 117, 32, 106, 117, 115, 116, 32, 119, 101, 110, 116, 32, 111, 102, 102, 32, 109, 121, 32, 115, 99, 97, 108, 101, 33, 33, 10, 50, 54, 54, 9, 84, 111, 32, 114, 101, 115, 117, 109, 101, 32, 121, 111, 117, 114, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 44, 32, 115, 116, 97, 114, 116, 32, 97, 32, 110, 101, 119, 32, 103, 97, 109, 101, 32, 97, 110, 100, 32, 116, 104, 101, 110, 32, 115, 97, 121, 32, 34, 82, 69, 83, 85, 77, 69, 34, 46, 10, 50, 54, 55, 9, 84, 97, 98, 108, 101, 32, 115, 112, 97, 99, 101, 32, 117, 115, 101, 100, 58, 10, 50, 54, 55, 9, 37, 54, 32, 111, 102, 32, 37, 54, 32, 119, 111, 114, 100, 115, 32, 111, 102, 32, 109, 101, 115, 115, 97, 103, 101, 115, 32, 32, 32, 37, 54, 32, 111, 102, 32, 37, 54, 32, 116, 114, 97, 118, 101, 108, 32, 111, 112, 116, 105, 111, 110, 115, 10, 50, 54, 55, 9, 37, 54, 32, 111, 102, 32, 37, 54, 32, 118, 111, 99, 97, 98, 117, 108, 97, 114, 121, 32, 119, 111, 114, 100, 115, 32, 32, 32, 32, 37, 54, 32, 111, 102, 32, 37, 54, 32, 108, 111, 99, 97, 116, 105, 111, 110, 115, 10, 50, 54, 55, 9, 37, 54, 32, 111, 102, 32, 37, 54, 32, 111, 98, 106, 101, 99, 116, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 54, 32, 111, 102, 32, 37, 54, 32, 97, 99, 116, 105, 111, 110, 32, 118, 101, 114, 98, 115, 10, 50, 54, 55, 9, 37, 54, 32, 111, 102, 32, 37, 54, 32, 34, 114, 97, 110, 100, 111, 109, 34, 32, 109, 101, 115, 115, 97, 103, 101, 115, 32, 32, 32, 37, 54, 32, 111, 102, 32, 37, 54, 32, 34, 99, 108, 97, 115, 115, 34, 32, 109, 101, 115, 115, 97, 103, 101, 115, 10, 50, 54, 55, 9, 37, 54, 32, 111, 102, 32, 37, 54, 32, 104, 105, 110, 116, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 54, 32, 111, 102, 32, 37, 54, 32, 116, 117, 114, 110, 32, 116, 104, 114, 101, 115, 104, 104, 111, 108, 100, 115, 10, 50, 54, 56, 9, 84, 111, 32, 114, 101, 115, 117, 109, 101, 32, 97, 110, 32, 101, 97, 114, 108, 105, 101, 114, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 44, 32, 121, 111, 117, 32, 109, 117, 115, 116, 32, 97, 98, 97, 110, 100, 111, 110, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 111, 110, 101, 46, 10, 50, 54, 57, 9, 73, 39, 109, 32, 115, 111, 114, 114, 121, 44, 32, 98, 117, 116, 32, 116, 104, 97, 116, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 32, 119, 97, 115, 32, 98, 101, 103, 117, 110, 32, 117, 115, 105, 110, 103, 32, 86, 101, 114, 115, 105, 111, 110, 37, 50, 46, 37, 49, 32, 111, 102, 32, 116, 104, 101, 10, 50, 54, 57, 9, 112, 114, 111, 103, 114, 97, 109, 44, 32, 97, 110, 100, 32, 116, 104, 105, 115, 32, 105, 115, 32, 86, 101, 114, 115, 105, 111, 110, 37, 50, 46, 37, 49, 46, 32, 32, 89, 111, 117, 32, 109, 117, 115, 116, 32, 102, 105, 110, 100, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 10, 50, 54, 57, 9, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 114, 101, 115, 117, 109, 101, 32, 116, 104, 97, 116, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 46, 10, 50, 55, 48, 9, 65, 32, 100, 97, 114, 107, 32, 102, 111, 103, 32, 99, 114, 101, 101, 112, 115, 32, 105, 110, 32, 116, 111, 32, 115, 117, 114, 114, 111, 117, 110, 100, 32, 121, 111, 117, 46, 32, 32, 70, 114, 111, 109, 32, 115, 111, 109, 101, 119, 104, 101, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 102, 111, 103, 32, 121, 111, 117, 10, 50, 55, 48, 9, 104, 101, 97, 114, 32, 97, 32, 115, 116, 101, 114, 110, 32, 118, 111, 105, 99, 101, 46, 32, 32, 34, 84, 104, 105, 115, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 116, 97, 109, 112, 101, 114, 101, 100, 32, 119, 105, 116, 104, 33, 32, 32, 89, 111, 117, 32, 104, 97, 118, 101, 10, 50, 55, 48, 9, 98, 101, 101, 110, 32, 100, 97, 98, 98, 108, 105, 110, 103, 32, 105, 110, 32, 109, 97, 103, 105, 99, 44, 32, 107, 110, 111, 119, 105, 110, 103, 32, 110, 111, 116, 32, 116, 104, 101, 32, 104, 97, 118, 111, 99, 32, 121, 111, 117, 32, 109, 105, 103, 104, 116, 32, 99, 97, 117, 115, 101, 32, 116, 104, 101, 114, 101, 98, 121, 46, 10, 50, 55, 48, 9, 76, 101, 97, 118, 101, 32, 97, 116, 32, 111, 110, 99, 101, 44, 32, 98, 101, 102, 111, 114, 101, 32, 121, 111, 117, 32, 100, 111, 32, 105, 114, 114, 101, 118, 111, 99, 97, 98, 108, 101, 32, 104, 97, 114, 109, 33, 34, 32, 32, 84, 104, 101, 32, 102, 111, 103, 32, 116, 104, 105, 99, 107, 101, 110, 115, 44, 10, 50, 55, 48, 9, 117, 110, 116, 105, 108, 32, 97, 116, 32, 108, 97, 115, 116, 32, 121, 111, 117, 32, 99, 97, 110, 32, 115, 101, 101, 32, 110, 111, 116, 104, 105, 110, 103, 32, 97, 116, 32, 97, 108, 108, 46, 32, 32, 89, 111, 117, 114, 32, 118, 105, 115, 105, 111, 110, 32, 116, 104, 101, 110, 32, 99, 108, 101, 97, 114, 115, 44, 10, 50, 55, 48, 9, 97, 110, 100, 32, 121, 111, 117, 32, 102, 105, 110, 100, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 98, 97, 99, 107, 32, 105, 110, 32, 84, 104, 101, 32, 82, 101, 97, 108, 32, 87, 111, 114, 108, 100, 46, 10, 50, 55, 49, 9, 71, 117, 101, 115, 115, 32, 97, 103, 97, 105, 110, 46, 10, 50, 55, 50, 9, 89, 111, 117, 39, 114, 101, 32, 109, 105, 115, 115, 105, 110, 103, 32, 111, 110, 108, 121, 32, 111, 110, 101, 32, 111, 116, 104, 101, 114, 32, 116, 114, 101, 97, 115, 117, 114, 101, 46, 32, 32, 68, 111, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 104, 101, 108, 112, 32, 102, 105, 110, 100, 105, 110, 103, 32, 105, 116, 63, 10, 50, 55, 51, 9, 79, 110, 99, 101, 32, 121, 111, 117, 39, 118, 101, 32, 102, 111, 117, 110, 100, 32, 97, 108, 108, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 32, 116, 114, 101, 97, 115, 117, 114, 101, 115, 44, 32, 105, 116, 32, 105, 115, 32, 110, 111, 32, 108, 111, 110, 103, 101, 114, 32, 112, 111, 115, 115, 105, 98, 108, 101, 32, 116, 111, 10, 50, 55, 51, 9, 108, 111, 99, 97, 116, 101, 32, 116, 104, 101, 32, 111, 110, 101, 32, 121, 111, 117, 39, 114, 101, 32, 110, 111, 119, 32, 109, 105, 115, 115, 105, 110, 103, 46, 10, 50, 55, 52, 9, 83, 111, 114, 114, 121, 44, 32, 98, 117, 116, 32, 116, 104, 101, 32, 112, 97, 116, 104, 32, 116, 119, 105, 115, 116, 101, 100, 32, 97, 110, 100, 32, 116, 117, 114, 110, 101, 100, 32, 115, 111, 32, 109, 117, 99, 104, 32, 116, 104, 97, 116, 32, 73, 32, 99, 97, 110, 39, 116, 32, 102, 105, 103, 117, 114, 101, 10, 50, 55, 52, 9, 111, 117, 116, 32, 119, 104, 105, 99, 104, 32, 119, 97, 121, 32, 116, 111, 32, 103, 111, 32, 116, 111, 32, 103, 101, 116, 32, 98, 97, 99, 107, 46, 10, 50, 55, 53, 9, 86, 101, 114, 115, 105, 111, 110, 32, 50, 46, 53, 32, 105, 115, 32, 101, 115, 115, 101, 110, 116, 105, 97, 108, 108, 121, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 97, 115, 32, 86, 101, 114, 115, 105, 111, 110, 32, 73, 73, 59, 32, 116, 104, 101, 32, 99, 97, 118, 101, 32, 97, 110, 100, 32, 116, 104, 101, 10, 50, 55, 53, 9, 104, 97, 122, 97, 114, 100, 115, 32, 116, 104, 101, 114, 101, 105, 110, 32, 97, 114, 101, 32, 117, 110, 99, 104, 97, 110, 103, 101, 100, 44, 32, 97, 110, 100, 32, 116, 111, 112, 32, 115, 99, 111, 114, 101, 32, 105, 115, 32, 115, 116, 105, 108, 108, 32, 52, 51, 48, 32, 112, 111, 105, 110, 116, 115, 46, 10, 50, 55, 53, 9, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 97, 32, 102, 101, 119, 32, 109, 111, 114, 101, 32, 104, 105, 110, 116, 115, 44, 32, 101, 115, 112, 101, 99, 105, 97, 108, 108, 121, 32, 102, 111, 114, 32, 115, 111, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 109, 111, 114, 101, 32, 111, 98, 115, 99, 117, 114, 101, 10, 50, 55, 53, 9, 112, 117, 122, 122, 108, 101, 115, 46, 32, 32, 84, 104, 101, 114, 101, 32, 97, 114, 101, 32, 97, 32, 102, 101, 119, 32, 109, 105, 110, 111, 114, 32, 98, 117, 103, 102, 105, 120, 101, 115, 32, 97, 110, 100, 32, 99, 111, 115, 109, 101, 116, 105, 99, 32, 99, 104, 97, 110, 103, 101, 115, 46, 32, 32, 89, 111, 117, 10, 50, 55, 53, 9, 99, 97, 110, 32, 110, 111, 119, 32, 115, 97, 118, 101, 32, 97, 32, 103, 97, 109, 101, 32, 97, 110, 100, 32, 114, 101, 115, 117, 109, 101, 32, 105, 116, 32, 97, 116, 32, 111, 110, 99, 101, 32, 40, 102, 111, 114, 109, 101, 114, 108, 121, 32, 121, 111, 117, 32, 104, 97, 100, 32, 116, 111, 32, 119, 97, 105, 116, 32, 97, 10, 50, 55, 53, 9, 119, 104, 105, 108, 101, 32, 102, 105, 114, 115, 116, 41, 44, 32, 98, 117, 116, 32, 105, 116, 32, 110, 111, 119, 32, 99, 111, 115, 116, 115, 32, 121, 111, 117, 32, 97, 32, 102, 101, 119, 32, 112, 111, 105, 110, 116, 115, 32, 101, 97, 99, 104, 32, 116, 105, 109, 101, 32, 121, 111, 117, 32, 115, 97, 118, 101, 32, 116, 104, 101, 10, 50, 55, 53, 9, 103, 97, 109, 101, 46, 32, 32, 83, 97, 118, 101, 100, 32, 103, 97, 109, 101, 115, 32, 97, 114, 101, 32, 110, 111, 119, 32, 115, 116, 111, 114, 101, 100, 32, 105, 110, 32, 109, 117, 99, 104, 32, 115, 109, 97, 108, 108, 101, 114, 32, 102, 105, 108, 101, 115, 32, 116, 104, 97, 110, 32, 98, 101, 102, 111, 114, 101, 46, 10, 50, 55, 54, 9, 89, 111, 117, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 116, 111, 32, 115, 97, 121, 32, 34, 103, 111, 34, 32, 101, 118, 101, 114, 121, 32, 116, 105, 109, 101, 59, 32, 106, 117, 115, 116, 32, 115, 112, 101, 99, 105, 102, 121, 32, 97, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 111, 114, 44, 32, 105, 102, 10, 50, 55, 54, 9, 105, 116, 39, 115, 32, 110, 101, 97, 114, 98, 121, 44, 32, 110, 97, 109, 101, 32, 116, 104, 101, 32, 112, 108, 97, 99, 101, 32, 116, 111, 32, 119, 104, 105, 99, 104, 32, 121, 111, 117, 32, 119, 105, 115, 104, 32, 116, 111, 32, 109, 111, 118, 101, 46, 10, 45, 49, 10, 55, 10, 49, 9, 51, 10, 50, 9, 51, 10, 51, 9, 56, 9, 57, 10, 52, 9, 49, 48, 10, 53, 9, 49, 49, 10, 54, 9, 48, 10, 55, 9, 49, 52, 9, 49, 53, 10, 56, 9, 49, 51, 10, 57, 9, 57, 52, 9, 45, 49, 10, 49, 48, 9, 57, 54, 10, 49, 49, 9, 49, 57, 9, 45, 49, 10, 49, 50, 9, 49, 55, 9, 50, 55, 10, 49, 51, 9, 49, 48, 49, 9, 45, 49, 10, 49, 52, 9, 49, 48, 51, 10, 49, 53, 9, 48, 10, 49, 54, 9, 49, 48, 54, 10, 49, 55, 9, 48, 9, 45, 49, 10, 49, 56, 9, 48, 10, 49, 57, 9, 51, 10, 50, 48, 9, 51, 10, 50, 49, 9, 48, 10, 50, 50, 9, 48, 10, 50, 51, 9, 49, 48, 57, 9, 45, 49, 10, 50, 52, 9, 50, 53, 9, 45, 49, 10, 50, 53, 9, 50, 51, 9, 54, 55, 10, 50, 54, 9, 49, 49, 49, 9, 45, 49, 10, 50, 55, 9, 51, 53, 9, 49, 49, 48, 10, 50, 56, 9, 48, 10, 50, 57, 9, 57, 55, 9, 45, 49, 10, 51, 48, 9, 48, 9, 45, 49, 10, 51, 49, 9, 49, 49, 57, 9, 49, 50, 49, 10, 51, 50, 9, 49, 49, 55, 9, 49, 50, 50, 10, 51, 51, 9, 49, 49, 55, 9, 49, 50, 50, 10, 51, 52, 9, 48, 9, 48, 10, 51, 53, 9, 49, 51, 48, 9, 45, 49, 10, 51, 54, 9, 48, 9, 45, 49, 10, 51, 55, 9, 49, 50, 54, 9, 45, 49, 10, 51, 56, 9, 49, 52, 48, 9, 45, 49, 10, 51, 57, 9, 48, 10, 52, 48, 9, 57, 54, 9, 45, 49, 10, 52, 49, 9, 49, 52, 51, 9, 45, 49, 10, 52, 50, 9, 54, 9, 45, 49, 10, 52, 51, 9, 48, 9, 45, 49, 10, 52, 52, 9, 48, 9, 45, 49, 10, 52, 53, 9, 49, 49, 51, 9, 49, 54, 57, 10, 52, 54, 9, 49, 54, 54, 10, 52, 55, 9, 49, 49, 9, 45, 49, 10, 52, 56, 9, 49, 56, 9, 45, 49, 10, 52, 57, 9, 49, 48, 54, 9, 45, 49, 10, 53, 48, 9, 49, 56, 10, 53, 49, 9, 50, 55, 10, 53, 50, 9, 50, 56, 10, 53, 51, 9, 50, 57, 10, 53, 52, 9, 51, 48, 10, 53, 53, 9, 48, 10, 53, 54, 9, 57, 50, 10, 53, 55, 9, 57, 53, 10, 53, 56, 9, 57, 55, 10, 53, 57, 9, 49, 48, 48, 10, 54, 48, 9, 49, 48, 49, 10, 54, 49, 9, 48, 10, 54, 50, 9, 49, 49, 57, 9, 49, 50, 49, 10, 54, 51, 9, 49, 50, 55, 10, 54, 52, 9, 49, 51, 48, 9, 45, 49, 10, 54, 53, 9, 49, 52, 52, 10, 54, 54, 9, 48, 10, 54, 55, 9, 48, 10, 54, 56, 9, 49, 54, 55, 10, 54, 57, 9, 49, 55, 55, 10, 45, 49, 10, 56, 10, 49, 9, 50, 52, 10, 50, 9, 50, 57, 10, 51, 9, 48, 10, 52, 9, 51, 51, 10, 53, 9, 48, 10, 54, 9, 51, 51, 10, 55, 9, 49, 57, 53, 10, 56, 9, 49, 57, 53, 10, 57, 9, 52, 50, 10, 49, 48, 9, 49, 52, 10, 49, 49, 9, 52, 51, 10, 49, 50, 9, 49, 49, 48, 10, 49, 51, 9, 50, 57, 10, 49, 52, 9, 49, 49, 48, 10, 49, 53, 9, 55, 51, 10, 49, 54, 9, 55, 53, 10, 49, 55, 9, 50, 57, 10, 49, 56, 9, 54, 49, 10, 49, 57, 9, 53, 57, 10, 50, 48, 9, 53, 57, 10, 50, 49, 9, 49, 55, 52, 10, 50, 50, 9, 49, 48, 57, 10, 50, 51, 9, 54, 55, 10, 50, 52, 9, 54, 49, 10, 50, 53, 9, 49, 52, 55, 10, 50, 54, 9, 49, 53, 53, 10, 50, 55, 9, 49, 57, 53, 10, 50, 56, 9, 49, 52, 54, 10, 50, 57, 9, 49, 49, 48, 10, 51, 48, 9, 54, 49, 10, 51, 49, 9, 54, 49, 10, 51, 50, 9, 49, 52, 10, 51, 51, 9, 49, 57, 53, 10, 51, 52, 9, 52, 50, 10, 51, 53, 9, 54, 49, 10, 45, 49, 10, 57, 10, 48, 9, 49, 9, 50, 9, 51, 9, 52, 9, 53, 9, 54, 9, 55, 9, 56, 9, 57, 9, 49, 48, 10, 48, 9, 49, 48, 48, 9, 49, 49, 53, 9, 49, 49, 54, 9, 49, 50, 54, 9, 49, 52, 53, 9, 49, 52, 54, 9, 49, 52, 55, 9, 49, 52, 56, 9, 49, 52, 57, 9, 49, 53, 48, 10, 48, 9, 49, 53, 49, 9, 49, 53, 50, 9, 49, 53, 51, 9, 49, 53, 52, 9, 49, 53, 53, 9, 49, 53, 54, 9, 49, 53, 55, 9, 49, 53, 56, 9, 49, 53, 57, 9, 49, 54, 48, 10, 48, 9, 49, 54, 49, 9, 49, 54, 50, 9, 49, 54, 51, 9, 49, 54, 52, 9, 49, 54, 53, 9, 49, 54, 54, 9, 49, 54, 55, 10, 50, 9, 49, 9, 51, 9, 52, 9, 55, 9, 51, 56, 9, 57, 53, 9, 49, 49, 51, 9, 50, 52, 9, 49, 54, 56, 9, 49, 54, 57, 10, 49, 9, 50, 52, 10, 51, 9, 52, 54, 9, 52, 55, 9, 52, 56, 9, 53, 52, 9, 53, 54, 9, 53, 56, 9, 56, 50, 9, 56, 53, 9, 56, 54, 10, 51, 9, 49, 50, 50, 9, 49, 50, 51, 9, 49, 50, 52, 9, 49, 50, 53, 9, 49, 50, 54, 9, 49, 50, 55, 9, 49, 50, 56, 9, 49, 50, 57, 9, 49, 51, 48, 10, 52, 9, 54, 9, 49, 52, 53, 9, 49, 52, 54, 9, 49, 52, 55, 9, 49, 52, 56, 9, 49, 52, 57, 9, 49, 53, 48, 9, 49, 53, 49, 9, 49, 53, 50, 10, 52, 9, 49, 53, 51, 9, 49, 53, 52, 9, 49, 53, 53, 9, 49, 53, 54, 9, 49, 53, 55, 9, 49, 53, 56, 9, 49, 53, 57, 9, 49, 54, 48, 9, 49, 54, 49, 10, 52, 9, 49, 54, 50, 9, 49, 54, 51, 9, 49, 54, 52, 9, 49, 54, 53, 9, 49, 54, 54, 9, 52, 50, 9, 52, 51, 9, 52, 52, 9, 52, 53, 10, 52, 9, 52, 57, 9, 53, 48, 9, 53, 49, 9, 53, 50, 9, 53, 51, 9, 53, 53, 9, 53, 55, 9, 56, 48, 9, 56, 51, 10, 52, 9, 56, 52, 9, 56, 55, 9, 49, 48, 55, 9, 49, 49, 50, 9, 49, 51, 49, 9, 49, 51, 50, 9, 49, 51, 51, 9, 49, 51, 52, 9, 49, 51, 53, 10, 52, 9, 49, 51, 54, 9, 49, 51, 55, 9, 49, 51, 56, 9, 49, 51, 57, 9, 49, 48, 56, 10, 49, 49, 9, 56, 10, 49, 50, 9, 49, 51, 10, 49, 51, 9, 49, 57, 10, 49, 52, 9, 52, 50, 9, 52, 51, 9, 52, 52, 9, 52, 53, 9, 52, 54, 9, 52, 55, 9, 52, 56, 9, 52, 57, 9, 53, 48, 9, 53, 49, 10, 49, 52, 9, 53, 50, 9, 53, 51, 9, 53, 52, 9, 53, 53, 9, 53, 54, 9, 56, 48, 9, 56, 49, 9, 56, 50, 9, 56, 54, 9, 56, 55, 10, 49, 53, 9, 57, 57, 9, 49, 48, 48, 9, 49, 48, 49, 10, 49, 54, 9, 49, 48, 56, 10, 49, 55, 9, 54, 10, 49, 56, 9, 49, 52, 53, 9, 49, 52, 54, 9, 49, 52, 55, 9, 49, 52, 56, 9, 49, 52, 57, 9, 49, 53, 48, 9, 49, 53, 49, 9, 49, 53, 50, 9, 49, 53, 51, 9, 49, 53, 52, 10, 49, 56, 9, 49, 53, 53, 9, 49, 53, 54, 9, 49, 53, 55, 9, 49, 53, 56, 9, 49, 53, 57, 9, 49, 54, 48, 9, 49, 54, 49, 9, 49, 54, 50, 9, 49, 54, 51, 9, 49, 54, 52, 10, 49, 56, 9, 49, 54, 53, 9, 49, 54, 54, 10, 49, 57, 9, 49, 52, 51, 10, 50, 48, 9, 56, 9, 49, 53, 9, 54, 52, 9, 49, 48, 57, 9, 49, 50, 54, 10, 45, 49, 10, 49, 48, 10, 52, 53, 9, 89, 111, 117, 32, 97, 114, 101, 32, 111, 98, 118, 105, 111, 117, 115, 108, 121, 32, 97, 32, 114, 97, 110, 107, 32, 97, 109, 97, 116, 101, 117, 114, 46, 32, 32, 66, 101, 116, 116, 101, 114, 32, 108, 117, 99, 107, 32, 110, 101, 120, 116, 32, 116, 105, 109, 101, 46, 10, 49, 50, 48, 9, 89, 111, 117, 114, 32, 115, 99, 111, 114, 101, 32, 113, 117, 97, 108, 105, 102, 105, 101, 115, 32, 121, 111, 117, 32, 97, 115, 32, 97, 32, 110, 111, 118, 105, 99, 101, 32, 99, 108, 97, 115, 115, 32, 97, 100, 118, 101, 110, 116, 117, 114, 101, 114, 46, 10, 49, 55, 48, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 97, 99, 104, 105, 101, 118, 101, 100, 32, 116, 104, 101, 32, 114, 97, 116, 105, 110, 103, 58, 32, 34, 69, 120, 112, 101, 114, 105, 101, 110, 99, 101, 100, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 114, 34, 46, 10, 50, 53, 48, 9, 89, 111, 117, 32, 109, 97, 121, 32, 110, 111, 119, 32, 99, 111, 110, 115, 105, 100, 101, 114, 32, 121, 111, 117, 114, 115, 101, 108, 102, 32, 97, 32, 34, 83, 101, 97, 115, 111, 110, 101, 100, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 114, 34, 46, 10, 51, 50, 48, 9, 89, 111, 117, 32, 104, 97, 118, 101, 32, 114, 101, 97, 99, 104, 101, 100, 32, 34, 74, 117, 110, 105, 111, 114, 32, 77, 97, 115, 116, 101, 114, 34, 32, 115, 116, 97, 116, 117, 115, 46, 10, 51, 55, 53, 9, 89, 111, 117, 114, 32, 115, 99, 111, 114, 101, 32, 112, 117, 116, 115, 32, 121, 111, 117, 32, 105, 110, 32, 77, 97, 115, 116, 101, 114, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 114, 32, 67, 108, 97, 115, 115, 32, 67, 46, 10, 52, 49, 48, 9, 89, 111, 117, 114, 32, 115, 99, 111, 114, 101, 32, 112, 117, 116, 115, 32, 121, 111, 117, 32, 105, 110, 32, 77, 97, 115, 116, 101, 114, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 114, 32, 67, 108, 97, 115, 115, 32, 66, 46, 10, 52, 50, 54, 9, 89, 111, 117, 114, 32, 115, 99, 111, 114, 101, 32, 112, 117, 116, 115, 32, 121, 111, 117, 32, 105, 110, 32, 77, 97, 115, 116, 101, 114, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 114, 32, 67, 108, 97, 115, 115, 32, 65, 46, 10, 52, 50, 57, 9, 65, 108, 108, 32, 111, 102, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 100, 111, 109, 32, 103, 105, 118, 101, 115, 32, 116, 114, 105, 98, 117, 116, 101, 32, 116, 111, 32, 121, 111, 117, 44, 32, 65, 100, 118, 101, 110, 116, 117, 114, 101, 114, 32, 71, 114, 97, 110, 100, 109, 97, 115, 116, 101, 114, 33, 10, 57, 57, 57, 57, 9, 65, 100, 118, 101, 110, 116, 117, 114, 101, 100, 111, 109, 32, 115, 116, 97, 110, 100, 115, 32, 105, 110, 32, 97, 119, 101, 32, 45, 45, 32, 121, 111, 117, 32, 104, 97, 118, 101, 32, 110, 111, 119, 32, 106, 111, 105, 110, 101, 100, 32, 116, 104, 101, 32, 114, 97, 110, 107, 115, 32, 111, 102, 32, 116, 104, 101, 10, 57, 57, 57, 57, 9, 32, 32, 32, 32, 32, 32, 32, 87, 32, 79, 32, 82, 32, 76, 32, 68, 32, 32, 32, 67, 32, 72, 32, 65, 32, 77, 32, 80, 32, 73, 32, 79, 32, 78, 32, 32, 32, 65, 32, 68, 32, 86, 32, 69, 32, 78, 32, 84, 32, 85, 32, 82, 32, 69, 32, 82, 32, 83, 32, 33, 10, 57, 57, 57, 57, 9, 73, 116, 32, 109, 97, 121, 32, 105, 110, 116, 101, 114, 101, 115, 116, 32, 121, 111, 117, 32, 116, 111, 32, 107, 110, 111, 119, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 68, 117, 110, 103, 101, 111, 110, 45, 77, 97, 115, 116, 101, 114, 32, 104, 105, 109, 115, 101, 108, 102, 32, 104, 97, 115, 44, 32, 116, 111, 10, 57, 57, 57, 57, 9, 109, 121, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 44, 32, 110, 101, 118, 101, 114, 32, 97, 99, 104, 105, 101, 118, 101, 100, 32, 116, 104, 105, 115, 32, 116, 104, 114, 101, 115, 104, 104, 111, 108, 100, 32, 105, 110, 32, 102, 101, 119, 101, 114, 32, 116, 104, 97, 110, 32, 51, 51, 48, 32, 116, 117, 114, 110, 115, 46, 10, 45, 49, 10, 49, 49, 10, 49, 9, 52, 9, 50, 9, 54, 50, 9, 54, 51, 10, 50, 9, 53, 9, 50, 9, 49, 56, 9, 49, 57, 10, 51, 9, 56, 9, 50, 9, 50, 48, 9, 50, 49, 10, 52, 9, 55, 53, 9, 52, 9, 49, 55, 54, 9, 49, 55, 55, 10, 53, 9, 50, 53, 9, 53, 9, 49, 55, 56, 9, 49, 55, 57, 10, 54, 9, 50, 48, 9, 51, 9, 49, 56, 48, 9, 49, 56, 49, 10, 55, 9, 56, 9, 50, 9, 50, 52, 51, 9, 50, 52, 52, 10, 56, 9, 50, 53, 9, 50, 9, 50, 52, 55, 9, 50, 52, 56, 10, 57, 9, 49, 48, 9, 52, 9, 49, 57, 49, 9, 49, 57, 52, 10, 49, 48, 9, 49, 9, 52, 9, 50, 55, 50, 9, 50, 55, 51, 10, 45, 49, 10, 49, 51, 10, 56, 9, 51, 9, 45, 49, 10, 49, 49, 9, 50, 9, 45, 49, 10, 49, 51, 9, 45, 49, 9, 49, 10, 49, 52, 9, 49, 9, 45, 49, 10, 49, 53, 9, 50, 9, 45, 49, 10, 49, 54, 9, 45, 49, 9, 49, 10, 50, 52, 9, 54, 9, 45, 49, 10, 51, 49, 9, 52, 9, 45, 49, 10, 51, 51, 9, 51, 9, 45, 49, 10, 51, 54, 9, 45, 49, 9, 49, 10, 51, 56, 9, 45, 49, 9, 49, 10, 52, 49, 9, 49, 9, 45, 49, 10, 52, 55, 9, 45, 49, 9, 49, 10, 52, 56, 9, 45, 49, 9, 49, 10, 52, 57, 9, 45, 49, 9, 49, 10, 49, 9, 50, 50, 57, 10, 51, 9, 50, 50, 57, 10, 52, 9, 50, 50, 57, 10, 55, 9, 50, 50, 57, 10, 49, 53, 9, 50, 51, 48, 10, 51, 56, 9, 50, 50, 57, 10, 54, 52, 9, 50, 51, 48, 10, 57, 52, 9, 50, 51, 48, 10, 57, 53, 9, 50, 51, 49, 10, 57, 56, 9, 50, 51, 50, 10, 49, 48, 57, 9, 50, 51, 48, 10, 49, 49, 51, 9, 50, 51, 49, 10, 49, 49, 53, 9, 50, 51, 51, 10, 49, 49, 54, 9, 50, 51, 52, 10, 49, 50, 51, 9, 50, 51, 53, 10, 49, 50, 52, 9, 50, 51, 53, 10, 49, 50, 53, 9, 50, 51, 54, 10, 49, 50, 54, 9, 45, 50, 51, 55, 10, 49, 50, 55, 9, 50, 51, 53, 10, 49, 54, 56, 9, 45, 50, 51, 55, 10, 49, 54, 57, 9, 50, 52, 57, 10, 45, 49, 10, 49, 52, 10, 50, 48, 48, 51, 53, 48, 9, 84, 115, 107, 33, 32, 32, 65, 32, 119, 105, 122, 97, 114, 100, 32, 119, 111, 117, 108, 100, 110, 39, 116, 32, 104, 97, 118, 101, 32, 116, 111, 32, 116, 97, 107, 101, 32, 51, 53, 48, 32, 116, 117, 114, 110, 115, 46, 32, 32, 84, 104, 105, 115, 32, 105, 115, 32, 103, 111, 105, 110, 103, 32, 116, 111, 32, 99, 111, 115, 116, 10, 50, 48, 48, 51, 53, 48, 9, 121, 111, 117, 32, 97, 32, 99, 111, 117, 112, 108, 101, 32, 111, 102, 32, 112, 111, 105, 110, 116, 115, 46, 10, 51, 48, 48, 53, 48, 48, 9, 53, 48, 48, 32, 116, 117, 114, 110, 115, 63, 32, 32, 84, 104, 97, 116, 39, 115, 32, 97, 110, 111, 116, 104, 101, 114, 32, 102, 101, 119, 32, 112, 111, 105, 110, 116, 115, 32, 121, 111, 117, 39, 118, 101, 32, 108, 111, 115, 116, 46, 10, 53, 48, 49, 48, 48, 48, 9, 65, 114, 101, 32, 121, 111, 117, 32, 115, 116, 105, 108, 108, 32, 97, 116, 32, 105, 116, 63, 32, 32, 70, 105, 118, 101, 32, 112, 111, 105, 110, 116, 115, 32, 111, 102, 102, 32, 102, 111, 114, 32, 101, 120, 99, 101, 101, 100, 105, 110, 103, 32, 49, 48, 48, 48, 32, 116, 117, 114, 110, 115, 33, 10, 49, 48, 48, 50, 53, 48, 48, 32, 71, 111, 111, 100, 32, 103, 114, 105, 101, 102, 44, 32, 100, 111, 110, 39, 116, 32, 121, 111, 117, 32, 42, 69, 86, 69, 82, 42, 32, 103, 105, 118, 101, 32, 117, 112, 63, 32, 32, 68, 111, 32, 121, 111, 117, 32, 114, 101, 97, 108, 105, 122, 101, 32, 121, 111, 117, 39, 118, 101, 32, 115, 112, 101, 110, 116, 10, 49, 48, 48, 50, 53, 48, 48, 32, 111, 118, 101, 114, 32, 50, 53, 48, 48, 32, 116, 117, 114, 110, 115, 32, 97, 116, 32, 116, 104, 105, 115, 63, 32, 32, 84, 104, 97, 116, 39, 115, 32, 97, 110, 111, 116, 104, 101, 114, 32, 116, 101, 110, 32, 112, 111, 105, 110, 116, 115, 32, 111, 102, 102, 44, 32, 97, 32, 116, 111, 116, 97, 108, 32, 111, 102, 10, 49, 48, 48, 50, 53, 48, 48, 32, 116, 119, 101, 110, 116, 121, 32, 112, 111, 105, 110, 116, 115, 32, 108, 111, 115, 116, 32, 102, 111, 114, 32, 116, 97, 107, 105, 110, 103, 32, 115, 111, 32, 108, 111, 110, 103, 46, 10, 45, 49, 10, 48, 10]);
            Module['FS_createDataFile']('/', 'adventure.text', fileData0, true, true);

        }
        if (Module['calledRun']) {
            runWithFS();
        } else {
            if (!Module['preRun']) Module['preRun'] = [];
            Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
        }

    }
    loadPackage();

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
    if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
    }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
    // Expose functionality in the same simple way that the shells work
    // Note that we pollute the global namespace here, otherwise we break in node
    if (!Module['print']) Module['print'] = function print(x) {
        process['stdout'].write(x + '\n');
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
        process['stderr'].write(x + '\n');
    };

    var nodeFS = require('fs');
    var nodePath = require('path');

    Module['read'] = function read(filename, binary) {
        filename = nodePath['normalize'](filename);
        var ret = nodeFS['readFileSync'](filename);
        // The path is absolute if the normalized version is the same as the resolved.
        if (!ret && filename != nodePath['resolve'](filename)) {
            filename = path.join(__dirname, '..', 'src', filename);
            ret = nodeFS['readFileSync'](filename);
        }
        if (ret && !binary) ret = ret.toString();
        return ret;
    };

    Module['readBinary'] = function readBinary(filename) {
        return Module['read'](filename, true)
    };

    Module['load'] = function load(f) {
        globalEval(read(f));
    };

    if (!Module['thisProgram']) {
        if (process['argv'].length > 1) {
            Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
        } else {
            Module['thisProgram'] = 'unknown-program';
        }
    }

    Module['arguments'] = process['argv'].slice(2);

    if (typeof module !== 'undefined') {
        module['exports'] = Module;
    }

    process['on']('uncaughtException', function(ex) {
        // suppress ExitStatus exceptions from showing an error
        if (!(ex instanceof ExitStatus)) {
            throw ex;
        }
    });

    Module['inspect'] = function() {
        return '[Emscripten Module object]';
    };
} else if (ENVIRONMENT_IS_SHELL) {
    if (!Module['print']) Module['print'] = print;
    if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

    if (typeof read != 'undefined') {
        Module['read'] = read;
    } else {
        Module['read'] = function read() {
            throw 'no read() available (jsc?)'
        };
    }

    Module['readBinary'] = function readBinary(f) {
        if (typeof readbuffer === 'function') {
            return new Uint8Array(readbuffer(f));
        }
        var data = read(f, 'binary');
        assert(typeof data === 'object');
        return data;
    };

    if (typeof scriptArgs != 'undefined') {
        Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
        Module['arguments'] = arguments;
    }

} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module['read'] = function read(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.send(null);
        return xhr.responseText;
    };

    if (typeof arguments != 'undefined') {
        Module['arguments'] = arguments;
    }

    if (typeof console !== 'undefined') {
        if (!Module['print']) Module['print'] = function print(x) {
            console.log(x);
        };
        if (!Module['printErr']) Module['printErr'] = function printErr(x) {
            console.log(x);
        };
    } else {
        // Probably a worker, and without console.log. We can do very little here...
        var TRY_USE_DUMP = false;
        if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
                    dump(x);
                }) : (function(x) {
                    // self.postMessage(x); // enable this if you want stdout to be sent as messages
                }));
    }

    if (ENVIRONMENT_IS_WORKER) {
        Module['load'] = importScripts;
    }

    if (typeof Module['setWindowTitle'] === 'undefined') {
        Module['setWindowTitle'] = function(title) {
            document.title = title
        };
    }
} else {
    // Unreachable because SHELL is dependant on the others
    throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
    eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
    Module['load'] = function load(f) {
        globalEval(Module['read'](f));
    };
}
if (!Module['print']) {
    Module['print'] = function() {};
}
if (!Module['printErr']) {
    Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
    Module['arguments'] = [];
}
if (!Module['thisProgram']) {
    Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
    }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
    setTempRet0: function(value) {
        tempRet0 = value;
    },
    getTempRet0: function() {
        return tempRet0;
    },
    stackSave: function() {
        return STACKTOP;
    },
    stackRestore: function(stackTop) {
        STACKTOP = stackTop;
    },
    getNativeTypeSize: function(type) {
        switch (type) {
            case 'i1':
            case 'i8':
                return 1;
            case 'i16':
                return 2;
            case 'i32':
                return 4;
            case 'i64':
                return 8;
            case 'float':
                return 4;
            case 'double':
                return 8;
            default:
                {
                    if (type[type.length - 1] === '*') {
                        return Runtime.QUANTUM_SIZE; // A pointer
                    } else if (type[0] === 'i') {
                        var bits = parseInt(type.substr(1));
                        assert(bits % 8 === 0);
                        return bits / 8;
                    } else {
                        return 0;
                    }
                }
        }
    },
    getNativeFieldSize: function(type) {
        return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
    },
    STACK_ALIGN: 16,
    prepVararg: function(ptr, type) {
        if (type === 'double' || type === 'i64') {
            // move so the load is aligned
            if (ptr & 7) {
                assert((ptr & 7) === 4);
                ptr += 4;
            }
        } else {
            assert((ptr & 3) === 0);
        }
        return ptr;
    },
    getAlignSize: function(type, size, vararg) {
        // we align i64s and doubles on 64-bit boundaries, unlike x86
        if (!vararg && (type == 'i64' || type == 'double')) return 8;
        if (!type) return Math.min(size, 8); // align structures internally to 64 bits
        return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
    },
    dynCall: function(sig, ptr, args) {
        if (args && args.length) {
            if (!args.splice) args = Array.prototype.slice.call(args);
            args.splice(0, 0, ptr);
            return Module['dynCall_' + sig].apply(null, args);
        } else {
            return Module['dynCall_' + sig].call(null, ptr);
        }
    },
    functionPointers: [],
    addFunction: function(func) {
        for (var i = 0; i < Runtime.functionPointers.length; i++) {
            if (!Runtime.functionPointers[i]) {
                Runtime.functionPointers[i] = func;
                return 2 * (1 + i);
            }
        }
        throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
    },
    removeFunction: function(index) {
        Runtime.functionPointers[(index - 2) / 2] = null;
    },
    warnOnce: function(text) {
        if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
        if (!Runtime.warnOnce.shown[text]) {
            Runtime.warnOnce.shown[text] = 1;
            Module.printErr(text);
        }
    },
    funcWrappers: {},
    getFuncWrapper: function(func, sig) {
        assert(sig);
        if (!Runtime.funcWrappers[sig]) {
            Runtime.funcWrappers[sig] = {};
        }
        var sigCache = Runtime.funcWrappers[sig];
        if (!sigCache[func]) {
            sigCache[func] = function dynCall_wrapper() {
                return Runtime.dynCall(sig, func, arguments);
            };
        }
        return sigCache[func];
    },
    getCompilerSetting: function(name) {
        throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
    },
    stackAlloc: function(size) {
        var ret = STACKTOP;
        STACKTOP = (STACKTOP + size) | 0;
        STACKTOP = (((STACKTOP) + 15) & -16);
        return ret;
    },
    staticAlloc: function(size) {
        var ret = STATICTOP;
        STATICTOP = (STATICTOP + size) | 0;
        STATICTOP = (((STATICTOP) + 15) & -16);
        return ret;
    },
    dynamicAlloc: function(size) {
        var ret = DYNAMICTOP;
        DYNAMICTOP = (DYNAMICTOP + size) | 0;
        DYNAMICTOP = (((DYNAMICTOP) + 15) & -16);
        if (DYNAMICTOP >= TOTAL_MEMORY) {
            var success = enlargeMemory();
            if (!success) {
                DYNAMICTOP = ret;
                return 0;
            }
        };
        return ret;
    },
    alignMemory: function(size, quantum) {
        var ret = size = Math.ceil((size) / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
        return ret;
    },
    makeBigInt: function(low, high, unsigned) {
        var ret = (unsigned ? ((+((low >>> 0))) + ((+((high >>> 0))) * (+4294967296))) : ((+((low >>> 0))) + ((+((high | 0))) * (+4294967296))));
        return ret;
    },
    GLOBAL_BASE: 8,
    QUANTUM_SIZE: 4,
    __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
    if (!condition) {
        abort('Assertion failed: ' + text);
    }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)

function getCFunc(ident) {
    var func = Module['_' + ident]; // closure exported function
    if (!func) {
        try {
            func = eval('_' + ident); // explicit lookup
        } catch (e) {}
    }
    assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
    return func;
}

var cwrap, ccall;
(function() {
    var JSfuncs = {
        // Helpers for cwrap -- it can't refer to Runtime directly because it might
        // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
        // out what the minified function name is.
        'stackSave': function() {
            Runtime.stackSave()
        },
        'stackRestore': function() {
            Runtime.stackRestore()
        },
        // type conversion from js to c
        'arrayToC': function(arr) {
            var ret = Runtime.stackAlloc(arr.length);
            writeArrayToMemory(arr, ret);
            return ret;
        },
        'stringToC': function(str) {
            var ret = 0;
            if (str !== null && str !== undefined && str !== 0) { // null string
                // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
                ret = Runtime.stackAlloc((str.length << 2) + 1);
                writeStringToMemory(str, ret);
            }
            return ret;
        }
    };
    // For fast lookup of conversion functions
    var toC = {
        'string': JSfuncs['stringToC'],
        'array': JSfuncs['arrayToC']
    };

    // C calling interface. 
    ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        if (args) {
            for (var i = 0; i < args.length; i++) {
                var converter = toC[argTypes[i]];
                if (converter) {
                    if (stack === 0) stack = Runtime.stackSave();
                    cArgs[i] = converter(args[i]);
                } else {
                    cArgs[i] = args[i];
                }
            }
        }
        var ret = func.apply(null, cArgs);
        if (returnType === 'string') ret = Pointer_stringify(ret);
        if (stack !== 0) {
            if (opts && opts.async) {
                EmterpreterAsync.asyncFinalizers.push(function() {
                    Runtime.stackRestore(stack);
                });
                return;
            }
            Runtime.stackRestore(stack);
        }
        return ret;
    }

    var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;

    function parseJSFunc(jsfunc) {
        // Match the body and the return value of a javascript function source
        var parsed = jsfunc.toString().match(sourceRegex).slice(1);
        return {
            arguments: parsed[0],
            body: parsed[1],
            returnValue: parsed[2]
        }
    }
    var JSsource = {};
    for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
            // Elements of toCsource are arrays of three items:
            // the code, and the return value
            JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
    }


    cwrap = function cwrap(ident, returnType, argTypes) {
        argTypes = argTypes || [];
        var cfunc = getCFunc(ident);
        // When the function takes numbers and returns a number, we can just return
        // the original function
        var numericArgs = argTypes.every(function(type) {
            return type === 'number'
        });
        var numericRet = (returnType !== 'string');
        if (numericRet && numericArgs) {
            return cfunc;
        }
        // Creation of the arguments list (["$1","$2",...,"$nargs"])
        var argNames = argTypes.map(function(x, i) {
            return '$' + i
        });
        var funcstr = "(function(" + argNames.join(',') + ") {";
        var nargs = argTypes.length;
        if (!numericArgs) {
            // Generate the code needed to convert the arguments from javascript
            // values to pointers
            funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
            for (var i = 0; i < nargs; i++) {
                var arg = argNames[i],
                    type = argTypes[i];
                if (type === 'number') continue;
                var convertCode = JSsource[type + 'ToC']; // [code, return]
                funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
                funcstr += convertCode.body + ';';
                funcstr += arg + '=' + convertCode.returnValue + ';';
            }
        }

        // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
        var cfuncname = parseJSFunc(function() {
            return cfunc
        }).returnValue;
        // Call the function
        funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
        if (!numericRet) { // Return type can only by 'string' or 'number'
            // Convert the result to a string
            var strgfy = parseJSFunc(function() {
                return Pointer_stringify
            }).returnValue;
            funcstr += 'ret = ' + strgfy + '(ret);';
        }
        if (!numericArgs) {
            // If we had a stack, restore it
            funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
        }
        funcstr += 'return ret})';
        return eval(funcstr);
    };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
        case 'i1':
            HEAP8[((ptr) >> 0)] = value;
            break;
        case 'i8':
            HEAP8[((ptr) >> 0)] = value;
            break;
        case 'i16':
            HEAP16[((ptr) >> 1)] = value;
            break;
        case 'i32':
            HEAP32[((ptr) >> 2)] = value;
            break;
        case 'i64':
            (tempI64 = [value >>> 0, (tempDouble = value, (+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble) / (+4294967296)))), (+4294967295))) | 0) >>> 0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / (+4294967296)))))) >>> 0) : 0)], HEAP32[((ptr) >> 2)] = tempI64[0], HEAP32[(((ptr) + (4)) >> 2)] = tempI64[1]);
            break;
        case 'float':
            HEAPF32[((ptr) >> 2)] = value;
            break;
        case 'double':
            HEAPF64[((ptr) >> 3)] = value;
            break;
        default:
            abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
        case 'i1':
            return HEAP8[((ptr) >> 0)];
        case 'i8':
            return HEAP8[((ptr) >> 0)];
        case 'i16':
            return HEAP16[((ptr) >> 1)];
        case 'i32':
            return HEAP32[((ptr) >> 2)];
        case 'i64':
            return HEAP32[((ptr) >> 2)];
        case 'float':
            return HEAPF32[((ptr) >> 2)];
        case 'double':
            return HEAPF64[((ptr) >> 3)];
        default:
            abort('invalid type for setValue: ' + type);
    }
    return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*

function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === 'number') {
        zeroinit = true;
        size = slab;
    } else {
        zeroinit = false;
        size = slab.length;
    }

    var singleType = typeof types === 'string' ? types : null;

    var ret;
    if (allocator == ALLOC_NONE) {
        ret = ptr;
    } else {
        ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
    }

    if (zeroinit) {
        var ptr = ret,
            stop;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
            HEAP32[((ptr) >> 2)] = 0;
        }
        stop = ret + size;
        while (ptr < stop) {
            HEAP8[((ptr++) >> 0)] = 0;
        }
        return ret;
    }

    if (singleType === 'i8') {
        if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret);
        } else {
            HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret;
    }

    var i = 0,
        type, typeSize, previousType;
    while (i < size) {
        var curr = slab[i];

        if (typeof curr === 'function') {
            curr = Runtime.getFunctionIndex(curr);
        }

        type = singleType || types[i];
        if (type === 0) {
            i++;
            continue;
        }

        if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

        setValue(ret + i, curr, type);

        // no need to look up size unless type changes, so cache it
        if (previousType !== type) {
            typeSize = Runtime.getNativeTypeSize(type);
            previousType = type;
        }
        i += typeSize;
    }

    return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready

function getMemory(size) {
    if (!staticSealed) return Runtime.staticAlloc(size);
    if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
    return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
    if (length === 0 || !ptr) return '';
    // TODO: use TextDecoder
    // Find the length, and check for UTF while doing so
    var hasUtf = 0;
    var t;
    var i = 0;
    while (1) {
        t = HEAPU8[(((ptr) + (i)) >> 0)];
        hasUtf |= t;
        if (t == 0 && !length) break;
        i++;
        if (length && i == length) break;
    }
    if (!length) length = i;

    var ret = '';

    if (hasUtf < 128) {
        var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
        var curr;
        while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr += MAX_CHUNK;
            length -= MAX_CHUNK;
        }
        return ret;
    }
    return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
    var str = '';
    while (1) {
        var ch = HEAP8[((ptr++) >> 0)];
        if (!ch) return str;
        str += String.fromCharCode(ch);
    }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
    return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
        u0 = u8Array[idx++];
        if (!u0) return str;
        if (!(u0 & 0x80)) {
            str += String.fromCharCode(u0);
            continue;
        }
        u1 = u8Array[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) {
            str += String.fromCharCode(((u0 & 31) << 6) | u1);
            continue;
        }
        u2 = u8Array[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
            u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
            u3 = u8Array[idx++] & 63;
            if ((u0 & 0xF8) == 0xF0) {
                u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
            } else {
                u4 = u8Array[idx++] & 63;
                if ((u0 & 0xFC) == 0xF8) {
                    u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
                } else {
                    u5 = u8Array[idx++] & 63;
                    u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
                }
            }
        }
        if (u0 < 0x10000) {
            str += String.fromCharCode(u0);
        } else {
            var ch = u0 - 0x10000;
            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
    }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
    return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
        return 0;

    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
        if (u <= 0x7F) {
            if (outIdx >= endIdx) break;
            outU8Array[outIdx++] = u;
        } else if (u <= 0x7FF) {
            if (outIdx + 1 >= endIdx) break;
            outU8Array[outIdx++] = 0xC0 | (u >> 6);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
            if (outIdx + 2 >= endIdx) break;
            outU8Array[outIdx++] = 0xE0 | (u >> 12);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0x1FFFFF) {
            if (outIdx + 3 >= endIdx) break;
            outU8Array[outIdx++] = 0xF0 | (u >> 18);
            outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0x3FFFFFF) {
            if (outIdx + 4 >= endIdx) break;
            outU8Array[outIdx++] = 0xF8 | (u >> 24);
            outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else {
            if (outIdx + 5 >= endIdx) break;
            outU8Array[outIdx++] = 0xFC | (u >> 30);
            outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        }
    }
    // Null-terminate the pointer to the buffer.
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
        if (u <= 0x7F) {
            ++len;
        } else if (u <= 0x7FF) {
            len += 2;
        } else if (u <= 0xFFFF) {
            len += 3;
        } else if (u <= 0x1FFFFF) {
            len += 4;
        } else if (u <= 0x3FFFFFF) {
            len += 5;
        } else {
            len += 6;
        }
    }
    return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
    var i = 0;

    var str = '';
    while (1) {
        var codeUnit = HEAP16[(((ptr) + (i * 2)) >> 1)];
        if (codeUnit == 0)
            return str;
        ++i;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
    }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
    // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
    }
    if (maxBytesToWrite < 2) return 0;
    maxBytesToWrite -= 2; // Null terminator.
    var startPtr = outPtr;
    var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;
    for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr) >> 1)] = codeUnit;
        outPtr += 2;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP16[((outPtr) >> 1)] = 0;
    return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
    return str.length * 2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
    var i = 0;

    var str = '';
    while (1) {
        var utf32 = HEAP32[(((ptr) + (i * 4)) >> 2)];
        if (utf32 == 0)
            return str;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
            var ch = utf32 - 0x10000;
            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
            str += String.fromCharCode(utf32);
        }
    }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
    // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
    }
    if (maxBytesToWrite < 4) return 0;
    var startPtr = outPtr;
    var endPtr = startPtr + maxBytesToWrite - 4;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
            var trailSurrogate = str.charCodeAt(++i);
            codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr) >> 2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP32[((outPtr) >> 2)] = 0;
    return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF)++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
    }

    return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
    var hasLibcxxabi = !! Module['___cxa_demangle'];
    if (hasLibcxxabi) {
        try {
            var buf = _malloc(func.length);
            writeStringToMemory(func.substr(1), buf);
            var status = _malloc(4);
            var ret = Module['___cxa_demangle'](buf, 0, 0, status);
            if (getValue(status, 'i32') === 0 && ret) {
                return Pointer_stringify(ret);
            }
            // otherwise, libcxxabi failed, we can try ours which may return a partial result
        } catch (e) {
            // failure when using libcxxabi, we can try ours which may return a partial result
        } finally {
            if (buf) _free(buf);
            if (status) _free(status);
            if (ret) _free(ret);
        }
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
        'v': 'void',
        'b': 'bool',
        'c': 'char',
        's': 'short',
        'i': 'int',
        'l': 'long',
        'f': 'float',
        'd': 'double',
        'w': 'wchar_t',
        'a': 'signed char',
        'h': 'unsigned char',
        't': 'unsigned short',
        'j': 'unsigned int',
        'm': 'unsigned long',
        'x': 'long long',
        'y': 'unsigned long long',
        'z': '...'
    };
    var subs = [];
    var first = true;

    function dump(x) {
        //return;
        if (x) Module.print(x);
        Module.print(func);
        var pre = '';
        for (var a = 0; a < i; a++) pre += ' ';
        Module.print(pre + '^');
    }

    function parseNested() {
        i++;
        if (func[i] === 'K') i++; // ignore const
        var parts = [];
        while (func[i] !== 'E') {
            if (func[i] === 'S') { // substitution
                i++;
                var next = func.indexOf('_', i);
                var num = func.substring(i, next) || 0;
                parts.push(subs[num] || '?');
                i = next + 1;
                continue;
            }
            if (func[i] === 'C') { // constructor
                parts.push(parts[parts.length - 1]);
                i += 2;
                continue;
            }
            var size = parseInt(func.substr(i));
            var pre = size.toString().length;
            if (!size || !pre) {
                i--;
                break;
            } // counter i++ below us
            var curr = func.substr(i + pre, size);
            parts.push(curr);
            subs.push(curr);
            i += pre + size;
        }
        i++; // skip E
        return parts;
    }

    function parse(rawList, limit, allowVoid) { // main parser
        limit = limit || Infinity;
        var ret = '',
            list = [];

        function flushList() {
            return '(' + list.join(', ') + ')';
        }
        var name;
        if (func[i] === 'N') {
            // namespaced N-E
            name = parseNested().join('::');
            limit--;
            if (limit === 0) return rawList ? [name] : name;
        } else {
            // not namespaced
            if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
            var size = parseInt(func.substr(i));
            if (size) {
                var pre = size.toString().length;
                name = func.substr(i + pre, size);
                i += pre + size;
            }
        }
        first = false;
        if (func[i] === 'I') {
            i++;
            var iList = parse(true);
            var iRet = parse(true, 1, true);
            ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
        } else {
            ret = name;
        }
        paramLoop: while (i < func.length && limit-- > 0) {
            //dump('paramLoop');
            var c = func[i++];
            if (c in basicTypes) {
                list.push(basicTypes[c]);
            } else {
                switch (c) {
                    case 'P':
                        list.push(parse(true, 1, true)[0] + '*');
                        break; // pointer
                    case 'R':
                        list.push(parse(true, 1, true)[0] + '&');
                        break; // reference
                    case 'L':
                        { // literal
                            i++; // skip basic type
                            var end = func.indexOf('E', i);
                            var size = end - i;
                            list.push(func.substr(i, size));
                            i += size + 2; // size + 'EE'
                            break;
                        }
                    case 'A':
                        { // array
                            var size = parseInt(func.substr(i));
                            i += size.toString().length;
                            if (func[i] !== '_') throw '?';
                            i++; // skip _
                            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
                            break;
                        }
                    case 'E':
                        break paramLoop;
                    default:
                        ret += '?' + c;
                        break paramLoop;
                }
            }
        }
        if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
        if (rawList) {
            if (ret) {
                list.push(ret + '?');
            }
            return list;
        } else {
            return ret + flushList();
        }
    }
    var parsed = func;
    try {
        // Special-case the entry point, since its name differs from other name mangling.
        if (func == 'Object._main' || func == '_main') {
            return 'main()';
        }
        if (typeof func === 'number') func = Pointer_stringify(func);
        if (func[0] !== '_') return func;
        if (func[1] !== '_') return func; // C function
        if (func[2] !== 'Z') return func;
        switch (func[3]) {
            case 'n':
                return 'operator new()';
            case 'd':
                return 'operator delete()';
        }
        parsed = parse();
    } catch (e) {
        parsed += '?';
    }
    if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
        Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
    }
    return parsed;
}

function demangleAll(text) {
    return text.replace(/__Z[\w\d_]+/g, function(x) {
        var y = demangle(x);
        return x === y ? x : (x + ' [' + y + ']')
    });
}

function jsStackTrace() {
    var err = new Error();
    if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
            throw new Error(0);
        } catch (e) {
            err = e;
        }
        if (!err.stack) {
            return '(no stack trace available)';
        }
    }
    return err.stack.toString();
}

function stackTrace() {
    return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
    if (x % 4096 > 0) {
        x += (4096 - (x % 4096));
    }
    return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0,
    STATICTOP = 0,
    staticSealed = false; // static area
var STACK_BASE = 0,
    STACKTOP = 0,
    STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0,
    DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
    abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
    if (totalMemory < 16 * 1024 * 1024) {
        totalMemory *= 2;
    } else {
        totalMemory += 16 * 1024 * 1024
    }
}
if (totalMemory !== TOTAL_MEMORY) {
    Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
    TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !! (new Int32Array(1)['subarray']) && !! (new Int32Array(1)['set']),
    'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
            callback();
            continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
            if (callback.arg === undefined) {
                Runtime.dynCall('v', func);
            } else {
                Runtime.dynCall('vi', func, [callback.arg]);
            }
        } else {
            func(callback.arg === undefined ? null : callback.arg);
        }
    }
}

var __ATPRERUN__ = []; // functions called before the runtime is initialized
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
    // compatibility - merge in anything from Module['preRun'] at this time
    if (Module['preRun']) {
        if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
        while (Module['preRun'].length) {
            addOnPreRun(Module['preRun'].shift());
        }
    }
    callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
    if (runtimeInitialized) return;
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
    callRuntimeCallbacks(__ATEXIT__);
    runtimeExited = true;
}

function postRun() {
    // compatibility - merge in anything from Module['postRun'] at this time
    if (Module['postRun']) {
        if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
        while (Module['postRun'].length) {
            addOnPostRun(Module['postRun'].shift());
        }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
    __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
    __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
    __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */ ) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 0xFF) {
            chr &= 0xFF;
        }
        ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
    var array = intArrayFromString(string, dontAddNull);
    var i = 0;
    while (i < array.length) {
        var chr = array[i];
        HEAP8[(((buffer) + (i)) >> 0)] = chr;
        i = i + 1;
    }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
    for (var i = 0; i < array.length; i++) {
        HEAP8[((buffer++) >> 0)] = array[i];
    }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
        HEAP8[((buffer++) >> 0)] = str.charCodeAt(i);
    }
    // Null-terminate the pointer to the HEAP.
    if (!dontAddNull) HEAP8[((buffer) >> 0)] = 0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
    if (value >= 0) {
        return value;
    }
    return bits <= 32 ? 2 * Math.abs(1 << (bits - 1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
    : Math.pow(2, bits) + value;
}

function reSign(value, bits, ignore) {
    if (value <= 0) {
        return value;
    }
    var half = bits <= 32 ? Math.abs(1 << (bits - 1)) // abs is needed if bits == 32
    : Math.pow(2, bits - 1);
    if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
        // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
        // TODO: In i64 mode 1, resign the two parts separately and safely
        value = -2 * half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
    }
    return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
    var ah = a >>> 16;
    var al = a & 0xffff;
    var bh = b >>> 16;
    var bl = b & 0xffff;
    return (al * bl + ((ah * bl + al * bh) << 16)) | 0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
    x = x >>> 0;
    for (var i = 0; i < 32; i++) {
        if (x & (1 << (31 - i))) return i;
    }
    return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
    return id;
}

function addRunDependency(id) {
    runDependencies++;
    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }
}
Module['addRunDependency'] = addRunDependency;

function removeRunDependency(id) {
    runDependencies--;
    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }
    if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback(); // can add another dependenciesFulfilled
        }
    }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 21408;
/* global initializers */
__ATINIT__.push();


memoryInitializer = "adventure.html.mem";





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

    HEAP8[tempDoublePtr] = HEAP8[ptr];

    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];

}

function copyTempDouble(ptr) {

    HEAP8[tempDoublePtr] = HEAP8[ptr];

    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];

    HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];

    HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];

    HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];

    HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];

}

// {{PRE_LIBRARY}}



Module["_memset"] = _memset;



var ___errno_state = 0;

function ___setErrNo(value) {
    // For convenient setting and returning of errno.
    HEAP32[((___errno_state) >> 2)] = value;
    return value;
}

var ERRNO_CODES = {
    EPERM: 1,
    ENOENT: 2,
    ESRCH: 3,
    EINTR: 4,
    EIO: 5,
    ENXIO: 6,
    E2BIG: 7,
    ENOEXEC: 8,
    EBADF: 9,
    ECHILD: 10,
    EAGAIN: 11,
    EWOULDBLOCK: 11,
    ENOMEM: 12,
    EACCES: 13,
    EFAULT: 14,
    ENOTBLK: 15,
    EBUSY: 16,
    EEXIST: 17,
    EXDEV: 18,
    ENODEV: 19,
    ENOTDIR: 20,
    EISDIR: 21,
    EINVAL: 22,
    ENFILE: 23,
    EMFILE: 24,
    ENOTTY: 25,
    ETXTBSY: 26,
    EFBIG: 27,
    ENOSPC: 28,
    ESPIPE: 29,
    EROFS: 30,
    EMLINK: 31,
    EPIPE: 32,
    EDOM: 33,
    ERANGE: 34,
    ENOMSG: 42,
    EIDRM: 43,
    ECHRNG: 44,
    EL2NSYNC: 45,
    EL3HLT: 46,
    EL3RST: 47,
    ELNRNG: 48,
    EUNATCH: 49,
    ENOCSI: 50,
    EL2HLT: 51,
    EDEADLK: 35,
    ENOLCK: 37,
    EBADE: 52,
    EBADR: 53,
    EXFULL: 54,
    ENOANO: 55,
    EBADRQC: 56,
    EBADSLT: 57,
    EDEADLOCK: 35,
    EBFONT: 59,
    ENOSTR: 60,
    ENODATA: 61,
    ETIME: 62,
    ENOSR: 63,
    ENONET: 64,
    ENOPKG: 65,
    EREMOTE: 66,
    ENOLINK: 67,
    EADV: 68,
    ESRMNT: 69,
    ECOMM: 70,
    EPROTO: 71,
    EMULTIHOP: 72,
    EDOTDOT: 73,
    EBADMSG: 74,
    ENOTUNIQ: 76,
    EBADFD: 77,
    EREMCHG: 78,
    ELIBACC: 79,
    ELIBBAD: 80,
    ELIBSCN: 81,
    ELIBMAX: 82,
    ELIBEXEC: 83,
    ENOSYS: 38,
    ENOTEMPTY: 39,
    ENAMETOOLONG: 36,
    ELOOP: 40,
    EOPNOTSUPP: 95,
    EPFNOSUPPORT: 96,
    ECONNRESET: 104,
    ENOBUFS: 105,
    EAFNOSUPPORT: 97,
    EPROTOTYPE: 91,
    ENOTSOCK: 88,
    ENOPROTOOPT: 92,
    ESHUTDOWN: 108,
    ECONNREFUSED: 111,
    EADDRINUSE: 98,
    ECONNABORTED: 103,
    ENETUNREACH: 101,
    ENETDOWN: 100,
    ETIMEDOUT: 110,
    EHOSTDOWN: 112,
    EHOSTUNREACH: 113,
    EINPROGRESS: 115,
    EALREADY: 114,
    EDESTADDRREQ: 89,
    EMSGSIZE: 90,
    EPROTONOSUPPORT: 93,
    ESOCKTNOSUPPORT: 94,
    EADDRNOTAVAIL: 99,
    ENETRESET: 102,
    EISCONN: 106,
    ENOTCONN: 107,
    ETOOMANYREFS: 109,
    EUSERS: 87,
    EDQUOT: 122,
    ESTALE: 116,
    ENOTSUP: 95,
    ENOMEDIUM: 123,
    EILSEQ: 84,
    EOVERFLOW: 75,
    ECANCELED: 125,
    ENOTRECOVERABLE: 131,
    EOWNERDEAD: 130,
    ESTRPIPE: 86
};

function _sysconf(name) {
    // long sysconf(int name);
    // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
    switch (name) {
        case 30:
            return PAGE_SIZE;
        case 85:
            return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
            return 200809;
        case 79:
            return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
            return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
            return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
            return 1024;
        case 31:
        case 42:
        case 72:
            return 32;
        case 87:
        case 26:
        case 33:
            return 2147483647;
        case 34:
        case 1:
            return 47839;
        case 38:
        case 36:
            return 99;
        case 43:
        case 37:
            return 2048;
        case 0:
            return 2097152;
        case 3:
            return 65536;
        case 28:
            return 32768;
        case 44:
            return 32767;
        case 75:
            return 16384;
        case 39:
            return 1000;
        case 89:
            return 700;
        case 71:
            return 256;
        case 40:
            return 255;
        case 2:
            return 100;
        case 180:
            return 64;
        case 25:
            return 20;
        case 5:
            return 16;
        case 6:
            return 6;
        case 73:
            return 4;
        case 84:
            {
                if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
                return 1;
            }
    }
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
}



var ERRNO_MESSAGES = {
    0: "Success",
    1: "Not super-user",
    2: "No such file or directory",
    3: "No such process",
    4: "Interrupted system call",
    5: "I/O error",
    6: "No such device or address",
    7: "Arg list too long",
    8: "Exec format error",
    9: "Bad file number",
    10: "No children",
    11: "No more processes",
    12: "Not enough core",
    13: "Permission denied",
    14: "Bad address",
    15: "Block device required",
    16: "Mount device busy",
    17: "File exists",
    18: "Cross-device link",
    19: "No such device",
    20: "Not a directory",
    21: "Is a directory",
    22: "Invalid argument",
    23: "Too many open files in system",
    24: "Too many open files",
    25: "Not a typewriter",
    26: "Text file busy",
    27: "File too large",
    28: "No space left on device",
    29: "Illegal seek",
    30: "Read only file system",
    31: "Too many links",
    32: "Broken pipe",
    33: "Math arg out of domain of func",
    34: "Math result not representable",
    35: "File locking deadlock error",
    36: "File or path name too long",
    37: "No record locks available",
    38: "Function not implemented",
    39: "Directory not empty",
    40: "Too many symbolic links",
    42: "No message of desired type",
    43: "Identifier removed",
    44: "Channel number out of range",
    45: "Level 2 not synchronized",
    46: "Level 3 halted",
    47: "Level 3 reset",
    48: "Link number out of range",
    49: "Protocol driver not attached",
    50: "No CSI structure available",
    51: "Level 2 halted",
    52: "Invalid exchange",
    53: "Invalid request descriptor",
    54: "Exchange full",
    55: "No anode",
    56: "Invalid request code",
    57: "Invalid slot",
    59: "Bad font file fmt",
    60: "Device not a stream",
    61: "No data (for no delay io)",
    62: "Timer expired",
    63: "Out of streams resources",
    64: "Machine is not on the network",
    65: "Package not installed",
    66: "The object is remote",
    67: "The link has been severed",
    68: "Advertise error",
    69: "Srmount error",
    70: "Communication error on send",
    71: "Protocol error",
    72: "Multihop attempted",
    73: "Cross mount point (not really error)",
    74: "Trying to read unreadable message",
    75: "Value too large for defined data type",
    76: "Given log. name not unique",
    77: "f.d. invalid for this operation",
    78: "Remote address changed",
    79: "Can   access a needed shared lib",
    80: "Accessing a corrupted shared lib",
    81: ".lib section in a.out corrupted",
    82: "Attempting to link in too many libs",
    83: "Attempting to exec a shared library",
    84: "Illegal byte sequence",
    86: "Streams pipe error",
    87: "Too many users",
    88: "Socket operation on non-socket",
    89: "Destination address required",
    90: "Message too long",
    91: "Protocol wrong type for socket",
    92: "Protocol not available",
    93: "Unknown protocol",
    94: "Socket type not supported",
    95: "Not supported",
    96: "Protocol family not supported",
    97: "Address family not supported by protocol family",
    98: "Address already in use",
    99: "Address not available",
    100: "Network interface is not configured",
    101: "Network is unreachable",
    102: "Connection reset by network",
    103: "Connection aborted",
    104: "Connection reset by peer",
    105: "No buffer space available",
    106: "Socket is already connected",
    107: "Socket is not connected",
    108: "Can't send after socket shutdown",
    109: "Too many references",
    110: "Connection timed out",
    111: "Connection refused",
    112: "Host is down",
    113: "Host is unreachable",
    114: "Socket already connected",
    115: "Connection already in progress",
    116: "Stale file handle",
    122: "Quota exceeded",
    123: "No medium (in tape drive)",
    125: "Operation canceled",
    130: "Previous owner died",
    131: "State not recoverable"
};

var PATH = {
    splitPath: function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
    },
    normalizeArray: function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
                parts.splice(i, 1);
            } else if (last === '..') {
                parts.splice(i, 1);
                up++;
            } else if (up) {
                parts.splice(i, 1);
                up--;
            }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
            for (; up--; up) {
                parts.unshift('..');
            }
        }
        return parts;
    },
    normalize: function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
                    return !!p;
                }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
            path = '.';
        }
        if (path && trailingSlash) {
            path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
    },
    dirname: function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
            // No dirname whatsoever
            return '.';
        }
        if (dir) {
            // It has a dirname, strip trailing slash
            dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
    },
    basename: function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash + 1);
    },
    extname: function(path) {
        return PATH.splitPath(path)[3];
    },
    join: function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
    },
    join2: function(l, r) {
        return PATH.normalize(l + '/' + r);
    },
    resolve: function() {
        var resolvedPath = '',
            resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = (i >= 0) ? arguments[i] : FS.cwd();
            // Skip empty and invalid entries
            if (typeof path !== 'string') {
                throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
                return ''; // an invalid portion invalidates the whole thing
            }
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
                    return !!p;
                }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    },
    relative: function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);

        function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
                if (arr[start] !== '') break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
                if (arr[end] !== '') break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
            }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
    }
};

var TTY = {
    ttys: [],
    init: function() {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
    },
    shutdown: function() {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
    },
    register: function(dev, ops) {
        TTY.ttys[dev] = {
            input: [],
            output: [],
            ops: ops
        };
        FS.registerDevice(dev, TTY.stream_ops);
    },
    stream_ops: {
        open: function(stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            stream.tty = tty;
            stream.seekable = false;
        },
        close: function(stream) {
            // flush any pending line data
            stream.tty.ops.flush(stream.tty);
        },
        flush: function(stream) {
            stream.tty.ops.flush(stream.tty);
        },
        read: function(stream, buffer, offset, length, pos /* ignored */ ) {
            if (!stream.tty || !stream.tty.ops.get_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
                var result;
                try {
                    result = stream.tty.ops.get_char(stream.tty);
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                }
                if (result === null || result === undefined) break;
                bytesRead++;
                buffer[offset + i] = result;
            }
            if (bytesRead) {
                stream.node.timestamp = Date.now();
            }
            return bytesRead;
        },
        write: function(stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
            }
            for (var i = 0; i < length; i++) {
                try {
                    stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
            }
            if (length) {
                stream.node.timestamp = Date.now();
            }
            return i;
        }
    },
    default_tty_ops: {
        get_char: function(tty) {
            if (!tty.input.length) {
                var result = null;
                if (ENVIRONMENT_IS_NODE) {
                    // we will read data by chunks of BUFSIZE
                    var BUFSIZE = 256;
                    var buf = new Buffer(BUFSIZE);
                    var bytesRead = 0;

                    var fd = process.stdin.fd;
                    // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                    var usingDevice = false;
                    try {
                        fd = fs.openSync('/dev/stdin', 'r');
                        usingDevice = true;
                    } catch (e) {}

                    bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);

                    if (usingDevice) {
                        fs.closeSync(fd);
                    }
                    if (bytesRead > 0) {
                        result = buf.slice(0, bytesRead).toString('utf-8');
                    } else {
                        result = null;
                    }

                } else if (typeof readline == 'function') {
                    // Command line.
                    result = readline();
                    if (result !== null) {
                        result += '\n';
                    }
                } else if (typeof window != 'undefined' &&
                    typeof window.prompt == 'function') {
                    // Browser.
                    result = window.prompt("input?");
                    //console.log("look");

                    if (result !== null) {
                        result += '\n';
                    }
                }
                if (!result) {
                    return null;
                }
                tty.input = intArrayFromString(result, true);
            }
            return tty.input.shift();
        },
        put_char: function(tty, val) {
            if (val === null || val === 10) {
                Module['print'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            } else {
                if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
            }
        },
        flush: function(tty) {
            if (tty.output && tty.output.length > 0) {
                Module['print'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            }
        }
    },
    default_tty1_ops: {
        put_char: function(tty, val) {
            if (val === null || val === 10) {
                Module['printErr'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            } else {
                if (val != 0) tty.output.push(val);
            }
        },
        flush: function(tty) {
            if (tty.output && tty.output.length > 0) {
                Module['printErr'](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            }
        }
    }
};

var MEMFS = {
    ops_table: null,
    mount: function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */ , 0);
    },
    createNode: function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            // no supported
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
                dir: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek
                    }
                },
                file: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync
                    }
                },
                link: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                },
                chrdev: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                }
            };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
        } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
            // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
            // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
            // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
            node.contents = null;
        } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
            parent.contents[name] = node;
        }
        return node;
    },
    getFileDataAsRegularArray: function(node) {
        if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
            return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
    },
    getFileDataAsTypedArray: function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
    },
    expandFileStorage: function(node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
            node.contents = MEMFS.getFileDataAsRegularArray(node);
            node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }

        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
            var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
            if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
            // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
            // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
            // avoid overshooting the allocation cap by a very large margin.
            var CAPACITY_DOUBLING_MAX = 1024 * 1024;
            newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
            if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
            var oldContents = node.contents;
            node.contents = new Uint8Array(newCapacity); // Allocate new storage.
            if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
            return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
    },
    resizeFileStorage: function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
            node.contents = null; // Fully decommit when requesting a resize to zero.
            node.usedBytes = 0;
            return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
            var oldContents = node.contents;
            node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
            if (oldContents) {
                node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
            }
            node.usedBytes = newSize;
            return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else
            while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
    },
    node_ops: {
        getattr: function(node) {
            var attr = {};
            // device numbers reuse inode numbers.
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
                attr.size = 4096;
            } else if (FS.isFile(node.mode)) {
                attr.size = node.usedBytes;
            } else if (FS.isLink(node.mode)) {
                attr.size = node.link.length;
            } else {
                attr.size = 0;
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
            //       but this is not required by the standard.
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr;
        },
        setattr: function(node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp;
            }
            if (attr.size !== undefined) {
                MEMFS.resizeFileStorage(node, attr.size);
            }
        },
        lookup: function(parent, name) {
            throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },
        mknod: function(parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev);
        },
        rename: function(old_node, new_dir, new_name) {
            // if we're overwriting a directory at new_name, make sure it's empty.
            if (FS.isDir(old_node.mode)) {
                var new_node;
                try {
                    new_node = FS.lookupNode(new_dir, new_name);
                } catch (e) {}
                if (new_node) {
                    for (var i in new_node.contents) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                    }
                }
            }
            // do the internal rewiring
            delete old_node.parent.contents[old_node.name];
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            old_node.parent = new_dir;
        },
        unlink: function(parent, name) {
            delete parent.contents[name];
        },
        rmdir: function(parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
            }
            delete parent.contents[name];
        },
        readdir: function(node) {
            var entries = ['.', '..']
            for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                    continue;
                }
                entries.push(key);
            }
            return entries;
        },
        symlink: function(parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
            node.link = oldpath;
            return node;
        },
        readlink: function(node) {
            if (!FS.isLink(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return node.link;
        }
    },
    stream_ops: {
        read: function(stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes) return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            assert(size >= 0);
            if (size > 8 && contents.subarray) { // non-trivial, and typed array
                buffer.set(contents.subarray(position, position + size), offset);
            } else {
                for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
            }
            return size;
        },
        write: function(stream, buffer, offset, length, position, canOwn) {
            if (!length) return 0;
            var node = stream.node;
            node.timestamp = Date.now();

            if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
                if (canOwn) { // Can we just reuse the buffer we are given?
                    node.contents = buffer.subarray(offset, offset + length);
                    node.usedBytes = length;
                    return length;
                } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
                    node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                    node.usedBytes = length;
                    return length;
                } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
                    node.contents.set(buffer.subarray(offset, offset + length), position);
                    return length;
                }
            }

            // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
            MEMFS.expandFileStorage(node, position + length);
            if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
            else {
                for (var i = 0; i < length; i++) {
                    node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
                }
            }
            node.usedBytes = Math.max(node.usedBytes, position + length);
            return length;
        },
        llseek: function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) { // SEEK_CUR.
                position += stream.position;
            } else if (whence === 2) { // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.usedBytes;
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return position;
        },
        allocate: function(stream, offset, length) {
            MEMFS.expandFileStorage(stream.node, offset + length);
            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
        mmap: function(stream, buffer, offset, length, position, prot, flags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            // Only make a new copy when MAP_PRIVATE is specified.
            if (!(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
                // We can't emulate MAP_SHARED when the file is not backed by the buffer
                // we're mapping to (e.g. the HEAP buffer).
                allocated = false;
                ptr = contents.byteOffset;
            } else {
                // Try to avoid unnecessary slices.
                if (position > 0 || position + length < stream.node.usedBytes) {
                    if (contents.subarray) {
                        contents = contents.subarray(position, position + length);
                    } else {
                        contents = Array.prototype.slice.call(contents, position, position + length);
                    }
                }
                allocated = true;
                ptr = _malloc(length);
                if (!ptr) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
                }
                buffer.set(contents, ptr);
            }
            return {
                ptr: ptr,
                allocated: allocated
            };
        },
        msync: function(stream, buffer, offset, length, mmapFlags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            if (mmapFlags & 2) {
                // MAP_PRIVATE calls need not to be synced back to underlying fs
                return 0;
            }

            var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
            // should we check if bytesWritten and length are the same?
            return 0;
        }
    }
};

var IDBFS = {
    dbs: {},
    indexedDB: function() {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
    },
    DB_VERSION: 21,
    DB_STORE_NAME: "FILE_DATA",
    mount: function(mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
    },
    syncfs: function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
            if (err) return callback(err);

            IDBFS.getRemoteSet(mount, function(err, remote) {
                if (err) return callback(err);

                var src = populate ? remote : local;
                var dst = populate ? local : remote;

                IDBFS.reconcile(src, dst, callback);
            });
        });
    },
    getDB: function(name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
            return callback(null, db);
        }

        var req;
        try {
            req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
            return callback(e);
        }
        req.onupgradeneeded = function(e) {
            var db = e.target.result;
            var transaction = e.target.transaction;

            var fileStore;

            if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
            } else {
                fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
            }

            if (!fileStore.indexNames.contains('timestamp')) {
                fileStore.createIndex('timestamp', 'timestamp', {
                        unique: false
                    });
            }
        };
        req.onsuccess = function() {
            db = req.result;

            // add to the cache
            IDBFS.dbs[name] = db;
            callback(null, db);
        };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    getLocalSet: function(mount, callback) {
        var entries = {};

        function isRealDir(p) {
            return p !== '.' && p !== '..';
        };

        function toAbsolute(root) {
            return function(p) {
                return PATH.join2(root, p);
            }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
            var path = check.pop();
            var stat;

            try {
                stat = FS.stat(path);
            } catch (e) {
                return callback(e);
            }

            if (FS.isDir(stat.mode)) {
                check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
            }

            entries[path] = {
                timestamp: stat.mtime
            };
        }

        return callback(null, {
                type: 'local',
                entries: entries
            });
    },
    getRemoteSet: function(mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function(err, db) {
            if (err) return callback(err);

            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
                callback(this.error);
                e.preventDefault();
            };

            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');

            index.openKeyCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (!cursor) {
                    return callback(null, {
                            type: 'remote',
                            db: db,
                            entries: entries
                        });
                }

                entries[cursor.primaryKey] = {
                    timestamp: cursor.key
                };

                cursor.
                continue ();
            };
        });
    },
    loadLocalEntry: function(path, callback) {
        var stat, node;

        try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
        } catch (e) {
            return callback(e);
        }

        if (FS.isDir(stat.mode)) {
            return callback(null, {
                    timestamp: stat.mtime,
                    mode: stat.mode
                });
        } else if (FS.isFile(stat.mode)) {
            // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
            // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
            node.contents = MEMFS.getFileDataAsTypedArray(node);
            return callback(null, {
                    timestamp: stat.mtime,
                    mode: stat.mode,
                    contents: node.contents
                });
        } else {
            return callback(new Error('node type not supported'));
        }
    },
    storeLocalEntry: function(path, entry, callback) {
        try {
            if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
            } else if (FS.isFile(entry.mode)) {
                FS.writeFile(path, entry.contents, {
                        encoding: 'binary',
                        canOwn: true
                    });
            } else {
                return callback(new Error('node type not supported'));
            }

            FS.chmod(path, entry.mode);
            FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
            return callback(e);
        }

        callback(null);
    },
    removeLocalEntry: function(path, callback) {
        try {
            var lookup = FS.lookupPath(path);
            var stat = FS.stat(path);

            if (FS.isDir(stat.mode)) {
                FS.rmdir(path);
            } else if (FS.isFile(stat.mode)) {
                FS.unlink(path);
            }
        } catch (e) {
            return callback(e);
        }

        callback(null);
    },
    loadRemoteEntry: function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) {
            callback(null, event.target.result);
        };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    storeRemoteEntry: function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() {
            callback(null);
        };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    removeRemoteEntry: function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() {
            callback(null);
        };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    reconcile: function(src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function(key) {
            var e = src.entries[key];
            var e2 = dst.entries[key];
            if (!e2 || e.timestamp > e2.timestamp) {
                create.push(key);
                total++;
            }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function(key) {
            var e = dst.entries[key];
            var e2 = src.entries[key];
            if (!e2) {
                remove.push(key);
                total++;
            }
        });

        if (!total) {
            return callback(null);
        }

        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return callback(err);
                }
                return;
            }
            if (++completed >= total) {
                return callback(null);
            }
        };

        transaction.onerror = function(e) {
            done(this.error);
            e.preventDefault();
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function(path) {
            if (dst.type === 'local') {
                IDBFS.loadRemoteEntry(store, path, function(err, entry) {
                    if (err) return done(err);
                    IDBFS.storeLocalEntry(path, entry, done);
                });
            } else {
                IDBFS.loadLocalEntry(path, function(err, entry) {
                    if (err) return done(err);
                    IDBFS.storeRemoteEntry(store, path, entry, done);
                });
            }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
            if (dst.type === 'local') {
                IDBFS.removeLocalEntry(path, done);
            } else {
                IDBFS.removeRemoteEntry(store, path, done);
            }
        });
    }
};

var NODEFS = {
    isWindows: false,
    staticInit: function() {
        NODEFS.isWindows = !! process.platform.match(/^win/);
    },
    mount: function(mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
    },
    createNode: function(parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
    },
    getMode: function(path) {
        var stat;
        try {
            stat = fs.lstatSync(path);
            if (NODEFS.isWindows) {
                // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
                // propagate write bits to execute bits.
                stat.mode = stat.mode | ((stat.mode & 146) >> 1);
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
    },
    realPath: function(node) {
        var parts = [];
        while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
    },
    flagsToPermissionStringMap: {
        0: "r",
        1: "r+",
        2: "r+",
        64: "r",
        65: "r+",
        66: "r+",
        129: "rx+",
        193: "rx+",
        514: "w+",
        577: "w",
        578: "w+",
        705: "wx",
        706: "wx+",
        1024: "a",
        1025: "a",
        1026: "a+",
        1089: "a",
        1090: "a+",
        1153: "ax",
        1154: "ax+",
        1217: "ax",
        1218: "ax+",
        4096: "rs",
        4098: "rs+"
    },
    flagsToPermissionString: function(flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
            return NODEFS.flagsToPermissionStringMap[flags];
        } else {
            return flags;
        }
    },
    node_ops: {
        getattr: function(node) {
            var path = NODEFS.realPath(node);
            var stat;
            try {
                stat = fs.lstatSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
            // See http://support.microsoft.com/kb/140365
            if (NODEFS.isWindows && !stat.blksize) {
                stat.blksize = 4096;
            }
            if (NODEFS.isWindows && !stat.blocks) {
                stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
            }
            return {
                dev: stat.dev,
                ino: stat.ino,
                mode: stat.mode,
                nlink: stat.nlink,
                uid: stat.uid,
                gid: stat.gid,
                rdev: stat.rdev,
                size: stat.size,
                atime: stat.atime,
                mtime: stat.mtime,
                ctime: stat.ctime,
                blksize: stat.blksize,
                blocks: stat.blocks
            };
        },
        setattr: function(node, attr) {
            var path = NODEFS.realPath(node);
            try {
                if (attr.mode !== undefined) {
                    fs.chmodSync(path, attr.mode);
                    // update the common node structure mode as well
                    node.mode = attr.mode;
                }
                if (attr.timestamp !== undefined) {
                    var date = new Date(attr.timestamp);
                    fs.utimesSync(path, date, date);
                }
                if (attr.size !== undefined) {
                    fs.truncateSync(path, attr.size);
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        lookup: function(parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            var mode = NODEFS.getMode(path);
            return NODEFS.createNode(parent, name, mode);
        },
        mknod: function(parent, name, mode, dev) {
            var node = NODEFS.createNode(parent, name, mode, dev);
            // create the backing node for this in the fs root as well
            var path = NODEFS.realPath(node);
            try {
                if (FS.isDir(node.mode)) {
                    fs.mkdirSync(path, node.mode);
                } else {
                    fs.writeFileSync(path, '', {
                            mode: node.mode
                        });
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            return node;
        },
        rename: function(oldNode, newDir, newName) {
            var oldPath = NODEFS.realPath(oldNode);
            var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
            try {
                fs.renameSync(oldPath, newPath);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        unlink: function(parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.unlinkSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        rmdir: function(parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.rmdirSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        readdir: function(node) {
            var path = NODEFS.realPath(node);
            try {
                return fs.readdirSync(path);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        symlink: function(parent, newName, oldPath) {
            var newPath = PATH.join2(NODEFS.realPath(parent), newName);
            try {
                fs.symlinkSync(oldPath, newPath);
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        readlink: function(node) {
            var path = NODEFS.realPath(node);
            try {
                path = fs.readlinkSync(path);
                path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
                return path;
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        }
    },
    stream_ops: {
        open: function(stream) {
            var path = NODEFS.realPath(stream.node);
            try {
                if (FS.isFile(stream.node.mode)) {
                    stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        close: function(stream) {
            try {
                if (FS.isFile(stream.node.mode) && stream.nfd) {
                    fs.closeSync(stream.nfd);
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        read: function(stream, buffer, offset, length, position) {
            if (length === 0) return 0; // node errors on 0 length reads
            // FIXME this is terrible.
            var nbuffer = new Buffer(length);
            var res;
            try {
                res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            if (res > 0) {
                for (var i = 0; i < res; i++) {
                    buffer[offset + i] = nbuffer[i];
                }
            }
            return res;
        },
        write: function(stream, buffer, offset, length, position) {
            // FIXME this is terrible.
            var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
            var res;
            try {
                res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            return res;
        },
        llseek: function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) { // SEEK_CUR.
                position += stream.position;
            } else if (whence === 2) { // SEEK_END.
                if (FS.isFile(stream.node.mode)) {
                    try {
                        var stat = fs.fstatSync(stream.nfd);
                        position += stat.size;
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                }
            }

            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }

            return position;
        }
    }
};

var _stdin = allocate(1, "i32*", ALLOC_STATIC);

var _stdout = allocate(1, "i32*", ALLOC_STATIC);

var _stderr = allocate(1, "i32*", ALLOC_STATIC);

function _fflush(stream) {
    // int fflush(FILE *stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html

    /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
}
var FS = {
    root: null,
    mounts: [],
    devices: [null],
    streams: [],
    nextInode: 1,
    nameTable: null,
    currentPath: "/",
    initialized: false,
    ignorePermissions: true,
    trackingDelegate: {},
    tracking: {
        openFlags: {
            READ: 1,
            WRITE: 2
        }
    },
    ErrnoError: null,
    genericErrors: {},
    handleFSError: function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
    },
    lookupPath: function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return {
            path: '',
            node: null
        };

        var defaults = {
            follow_mount: true,
            recurse_count: 0
        };
        for (var key in defaults) {
            if (opts[key] === undefined) {
                opts[key] = defaults[key];
            }
        }

        if (opts.recurse_count > 8) { // max recursive lookup of 8
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
                    return !!p;
                }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length - 1);
            if (islast && opts.parent) {
                // stop resolving
                break;
            }

            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);

            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current)) {
                if (!islast || (islast && opts.follow_mount)) {
                    current = current.mounted.root;
                }
            }

            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (!islast || opts.follow) {
                var count = 0;
                while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH.resolve(PATH.dirname(current_path), link);

                    var lookup = FS.lookupPath(current_path, {
                            recurse_count: opts.recurse_count
                        });
                    current = lookup.node;

                    if (count++ > 40) { // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                        throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
                    }
                }
            }
        }

        return {
            path: current_path,
            node: current
        };
    },
    getPath: function(node) {
        var path;
        while (true) {
            if (FS.isRoot(node)) {
                var mount = node.mount.mountpoint;
                if (!path) return mount;
                return mount[mount.length - 1] !== '/' ? mount + '/' + path : mount + path;
            }
            path = path ? node.name + '/' + path : node.name;
            node = node.parent;
        }
    },
    hashName: function(parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
            hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
    },
    hashAddNode: function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
    },
    hashRemoveNode: function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
        } else {
            var current = FS.nameTable[hash];
            while (current) {
                if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break;
                }
                current = current.name_next;
            }
        }
    },
    lookupNode: function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
            throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
                return node;
            }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
    },
    createNode: function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
            FS.FSNode = function(parent, name, mode, rdev) {
                if (!parent) {
                    parent = this; // root node sets parent to itself
                }
                this.parent = parent;
                this.mount = parent.mount;
                this.mounted = null;
                this.id = FS.nextInode++;
                this.name = name;
                this.mode = mode;
                this.node_ops = {};
                this.stream_ops = {};
                this.rdev = rdev;
            };

            FS.FSNode.prototype = {};

            // compatibility
            var readMode = 292 | 73;
            var writeMode = 146;

            // NOTE we must use Object.defineProperties instead of individual calls to
            // Object.defineProperty in order to make closure compiler happy
            Object.defineProperties(FS.FSNode.prototype, {
                    read: {
                        get: function() {
                            return (this.mode & readMode) === readMode;
                        },
                        set: function(val) {
                            val ? this.mode |= readMode : this.mode &= ~readMode;
                        }
                    },
                    write: {
                        get: function() {
                            return (this.mode & writeMode) === writeMode;
                        },
                        set: function(val) {
                            val ? this.mode |= writeMode : this.mode &= ~writeMode;
                        }
                    },
                    isFolder: {
                        get: function() {
                            return FS.isDir(this.mode);
                        }
                    },
                    isDevice: {
                        get: function() {
                            return FS.isChrdev(this.mode);
                        }
                    }
                });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
    },
    destroyNode: function(node) {
        FS.hashRemoveNode(node);
    },
    isRoot: function(node) {
        return node === node.parent;
    },
    isMountpoint: function(node) {
        return !!node.mounted;
    },
    isFile: function(mode) {
        return (mode & 61440) === 32768;
    },
    isDir: function(mode) {
        return (mode & 61440) === 16384;
    },
    isLink: function(mode) {
        return (mode & 61440) === 40960;
    },
    isChrdev: function(mode) {
        return (mode & 61440) === 8192;
    },
    isBlkdev: function(mode) {
        return (mode & 61440) === 24576;
    },
    isFIFO: function(mode) {
        return (mode & 61440) === 4096;
    },
    isSocket: function(mode) {
        return (mode & 49152) === 49152;
    },
    flagModes: {
        "r": 0,
        "rs": 1052672,
        "r+": 2,
        "w": 577,
        "wx": 705,
        "xw": 705,
        "w+": 578,
        "wx+": 706,
        "xw+": 706,
        "a": 1089,
        "ax": 1217,
        "xa": 1217,
        "a+": 1090,
        "ax+": 1218,
        "xa+": 1218
    },
    modeStringToFlags: function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
            throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
    },
    flagsToPermissionString: function(flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
            perms += 'w';
        }
        return perms;
    },
    nodePermissions: function(node, perms) {
        if (FS.ignorePermissions) {
            return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
            return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
            return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
            return ERRNO_CODES.EACCES;
        }
        return 0;
    },
    mayLookup: function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
    },
    mayCreate: function(dir, name) {
        try {
            var node = FS.lookupNode(dir, name);
            return ERRNO_CODES.EEXIST;
        } catch (e) {}
        return FS.nodePermissions(dir, 'wx');
    },
    mayDelete: function(dir, name, isdir) {
        var node;
        try {
            node = FS.lookupNode(dir, name);
        } catch (e) {
            return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
            return err;
        }
        if (isdir) {
            if (!FS.isDir(node.mode)) {
                return ERRNO_CODES.ENOTDIR;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                return ERRNO_CODES.EBUSY;
            }
        } else {
            if (FS.isDir(node.mode)) {
                return ERRNO_CODES.EISDIR;
            }
        }
        return 0;
    },
    mayOpen: function(node, flags) {
        if (!node) {
            return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
            return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
            if ((flags & 2097155) !== 0 || // opening for write
                (flags & 512)) {
                return ERRNO_CODES.EISDIR;
            }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
    },
    MAX_OPEN_FDS: 4096,
    nextfd: function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
                return fd;
            }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
    },
    getStream: function(fd) {
        return FS.streams[fd];
    },
    createStream: function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
            FS.FSStream = function() {};
            FS.FSStream.prototype = {};
            // compatibility
            Object.defineProperties(FS.FSStream.prototype, {
                    object: {
                        get: function() {
                            return this.node;
                        },
                        set: function(val) {
                            this.node = val;
                        }
                    },
                    isRead: {
                        get: function() {
                            return (this.flags & 2097155) !== 1;
                        }
                    },
                    isWrite: {
                        get: function() {
                            return (this.flags & 2097155) !== 0;
                        }
                    },
                    isAppend: {
                        get: function() {
                            return (this.flags & 1024);
                        }
                    }
                });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
            newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
    },
    closeStream: function(fd) {
        FS.streams[fd] = null;
    },
    getStreamFromPtr: function(ptr) {
        return FS.streams[ptr - 1];
    },
    getPtrForStream: function(stream) {
        return stream ? stream.fd + 1 : 0;
    },
    chrdev_stream_ops: {
        open: function(stream) {
            var device = FS.getDevice(stream.node.rdev);
            // override node's stream ops with the device's
            stream.stream_ops = device.stream_ops;
            // forward the open call
            if (stream.stream_ops.open) {
                stream.stream_ops.open(stream);
            }
        },
        llseek: function() {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
    },
    major: function(dev) {
        return ((dev) >> 8);
    },
    minor: function(dev) {
        return ((dev) & 0xff);
    },
    makedev: function(ma, mi) {
        return ((ma) << 8 | (mi));
    },
    registerDevice: function(dev, ops) {
        FS.devices[dev] = {
            stream_ops: ops
        };
    },
    getDevice: function(dev) {
        return FS.devices[dev];
    },
    getMounts: function(mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
            var m = check.pop();

            mounts.push(m);

            check.push.apply(check, m.mounts);
        }

        return mounts;
    },
    syncfs: function(populate, callback) {
        if (typeof(populate) === 'function') {
            callback = populate;
            populate = false;
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return callback(err);
                }
                return;
            }
            if (++completed >= mounts.length) {
                callback(null);
            }
        };

        // sync all mounts
        mounts.forEach(function(mount) {
            if (!mount.type.syncfs) {
                return done(null);
            }
            mount.type.syncfs(mount, populate, done);
        });
    },
    mount: function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, {
                    follow_mount: false
                });

            mountpoint = lookup.path; // use the absolute path
            node = lookup.node;

            if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            }

            if (!FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
            }
        }

        var mount = {
            type: type,
            opts: opts,
            mountpoint: mountpoint,
            mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
            FS.root = mountRoot;
        } else if (node) {
            // set as a mountpoint
            node.mounted = mount;

            // add the new mount to the current mount's children
            if (node.mount) {
                node.mount.mounts.push(mount);
            }
        }

        return mountRoot;
    },
    unmount: function(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, {
                follow_mount: false
            });

        if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function(hash) {
            var current = FS.nameTable[hash];

            while (current) {
                var next = current.name_next;

                if (mounts.indexOf(current.mount) !== -1) {
                    FS.destroyNode(current);
                }

                current = next;
            }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
    },
    lookup: function(parent, name) {
        return parent.node_ops.lookup(parent, name);
    },
    mknod: function(path, mode, dev) {
        var lookup = FS.lookupPath(path, {
                parent: true
            });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
    },
    create: function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */ ;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
    },
    mkdir: function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */ ;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
    },
    mkdev: function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
            dev = mode;
            mode = 438 /* 0666 */ ;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
    },
    symlink: function(oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, {
                parent: true
            });
        var parent = lookup.node;
        if (!parent) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
    },
    rename: function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
            lookup = FS.lookupPath(old_path, {
                    parent: true
                });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, {
                    parent: true
                });
            new_dir = lookup.node;
        } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
            new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
            // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
            return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
            FS.mayDelete(new_dir, new_name, isdir) :
            FS.mayCreate(new_dir, new_name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
            err = FS.nodePermissions(old_dir, 'w');
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        try {
            if (FS.trackingDelegate['willMovePath']) {
                FS.trackingDelegate['willMovePath'](old_path, new_path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
            throw e;
        } finally {
            // add the node back to the hash (in case node_ops.rename
            // changed its name)
            FS.hashAddNode(old_node);
        }
        try {
            if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch (e) {
            console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
        }
    },
    rmdir: function(path) {
        var lookup = FS.lookupPath(path, {
                parent: true
            });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
            if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
    },
    readdir: function(path) {
        var lookup = FS.lookupPath(path, {
                follow: true
            });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
    },
    unlink: function(path) {
        var lookup = FS.lookupPath(path, {
                parent: true
            });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
            // POSIX says unlink should set EPERM, not EISDIR
            if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
            if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
    },
    readlink: function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
    },
    stat: function(path, dontFollow) {
        var lookup = FS.lookupPath(path, {
                follow: !dontFollow
            });
        var node = lookup.node;
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
    },
    lstat: function(path) {
        return FS.stat(path, true);
    },
    chmod: function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, {
                    follow: !dontFollow
                });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
                mode: (mode & 4095) | (node.mode & ~4095),
                timestamp: Date.now()
            });
    },
    lchmod: function(path, mode) {
        FS.chmod(path, mode, true);
    },
    fchmod: function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
    },
    chown: function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, {
                    follow: !dontFollow
                });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
                timestamp: Date.now()
                // we ignore the uid / gid for now
            });
    },
    lchown: function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
    },
    fchown: function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
    },
    truncate: function(path, len) {
        if (len < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, {
                    follow: true
                });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
            throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
                size: len,
                timestamp: Date.now()
            });
    },
    ftruncate: function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
    },
    utime: function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, {
                follow: true
            });
        var node = lookup.node;
        node.node_ops.setattr(node, {
                timestamp: Math.max(atime, mtime)
            });
    },
    open: function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
            mode = (mode & 4095) | 32768;
        } else {
            mode = 0;
        }
        var node;
        if (typeof path === 'object') {
            node = path;
        } else {
            path = PATH.normalize(path);
            try {
                var lookup = FS.lookupPath(path, {
                        follow: !(flags & 131072)
                    });
                node = lookup.node;
            } catch (e) {
                // ignore
            }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
            if (node) {
                // if O_CREAT and O_EXCL are set, error out if the node already exists
                if ((flags & 128)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
                }
            } else {
                // node doesn't exist, try to create it
                node = FS.mknod(path, mode, 0);
                created = true;
            }
        }
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
            flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
            var err = FS.mayOpen(node, flags);
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        // do truncation if necessary
        if ((flags & 512)) {
            FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
                node: node,
                path: FS.getPath(node), // we want the absolute path to the node
                flags: flags,
                seekable: true,
                position: 0,
                stream_ops: node.stream_ops,
                // used by the file family libc calls (fopen, fwrite, ferror, etc.)
                ungotten: [],
                error: false
            }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
            if (!FS.readFiles) FS.readFiles = {};
            if (!(path in FS.readFiles)) {
                FS.readFiles[path] = 1;
                Module['printErr']('read file: ' + path);
            }
        }
        try {
            if (FS.trackingDelegate['onOpenFile']) {
                var trackingFlags = 0;
                if ((flags & 2097155) !== 1) {
                    trackingFlags |= FS.tracking.openFlags.READ;
                }
                if ((flags & 2097155) !== 0) {
                    trackingFlags |= FS.tracking.openFlags.WRITE;
                }
                FS.trackingDelegate['onOpenFile'](path, trackingFlags);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
        }
        return stream;
    },
    close: function(stream) {
        try {
            if (stream.stream_ops.close) {
                stream.stream_ops.close(stream);
            }
        } catch (e) {
            throw e;
        } finally {
            FS.closeStream(stream.fd);
        }
    },
    llseek: function(stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
    },
    read: function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
            position = stream.position;
            seeking = false;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
    },
    write: function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
            // seek to the end before writing in append mode
            FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
            position = stream.position;
            seeking = false;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
            if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch (e) {
            console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
        }
        return bytesWritten;
    },
    allocate: function(stream, offset, length) {
        if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
    },
    mmap: function(stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
    },
    msync: function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
            return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
    },
    munmap: function(stream) {
        return 0;
    },
    ioctl: function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
    },
    readFile: function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
            ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
            ret = buf;
        }
        FS.close(stream);
        return ret;
    },
    writeFile: function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
            FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
    },
    cwd: function() {
        return FS.currentPath;
    },
    chdir: function(path) {
        var lookup = FS.lookupPath(path, {
                follow: true
            });
        if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
            throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
    },
    createDefaultDirectories: function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
    },
    createDefaultDevices: function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
                read: function() {
                    return 0;
                },
                write: function(stream, buffer, offset, length, pos) {
                    return length;
                }
            });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
            // for modern web browsers
            var randomBuffer = new Uint8Array(1);
            random_device = function() {
                crypto.getRandomValues(randomBuffer);
                return randomBuffer[0];
            };
        } else if (ENVIRONMENT_IS_NODE) {
            // for nodejs
            random_device = function() {
                return require('crypto').randomBytes(1)[0];
            };
        } else {
            // default for ES5 platforms
            random_device = function() {
                return (Math.random() * 256) | 0;
            };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
    },
    createStandardStreams: function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
            FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
            FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
            FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
            FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
            FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
            FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin) >> 2)] = FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout) >> 2)] = FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr) >> 2)] = FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
    },
    ensureErrnoError: function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = function(errno) {
                this.errno = errno;
                for (var key in ERRNO_CODES) {
                    if (ERRNO_CODES[key] === errno) {
                        this.code = key;
                        break;
                    }
                }
            };
            this.setErrno(errno);
            this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = '<generic error, no stack>';
        });
    },
    staticInit: function() {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
    },
    init: function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
    },
    quit: function() {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
                continue;
            }
            FS.close(stream);
        }
    },
    getMode: function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
    },
    joinPath: function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
    },
    absolutePath: function(relative, base) {
        return PATH.resolve(base, relative);
    },
    standardizePath: function(path) {
        return PATH.normalize(path);
    },
    findObject: function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
            return ret.object;
        } else {
            ___setErrNo(ret.error);
            return null;
        }
    },
    analyzePath: function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
            var lookup = FS.lookupPath(path, {
                    follow: !dontResolveLastLink
                });
            path = lookup.path;
        } catch (e) {}
        var ret = {
            isRoot: false,
            exists: false,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: false,
            parentPath: null,
            parentObject: null
        };
        try {
            var lookup = FS.lookupPath(path, {
                    parent: true
                });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, {
                    follow: !dontResolveLastLink
                });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === '/';
        } catch (e) {
            ret.error = e.errno;
        };
        return ret;
    },
    createFolder: function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
    },
    createPath: function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
                FS.mkdir(current);
            } catch (e) {
                // ignore EEXIST
            }
            parent = current;
        }
        return current;
    },
    createFile: function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
    },
    createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
            if (typeof data === 'string') {
                var arr = new Array(data.length);
                for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                data = arr;
            }
            // make sure we can write to the file
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, 'w');
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
        }
        return node;
    },
    createDevice: function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode( !! input, !! output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
                open: function(stream) {
                    stream.seekable = false;
                },
                close: function(stream) {
                    // flush any pending line data
                    if (output && output.buffer && output.buffer.length) {
                        output(10);
                    }
                },
                read: function(stream, buffer, offset, length, pos /* ignored */ ) {
                    var bytesRead = 0;
                    for (var i = 0; i < length; i++) {
                        var result;
                        try {
                            result = input();
                        } catch (e) {
                            throw new FS.ErrnoError(ERRNO_CODES.EIO);
                        }
                        if (result === undefined && bytesRead === 0) {
                            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                        }
                        if (result === null || result === undefined) break;
                        bytesRead++;
                        buffer[offset + i] = result;
                    }
                    if (bytesRead) {
                        stream.node.timestamp = Date.now();
                    }
                    return bytesRead;
                },
                write: function(stream, buffer, offset, length, pos) {
                    for (var i = 0; i < length; i++) {
                        try {
                            output(buffer[offset + i]);
                        } catch (e) {
                            throw new FS.ErrnoError(ERRNO_CODES.EIO);
                        }
                    }
                    if (length) {
                        stream.node.timestamp = Date.now();
                    }
                    return i;
                }
            });
        return FS.mkdev(path, mode, dev);
    },
    createLink: function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
    },
    forceLoadFile: function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
            // Command-line.
            try {
                // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
                //          read() will try to parse UTF8.
                obj.contents = intArrayFromString(Module['read'](obj.url), true);
                obj.usedBytes = obj.contents.length;
            } catch (e) {
                success = false;
            }
        } else {
            throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
    },
    createLazyFile: function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
                return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize) | 0;
            return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024 * 1024; // Chunk size in bytes

            if (!hasByteServing) chunkSize = datalength;

            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");

                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                    xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }

                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || []);
                } else {
                    return intArrayFromString(xhr.responseText || '', true);
                }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum + 1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength - 1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                    lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
            });

            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
            if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
            var lazyArray = new LazyUint8Array();
            Object.defineProperty(lazyArray, "length", {
                    get: function() {
                        if (!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._length;
                    }
                });
            Object.defineProperty(lazyArray, "chunkSize", {
                    get: function() {
                        if (!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._chunkSize;
                    }
                });

            var properties = {
                isDevice: false,
                contents: lazyArray
            };
        } else {
            var properties = {
                isDevice: false,
                url: url
            };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
            node.contents = properties.contents;
        } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
                get: function() {
                    return this.contents.length;
                }
            });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
            var fn = node.stream_ops[key];
            stream_ops[key] = function forceLoadLazyFile() {
                if (!FS.forceLoadFile(node)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                return fn.apply(null, arguments);
            };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            var contents = stream.node.contents;
            if (position >= contents.length)
                return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (contents.slice) { // normal array
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                }
            } else {
                for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
                    buffer[offset + i] = contents.get(position + i);
                }
            }
            return size;
        };
        node.stream_ops = stream_ops;
        return node;
    },
    createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname

        function processData(byteArray) {
            function finish(byteArray) {
                if (preFinish) preFinish();
                if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
                }
                if (onload) onload();
                removeRunDependency(dep);
            }
            var handled = false;
            Module['preloadPlugins'].forEach(function(plugin) {
                if (handled) return;
                if (plugin['canHandle'](fullname)) {
                    plugin['handle'](byteArray, fullname, finish, function() {
                        if (onerror) onerror();
                        removeRunDependency(dep);
                    });
                    handled = true;
                }
            });
            if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
            Browser.asyncLoad(url, function(byteArray) {
                processData(byteArray);
            }, onerror);
        } else {
            processData(url);
        }
    },
    indexedDB: function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    },
    DB_NAME: function() {
        return 'EM_FS_' + window.location.pathname;
    },
    DB_VERSION: 20,
    DB_STORE_NAME: "FILE_DATA",
    saveFilesToDB: function(paths, onload, onerror) {
        onload = onload || function() {};
        onerror = onerror || function() {};
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            console.log('creating db');
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0,
                fail = 0,
                total = paths.length;

            function finish() {
                if (fail == 0) onload();
                else onerror();
            }
            paths.forEach(function(path) {
                var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                putRequest.onsuccess = function putRequest_onsuccess() {
                    ok++;
                    if (ok + fail == total) finish()
                };
                putRequest.onerror = function putRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish()
                };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    },
    loadFilesFromDB: function(paths, onload, onerror) {
        onload = onload || function() {};
        onerror = onerror || function() {};
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
                var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
            } catch (e) {
                onerror(e);
                return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0,
                fail = 0,
                total = paths.length;

            function finish() {
                if (fail == 0) onload();
                else onerror();
            }
            paths.forEach(function(path) {
                var getRequest = files.get(path);
                getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                        FS.unlink(path);
                    }
                    FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                    ok++;
                    if (ok + fail == total) finish();
                };
                getRequest.onerror = function getRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish()
                };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    }
};




function _mkport() {
    throw 'TODO'
}
var SOCKFS = {
    mount: function(mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] &&
            ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};

        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
            if ('function' === typeof callback) {
                this._callbacks[event] = callback;
            }
            return this;
        };

        Module['websocket'].emit = function(event, param) {
            if ('function' === typeof this._callbacks[event]) {
                this._callbacks[event].call(this, param);
            }
        };

        // If debug is enabled register simple default logging callbacks for each Event.

        return FS.createNode(null, '/', 16384 | 511 /* 0777 */ , 0);
    },
    createSocket: function(family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
            assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }

        // create our internal socket structure
        var sock = {
            family: family,
            type: type,
            protocol: protocol,
            server: null,
            error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
            peers: {},
            pending: [],
            recv_queue: [],
            sock_ops: SOCKFS.websocket_sock_ops
        };

        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;

        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
                path: name,
                node: node,
                flags: FS.modeStringToFlags('r+'),
                seekable: false,
                stream_ops: SOCKFS.stream_ops
            });

        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;

        return sock;
    },
    getSocket: function(fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
            return null;
        }
        return stream.node.sock;
    },
    stream_ops: {
        poll: function(stream) {
            var sock = stream.node.sock;
            return sock.sock_ops.poll(sock);
        },
        ioctl: function(stream, request, varargs) {
            var sock = stream.node.sock;
            return sock.sock_ops.ioctl(sock, request, varargs);
        },
        read: function(stream, buffer, offset, length, position /* ignored */ ) {
            var sock = stream.node.sock;
            var msg = sock.sock_ops.recvmsg(sock, length);
            if (!msg) {
                // socket is closed
                return 0;
            }
            buffer.set(msg.buffer, offset);
            return msg.buffer.length;
        },
        write: function(stream, buffer, offset, length, position /* ignored */ ) {
            var sock = stream.node.sock;
            return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },
        close: function(stream) {
            var sock = stream.node.sock;
            sock.sock_ops.close(sock);
        }
    },
    nextname: function() {
        if (!SOCKFS.nextname.current) {
            SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
    },
    websocket_sock_ops: {
        createPeer: function(sock, addr, port) {
            var ws;

            if (typeof addr === 'object') {
                ws = addr;
                addr = null;
                port = null;
            }

            if (ws) {
                // for sockets that've already connected (e.g. we're the server)
                // we can inspect the _socket property for the address
                if (ws._socket) {
                    addr = ws._socket.remoteAddress;
                    port = ws._socket.remotePort;
                }
                // if we're just now initializing a connection to the remote,
                // inspect the url property
                else {
                    var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
                    if (!result) {
                        throw new Error('WebSocket URL must be in the format ws(s)://address:port');
                    }
                    addr = result[1];
                    port = parseInt(result[2], 10);
                }
            } else {
                // create the actual websocket object and connect
                try {
                    // runtimeConfig gets set to true if WebSocket runtime configuration is available.
                    var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));

                    // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
                    // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
                    var url = 'ws:#'.replace('#', '//');

                    if (runtimeConfig) {
                        if ('string' === typeof Module['websocket']['url']) {
                            url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                        }
                    }

                    if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                        var parts = addr.split('/');
                        url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
                    }

                    // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
                    var subProtocols = 'binary'; // The default value is 'binary'

                    if (runtimeConfig) {
                        if ('string' === typeof Module['websocket']['subprotocol']) {
                            subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                        }
                    }

                    // The regex trims the string (removes spaces at the beginning and end, then splits the string by
                    // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
                    subProtocols = subProtocols.replace(/^ +| +$/g, "").split(/ *, */);

                    // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
                    var opts = ENVIRONMENT_IS_NODE ? {
                        'protocol': subProtocols.toString()
                    } : subProtocols;

                    // If node we use the ws library.
                    var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
                    ws = new WebSocket(url, opts);
                    ws.binaryType = 'arraybuffer';
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
                }
            }


            var peer = {
                addr: addr,
                port: port,
                socket: ws,
                dgram_send_queue: []
            };

            SOCKFS.websocket_sock_ops.addPeer(sock, peer);
            SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);

            // if this is a bound dgram socket, send the port number first to allow
            // us to override the ephemeral port reported to us by remotePort on the
            // remote end.
            if (sock.type === 2 && typeof sock.sport !== 'undefined') {
                peer.dgram_send_queue.push(new Uint8Array([
                            255, 255, 255, 255,
                            'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0), ((sock.sport & 0xff00) >> 8), (sock.sport & 0xff)
                        ]));
            }

            return peer;
        },
        getPeer: function(sock, addr, port) {
            return sock.peers[addr + ':' + port];
        },
        addPeer: function(sock, peer) {
            sock.peers[peer.addr + ':' + peer.port] = peer;
        },
        removePeer: function(sock, peer) {
            delete sock.peers[peer.addr + ':' + peer.port];
        },
        handlePeerEvents: function(sock, peer) {
            var first = true;

            var handleOpen = function() {

                Module['websocket'].emit('open', sock.stream.fd);

                try {
                    var queued = peer.dgram_send_queue.shift();
                    while (queued) {
                        peer.socket.send(queued);
                        queued = peer.dgram_send_queue.shift();
                    }
                } catch (e) {
                    // not much we can do here in the way of proper error handling as we've already
                    // lied and said this data was sent. shut it down.
                    peer.socket.close();
                }
            };

            function handleMessage(data) {
                assert(typeof data !== 'string' && data.byteLength !== undefined); // must receive an ArrayBuffer
                data = new Uint8Array(data); // make a typed array view on the array buffer


                // if this is the port message, override the peer's port with it
                var wasfirst = first;
                first = false;
                if (wasfirst &&
                    data.length === 10 &&
                    data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                    data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
                    // update the peer's port and it's key in the peer map
                    var newport = ((data[8] << 8) | data[9]);
                    SOCKFS.websocket_sock_ops.removePeer(sock, peer);
                    peer.port = newport;
                    SOCKFS.websocket_sock_ops.addPeer(sock, peer);
                    return;
                }

                sock.recv_queue.push({
                        addr: peer.addr,
                        port: peer.port,
                        data: data
                    });
                Module['websocket'].emit('message', sock.stream.fd);
            };

            if (ENVIRONMENT_IS_NODE) {
                peer.socket.on('open', handleOpen);
                peer.socket.on('message', function(data, flags) {
                    if (!flags.binary) {
                        return;
                    }
                    handleMessage((new Uint8Array(data)).buffer); // copy from node Buffer -> ArrayBuffer
                });
                peer.socket.on('close', function() {
                    Module['websocket'].emit('close', sock.stream.fd);
                });
                peer.socket.on('error', function(error) {
                    // Although the ws library may pass errors that may be more descriptive than
                    // ECONNREFUSED they are not necessarily the expected error code e.g. 
                    // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
                    // is still probably the most useful thing to do.
                    sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
                    Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
                    // don't throw
                });
            } else {
                peer.socket.onopen = handleOpen;
                peer.socket.onclose = function() {
                    Module['websocket'].emit('close', sock.stream.fd);
                };
                peer.socket.onmessage = function peer_socket_onmessage(event) {
                    handleMessage(event.data);
                };
                peer.socket.onerror = function(error) {
                    // The WebSocket spec only allows a 'simple event' to be thrown on error,
                    // so we only really know as much as ECONNREFUSED.
                    sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
                    Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
                };
            }
        },
        poll: function(sock) {
            if (sock.type === 1 && sock.server) {
                // listen sockets should only say they're available for reading
                // if there are pending clients.
                return sock.pending.length ? (64 | 1) : 0;
            }

            var mask = 0;
            var dest = sock.type === 1 ? // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
                null;

            if (sock.recv_queue.length || !dest || // connection-less sockets are always ready to read
                (dest && dest.socket.readyState === dest.socket.CLOSING) ||
                (dest && dest.socket.readyState === dest.socket.CLOSED)) { // let recv return 0 once closed
                mask |= (64 | 1);
            }

            if (!dest || // connection-less sockets are always ready to write
                (dest && dest.socket.readyState === dest.socket.OPEN)) {
                mask |= 4;
            }

            if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
                (dest && dest.socket.readyState === dest.socket.CLOSED)) {
                mask |= 16;
            }

            return mask;
        },
        ioctl: function(sock, request, arg) {
            switch (request) {
                case 21531:
                    var bytes = 0;
                    if (sock.recv_queue.length) {
                        bytes = sock.recv_queue[0].data.length;
                    }
                    HEAP32[((arg) >> 2)] = bytes;
                    return 0;
                default:
                    return ERRNO_CODES.EINVAL;
            }
        },
        close: function(sock) {
            // if we've spawned a listen server, close it
            if (sock.server) {
                try {
                    sock.server.close();
                } catch (e) {}
                sock.server = null;
            }
            // close any peer connections
            var peers = Object.keys(sock.peers);
            for (var i = 0; i < peers.length; i++) {
                var peer = sock.peers[peers[i]];
                try {
                    peer.socket.close();
                } catch (e) {}
                SOCKFS.websocket_sock_ops.removePeer(sock, peer);
            }
            return 0;
        },
        bind: function(sock, addr, port) {
            if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL); // already bound
            }
            sock.saddr = addr;
            sock.sport = port || _mkport();
            // in order to emulate dgram sockets, we need to launch a listen server when
            // binding on a connection-less socket
            // note: this is only required on the server side
            if (sock.type === 2) {
                // close the existing server if it exists
                if (sock.server) {
                    sock.server.close();
                    sock.server = null;
                }
                // swallow error operation not supported error that occurs when binding in the
                // browser where this isn't supported
                try {
                    sock.sock_ops.listen(sock, 0);
                } catch (e) {
                    if (!(e instanceof FS.ErrnoError)) throw e;
                    if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
                }
            }
        },
        connect: function(sock, addr, port) {
            if (sock.server) {
                throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
            }

            // TODO autobind
            // if (!sock.addr && sock.type == 2) {
            // }

            // early out if we're already connected / in the middle of connecting
            if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
                var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
                if (dest) {
                    if (dest.socket.readyState === dest.socket.CONNECTING) {
                        throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
                    } else {
                        throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
                    }
                }
            }

            // add the socket to our peer list and set our
            // destination address / port to match
            var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
            sock.daddr = peer.addr;
            sock.dport = peer.port;

            // always "fail" in non-blocking mode
            throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },
        listen: function(sock, backlog) {
            if (!ENVIRONMENT_IS_NODE) {
                throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
            }
            if (sock.server) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL); // already listening
            }
            var WebSocketServer = require('ws').Server;
            var host = sock.saddr;
            sock.server = new WebSocketServer({
                    host: host,
                    port: sock.sport
                    // TODO support backlog
                });
            Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.

            sock.server.on('connection', function(ws) {
                if (sock.type === 1) {
                    var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);

                    // create a peer on the new socket
                    var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
                    newsock.daddr = peer.addr;
                    newsock.dport = peer.port;

                    // push to queue for accept to pick up
                    sock.pending.push(newsock);
                    Module['websocket'].emit('connection', newsock.stream.fd);
                } else {
                    // create a peer on the listen socket so calling sendto
                    // with the listen socket and an address will resolve
                    // to the correct client
                    SOCKFS.websocket_sock_ops.createPeer(sock, ws);
                    Module['websocket'].emit('connection', sock.stream.fd);
                }
            });
            sock.server.on('closed', function() {
                Module['websocket'].emit('close', sock.stream.fd);
                sock.server = null;
            });
            sock.server.on('error', function(error) {
                // Although the ws library may pass errors that may be more descriptive than
                // ECONNREFUSED they are not necessarily the expected error code e.g. 
                // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
                // is still probably the most useful thing to do. This error shouldn't
                // occur in a well written app as errors should get trapped in the compiled
                // app's own getaddrinfo call.
                sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
                Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
                // don't throw
            });
        },
        accept: function(listensock) {
            if (!listensock.server) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            var newsock = listensock.pending.shift();
            newsock.stream.flags = listensock.stream.flags;
            return newsock;
        },
        getname: function(sock, peer) {
            var addr, port;
            if (peer) {
                if (sock.daddr === undefined || sock.dport === undefined) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
                }
                addr = sock.daddr;
                port = sock.dport;
            } else {
                // TODO saddr and sport will be set for bind()'d UDP sockets, but what
                // should we be returning for TCP sockets that've been connect()'d?
                addr = sock.saddr || 0;
                port = sock.sport || 0;
            }
            return {
                addr: addr,
                port: port
            };
        },
        sendmsg: function(sock, buffer, offset, length, addr, port) {
            if (sock.type === 2) {
                // connection-less sockets will honor the message address,
                // and otherwise fall back to the bound destination address
                if (addr === undefined || port === undefined) {
                    addr = sock.daddr;
                    port = sock.dport;
                }
                // if there was no address to fall back to, error out
                if (addr === undefined || port === undefined) {
                    throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
                }
            } else {
                // connection-based sockets will only use the bound
                addr = sock.daddr;
                port = sock.dport;
            }

            // find the peer for the destination address
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);

            // early out if not connected with a connection-based socket
            if (sock.type === 1) {
                if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
                } else if (dest.socket.readyState === dest.socket.CONNECTING) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                }
            }

            // create a copy of the incoming data to send, as the WebSocket API
            // doesn't work entirely with an ArrayBufferView, it'll just send
            // the entire underlying buffer
            var data;
            if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
                data = buffer.slice(offset, offset + length);
            } else { // ArrayBufferView
                data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
            }

            // if we're emulating a connection-less dgram socket and don't have
            // a cached connection, queue the buffer to send upon connect and
            // lie, saying the data was sent now.
            if (sock.type === 2) {
                if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
                    // if we're not connected, open a new connection
                    if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                        dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
                    }
                    dest.dgram_send_queue.push(data);
                    return length;
                }
            }

            try {
                // send the actual data
                dest.socket.send(data);
                return length;
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
        },
        recvmsg: function(sock, length) {
            // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
            if (sock.type === 1 && sock.server) {
                // tcp servers should not be recv()'ing on the listen socket
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }

            var queued = sock.recv_queue.shift();
            if (!queued) {
                if (sock.type === 1) {
                    var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);

                    if (!dest) {
                        // if we have a destination address but are not connected, error out
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
                    } else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                        // return null if the socket has closed
                        return null;
                    } else {
                        // else, our socket is in a valid state but truly has nothing available
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                    }
                } else {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                }
            }

            // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
            // requeued TCP data it'll be an ArrayBufferView
            var queuedLength = queued.data.byteLength || queued.data.length;
            var queuedOffset = queued.data.byteOffset || 0;
            var queuedBuffer = queued.data.buffer || queued.data;
            var bytesRead = Math.min(length, queuedLength);
            var res = {
                buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
                addr: queued.addr,
                port: queued.port
            };


            // push back any unread data for TCP connections
            if (sock.type === 1 && bytesRead < queuedLength) {
                var bytesRemaining = queuedLength - bytesRead;
                queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
                sock.recv_queue.unshift(queued);
            }

            return res;
        }
    }
};

function _recv(fd, buf, len, flags) {
    var sock = SOCKFS.getSocket(fd);
    if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
    }
    // TODO honor flags
    return _read(fd, buf, len);
}

function _pread(fildes, buf, nbyte, offset) {
    // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
    }
    try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
    } catch (e) {
        FS.handleFSError(e);
        return -1;
    }
}

function _read(fildes, buf, nbyte) {
    // ssize_t read(int fildes, void *buf, size_t nbyte);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
    }


    try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
    } catch (e) {
        FS.handleFSError(e);
        return -1;
    }
}

function _fread(ptr, size, nitems, stream) {
    // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
    var bytesToRead = nitems * size;
    if (bytesToRead == 0) {
        return 0;
    }
    var bytesRead = 0;
    var streamObj = FS.getStreamFromPtr(stream);
    if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
    }
    while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++) >> 0)] = streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
    }
    var err = _read(streamObj.fd, ptr, bytesToRead);
    if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
    }
    bytesRead += err;
    if (bytesRead < bytesToRead) streamObj.eof = true;
    return (bytesRead / size) | 0;
}


function _close(fildes) {
    // int close(int fildes);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
    }
    try {
        FS.close(stream);
        return 0;
    } catch (e) {
        FS.handleFSError(e);
        return -1;
    }
}

function _fileno(stream) {
    // int fileno(FILE *stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
    stream = FS.getStreamFromPtr(stream);
    if (!stream) return -1;
    return stream.fd;
}

function _fclose(stream) {
    // int fclose(FILE *stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
    var fd = _fileno(stream);
    return _close(fd);
}





var _environ = allocate(1, "i32*", ALLOC_STATIC);
var ___environ = _environ;

function ___buildEnvironment(env) {
    // WARNING: Arbitrary limit!
    var MAX_ENV_VALUES = 64;
    var TOTAL_ENV_SIZE = 1024;

    // Statically allocate memory for the environment.
    var poolPtr;
    var envPtr;
    if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
            'i8*', ALLOC_STATIC);
        HEAP32[((envPtr) >> 2)] = poolPtr;
        HEAP32[((_environ) >> 2)] = envPtr;
    } else {
        envPtr = HEAP32[((_environ) >> 2)];
        poolPtr = HEAP32[((envPtr) >> 2)];
    }

    // Collect key=value lines.
    var strings = [];
    var totalSize = 0;
    for (var key in env) {
        if (typeof env[key] === 'string') {
            var line = key + '=' + env[key];
            strings.push(line);
            totalSize += line.length;
        }
    }
    if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
    }

    // Make new.
    var ptrSize = 4;
    for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr) + (i * ptrSize)) >> 2)] = poolPtr;
        poolPtr += line.length + 1;
    }
    HEAP32[(((envPtr) + (strings.length * ptrSize)) >> 2)] = 0;
}
var ENV = {};

function _getenv(name) {
    // char *getenv(const char *name);
    // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
    if (name === 0) return 0;
    name = Pointer_stringify(name);
    if (!ENV.hasOwnProperty(name)) return 0;

    if (_getenv.ret) _free(_getenv.ret);
    _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
    return _getenv.ret;
}

function _abort() {
    Module['abort']();
}





function _send(fd, buf, len, flags) {
    var sock = SOCKFS.getSocket(fd);
    if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
    }
    // TODO honor flags
    return _write(fd, buf, len);
}

function _pwrite(fildes, buf, nbyte, offset) {
    // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
    }
    try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
    } catch (e) {
        FS.handleFSError(e);
        return -1;
    }
}

function _write(fildes, buf, nbyte) {
    // ssize_t write(int fildes, const void *buf, size_t nbyte);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
    }


    try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
    } catch (e) {
        FS.handleFSError(e);
        return -1;
    }
}

function _fwrite(ptr, size, nitems, stream) {
    // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
    var bytesToWrite = nitems * size;
    if (bytesToWrite == 0) return 0;
    var fd = _fileno(stream);
    var bytesWritten = _write(fd, ptr, bytesToWrite);
    if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
    } else {
        return (bytesWritten / size) | 0;
    }
}



Module["_strlen"] = _strlen;

function __reallyNegative(x) {
    return x < 0 || (x === 0 && (1 / x) === -Infinity);
}

function __formatString(format, varargs) {
    assert((varargs & 3) === 0);
    var textIndex = format;
    var argIndex = 0;

    function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
            ret = (HEAP32[((tempDoublePtr) >> 2)] = HEAP32[(((varargs) + (argIndex)) >> 2)], HEAP32[(((tempDoublePtr) + (4)) >> 2)] = HEAP32[(((varargs) + ((argIndex) + (4))) >> 2)], (+(HEAPF64[(tempDoublePtr) >> 3])));
            argIndex += 8;
        } else if (type == 'i64') {
            ret = [HEAP32[(((varargs) + (argIndex)) >> 2)],
                HEAP32[(((varargs) + (argIndex + 4)) >> 2)]
            ];

            argIndex += 8;
        } else {
            assert((argIndex & 3) === 0);
            type = 'i32'; // varargs are always i32, i64, or double
            ret = HEAP32[(((varargs) + (argIndex)) >> 2)];
            argIndex += 4;
        }
        return ret;
    }

    var ret = [];
    var curr, next, currArg;
    while (1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex) >> 0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex + 1) >> 0)];
        if (curr == 37) {
            // Handle flags.
            var flagAlwaysSigned = false;
            var flagLeftAlign = false;
            var flagAlternative = false;
            var flagZeroPad = false;
            var flagPadSign = false;
            flagsLoop: while (1) {
                switch (next) {
                    case 43:
                        flagAlwaysSigned = true;
                        break;
                    case 45:
                        flagLeftAlign = true;
                        break;
                    case 35:
                        flagAlternative = true;
                        break;
                    case 48:
                        if (flagZeroPad) {
                            break flagsLoop;
                        } else {
                            flagZeroPad = true;
                            break;
                        }
                    case 32:
                        flagPadSign = true;
                        break;
                    default:
                        break flagsLoop;
                }
                textIndex++;
                next = HEAP8[((textIndex + 1) >> 0)];
            }

            // Handle width.
            var width = 0;
            if (next == 42) {
                width = getNextArg('i32');
                textIndex++;
                next = HEAP8[((textIndex + 1) >> 0)];
            } else {
                while (next >= 48 && next <= 57) {
                    width = width * 10 + (next - 48);
                    textIndex++;
                    next = HEAP8[((textIndex + 1) >> 0)];
                }
            }

            // Handle precision.
            var precisionSet = false,
                precision = -1;
            if (next == 46) {
                precision = 0;
                precisionSet = true;
                textIndex++;
                next = HEAP8[((textIndex + 1) >> 0)];
                if (next == 42) {
                    precision = getNextArg('i32');
                    textIndex++;
                } else {
                    while (1) {
                        var precisionChr = HEAP8[((textIndex + 1) >> 0)];
                        if (precisionChr < 48 ||
                            precisionChr > 57) break;
                        precision = precision * 10 + (precisionChr - 48);
                        textIndex++;
                    }
                }
                next = HEAP8[((textIndex + 1) >> 0)];
            }
            if (precision < 0) {
                precision = 6; // Standard default.
                precisionSet = false;
            }

            // Handle integer sizes. WARNING: These assume a 32-bit architecture!
            var argSize;
            switch (String.fromCharCode(next)) {
                case 'h':
                    var nextNext = HEAP8[((textIndex + 2) >> 0)];
                    if (nextNext == 104) {
                        textIndex++;
                        argSize = 1; // char (actually i32 in varargs)
                    } else {
                        argSize = 2; // short (actually i32 in varargs)
                    }
                    break;
                case 'l':
                    var nextNext = HEAP8[((textIndex + 2) >> 0)];
                    if (nextNext == 108) {
                        textIndex++;
                        argSize = 8; // long long
                    } else {
                        argSize = 4; // long
                    }
                    break;
                case 'L': // long long
                case 'q': // int64_t
                case 'j': // intmax_t
                    argSize = 8;
                    break;
                case 'z': // size_t
                case 't': // ptrdiff_t
                case 'I': // signed ptrdiff_t or unsigned size_t
                    argSize = 4;
                    break;
                default:
                    argSize = null;
            }
            if (argSize) textIndex++;
            next = HEAP8[((textIndex + 1) >> 0)];

            // Handle type specifier.
            switch (String.fromCharCode(next)) {
                case 'd':
                case 'i':
                case 'u':
                case 'o':
                case 'x':
                case 'X':
                case 'p':
                    {
                        // Integer.
                        var signed = next == 100 || next == 105;
                        argSize = argSize || 4;
                        var currArg = getNextArg('i' + (argSize * 8));
                        var origArg = currArg;
                        var argText;
                        // Flatten i64-1 [low, high] into a (slightly rounded) double
                        if (argSize == 8) {
                            currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
                        }
                        // Truncate to requested size.
                        if (argSize <= 4) {
                            var limit = Math.pow(256, argSize) - 1;
                            currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
                        }
                        // Format the number.
                        var currAbsArg = Math.abs(currArg);
                        var prefix = '';
                        if (next == 100 || next == 105) {
                            if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null);
                            else
                                argText = reSign(currArg, 8 * argSize, 1).toString(10);
                        } else if (next == 117) {
                            if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true);
                            else
                                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                            currArg = Math.abs(currArg);
                        } else if (next == 111) {
                            argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
                        } else if (next == 120 || next == 88) {
                            prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                            if (argSize == 8 && i64Math) {
                                if (origArg[1]) {
                                    argText = (origArg[1] >>> 0).toString(16);
                                    var lower = (origArg[0] >>> 0).toString(16);
                                    while (lower.length < 8) lower = '0' + lower;
                                    argText += lower;
                                } else {
                                    argText = (origArg[0] >>> 0).toString(16);
                                }
                            } else
                            if (currArg < 0) {
                                // Represent negative numbers in hex as 2's complement.
                                currArg = -currArg;
                                argText = (currAbsArg - 1).toString(16);
                                var buffer = [];
                                for (var i = 0; i < argText.length; i++) {
                                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                                }
                                argText = buffer.join('');
                                while (argText.length < argSize * 2) argText = 'f' + argText;
                            } else {
                                argText = currAbsArg.toString(16);
                            }
                            if (next == 88) {
                                prefix = prefix.toUpperCase();
                                argText = argText.toUpperCase();
                            }
                        } else if (next == 112) {
                            if (currAbsArg === 0) {
                                argText = '(nil)';
                            } else {
                                prefix = '0x';
                                argText = currAbsArg.toString(16);
                            }
                        }
                        if (precisionSet) {
                            while (argText.length < precision) {
                                argText = '0' + argText;
                            }
                        }

                        // Add sign if needed
                        if (currArg >= 0) {
                            if (flagAlwaysSigned) {
                                prefix = '+' + prefix;
                            } else if (flagPadSign) {
                                prefix = ' ' + prefix;
                            }
                        }

                        // Move sign to prefix so we zero-pad after the sign
                        if (argText.charAt(0) == '-') {
                            prefix = '-' + prefix;
                            argText = argText.substr(1);
                        }

                        // Add padding.
                        while (prefix.length + argText.length < width) {
                            if (flagLeftAlign) {
                                argText += ' ';
                            } else {
                                if (flagZeroPad) {
                                    argText = '0' + argText;
                                } else {
                                    prefix = ' ' + prefix;
                                }
                            }
                        }

                        // Insert the result into the buffer.
                        argText = prefix + argText;
                        argText.split('').forEach(function(chr) {
                            ret.push(chr.charCodeAt(0));
                        });
                        break;
                    }
                case 'f':
                case 'F':
                case 'e':
                case 'E':
                case 'g':
                case 'G':
                    {
                        // Float.
                        var currArg = getNextArg('double');
                        var argText;
                        if (isNaN(currArg)) {
                            argText = 'nan';
                            flagZeroPad = false;
                        } else if (!isFinite(currArg)) {
                            argText = (currArg < 0 ? '-' : '') + 'inf';
                            flagZeroPad = false;
                        } else {
                            var isGeneral = false;
                            var effectivePrecision = Math.min(precision, 20);

                            // Convert g/G to f/F or e/E, as per:
                            // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                            if (next == 103 || next == 71) {
                                isGeneral = true;
                                precision = precision || 1;
                                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                                if (precision > exponent && exponent >= -4) {
                                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                                    precision -= exponent + 1;
                                } else {
                                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                                    precision--;
                                }
                                effectivePrecision = Math.min(precision, 20);
                            }

                            if (next == 101 || next == 69) {
                                argText = currArg.toExponential(effectivePrecision);
                                // Make sure the exponent has at least 2 digits.
                                if (/[eE][-+]\d$/.test(argText)) {
                                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                                }
                            } else if (next == 102 || next == 70) {
                                argText = currArg.toFixed(effectivePrecision);
                                if (currArg === 0 && __reallyNegative(currArg)) {
                                    argText = '-' + argText;
                                }
                            }

                            var parts = argText.split('e');
                            if (isGeneral && !flagAlternative) {
                                // Discard trailing zeros and periods.
                                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                                    (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                                    parts[0] = parts[0].slice(0, -1);
                                }
                            } else {
                                // Make sure we have a period in alternative mode.
                                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                                // Zero pad until required precision.
                                while (precision > effectivePrecision++) parts[0] += '0';
                            }
                            argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');

                            // Capitalize 'E' if needed.
                            if (next == 69) argText = argText.toUpperCase();

                            // Add sign.
                            if (currArg >= 0) {
                                if (flagAlwaysSigned) {
                                    argText = '+' + argText;
                                } else if (flagPadSign) {
                                    argText = ' ' + argText;
                                }
                            }
                        }

                        // Add padding.
                        while (argText.length < width) {
                            if (flagLeftAlign) {
                                argText += ' ';
                            } else {
                                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                                    argText = argText[0] + '0' + argText.slice(1);
                                } else {
                                    argText = (flagZeroPad ? '0' : ' ') + argText;
                                }
                            }
                        }

                        // Adjust case.
                        if (next < 97) argText = argText.toUpperCase();

                        // Insert the result into the buffer.
                        argText.split('').forEach(function(chr) {
                            ret.push(chr.charCodeAt(0));
                        });
                        break;
                    }
                case 's':
                    {
                        // String.
                        var arg = getNextArg('i8*');
                        var argLength = arg ? _strlen(arg) : '(null)'.length;
                        if (precisionSet) argLength = Math.min(argLength, precision);
                        if (!flagLeftAlign) {
                            while (argLength < width--) {
                                ret.push(32);
                            }
                        }
                        if (arg) {
                            for (var i = 0; i < argLength; i++) {
                                ret.push(HEAPU8[((arg++) >> 0)]);
                            }
                        } else {
                            ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
                        }
                        if (flagLeftAlign) {
                            while (argLength < width--) {
                                ret.push(32);
                            }
                        }
                        break;
                    }
                case 'c':
                    {
                        // Character.
                        if (flagLeftAlign) ret.push(getNextArg('i8'));
                        while (--width > 0) {
                            ret.push(32);
                        }
                        if (!flagLeftAlign) ret.push(getNextArg('i8'));
                        break;
                    }
                case 'n':
                    {
                        // Write the length written so far to the next parameter.
                        var ptr = getNextArg('i32*');
                        HEAP32[((ptr) >> 2)] = ret.length;
                        break;
                    }
                case '%':
                    {
                        // Literal percent sign.
                        ret.push(curr);
                        break;
                    }
                default:
                    {
                        // Unknown specifiers remain untouched.
                        for (var i = startTextIndex; i < textIndex + 2; i++) {
                            ret.push(HEAP8[((i) >> 0)]);
                        }
                    }
            }
            textIndex += 2;
            // TODO: Support a/A (hex float) and m (last error) specifiers.
            // TODO: Support %1${specifier} for arg selection.
        } else {
            ret.push(curr);
            textIndex += 1;
        }
    }
    return ret;
}

function _fprintf(stream, format, varargs) {
    // int fprintf(FILE *restrict stream, const char *restrict format, ...);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
    var result = __formatString(format, varargs);
    var stack = Runtime.stackSave();
    var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
    Runtime.stackRestore(stack);
    return ret;
}

function _printf(format, varargs) {
    // int printf(const char *restrict format, ...);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
    var stdout = HEAP32[((_stdout) >> 2)];
    return _fprintf(stdout, format, varargs);
}


function _fgetc(stream) {
    // int fgetc(FILE *stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
    var streamObj = FS.getStreamFromPtr(stream);
    if (!streamObj) return -1;
    if (streamObj.eof || streamObj.error) return -1;
    var ret = _fread(_fgetc.ret, 1, 1, stream);
    if (ret == 0) {
        return -1;
    } else if (ret == -1) {
        streamObj.error = true;
        return -1;
    } else {
        return HEAPU8[((_fgetc.ret) >> 0)];
    }
}

function _fgets(s, n, stream) {
    // char *fgets(char *restrict s, int n, FILE *restrict stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
    var streamObj = FS.getStreamFromPtr(stream);
    if (!streamObj) return 0;
    if (streamObj.error || streamObj.eof) return 0;
    var byte_;
    for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
            if (streamObj.error || (streamObj.eof && i == 0)) return 0;
            else if (streamObj.eof) break;
        }
        HEAP8[(((s) + (i)) >> 0)] = byte_;
    }
    HEAP8[(((s) + (i)) >> 0)] = 0;
    return s;
}



function _open(path, oflag, varargs) {
    // int open(const char *path, int oflag, ...);
    // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
    var mode = HEAP32[((varargs) >> 2)];
    path = Pointer_stringify(path);
    try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
    } catch (e) {
        FS.handleFSError(e);
        return -1;
    }
}

function _fopen(filename, mode) {
    // FILE *fopen(const char *restrict filename, const char *restrict mode);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
    var flags;
    mode = Pointer_stringify(mode);
    if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
            flags = 2;
        } else {
            flags = 0;
        }
    } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
            flags = 2;
        } else {
            flags = 1;
        }
        flags |= 64;
        flags |= 512;
    } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
            flags = 2;
        } else {
            flags = 1;
        }
        flags |= 64;
        flags |= 1024;
    } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
    }
    var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK)); // All creation permissions.
    return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
}

function _feof(stream) {
    // int feof(FILE *stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
    stream = FS.getStreamFromPtr(stream);
    return Number(stream && stream.eof);
}


function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    return dest;
}
Module["_memcpy"] = _memcpy;


function _fputc(c, stream) {
    // int fputc(int c, FILE *stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
    var chr = unSign(c & 0xFF);
    HEAP8[((_fputc.ret) >> 0)] = chr;
    var fd = _fileno(stream);
    var ret = _write(fd, _fputc.ret, 1);
    if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
    } else {
        return chr;
    }
}

function _putchar(c) {
    // int putchar(int c);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
    return _fputc(c, HEAP32[((_stdout) >> 2)]);
}

function _sbrk(bytes) {
    // Implement a Linux-like 'memory area' for our 'process'.
    // Changes the size of the memory area by |bytes|; returns the
    // address of the previous top ('break') of the memory area
    // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
    var self = _sbrk;
    if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() {
            abort('cannot dynamically allocate, sbrk now has control')
        };
    }
    var ret = DYNAMICTOP;
    if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
    }
    return ret; // Previous break location.
}


function _fputs(s, stream) {
    // int fputs(const char *restrict s, FILE *restrict stream);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
    var fd = _fileno(stream);
    return _write(fd, s, _strlen(s));
}

function _puts(s) {
    // int puts(const char *s);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
    // NOTE: puts() always writes an extra newline.
    var stdout = HEAP32[((_stdout) >> 2)];
    var ret = _fputs(s, stdout);
    if (ret < 0) {
        return ret;
    } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
    }
}


function ___errno_location() {
    return ___errno_state;
}



function _emscripten_set_main_loop_timing(mode, value) {
    Browser.mainLoop.timingMode = mode;
    Browser.mainLoop.timingValue = value;

    if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
    }

    if (mode == 0 /*EM_TIMING_SETTIMEOUT*/ ) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
            setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
    } else if (mode == 1 /*EM_TIMING_RAF*/ ) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
            Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
    }
    return 0;
}

function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
    Module['noExitRuntime'] = true;

    assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');

    Browser.mainLoop.func = func;
    Browser.mainLoop.arg = arg;

    var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;

    Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
            var start = Date.now();
            var blocker = Browser.mainLoop.queue.shift();
            blocker.func(blocker.arg);
            if (Browser.mainLoop.remainingBlockers) {
                var remaining = Browser.mainLoop.remainingBlockers;
                var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
                if (blocker.counted) {
                    Browser.mainLoop.remainingBlockers = next;
                } else {
                    // not counted, but move the progress along a tiny bit
                    next = next + 0.5; // do not steal all the next one's progress
                    Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
                }
            }
            console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
            Browser.mainLoop.updateStatus();
            setTimeout(Browser.mainLoop.runner, 0);
            return;
        }

        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1 /*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
            // Not the scheduled time to render this frame - skip.
            Browser.mainLoop.scheduler();
            return;
        }

        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.

        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
            Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
            Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }

        Browser.mainLoop.runIter(function() {
            if (typeof arg !== 'undefined') {
                Runtime.dynCall('vi', func, [arg]);
            } else {
                Runtime.dynCall('v', func);
            }
        });

        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();

        Browser.mainLoop.scheduler();
    }

    if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0 /*EM_TIMING_SETTIMEOUT*/ , 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1 /*EM_TIMING_RAF*/ , 1); // Do rAF by rendering each frame (no decimating)

        Browser.mainLoop.scheduler();
    }

    if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
    }
}
var Browser = {
    mainLoop: {
        scheduler: null,
        method: "",
        currentlyRunningMainloop: 0,
        func: null,
        arg: 0,
        timingMode: 0,
        timingValue: 0,
        currentFrameNumber: 0,
        queue: [],
        pause: function() {
            Browser.mainLoop.scheduler = null;
            Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },
        resume: function() {
            Browser.mainLoop.currentlyRunningMainloop++;
            var timingMode = Browser.mainLoop.timingMode;
            var timingValue = Browser.mainLoop.timingValue;
            var func = Browser.mainLoop.func;
            Browser.mainLoop.func = null;
            _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */ );
            _emscripten_set_main_loop_timing(timingMode, timingValue);
            Browser.mainLoop.scheduler();
        },
        updateStatus: function() {
            if (Module['setStatus']) {
                var message = Module['statusMessage'] || 'Please wait...';
                var remaining = Browser.mainLoop.remainingBlockers;
                var expected = Browser.mainLoop.expectedBlockers;
                if (remaining) {
                    if (remaining < expected) {
                        Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
                    } else {
                        Module['setStatus'](message);
                    }
                } else {
                    Module['setStatus']('');
                }
            }
        },
        runIter: function(func) {
            if (ABORT) return;
            if (Module['preMainLoop']) {
                var preRet = Module['preMainLoop']();
                if (preRet === false) {
                    return; // |return false| skips a frame
                }
            }
            try {
                func();
            } catch (e) {
                if (e instanceof ExitStatus) {
                    return;
                } else {
                    if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
                    throw e;
                }
            }
            if (Module['postMainLoop']) Module['postMainLoop']();
        }
    },
    isFullScreen: false,
    pointerLock: false,
    moduleContextCreatedCallbacks: [],
    workers: [],
    init: function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers

        if (Browser.initted) return;
        Browser.initted = true;

        try {
            new Blob();
            Browser.hasBlobConstructor = true;
        } catch (e) {
            Browser.hasBlobConstructor = false;
            console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
            console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
            Module.noImageDecoding = true;
        }

        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).

        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
            return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
            var b = null;
            if (Browser.hasBlobConstructor) {
                try {
                    b = new Blob([byteArray], {
                            type: Browser.getMimetype(name)
                        });
                    if (b.size !== byteArray.length) { // Safari bug #118630
                        // Safari's Blob can only take an ArrayBuffer
                        b = new Blob([(new Uint8Array(byteArray)).buffer], {
                                type: Browser.getMimetype(name)
                            });
                    }
                } catch (e) {
                    Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
                }
            }
            if (!b) {
                var bb = new Browser.BlobBuilder();
                bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
                b = bb.getBlob();
            }
            var url = Browser.URLObject.createObjectURL(b);
            var img = new Image();
            img.onload = function img_onload() {
                assert(img.complete, 'Image ' + name + ' could not be decoded');
                var canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                Module["preloadedImages"][name] = canvas;
                Browser.URLObject.revokeObjectURL(url);
                if (onload) onload(byteArray);
            };
            img.onerror = function img_onerror(event) {
                console.log('Image ' + url + ' could not be decoded');
                if (onerror) onerror();
            };
            img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);

        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
            return !Module.noAudioDecoding && name.substr(-4) in {
                '.ogg': 1,
                '.wav': 1,
                '.mp3': 1
            };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
            var done = false;

            function finish(audio) {
                if (done) return;
                done = true;
                Module["preloadedAudios"][name] = audio;
                if (onload) onload(byteArray);
            }

            function fail() {
                if (done) return;
                done = true;
                Module["preloadedAudios"][name] = new Audio(); // empty shim
                if (onerror) onerror();
            }
            if (Browser.hasBlobConstructor) {
                try {
                    var b = new Blob([byteArray], {
                            type: Browser.getMimetype(name)
                        });
                } catch (e) {
                    return fail();
                }
                var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
                var audio = new Audio();
                audio.addEventListener('canplaythrough', function() {
                    finish(audio)
                }, false); // use addEventListener due to chromium bug 124926
                audio.onerror = function audio_onerror(event) {
                    if (done) return;
                    console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');

                    function encode64(data) {
                        var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                        var PAD = '=';
                        var ret = '';
                        var leftchar = 0;
                        var leftbits = 0;
                        for (var i = 0; i < data.length; i++) {
                            leftchar = (leftchar << 8) | data[i];
                            leftbits += 8;
                            while (leftbits >= 6) {
                                var curr = (leftchar >> (leftbits - 6)) & 0x3f;
                                leftbits -= 6;
                                ret += BASE[curr];
                            }
                        }
                        if (leftbits == 2) {
                            ret += BASE[(leftchar & 3) << 4];
                            ret += PAD + PAD;
                        } else if (leftbits == 4) {
                            ret += BASE[(leftchar & 0xf) << 2];
                            ret += PAD;
                        }
                        return ret;
                    }
                    audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
                    finish(audio); // we don't wait for confirmation this worked - but it's worth trying
                };
                audio.src = url;
                // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
                Browser.safeSetTimeout(function() {
                    finish(audio); // try to use it even though it is not necessarily ready to play
                }, 10000);
            } else {
                return fail();
            }
        };
        Module['preloadPlugins'].push(audioPlugin);

        // Canvas event setup

        var canvas = Module['canvas'];

        function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                document['mozPointerLockElement'] === canvas ||
                document['webkitPointerLockElement'] === canvas ||
                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
            // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
            // Module['forcedAspectRatio'] = 4 / 3;

            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                canvas['mozRequestPointerLock'] ||
                canvas['webkitRequestPointerLock'] ||
                canvas['msRequestPointerLock'] || function() {};
            canvas.exitPointerLock = document['exitPointerLock'] ||
                document['mozExitPointerLock'] ||
                document['webkitExitPointerLock'] ||
                document['msExitPointerLock'] || function() {}; // no-op if function does not exist
            canvas.exitPointerLock = canvas.exitPointerLock.bind(document);


            document.addEventListener('pointerlockchange', pointerLockChange, false);
            document.addEventListener('mozpointerlockchange', pointerLockChange, false);
            document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
            document.addEventListener('mspointerlockchange', pointerLockChange, false);

            if (Module['elementPointerLock']) {
                canvas.addEventListener("click", function(ev) {
                    if (!Browser.pointerLock && canvas.requestPointerLock) {
                        canvas.requestPointerLock();
                        ev.preventDefault();
                    }
                }, false);
            }
        }
    },
    createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.

        var ctx;
        var contextHandle;
        if (useWebGL) {
            // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
            var contextAttributes = {
                antialias: false,
                alpha: false
            };

            if (webGLContextAttributes) {
                for (var attribute in webGLContextAttributes) {
                    contextAttributes[attribute] = webGLContextAttributes[attribute];
                }
            }

            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
                ctx = GL.getContext(contextHandle).GLctx;
            }
            // Set the background of the WebGL canvas to black
            canvas.style.backgroundColor = "black";
        } else {
            ctx = canvas.getContext('2d');
        }

        if (!ctx) return null;

        if (setInModule) {
            if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');

            Module.ctx = ctx;
            if (useWebGL) GL.makeContextCurrent(contextHandle);
            Module.useWebGL = useWebGL;
            Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
                callback()
            });
            Browser.init();
        }
        return ctx;
    },
    destroyContext: function(canvas, useWebGL, setInModule) {},
    fullScreenHandlersInstalled: false,
    lockPointer: undefined,
    resizeCanvas: undefined,
    requestFullScreen: function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;

        var canvas = Module['canvas'];

        function fullScreenChange() {
            Browser.isFullScreen = false;
            var canvasContainer = canvas.parentNode;
            if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
                    document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
                    document['fullScreenElement'] || document['fullscreenElement'] ||
                    document['msFullScreenElement'] || document['msFullscreenElement'] ||
                    document['webkitCurrentFullScreenElement']) === canvasContainer) {
                canvas.cancelFullScreen = document['cancelFullScreen'] ||
                    document['mozCancelFullScreen'] ||
                    document['webkitCancelFullScreen'] ||
                    document['msExitFullscreen'] ||
                    document['exitFullscreen'] || function() {};
                canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
                if (Browser.lockPointer) canvas.requestPointerLock();
                Browser.isFullScreen = true;
                if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
            } else {

                // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
                canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
                canvasContainer.parentNode.removeChild(canvasContainer);

                if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
            }
            if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
            Browser.updateCanvasDimensions(canvas);
        }

        if (!Browser.fullScreenHandlersInstalled) {
            Browser.fullScreenHandlersInstalled = true;
            document.addEventListener('fullscreenchange', fullScreenChange, false);
            document.addEventListener('mozfullscreenchange', fullScreenChange, false);
            document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
            document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }

        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);

        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
            canvasContainer['mozRequestFullScreen'] ||
            canvasContainer['msRequestFullscreen'] ||
        (canvasContainer['webkitRequestFullScreen'] ? function() {
            canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT'])
        } : null);

        if (vrDevice) {
            canvasContainer.requestFullScreen({
                    vrDisplay: vrDevice
                });
        } else {
            canvasContainer.requestFullScreen();
        }
    },
    nextRAF: 0,
    fakeRequestAnimationFrame: function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
            Browser.nextRAF = now + 1000 / 60;
        } else {
            while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
                Browser.nextRAF += 1000 / 60;
            }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
            Browser.fakeRequestAnimationFrame(func);
        } else {
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = window['requestAnimationFrame'] ||
                    window['mozRequestAnimationFrame'] ||
                    window['webkitRequestAnimationFrame'] ||
                    window['msRequestAnimationFrame'] ||
                    window['oRequestAnimationFrame'] ||
                    Browser.fakeRequestAnimationFrame;
            }
            window.requestAnimationFrame(func);
        }
    },
    safeCallback: function(func) {
        return function() {
            if (!ABORT) return func.apply(null, arguments);
        };
    },
    allowAsyncCallbacks: true,
    queuedAsyncCallbacks: [],
    pauseAsyncCallbacks: function() {
        Browser.allowAsyncCallbacks = false;
    },
    resumeAsyncCallbacks: function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
            var callbacks = Browser.queuedAsyncCallbacks;
            Browser.queuedAsyncCallbacks = [];
            callbacks.forEach(function(func) {
                func();
            });
        }
    },
    safeRequestAnimationFrame: function(func) {
        return Browser.requestAnimationFrame(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func();
            } else {
                Browser.queuedAsyncCallbacks.push(func);
            }
        });
    },
    safeSetTimeout: function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func();
            } else {
                Browser.queuedAsyncCallbacks.push(func);
            }
        }, timeout);
    },
    safeSetInterval: function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func();
            } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
    },
    getMimetype: function(name) {
        return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.') + 1)];
    },
    getUserMedia: function(func) {
        if (!window.getUserMedia) {
            window.getUserMedia = navigator['getUserMedia'] ||
                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
    },
    getMovementX: function(event) {
        return event['movementX'] ||
            event['mozMovementX'] ||
            event['webkitMovementX'] ||
            0;
    },
    getMovementY: function(event) {
        return event['movementY'] ||
            event['mozMovementY'] ||
            event['webkitMovementY'] ||
            0;
    },
    getMouseWheelDelta: function(event) {
        var delta = 0;
        switch (event.type) {
            case 'DOMMouseScroll':
                delta = event.detail;
                break;
            case 'mousewheel':
                delta = event.wheelDelta;
                break;
            case 'wheel':
                delta = event['deltaY'];
                break;
            default:
                throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
    },
    mouseX: 0,
    mouseY: 0,
    mouseMovementX: 0,
    mouseMovementY: 0,
    touches: {},
    lastTouches: {},
    calculateMouseEvent: function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
            // When the pointer is locked, calculate the coordinates
            // based on the movement of the mouse.
            // Workaround for Firefox bug 764498
            if (event.type != 'mousemove' &&
                ('mozMovementX' in event)) {
                Browser.mouseMovementX = Browser.mouseMovementY = 0;
            } else {
                Browser.mouseMovementX = Browser.getMovementX(event);
                Browser.mouseMovementY = Browser.getMovementY(event);
            }

            // check if SDL is available
            if (typeof SDL != "undefined") {
                Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
            } else {
                // just add the mouse delta to the current absolut mouse position
                // FIXME: ideally this should be clamped against the canvas size and zero
                Browser.mouseX += Browser.mouseMovementX;
                Browser.mouseY += Browser.mouseMovementY;
            }
        } else {
            // Otherwise, calculate the movement based on the changes
            // in the coordinates.
            var rect = Module["canvas"].getBoundingClientRect();
            var cw = Module["canvas"].width;
            var ch = Module["canvas"].height;

            // Neither .scrollX or .pageXOffset are defined in a spec, but
            // we prefer .scrollX because it is currently in a spec draft.
            // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
            var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
            var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);

            if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
                var touch = event.touch;
                if (touch === undefined) {
                    return; // the "touch" property is only defined in SDL

                }
                var adjustedX = touch.pageX - (scrollX + rect.left);
                var adjustedY = touch.pageY - (scrollY + rect.top);

                adjustedX = adjustedX * (cw / rect.width);
                adjustedY = adjustedY * (ch / rect.height);

                var coords = {
                    x: adjustedX,
                    y: adjustedY
                };

                if (event.type === 'touchstart') {
                    Browser.lastTouches[touch.identifier] = coords;
                    Browser.touches[touch.identifier] = coords;
                } else if (event.type === 'touchend' || event.type === 'touchmove') {
                    var last = Browser.touches[touch.identifier];
                    if (!last) last = coords;
                    Browser.lastTouches[touch.identifier] = last;
                    Browser.touches[touch.identifier] = coords;
                }
                return;
            }

            var x = event.pageX - (scrollX + rect.left);
            var y = event.pageY - (scrollY + rect.top);

            // the canvas might be CSS-scaled compared to its backbuffer;
            // SDL-using content will want mouse coordinates in terms
            // of backbuffer units.
            x = x * (cw / rect.width);
            y = y * (ch / rect.height);

            Browser.mouseMovementX = x - Browser.mouseX;
            Browser.mouseMovementY = y - Browser.mouseY;
            Browser.mouseX = x;
            Browser.mouseY = y;
        }
    },
    xhrLoad: function(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
                onload(xhr.response);
            } else {
                onerror();
            }
        };
        xhr.onerror = onerror;
        xhr.send(null);
    },
    asyncLoad: function(url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
            assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
            onload(new Uint8Array(arrayBuffer));
            if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
            if (onerror) {
                onerror();
            } else {
                throw 'Loading data file "' + url + '" failed.';
            }
        });
        if (!noRunDep) addRunDependency('al ' + url);
    },
    resizeListeners: [],
    updateResizeListeners: function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
            listener(canvas.width, canvas.height);
        });
    },
    setCanvasSize: function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
    },
    windowedWidth: 0,
    windowedHeight: 0,
    setFullScreenCanvasSize: function() {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[((SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2)];
            flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
            HEAP32[((SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2)] = flags
        }
        Browser.updateResizeListeners();
    },
    setWindowedCanvasSize: function() {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[((SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2)];
            flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
            HEAP32[((SDL.screen + Runtime.QUANTUM_SIZE * 0) >> 2)] = flags
        }
        Browser.updateResizeListeners();
    },
    updateCanvasDimensions: function(canvas, wNative, hNative) {
        if (wNative && hNative) {
            canvas.widthNative = wNative;
            canvas.heightNative = hNative;
        } else {
            wNative = canvas.widthNative;
            hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
            if (w / h < Module['forcedAspectRatio']) {
                w = Math.round(h * Module['forcedAspectRatio']);
            } else {
                h = Math.round(w / Module['forcedAspectRatio']);
            }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
                    document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
                    document['fullScreenElement'] || document['fullscreenElement'] ||
                    document['msFullScreenElement'] || document['msFullscreenElement'] ||
                    document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
            var factor = Math.min(screen.width / w, screen.height / h);
            w = Math.round(w * factor);
            h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
            if (canvas.width != w) canvas.width = w;
            if (canvas.height != h) canvas.height = h;
            if (typeof canvas.style != 'undefined') {
                canvas.style.removeProperty("width");
                canvas.style.removeProperty("height");
            }
        } else {
            if (canvas.width != wNative) canvas.width = wNative;
            if (canvas.height != hNative) canvas.height = hNative;
            if (typeof canvas.style != 'undefined') {
                if (w != wNative || h != hNative) {
                    canvas.style.setProperty("width", w + "px", "important");
                    canvas.style.setProperty("height", h + "px", "important");
                } else {
                    canvas.style.removeProperty("width");
                    canvas.style.removeProperty("height");
                }
            }
        }
    },
    wgetRequests: {},
    nextWgetRequestHandle: 0,
    getNextWgetRequestHandle: function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
    }
};

function _time(ptr) {
    var ret = (Date.now() / 1000) | 0;
    if (ptr) {
        HEAP32[((ptr) >> 2)] = ret;
    }
    return ret;
}


function __exit(status) {
    // void _exit(int status);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
    Module['exit'](status);
}

function _exit(status) {
    __exit(status);
}

function _gets(s) {
    // char *gets(char *s);
    // http://pubs.opengroup.org/onlinepubs/000095399/functions/gets.html
    return _fgets(s, 1e6, HEAP32[((_stdin) >> 2)]);
}


var ___tm_current = allocate(44, "i8", ALLOC_STATIC);


var ___tm_timezone = allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);


var _tzname = allocate(8, "i32*", ALLOC_STATIC);

var _daylight = allocate(1, "i32*", ALLOC_STATIC);

var _timezone = allocate(1, "i32*", ALLOC_STATIC);

function _tzset() {
    // TODO: Use (malleable) environment variables instead of system settings.
    if (_tzset.called) return;
    _tzset.called = true;

    HEAP32[((_timezone) >> 2)] = -(new Date()).getTimezoneOffset() * 60;

    var winter = new Date(2000, 0, 1);
    var summer = new Date(2000, 6, 1);
    HEAP32[((_daylight) >> 2)] = Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());

    function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
    };
    var winterName = extractZone(winter);
    var summerName = extractZone(summer);
    var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
    var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
    if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname) >> 2)] = winterNamePtr;
        HEAP32[(((_tzname) + (4)) >> 2)] = summerNamePtr;
    } else {
        HEAP32[((_tzname) >> 2)] = summerNamePtr;
        HEAP32[(((_tzname) + (4)) >> 2)] = winterNamePtr;
    }
}

function _localtime_r(time, tmPtr) {
    _tzset();
    var date = new Date(HEAP32[((time) >> 2)] * 1000);
    HEAP32[((tmPtr) >> 2)] = date.getSeconds();
    HEAP32[(((tmPtr) + (4)) >> 2)] = date.getMinutes();
    HEAP32[(((tmPtr) + (8)) >> 2)] = date.getHours();
    HEAP32[(((tmPtr) + (12)) >> 2)] = date.getDate();
    HEAP32[(((tmPtr) + (16)) >> 2)] = date.getMonth();
    HEAP32[(((tmPtr) + (20)) >> 2)] = date.getFullYear() - 1900;
    HEAP32[(((tmPtr) + (24)) >> 2)] = date.getDay();

    var start = new Date(date.getFullYear(), 0, 1);
    var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) | 0;
    HEAP32[(((tmPtr) + (28)) >> 2)] = yday;
    HEAP32[(((tmPtr) + (36)) >> 2)] = -(date.getTimezoneOffset() * 60);

    // DST is in December in South
    var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
    var winterOffset = start.getTimezoneOffset();
    var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
    HEAP32[(((tmPtr) + (32)) >> 2)] = dst;

    var zonePtr = HEAP32[(((_tzname) + (dst ? Runtime.QUANTUM_SIZE : 0)) >> 2)];
    HEAP32[(((tmPtr) + (40)) >> 2)] = zonePtr;

    return tmPtr;
}

function _localtime(time) {
    return _localtime_r(time, ___tm_current);
}

___errno_state = Runtime.staticAlloc(4);
HEAP32[((___errno_state) >> 2)] = 0;
FS.staticInit();
__ATINIT__.unshift(function() {
    if (!Module["noFSInit"] && !FS.init.initialized) FS.init()
});
__ATMAIN__.push(function() {
    FS.ignorePermissions = false
});
__ATEXIT__.push(function() {
    FS.quit()
});
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift(function() {
    TTY.init()
});
__ATEXIT__.push(function() {
    TTY.shutdown()
});
if (ENVIRONMENT_IS_NODE) {
    var fs = require("fs");
    var NODEJS_PATH = require("path");
    NODEFS.staticInit();
}
__ATINIT__.push(function() {
    SOCKFS.root = FS.mount(SOCKFS, {}, null);
});
___buildEnvironment(ENV);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
    Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice)
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
    Browser.requestAnimationFrame(func)
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
    Browser.setCanvasSize(width, height, noUpdates)
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
    Browser.mainLoop.pause()
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
    Browser.mainLoop.resume()
};
Module["getUserMedia"] = function Module_getUserMedia() {
    Browser.getUserMedia()
}
Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
    return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes)
}
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



Module.asmGlobalArg = {
    "Math": Math,
    "Int8Array": Int8Array,
    "Int16Array": Int16Array,
    "Int32Array": Int32Array,
    "Uint8Array": Uint8Array,
    "Uint16Array": Uint16Array,
    "Uint32Array": Uint32Array,
    "Float32Array": Float32Array,
    "Float64Array": Float64Array,
    "NaN": NaN,
    "Infinity": Infinity
};
Module.asmLibraryArg = {
    "abort": abort,
    "assert": assert,
    "_send": _send,
    "_fread": _fread,
    "_open": _open,
    "_write": _write,
    "_fopen": _fopen,
    "___buildEnvironment": ___buildEnvironment,
    "_fflush": _fflush,
    "_pwrite": _pwrite,
    "_localtime_r": _localtime_r,
    "_tzset": _tzset,
    "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
    "_sbrk": _sbrk,
    "_emscripten_memcpy_big": _emscripten_memcpy_big,
    "_fileno": _fileno,
    "_sysconf": _sysconf,
    "___setErrNo": ___setErrNo,
    "__formatString": __formatString,
    "_putchar": _putchar,
    "_gets": _gets,
    "_pread": _pread,
    "_puts": _puts,
    "_printf": _printf,
    "_fclose": _fclose,
    "__reallyNegative": __reallyNegative,
    "_feof": _feof,
    "_emscripten_set_main_loop": _emscripten_set_main_loop,
    "___errno_location": ___errno_location,
    "_recv": _recv,
    "_fgetc": _fgetc,
    "_getenv": _getenv,
    "_mkport": _mkport,
    "__exit": __exit,
    "_read": _read,
    "_fputc": _fputc,
    "_abort": _abort,
    "_fwrite": _fwrite,
    "_time": _time,
    "_fprintf": _fprintf,
    "_fgets": _fgets,
    "_fputs": _fputs,
    "_localtime": _localtime,
    "_exit": _exit,
    "_close": _close,
    "STACKTOP": STACKTOP,
    "STACK_MAX": STACK_MAX,
    "tempDoublePtr": tempDoublePtr,
    "ABORT": ABORT,
    "_stdin": _stdin
};
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
    'use asm';

    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);


    var STACKTOP = env.STACKTOP | 0;
    var STACK_MAX = env.STACK_MAX | 0;
    var tempDoublePtr = env.tempDoublePtr | 0;
    var ABORT = env.ABORT | 0;
    var _stdin = env._stdin | 0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = global.NaN,
        inf = global.Infinity;
    var tempInt = 0,
        tempBigInt = 0,
        tempBigIntP = 0,
        tempBigIntS = 0,
        tempBigIntR = 0.0,
        tempBigIntI = 0,
        tempBigIntD = 0,
        tempValue = 0,
        tempDouble = 0.0;

    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
    var Math_floor = global.Math.floor;
    var Math_abs = global.Math.abs;
    var Math_sqrt = global.Math.sqrt;
    var Math_pow = global.Math.pow;
    var Math_cos = global.Math.cos;
    var Math_sin = global.Math.sin;
    var Math_tan = global.Math.tan;
    var Math_acos = global.Math.acos;
    var Math_asin = global.Math.asin;
    var Math_atan = global.Math.atan;
    var Math_atan2 = global.Math.atan2;
    var Math_exp = global.Math.exp;
    var Math_log = global.Math.log;
    var Math_ceil = global.Math.ceil;
    var Math_imul = global.Math.imul;
    var Math_min = global.Math.min;
    var Math_clz32 = global.Math.clz32;
    var abort = env.abort;
    var assert = env.assert;
    var _send = env._send;
    var _fread = env._fread;
    var _open = env._open;
    var _write = env._write;
    var _fopen = env._fopen;
    var ___buildEnvironment = env.___buildEnvironment;
    var _fflush = env._fflush;
    var _pwrite = env._pwrite;
    var _localtime_r = env._localtime_r;
    var _tzset = env._tzset;
    var _emscripten_set_main_loop_timing = env._emscripten_set_main_loop_timing;
    var _sbrk = env._sbrk;
    var _emscripten_memcpy_big = env._emscripten_memcpy_big;
    var _fileno = env._fileno;
    var _sysconf = env._sysconf;
    var ___setErrNo = env.___setErrNo;
    var __formatString = env.__formatString;
    var _putchar = env._putchar;
    var _gets = env._gets;
    var _pread = env._pread;
    var _puts = env._puts;
    var _printf = env._printf;
    var _fclose = env._fclose;
    var __reallyNegative = env.__reallyNegative;
    var _feof = env._feof;
    var _emscripten_set_main_loop = env._emscripten_set_main_loop;
    var ___errno_location = env.___errno_location;
    var _recv = env._recv;
    var _fgetc = env._fgetc;
    var _getenv = env._getenv;
    var _mkport = env._mkport;
    var __exit = env.__exit;
    var _read = env._read;
    var _fputc = env._fputc;
    var _abort = env._abort;
    var _fwrite = env._fwrite;
    var _time = env._time;
    var _fprintf = env._fprintf;
    var _fgets = env._fgets;
    var _fputs = env._fputs;
    var _localtime = env._localtime;
    var _exit = env._exit;
    var _close = env._close;
    var tempFloat = 0.0;

    // EMSCRIPTEN_START_FUNCS

    function _main() {
        var $$$163 = 0,
            $$$164 = 0,
            $$153 = 0,
            $$85 = 0,
            $$lcssa415 = 0,
            $$lcssa418 = 0,
            $$pr278 = 0,
            $$pre342 = 0,
            $$pre346 = 0,
            $$pre347 = 0,
            $$storemerge185 = 0,
            $1026 = 0,
            $1028 = 0,
            $103 = 0,
            $1030 = 0,
            $1031 = 0,
            $1061 = 0,
            $1065 = 0,
            $1068 = 0,
            $107 = 0,
            $1072 = 0,
            $1076 = 0,
            $108 = 0,
            $1080 = 0,
            $1081 = 0,
            $1085 = 0,
            $1089 = 0,
            $109 = 0,
            $1093 = 0,
            $1101 = 0,
            $1105 = 0,
            $1109 = 0,
            $1113 = 0,
            $1117 = 0,
            $1121 = 0,
            $1125 = 0,
            $1126 = 0,
            $1133 = 0,
            $1135 = 0,
            $1144 = 0,
            $115 = 0,
            $1150 = 0,
            $1158 = 0,
            $1165 = 0,
            $1166 = 0,
            $1168 = 0,
            $1169 = 0,
            $1171 = 0,
            $1172 = 0,
            $1174 = 0,
            $1189 = 0,
            $1190 = 0,
            $1191 = 0,
            $1192 = 0,
            $1193 = 0,
            $128 = 0,
            $13 = 0,
            $139 = 0,
            $142 = 0,
            $15 = 0,
            $151 = 0,
            $152 = 0,
            $154 = 0,
            $155 = 0,
            $156 = 0,
            $157 = 0,
            $160 = 0,
            $161 = 0,
            $163 = 0,
            $170 = 0,
            $173 = 0,
            $175 = 0,
            $179 = 0,
            $181 = 0,
            $182 = 0,
            $184 = 0,
            $185 = 0,
            $195 = 0,
            $2 = 0,
            $205 = 0,
            $210 = 0,
            $212 = 0,
            $234 = 0,
            $236 = 0,
            $245 = 0,
            $248 = 0,
            $25 = 0,
            $250 = 0,
            $253 = 0,
            $255 = 0,
            $258 = 0,
            $270 = 0,
            $28 = 0,
            $280 = 0,
            $282 = 0,
            $286 = 0,
            $29 = 0,
            $302 = 0,
            $310 = 0,
            $313 = 0,
            $317 = 0,
            $32 = 0,
            $321 = 0,
            $326 = 0,
            $327 = 0,
            $343 = 0,
            $349 = 0,
            $357 = 0,
            $36 = 0,
            $362 = 0,
            $363 = 0,
            $369 = 0,
            $370 = 0,
            $378 = 0,
            $383 = 0,
            $384 = 0,
            $394 = 0,
            $399 = 0,
            $4 = 0,
            $401 = 0,
            $403 = 0,
            $404 = 0,
            $421 = 0,
            $422 = 0,
            $423 = 0,
            $425 = 0,
            $426 = 0,
            $434 = 0,
            $442 = 0,
            $445 = 0,
            $446 = 0,
            $455 = 0,
            $46 = 0,
            $460 = 0,
            $461 = 0,
            $468 = 0,
            $470 = 0,
            $471 = 0,
            $476 = 0,
            $481 = 0,
            $488 = 0,
            $493 = 0,
            $500 = 0,
            $501 = 0,
            $505 = 0,
            $508 = 0,
            $515 = 0,
            $516 = 0,
            $519 = 0,
            $520 = 0,
            $521 = 0,
            $523 = 0,
            $524 = 0,
            $527 = 0,
            $528 = 0,
            $529 = 0,
            $531 = 0,
            $533 = 0,
            $543 = 0,
            $55 = 0,
            $558 = 0,
            $56 = 0,
            $564 = 0,
            $566 = 0,
            $573 = 0,
            $581 = 0,
            $582 = 0,
            $591 = 0,
            $592 = 0,
            $594 = 0,
            $6 = 0,
            $614 = 0,
            $617 = 0,
            $62 = 0,
            $623 = 0,
            $625 = 0,
            $628 = 0,
            $632 = 0,
            $633 = 0,
            $640 = 0,
            $647 = 0,
            $651 = 0,
            $653 = 0,
            $655 = 0,
            $659 = 0,
            $662 = 0,
            $666 = 0,
            $672 = 0,
            $673 = 0,
            $677 = 0,
            $678 = 0,
            $680 = 0,
            $692 = 0,
            $694 = 0,
            $698 = 0,
            $699 = 0,
            $701 = 0,
            $705 = 0,
            $708 = 0,
            $713 = 0,
            $714 = 0,
            $715 = 0,
            $722 = 0,
            $726 = 0,
            $730 = 0,
            $735 = 0,
            $738 = 0,
            $744 = 0,
            $748 = 0,
            $754 = 0,
            $756 = 0,
            $763 = 0,
            $764 = 0,
            $765 = 0,
            $77 = 0,
            $772 = 0,
            $775 = 0,
            $78 = 0,
            $79 = 0,
            $799 = 0,
            $803 = 0,
            $807 = 0,
            $808 = 0,
            $809 = 0,
            $821 = 0,
            $824 = 0,
            $825 = 0,
            $828 = 0,
            $836 = 0,
            $840 = 0,
            $844 = 0,
            $852 = 0,
            $855 = 0,
            $861 = 0,
            $862 = 0,
            $865 = 0,
            $868 = 0,
            $879 = 0,
            $88 = 0,
            $883 = 0,
            $888 = 0,
            $893 = 0,
            $894 = 0,
            $9 = 0,
            $90 = 0,
            $906 = 0,
            $91 = 0,
            $911 = 0,
            $919 = 0,
            $923 = 0,
            $924 = 0,
            $932 = 0,
            $936 = 0,
            $937 = 0,
            $94 = 0,
            $940 = 0,
            $947 = 0,
            $95 = 0,
            $952 = 0,
            $954 = 0,
            $955 = 0,
            $961 = 0,
            $972 = 0,
            $974 = 0,
            $975 = 0,
            $98 = 0,
            $981 = 0,
            $983 = 0,
            $or$cond232 = 0,
            $storemerge171 = 0,
            $storemerge179 = 0,
            $storemerge180331 = 0,
            $storemerge182326 = 0,
            $storemerge185316 = 0,
            $storemerge185317 = 0,
            label = 0,
            $185$looptemp = 0;
        $2 = _calloc((HEAP32[12] | 0) + 1 | 0, 4) | 0; //@line 128
        HEAP32[30] = $2; //@line 129
        if (!$2) {
            _puts(19392) | 0; //@line 132
            _exit(0); //@line 133
        }
        HEAP8[129] = 0; //@line 136
        $4 = HEAP32[4] | 0; //@line 137
        if (!$4) {
            _initialise() | 0; //@line 140
            $6 = HEAP32[4] | 0; //@line 142
        } else {
            $6 = $4; //@line 144
        }
        if (($6 | 0) <= 0) {
            _fRSPEAK(201); //@line 148
            _exit(0); //@line 149
        }
        HEAP32[4] = -1; //@line 152
        HEAP32[66] = _fRAN(-1) | 0; //@line 154
        $9 = _fRNDVOC(3, 0) | 0; //@line 155
        HEAP32[68] = (HEAP32[16] << 1) + $9; //@line 159
        $13 = _fYES(65, 1, 0) | 0; //@line 160
        HEAP32[70] = $13; //@line 161
        HEAP32[72] = 1; //@line 162
        HEAP32[74] = 1; //@line 163
        HEAP32[76] = ($13 | 0) != 0 ? 1e3 : 330; //@line 166
        $15 = 1; //@line 167
        L10: while (1) {
            if (($15 | 0) < 9 | ($15 + -145 | 0) >>> 0 < 22) {
                if (($15 | 0) != 0 & (HEAP32[182] | 0) != 0) {
                    label = 11; //@line 179
                } else {
                    $29 = $15; //@line 181
                }
            } else {
                if ((HEAP32[182] | 0) != 0 & ((($15 | 0) == 0 | (($15 & -3 | 0) != 180 ? ($15 | 0) != (HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0) : 0)) ^ 1)) {
                    label = 11; //@line 198
                } else {
                    $29 = $15; //@line 200
                }
            }
            if ((label | 0) == 11) {
                label = 0; //@line 204
                _fRSPEAK(130); //@line 205
                $25 = HEAP32[74] | 0; //@line 206
                HEAP32[72] = $25; //@line 207
                if (!(HEAP32[184] | 0)) {
                    HEAP32[186] = 15; //@line 211
                }
                HEAP32[184] = 1; //@line 213
                $29 = $25; //@line 214
            }
            $28 = HEAP32[74] | 0; //@line 216
            if (($29 | 0) == ($28 | 0)) {
                $46 = $29; //@line 219
            } else {
                $32 = HEAP32[752 + ($28 << 2) >> 2] | 0; //@line 222
                do {
                    if (($32 | 0) != 2) {
                        if (!(_fTSTBIT($32, 3) | 0)) {
                            HEAP32[66] = 1; //@line 229
                            $36 = HEAP32[72] | 0; //@line 230
                            if ((HEAP32[375] | 0) != ($36 | 0) | (HEAP32[383] | 0) == 0) {
                                HEAP32[66] = 2; //@line 237
                                if ((HEAP32[376] | 0) != ($36 | 0) | (HEAP32[384] | 0) == 0) {
                                    HEAP32[66] = 3; //@line 244
                                    if ((HEAP32[377] | 0) != ($36 | 0) | (HEAP32[385] | 0) == 0) {
                                        HEAP32[66] = 4; //@line 251
                                        if ((HEAP32[378] | 0) != ($36 | 0) | (HEAP32[386] | 0) == 0) {
                                            HEAP32[66] = 5; //@line 258
                                            if ((HEAP32[379] | 0) != ($36 | 0) | (HEAP32[387] | 0) == 0) {
                                                HEAP32[66] = 6; //@line 265
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            HEAP32[72] = HEAP32[74]; //@line 273
                            _fRSPEAK(2); //@line 274
                        }
                    }
                } while (0);
                $46 = HEAP32[72] | 0; //@line 279
            }
            HEAP32[74] = $46; //@line 281
            do {
                if (!$46) {
                    $302 = 0; //@line 285
                    label = 116; //@line 286
                } else {
                    if ((HEAP32[752 + ($46 << 2) >> 2] | 0) == 2) {
                        label = 115; //@line 292
                    } else {
                        if (!(_fTSTBIT(HEAP32[752 + ($46 << 2) >> 2] | 0, 3) | 0)) {
                            $55 = HEAP32[390] | 0; //@line 299
                            if (!$55) {
                                $56 = HEAP32[74] | 0; //@line 301
                                if (($56 | 0) < 15 | ($56 + -145 | 0) >>> 0 < 22) {
                                    $302 = $56; //@line 307
                                    label = 116; //@line 308
                                    break;
                                }
                                if (($56 | 0) == (HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0)) {
                                    label = 115; //@line 316
                                    break;
                                }
                                if (($56 | 0) == 179 | ($56 | 0) == 180 | ($56 | 0) == 182) {
                                    label = 115; //@line 320
                                    break;
                                }
                                HEAP32[390] = 1; //@line 323
                                label = 115; //@line 324
                                break;
                            } else if (($55 | 0) == 1) {
                                $62 = HEAP32[74] | 0; //@line 327
                                if (($62 | 0) < 15 | ($62 + -145 | 0) >>> 0 < 22) {
                                    $302 = $62; //@line 333
                                    label = 116; //@line 334
                                    break;
                                }
                                if (($62 | 0) == (HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0)) {
                                    label = 115; //@line 342
                                    break;
                                }
                                if (($62 | 0) == 179 | ($62 | 0) == 180 | ($62 | 0) == 182) {
                                    label = 115; //@line 346
                                    break;
                                }
                                if ((_fRAN(100) | 0) < 95) {
                                    if (!(_fTSTBIT(HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0, 4) | 0)) {
                                        label = 115; //@line 358
                                        break;
                                    }
                                    if ((_fRAN(100) | 0) < 85) {
                                        label = 115; //@line 364
                                        break;
                                    }
                                }
                                HEAP32[390] = 2; //@line 368
                                HEAP32[66] = 1; //@line 369
                                do {
                                    HEAP32[392] = (_fRAN(5) | 0) + 1; //@line 373
                                    if ((_fRAN(100) | 0) < 50) {
                                        HEAP32[1576 + (HEAP32[392] << 2) >> 2] = 0; //@line 379
                                    }
                                    $88 = (HEAP32[66] | 0) + 1 | 0; //@line 382
                                    HEAP32[66] = $88; //@line 383
                                } while (($88 | 0) < 3);
                                HEAP32[66] = 1; //@line 389
                                $77 = HEAP32[74] | 0; //@line 390
                                $78 = HEAP32[402] | 0; //@line 391
                                $79 = HEAP32[395] | 0; //@line 392
                                if (($79 | 0) == ($77 | 0)) {
                                    HEAP32[395] = $78; //@line 395
                                    $90 = $78; //@line 396
                                } else {
                                    $90 = $79; //@line 398
                                }
                                HEAP32[375] = $90; //@line 400
                                $91 = HEAP32[396] | 0; //@line 401
                                if (($91 | 0) == ($77 | 0)) {
                                    HEAP32[396] = $78; //@line 404
                                    $1165 = $78; //@line 405
                                } else {
                                    $1165 = $91; //@line 407
                                }
                                HEAP32[376] = $1165; //@line 409
                                $1166 = HEAP32[397] | 0; //@line 410
                                if (($1166 | 0) == ($77 | 0)) {
                                    HEAP32[397] = $78; //@line 413
                                    $1168 = $78; //@line 414
                                } else {
                                    $1168 = $1166; //@line 416
                                }
                                HEAP32[377] = $1168; //@line 418
                                $1169 = HEAP32[398] | 0; //@line 419
                                if (($1169 | 0) == ($77 | 0)) {
                                    HEAP32[398] = $78; //@line 422
                                    $1171 = $78; //@line 423
                                } else {
                                    $1171 = $1169; //@line 425
                                }
                                HEAP32[378] = $1171; //@line 427
                                $1172 = HEAP32[399] | 0; //@line 428
                                if (($1172 | 0) == ($77 | 0)) {
                                    HEAP32[399] = $78; //@line 431
                                    $1174 = $78; //@line 432
                                } else {
                                    $1174 = $1172; //@line 434
                                }
                                HEAP32[379] = $1174; //@line 436
                                HEAP32[66] = 6; //@line 437
                                _fRSPEAK(3); //@line 438
                                _fDROP(HEAP32[404] | 0, HEAP32[74] | 0); //@line 441
                                label = 115; //@line 442
                                break;
                            } else {
                                HEAP32[406] = 0; //@line 445
                                HEAP32[408] = 0; //@line 446
                                HEAP32[410] = 0; //@line 447
                                HEAP32[66] = 1; //@line 448
                                $94 = 1; //@line 449
                                do {
                                    $95 = HEAP32[1576 + ($94 << 2) >> 2] | 0; //@line 452
                                    L47: do {
                                        if ($95) {
                                            HEAP32[392] = 1; //@line 456
                                            $98 = HEAP32[1656 + ($95 << 2) >> 2] | 0; //@line 458
                                            HEAP32[412] = $98; //@line 459
                                            if (!$98) {
                                                HEAP32[1487] = HEAP32[1496 + ($94 << 2) >> 2]; //@line 464
                                                $152 = 1; //@line 465
                                            } else {
                                                $103 = $98; //@line 467
                                                do {
                                                    $107 = _fMOD((_fIABS(HEAP32[2400 + ($103 << 2) >> 2] | 0) | 0) / 1e3 | 0, 1e3) | 0; //@line 473
                                                    HEAP32[72] = $107; //@line 474
                                                    $108 = HEAP32[392] | 0; //@line 475
                                                    $109 = $108 + -1 | 0; //@line 476
                                                    do {
                                                        if (!(($107 + -145 | 0) >>> 0 < 22 | (($107 | 0) < 9 | ($107 + -15 | 0) >>> 0 > 285))) {
                                                            if (($107 | 0) != (HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0)) {
                                                                if (($107 | 0) == 179 | ($107 | 0) == 180 | ($107 | 0) == 182) {
                                                                    break;
                                                                }
                                                                $115 = HEAP32[66] | 0; //@line 494
                                                                if (($107 | 0) == (HEAP32[1496 + ($115 << 2) >> 2] | 0)) {
                                                                    break;
                                                                }
                                                                if (($108 | 0) > 1) {
                                                                    if (($108 | 0) > 19 ? 1 : ($107 | 0) == (HEAP32[5944 + ($109 << 2) >> 2] | 0)) {
                                                                        break;
                                                                    }
                                                                }
                                                                if (($107 | 0) == (HEAP32[1576 + ($115 << 2) >> 2] | 0)) {
                                                                    break;
                                                                }
                                                                $128 = HEAP32[752 + ($107 << 2) >> 2] | 0; //@line 519
                                                                if (($128 | 0) == 2) {
                                                                    break;
                                                                }
                                                                if (($115 | 0) == 6) {
                                                                    if (_fTSTBIT($128, 3) | 0) {
                                                                        break;
                                                                    }
                                                                }
                                                                if (((_fIABS(HEAP32[2400 + (HEAP32[412] << 2) >> 2] | 0) | 0) + -1e8 | 0) >>> 0 < 1e6) {
                                                                    break;
                                                                }
                                                                $139 = HEAP32[392] | 0; //@line 542
                                                                HEAP32[5944 + ($139 << 2) >> 2] = HEAP32[72]; //@line 544
                                                                HEAP32[392] = $139 + 1; //@line 546
                                                            }
                                                        }
                                                    } while (0);
                                                    $142 = HEAP32[412] | 0; //@line 550
                                                    $103 = $142 + 1 | 0; //@line 551
                                                    HEAP32[412] = $103; //@line 552
                                                } while ((HEAP32[2400 + ($142 << 2) >> 2] | 0) > -1);
                                                $$pre342 = HEAP32[392] | 0; //@line 563
                                                HEAP32[5944 + ($$pre342 << 2) >> 2] = HEAP32[1496 + (HEAP32[66] << 2) >> 2]; //@line 567
                                                if (($$pre342 | 0) > 1) {
                                                    $151 = $$pre342 + -1 | 0; //@line 570
                                                    HEAP32[392] = $151; //@line 571
                                                    $152 = $151; //@line 572
                                                } else {
                                                    $152 = $$pre342; //@line 574
                                                }
                                            }
                                            $154 = (_fRAN($152) | 0) + 1 | 0; //@line 578
                                            HEAP32[392] = $154; //@line 579
                                            $155 = HEAP32[66] | 0; //@line 580
                                            $156 = 1576 + ($155 << 2) | 0; //@line 581
                                            $157 = HEAP32[$156 >> 2] | 0; //@line 582
                                            HEAP32[1496 + ($155 << 2) >> 2] = $157; //@line 584
                                            $160 = HEAP32[5944 + ($154 << 2) >> 2] | 0; //@line 586
                                            HEAP32[$156 >> 2] = $160; //@line 587
                                            $161 = 1528 + ($155 << 2) | 0; //@line 588
                                            $163 = HEAP32[74] | 0; //@line 590
                                            if ((HEAP32[$161 >> 2] | 0) == 0 | ($163 | 0) < 15 | ($163 + -145 | 0) >>> 0 < 22) {
                                                label = 64; //@line 598
                                            } else {
                                                if (($163 | 0) == (HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0)) {
                                                    label = 64; //@line 605
                                                } else {
                                                    if (($163 | 0) == 179 | ($163 | 0) == 180 | ($163 | 0) == 182) {
                                                        label = 64; //@line 608
                                                    } else {
                                                        label = 65; //@line 610
                                                    }
                                                }
                                            }
                                            if ((label | 0) == 64) {
                                                label = 0; //@line 615
                                                if (($160 | 0) == ($163 | 0)) {
                                                    label = 65; //@line 618
                                                } else {
                                                    $170 = ($157 | 0) == ($163 | 0); //@line 620
                                                    HEAP32[$161 >> 2] = $170 & 1; //@line 622
                                                    if (!$170) {
                                                        break;
                                                    }
                                                }
                                            }
                                            if ((label | 0) == 65) {
                                                label = 0; //@line 629
                                                HEAP32[$161 >> 2] = 1; //@line 630
                                            }
                                            HEAP32[$156 >> 2] = $163; //@line 632
                                            if (($155 | 0) != 6) {
                                                HEAP32[406] = (HEAP32[406] | 0) + 1; //@line 637
                                                if (($157 | 0) != ($163 | 0)) {
                                                    break;
                                                }
                                                HEAP32[408] = (HEAP32[408] | 0) + 1; //@line 644
                                                if ((HEAP32[1834] | 0) > -1) {
                                                    HEAP32[1834] = $157; //@line 648
                                                }
                                                $270 = _fRAN(1e3) | 0; //@line 650
                                                if (($270 | 0) >= (((HEAP32[390] | 0) * 95 | 0) + -190 | 0)) {
                                                    break;
                                                }
                                                HEAP32[410] = (HEAP32[410] | 0) + 1; //@line 660
                                                break;
                                            }
                                            $173 = HEAP32[1508] | 0; //@line 663
                                            if (($163 | 0) != ($173 | 0)) {
                                                $175 = HEAP32[1510] | 0; //@line 666
                                                if ((HEAP32[6048 + ($175 << 2) >> 2] | 0) <= -1) {
                                                    HEAP32[1614] = 0; //@line 671
                                                    HEAP32[392] = 50; //@line 672
                                                    $179 = HEAP32[1616] | 0; //@line 673
                                                    L90: do {
                                                        if (($179 | 0) < 50) {
                                                            $205 = 0; //@line 677
                                                            label = 80; //@line 678
                                                        } else {
                                                            $181 = HEAP32[1618] | 0; //@line 680
                                                            $182 = 320 + ($181 << 2) | 0; //@line 681
                                                            $184 = 320 + (HEAP32[1620] << 2) | 0; //@line 683
                                                            $1189 = 0; //@line 684
                                                            $185 = 50; //@line 684
                                                            while (1) {
                                                                do {
                                                                    if (($185 | 0) == ($181 | 0)) {
                                                                        if (($163 | 0) == (HEAP32[$182 >> 2] | 0)) {
                                                                            break;
                                                                        }
                                                                        if (($163 | 0) != (HEAP32[$184 >> 2] | 0)) {
                                                                            label = 75; //@line 697
                                                                        }
                                                                    } else {
                                                                        label = 75; //@line 700
                                                                    }
                                                                } while (0);
                                                                if ((label | 0) == 75) {
                                                                    label = 0; //@line 704
                                                                    if ((HEAP32[6488 + ($185 << 2) >> 2] | 0) == -1) {
                                                                        break;
                                                                    }
                                                                }
                                                                $195 = HEAP32[6488 + ($185 << 2) >> 2] | 0; //@line 713
                                                                if (($195 | 0) == ($163 | 0)) {
                                                                    label = 78; //@line 716
                                                                } else {
                                                                    if (($195 | 0) == -1 ? 1 : (HEAP32[6896 + ($185 << 2) >> 2] | 0) == ($163 | 0)) {
                                                                        label = 78; //@line 724
                                                                    } else {
                                                                        $1190 = $1189; //@line 726
                                                                    }
                                                                }
                                                                if ((label | 0) == 78) {
                                                                    label = 0; //@line 730
                                                                    HEAP32[1614] = 1; //@line 731
                                                                    $1190 = 1; //@line 732
                                                                }
                                                                $185$looptemp = $185;
                                                                $185 = $185 + 1 | 0; //@line 734
                                                                HEAP32[392] = $185; //@line 735
                                                                if (($185$looptemp | 0) >= ($179 | 0)) {
                                                                    $205 = $1190; //@line 740
                                                                    label = 80; //@line 741
                                                                    break L90;
                                                                } else {
                                                                    $1189 = $1190; //@line 738
                                                                }
                                                            }
                                                            if (!(HEAP32[6488 + ($175 << 2) >> 2] | 0)) {
                                                                _fMOVE($175, $173); //@line 749
                                                                _fMOVE(HEAP32[1830] | 0, HEAP32[1832] | 0); //@line 752
                                                            }
                                                            _fRSPEAK(128); //@line 754
                                                            HEAP32[392] = 50; //@line 755
                                                            if ((HEAP32[1616] | 0) < 50) {
                                                                break;
                                                            } else {
                                                                $234 = 50; //@line 761
                                                            }
                                                            do {
                                                                $236 = HEAP32[74] | 0; //@line 766
                                                                do {
                                                                    if (($234 | 0) == (HEAP32[1618] | 0)) {
                                                                        if (($236 | 0) == (HEAP32[320 + ($234 << 2) >> 2] | 0)) {
                                                                            $255 = $234; //@line 773
                                                                            break;
                                                                        }
                                                                        if (($236 | 0) == (HEAP32[320 + (HEAP32[1620] << 2) >> 2] | 0)) {
                                                                            $255 = $234; //@line 781
                                                                        } else {
                                                                            label = 94; //@line 783
                                                                        }
                                                                    } else {
                                                                        label = 94; //@line 786
                                                                    }
                                                                } while (0);
                                                                do {
                                                                    if ((label | 0) == 94) {
                                                                        label = 0; //@line 791
                                                                        $245 = HEAP32[6488 + ($234 << 2) >> 2] | 0; //@line 793
                                                                        $$pre346 = HEAP32[6896 + ($234 << 2) >> 2] | 0; //@line 796
                                                                        if (($245 | 0) == ($236 | 0)) {
                                                                            $248 = $$pre346; //@line 798
                                                                            label = 96; //@line 799
                                                                        } else {
                                                                            if (($$pre346 | 0) == ($236 | 0)) {
                                                                                $248 = $236; //@line 803
                                                                                label = 96; //@line 804
                                                                            } else {
                                                                                $250 = $245; //@line 806
                                                                                $253 = $234; //@line 806
                                                                            }
                                                                        }
                                                                        do {
                                                                            if ((label | 0) == 96) {
                                                                                label = 0; //@line 811
                                                                                if ($248) {
                                                                                    $250 = $245; //@line 814
                                                                                    $253 = $234; //@line 814
                                                                                    break;
                                                                                }
                                                                                _fCARRY($234, $236); //@line 817
                                                                                $$pre347 = HEAP32[392] | 0; //@line 818
                                                                                $250 = HEAP32[6488 + ($$pre347 << 2) >> 2] | 0; //@line 821
                                                                                $253 = $$pre347; //@line 821
                                                                            }
                                                                        } while (0);
                                                                        if (($250 | 0) != -1) {
                                                                            $255 = $253; //@line 826
                                                                            break;
                                                                        }
                                                                        _fDROP($253, HEAP32[1508] | 0); //@line 830
                                                                        $255 = HEAP32[392] | 0; //@line 832
                                                                    }
                                                                } while (0);
                                                                $234 = $255 + 1 | 0; //@line 835
                                                                HEAP32[392] = $234; //@line 836
                                                            } while (($255 | 0) < (HEAP32[1616] | 0));
                                                        }
                                                    } while (0);
                                                    L124: do {
                                                        if ((label | 0) == 80) {
                                                            label = 0; //@line 849
                                                            do {
                                                                if ((HEAP32[1826] | 0) == 1 & ($205 | 0) == 0) {
                                                                    if (HEAP32[6488 + ($175 << 2) >> 2] | 0) {
                                                                        break;
                                                                    }
                                                                    $210 = HEAP32[1828] | 0; //@line 862
                                                                    $212 = HEAP32[6488 + ($210 << 2) >> 2] | 0; //@line 864
                                                                    if (($212 | 0) != ($163 | 0)) {
                                                                        if (!(($212 | 0) == -1 ? 1 : (HEAP32[6896 + ($210 << 2) >> 2] | 0) == ($163 | 0))) {
                                                                            break;
                                                                        }
                                                                    }
                                                                    if ((HEAP32[6048 + ($210 << 2) >> 2] | 0) != 1) {
                                                                        break;
                                                                    }
                                                                    _fRSPEAK(186); //@line 882
                                                                    _fMOVE(HEAP32[1510] | 0, HEAP32[1508] | 0); //@line 885
                                                                    _fMOVE(HEAP32[1830] | 0, HEAP32[1832] | 0); //@line 888
                                                                    break L124;
                                                                }
                                                            } while (0);
                                                            if ((HEAP32[380] | 0) == (HEAP32[400] | 0)) {
                                                                break L47;
                                                            }
                                                            if ((_fRAN(100) | 0) >= 20) {
                                                                break L47;
                                                            }
                                                            _fRSPEAK(127); //@line 903
                                                            break L47;
                                                        }
                                                    } while (0);
                                                    $258 = HEAP32[1508] | 0; //@line 907
                                                    HEAP32[400] = $258; //@line 908
                                                    HEAP32[380] = $258; //@line 909
                                                    HEAP32[388] = 0; //@line 910
                                                }
                                            }
                                        }
                                    } while (0);
                                    $94 = (HEAP32[66] | 0) + 1 | 0; //@line 916
                                    HEAP32[66] = $94; //@line 917
                                } while (($94 | 0) < 7);
                                $280 = HEAP32[406] | 0; //@line 925
                                if (!$280) {
                                    label = 115; //@line 928
                                    break;
                                }
                                _fSETPRM(1, $280, 0); //@line 931
                                $282 = HEAP32[406] | 0; //@line 932
                                _fRSPEAK(($282 + 1 | 0) >>> 0 < 3 ? $282 + 4 | 0 : 4); //@line 937
                                $286 = HEAP32[408] | 0; //@line 938
                                if (!$286) {
                                    label = 115; //@line 941
                                    break;
                                }
                                if ((HEAP32[390] | 0) == 2) {
                                    HEAP32[390] = 3; //@line 947
                                }
                                _fSETPRM(1, $286, 0); //@line 949
                                $$85 = (HEAP32[408] | 0) > 1 ? 250 : 6; //@line 952
                                HEAP32[1614] = $$85; //@line 953
                                _fRSPEAK($$85); //@line 954
                                _fSETPRM(1, HEAP32[410] | 0, 0); //@line 956
                                _fRSPEAK((HEAP32[1614] | 0) + 1 + (2 / ((HEAP32[410] | 0) + 1 | 0) | 0) | 0); //@line 963
                                if (!(HEAP32[410] | 0)) {
                                    label = 115; //@line 967
                                    break;
                                }
                                HEAP32[1836] = HEAP32[74]; //@line 971
                                label = 320; //@line 972
                                break;
                            }
                        } else {
                            label = 115; //@line 976
                        }
                    }
                }
            } while (0);
            L174: while (1) {
                do {
                    if ((label | 0) == 115) {
                        label = 0; //@line 984
                        $302 = HEAP32[74] | 0; //@line 986
                        label = 116; //@line 987
                        continue L174;
                    } else if ((label | 0) == 116) {
                        label = 0; //@line 991
                        if (!$302) {
                            label = 320; //@line 994
                            continue L174;
                        }
                        HEAP32[412] = HEAP32[7352 + ($302 << 2) >> 2]; //@line 999
                        $310 = (_fMOD(HEAP32[8096 + ($302 << 2) >> 2] | 0, HEAP32[2210] | 0) | 0) == 0; //@line 1004
                        $313 = HEAP32[74] | 0; //@line 1008
                        if ($310 | (HEAP32[412] | 0) == 0) {
                            HEAP32[412] = HEAP32[8848 + ($313 << 2) >> 2]; //@line 1012
                        }
                        $317 = HEAP32[752 + ($313 << 2) >> 2] | 0; //@line 1015
                        do {
                            if (($317 | 0) != 2) {
                                if (!(_fTSTBIT($317, 0) | 0)) {
                                    $321 = HEAP32[1828] | 0; //@line 1022
                                    if (HEAP32[6048 + ($321 << 2) >> 2] | 0) {
                                        $326 = HEAP32[6488 + ($321 << 2) >> 2] | 0; //@line 1028
                                        $327 = HEAP32[74] | 0; //@line 1029
                                        if (($326 | 0) == ($327 | 0)) {
                                            break;
                                        }
                                        if (($326 | 0) == -1 ? 1 : (HEAP32[6896 + ($321 << 2) >> 2] | 0) == ($327 | 0)) {
                                            break;
                                        }
                                    }
                                    if (HEAP32[28] | 0) {
                                        if ((_fRAN(100) | 0) < 35) {
                                            _fRSPEAK(23); //@line 1049
                                            HEAP32[1836] = HEAP32[74]; //@line 1051
                                            label = 320; //@line 1052
                                            continue L174;
                                        }
                                    }
                                    HEAP32[412] = HEAP32[2414]; //@line 1057
                                }
                            }
                        } while (0);
                        if ((HEAP32[6488 + (HEAP32[2676] << 2) >> 2] | 0) == -1) {
                            _fRSPEAK(141); //@line 1066
                        }
                        _fSPEAK(HEAP32[412] | 0); //@line 1069
                        HEAP32[1614] = 1; //@line 1070
                        $343 = HEAP32[74] | 0; //@line 1071
                        if ((HEAP32[752 + ($343 << 2) >> 2] | 0) == 2) {
                            $677 = $343; //@line 1076
                            label = 244; //@line 1077
                        } else {
                            if (($343 | 0) == 33) {
                                $349 = (_fRAN(100) | 0) > 24; //@line 1082
                                if (!($349 | (HEAP32[182] | 0) != 0)) {
                                    _fRSPEAK(7); //@line 1087
                                }
                            }
                            if (!(_fTSTBIT(HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0, 0) | 0)) {
                                $357 = HEAP32[1828] | 0; //@line 1096
                                if (!(HEAP32[6048 + ($357 << 2) >> 2] | 0)) {
                                    label = 153; //@line 1101
                                    break;
                                }
                                $362 = HEAP32[6488 + ($357 << 2) >> 2] | 0; //@line 1105
                                $363 = HEAP32[74] | 0; //@line 1106
                                if (($362 | 0) == ($363 | 0)) {
                                    $370 = $362; //@line 1109
                                } else {
                                    if (($362 | 0) == -1 ? 1 : (HEAP32[6896 + ($357 << 2) >> 2] | 0) == ($363 | 0)) {
                                        $370 = $363; //@line 1117
                                    } else {
                                        label = 153; //@line 1119
                                        break;
                                    }
                                }
                            } else {
                                $370 = HEAP32[74] | 0; //@line 1125
                            }
                            $369 = 8096 + ($370 << 2) | 0; //@line 1127
                            HEAP32[$369 >> 2] = (HEAP32[$369 >> 2] | 0) + 1; //@line 1130
                            $storemerge185316 = HEAP32[10712 + ($370 << 2) >> 2] | 0; //@line 1132
                            HEAP32[66] = $storemerge185316; //@line 1133
                            if (!$storemerge185316) {
                                label = 153; //@line 1136
                            } else {
                                $storemerge185317 = $storemerge185316; //@line 1138
                                do {
                                    $$storemerge185 = ($storemerge185317 | 0) > 100 ? $storemerge185317 + -100 | 0 : $storemerge185317; //@line 1142
                                    HEAP32[2864] = $$storemerge185; //@line 1143
                                    $378 = ($$storemerge185 | 0) == (HEAP32[2866] | 0); //@line 1145
                                    if ($378) {
                                        if ((HEAP32[6488 + (HEAP32[2868] << 2) >> 2] | 0) == -1) {
                                            $401 = $storemerge185317; //@line 1152
                                        } else {
                                            label = 141; //@line 1154
                                        }
                                    } else {
                                        label = 141; //@line 1157
                                    }
                                    do {
                                        if ((label | 0) == 141) {
                                            label = 0; //@line 1161
                                            $383 = 6048 + ($$storemerge185 << 2) | 0; //@line 1162
                                            $384 = HEAP32[$383 >> 2] | 0; //@line 1163
                                            if (($384 | 0) > -1) {
                                                $394 = $384; //@line 1166
                                            } else {
                                                if (HEAP32[2870] | 0) {
                                                    $401 = $storemerge185317; //@line 1171
                                                    break;
                                                }
                                                HEAP32[$383 >> 2] = 0; //@line 1174
                                                $or$cond232 = ($$storemerge185 | 0) == (HEAP32[2872] | 0) | ($$storemerge185 | 0) == (HEAP32[2874] | 0); //@line 1179
                                                HEAP32[$383 >> 2] = $or$cond232 & 1; //@line 1181
                                                HEAP32[1826] = (HEAP32[1826] | 0) + -1; //@line 1185
                                                $394 = $or$cond232 & 1; //@line 1186
                                            }
                                            HEAP32[412] = $394; //@line 1188
                                            do {
                                                if ($378) {
                                                    if ((HEAP32[74] | 0) != (HEAP32[6896 + ($$storemerge185 << 2) >> 2] | 0)) {
                                                        $399 = $394; //@line 1196
                                                        break;
                                                    }
                                                    HEAP32[412] = 1; //@line 1199
                                                    $399 = 1; //@line 1200
                                                } else {
                                                    $399 = $394; //@line 1202
                                                }
                                            } while (0);
                                            _fPSPEAK($$storemerge185, $399); //@line 1205
                                            $401 = HEAP32[66] | 0; //@line 1207
                                        }
                                    } while (0);
                                    $storemerge185317 = HEAP32[11504 + ($401 << 2) >> 2] | 0; //@line 1211
                                    HEAP32[66] = $storemerge185317; //@line 1212
                                } while (($storemerge185317 | 0) != 0);
                                label = 153; //@line 1215
                            }
                        }
                    } else if ((label | 0) == 320) {
                        label = 0; //@line 1225
                        if (HEAP32[182] | 0) {
                            _fRSPEAK(131); //@line 1229
                            HEAP32[3436] = (HEAP32[3436] | 0) + 1; //@line 1232
                            _score(0); //@line 1233
                            $923 = HEAP32[3086] | 0; //@line 1235
                            label = 333; //@line 1236
                            break;
                        }
                        $893 = (HEAP32[3436] | 0) + 1 | 0; //@line 1240
                        HEAP32[3436] = $893; //@line 1241
                        $894 = $893 << 1; //@line 1242
                        if (!(_fYES($894 + 79 | 0, $894 + 80 | 0, 54) | 0)) {
                            _score(0); //@line 1248
                        }
                        if ((HEAP32[3436] | 0) == (HEAP32[3438] | 0)) {
                            _score(0); //@line 1254
                        }
                        HEAP32[6488 + (HEAP32[3280] << 2) >> 2] = 0; //@line 1258
                        HEAP32[6488 + (HEAP32[3282] << 2) >> 2] = 0; //@line 1261
                        $906 = HEAP32[1828] | 0; //@line 1262
                        if ((HEAP32[6488 + ($906 << 2) >> 2] | 0) == -1) {
                            HEAP32[6048 + ($906 << 2) >> 2] = 0; //@line 1268
                        }
                        HEAP32[392] = 1; //@line 1270
                        $storemerge180331 = 1; //@line 1271
                        do {
                            $911 = 101 - $storemerge180331 | 0; //@line 1273
                            HEAP32[66] = $911; //@line 1274
                            if ((HEAP32[6488 + ($911 << 2) >> 2] | 0) == -1) {
                                $$153 = ($911 | 0) == (HEAP32[1828] | 0) ? 1 : HEAP32[1836] | 0; //@line 1282
                                HEAP32[1614] = $$153; //@line 1283
                                _fDROP($911, $$153); //@line 1284
                                $919 = HEAP32[392] | 0; //@line 1286
                            } else {
                                $919 = $storemerge180331; //@line 1288
                            }
                            $storemerge180331 = $919 + 1 | 0; //@line 1290
                            HEAP32[392] = $storemerge180331; //@line 1291
                        } while (($storemerge180331 | 0) < 101);
                        HEAP32[74] = 3; //@line 1299
                        HEAP32[3314] = 3; //@line 1300
                        $302 = 3; //@line 1301
                        label = 116; //@line 1302
                        continue L174;
                    }
                } while (0);
                L242: while (1) {
                    L243: do {
                        if ((label | 0) == 153) {
                            label = 0; //@line 1309
                            HEAP32[3080] = 0; //@line 1310
                            HEAP32[3082] = HEAP32[2864]; //@line 1312
                            HEAP32[2864] = 0; //@line 1313
                            label = 154; //@line 1314
                        } else if ((label | 0) == 244) {
                            label = 0; //@line 1317
                            $678 = HEAP32[1656 + ($677 << 2) >> 2] | 0; //@line 1319
                            HEAP32[412] = $678; //@line 1320
                            HEAP32[72] = $677; //@line 1321
                            if (!$678) {
                                label = 245; //@line 1324
                                break L10;
                            } else {
                                break L242;
                            }
                        } else if ((label | 0) == 333) {
                            label = 0; //@line 1331
                            L247: do {
                                switch ($923 | 0) {
                                    case 1:
                                        {
                                            if (!(HEAP32[6048 + (HEAP32[3440] << 2) >> 2] | 0)) {
                                                $952 = HEAP32[3442] | 0; //@line 1340
                                                $954 = HEAP32[6488 + ($952 << 2) >> 2] | 0; //@line 1342
                                                $955 = HEAP32[74] | 0; //@line 1343
                                                if (($954 | 0) == ($955 | 0)) {
                                                    $947 = 1; //@line 1346
                                                } else {
                                                    if (($954 | 0) == -1 ? 1 : (HEAP32[6896 + ($952 << 2) >> 2] | 0) == ($955 | 0)) {
                                                        $947 = 1; //@line 1354
                                                    } else {
                                                        label = 335; //@line 1356
                                                    }
                                                }
                                            } else {
                                                $947 = 1; //@line 1360
                                            }
                                            break;
                                        }
                                    case 6:
                                        {
                                            label = 335; //@line 1365
                                            break;
                                        }
                                    case 7:
                                        {
                                            if (!(HEAP32[390] | 0)) {
                                                label = 335; //@line 1372
                                            } else {
                                                $947 = 7; //@line 1374
                                            }
                                            break;
                                        }
                                    case 8:
                                        {
                                            if (HEAP32[10712 + (HEAP32[74] << 2) >> 2] | 0) {
                                                label = 161; //@line 1384
                                                break L243;
                                            }
                                            if (HEAP32[10712 + (HEAP32[3314] << 2) >> 2] | 0) {
                                                label = 161; //@line 1392
                                                break L243;
                                            }
                                            if (!(HEAP32[10712 + (HEAP32[1836] << 2) >> 2] | 0)) {
                                                label = 335; //@line 1400
                                            } else {
                                                label = 161; //@line 1402
                                                break L243;
                                            }
                                            break;
                                        }
                                    case 9:
                                        {
                                            $1026 = _fATDWRF(HEAP32[74] | 0) | 0; //@line 1409
                                            HEAP32[66] = $1026; //@line 1410
                                            if (($1026 | 0) < 0) {
                                                $947 = HEAP32[3086] | 0; //@line 1414
                                                break L247;
                                            }
                                            $1028 = HEAP32[3448] | 0; //@line 1417
                                            $1030 = HEAP32[6488 + ($1028 << 2) >> 2] | 0; //@line 1419
                                            $1031 = HEAP32[74] | 0; //@line 1420
                                            if (($1030 | 0) != ($1031 | 0)) {
                                                if ((HEAP32[6896 + ($1028 << 2) >> 2] | 0) != ($1031 | 0)) {
                                                    if (($1026 | 0) == 0 & ($1030 | 0) == -1) {
                                                        label = 335; //@line 1431
                                                        break L247;
                                                    } else {
                                                        label = 161; //@line 1434
                                                        break L243;
                                                    }
                                                }
                                            }
                                            if (!$1026) {
                                                label = 335; //@line 1441
                                            } else {
                                                label = 161; //@line 1443
                                                break L243;
                                            }
                                            break;
                                        }
                                    case 2:
                                        {
                                            $961 = HEAP32[3298] | 0; //@line 1449
                                            if ((HEAP32[6488 + ($961 << 2) >> 2] | 0) != (HEAP32[74] | 0)) {
                                                label = 161; //@line 1455
                                                break L243;
                                            }
                                            if ((HEAP32[3082] | 0) == ($961 | 0) ? (HEAP32[6488 + (HEAP32[3444] << 2) >> 2] | 0) == -1 : 0) {
                                                label = 335; //@line 1466
                                            } else {
                                                label = 161; //@line 1468
                                                break L243;
                                            }
                                            break;
                                        }
                                    case 3:
                                        {
                                            $972 = HEAP32[3446] | 0; //@line 1474
                                            $974 = HEAP32[6488 + ($972 << 2) >> 2] | 0; //@line 1476
                                            $975 = HEAP32[74] | 0; //@line 1477
                                            if (($974 | 0) != ($975 | 0)) {
                                                if (!(($974 | 0) == -1 ? 1 : (HEAP32[6896 + ($972 << 2) >> 2] | 0) == ($975 | 0))) {
                                                    $947 = 3; //@line 1486
                                                    break L247;
                                                }
                                            }
                                            $981 = HEAP32[3298] | 0; //@line 1490
                                            $983 = HEAP32[6488 + ($981 << 2) >> 2] | 0; //@line 1492
                                            if (($983 | 0) == ($975 | 0)) {
                                                $947 = 3; //@line 1495
                                            } else {
                                                if (($983 | 0) == -1 ? 1 : (HEAP32[6896 + ($981 << 2) >> 2] | 0) == ($975 | 0)) {
                                                    $947 = 3; //@line 1503
                                                } else {
                                                    label = 335; //@line 1505
                                                }
                                            }
                                            break;
                                        }
                                    case 4:
                                        {
                                            if (!(HEAP32[10712 + (HEAP32[74] << 2) >> 2] | 0)) {
                                                if (!(HEAP32[10712 + (HEAP32[3314] << 2) >> 2] | 0)) {
                                                    if ((HEAP32[3318] | 0) > 1 ? (HEAP32[10712 + (HEAP32[1836] << 2) >> 2] | 0) == 0 : 0) {
                                                        label = 335; //@line 1529
                                                    } else {
                                                        $947 = 4; //@line 1531
                                                    }
                                                } else {
                                                    $947 = 4; //@line 1534
                                                }
                                            } else {
                                                $947 = 4; //@line 1537
                                            }
                                            break;
                                        }
                                    case 5:
                                        {
                                            if ((HEAP32[6048 + (HEAP32[1620] << 2) >> 2] | 0) == -1) {
                                                $947 = 5; //@line 1547
                                            } else {
                                                if ((HEAP32[6048 + (HEAP32[1618] << 2) >> 2] | 0) == -1) {
                                                    label = 335; //@line 1554
                                                } else {
                                                    $947 = 5; //@line 1556
                                                }
                                            }
                                            break;
                                        }
                                    case 10:
                                        {
                                            if ((HEAP32[1826] | 0) == 1) {
                                                if ((HEAP32[6048 + (HEAP32[3450] << 2) >> 2] | 0) < 0) {
                                                    label = 335; //@line 1570
                                                } else {
                                                    $947 = 10; //@line 1572
                                                }
                                            } else {
                                                $947 = 10; //@line 1575
                                            }
                                            break;
                                        }
                                    default:
                                        {
                                            label = 334; //@line 1580
                                            break L10;
                                        }
                                }
                            } while (0);
                            if ((label | 0) == 335) {
                                label = 0; //@line 1586
                                $924 = HEAP32[3086] | 0; //@line 1587
                                HEAP32[12448 + ($924 << 2) >> 2] = 0; //@line 1589
                                if (!(_fYES(HEAP32[12536 + ($924 * 20 | 0) + 12 >> 2] | 0, 0, 54) | 0)) {
                                    label = 161; //@line 1595
                                    break;
                                }
                                $932 = HEAP32[12536 + ((HEAP32[3086] | 0) * 20 | 0) + 8 >> 2] | 0; //@line 1600
                                _fSETPRM(1, $932, $932); //@line 1601
                                _fRSPEAK(261); //@line 1602
                                $936 = _fYES(175, HEAP32[12536 + ((HEAP32[3086] | 0) * 20 | 0) + 16 >> 2] | 0, 54) | 0; //@line 1606
                                $937 = HEAP32[3086] | 0; //@line 1607
                                HEAP32[12360 + ($937 << 2) >> 2] = $936; //@line 1609
                                $940 = HEAP32[76] | 0; //@line 1611
                                if (($936 | 0) != 0 & ($940 | 0) > 30) {
                                    HEAP32[76] = ((HEAP32[12536 + ($937 * 20 | 0) + 8 >> 2] | 0) * 30 | 0) + $940; //@line 1619
                                    $947 = $937; //@line 1620
                                } else {
                                    $947 = $937; //@line 1622
                                }
                            }
                            HEAP32[12448 + ($947 << 2) >> 2] = 0; //@line 1626
                            label = 161; //@line 1627
                        }
                    } while (0);
                    L282: while (1) {
                        if ((label | 0) == 154) {
                            label = 0; //@line 1632
                            if ((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) >= (HEAP32[3084] | 0)) {
                                $storemerge171 = 1; //@line 1639
                                label = 155; //@line 1640
                            }
                        } else if ((label | 0) == 161) {
                            label = 0; //@line 1644
                            $storemerge171 = (HEAP32[3086] | 0) + 1 | 0; //@line 1647
                            label = 155; //@line 1648
                        }
                        if ((label | 0) == 155) {
                            label = 0; //@line 1651
                            HEAP32[3086] = $storemerge171; //@line 1652
                            if (($storemerge171 | 0) <= (HEAP32[3088] | 0)) {
                                if (HEAP32[12360 + ($storemerge171 << 2) >> 2] | 0) {
                                    label = 161; //@line 1660
                                    continue;
                                }
                                $421 = (_fTSTBIT(HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0, $storemerge171 + 10 | 0) | 0) == 0; //@line 1668
                                $422 = HEAP32[3086] | 0; //@line 1669
                                $423 = 12448 + ($422 << 2) | 0; //@line 1670
                                if ($421) {
                                    HEAP32[$423 >> 2] = -1; //@line 1672
                                    $426 = -1; //@line 1673
                                } else {
                                    $426 = HEAP32[$423 >> 2] | 0; //@line 1676
                                }
                                $425 = $426 + 1 | 0; //@line 1679
                                HEAP32[12448 + ($422 << 2) >> 2] = $425; //@line 1680
                                if (($425 | 0) < (HEAP32[12536 + ($422 * 20 | 0) + 4 >> 2] | 0)) {
                                    label = 161; //@line 1685
                                    continue;
                                } else {
                                    $923 = $422; //@line 1688
                                    label = 333; //@line 1689
                                    continue L242;
                                }
                            }
                        }
                        if (HEAP32[2870] | 0) {
                            $434 = HEAP32[3240] | 0; //@line 1697
                            if ((HEAP32[6048 + ($434 << 2) >> 2] | 0) < 0) {
                                if ((HEAP32[6488 + ($434 << 2) >> 2] | 0) == -1) {
                                    _fPSPEAK($434, 1); //@line 1706
                                }
                            }
                            HEAP32[66] = 1; //@line 1709
                            $442 = 1; //@line 1710
                            do {
                                if ((HEAP32[6488 + ($442 << 2) >> 2] | 0) == -1) {
                                    $445 = 6048 + ($442 << 2) | 0; //@line 1716
                                    $446 = HEAP32[$445 >> 2] | 0; //@line 1717
                                    if (($446 | 0) < 0) {
                                        HEAP32[$445 >> 2] = ~$446; //@line 1721
                                    }
                                }
                                $442 = $442 + 1 | 0; //@line 1724
                            } while (($442 | 0) != 101);
                            HEAP32[66] = 101; //@line 1732
                        }
                        if (!(_fTSTBIT(HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0, 0) | 0)) {
                            $455 = HEAP32[1828] | 0; //@line 1740
                            if (!(HEAP32[6048 + ($455 << 2) >> 2] | 0)) {
                                $470 = 1; //@line 1745
                            } else {
                                $460 = HEAP32[6488 + ($455 << 2) >> 2] | 0; //@line 1748
                                $461 = HEAP32[74] | 0; //@line 1749
                                if (($460 | 0) == ($461 | 0)) {
                                    $468 = 1; //@line 1752
                                } else {
                                    $468 = ($460 | 0) == -1 ? 1 : (HEAP32[6896 + ($455 << 2) >> 2] | 0) == ($461 | 0); //@line 1759
                                }
                                $470 = $468 ^ 1; //@line 1762
                            }
                        } else {
                            $470 = 0; //@line 1765
                        }
                        HEAP32[28] = $470 & 1; //@line 1768
                        $471 = HEAP32[1834] | 0; //@line 1769
                        if (!(($471 | 0) < 1 | ($471 | 0) == (HEAP32[74] | 0))) {
                            HEAP32[1834] = 0; //@line 1775
                        }
                        HEAP32[66] = _fRAN(1) | 0; //@line 1778
                        _fGETIN(12968, 12976, 12984, 12992); //@line 1779
                        L319: while (1) {
                            $476 = HEAP32[3250] | 0; //@line 1781
                            HEAP32[3250] = ($476 | 0) > 0 ? 0 - $476 | 0 : 0; //@line 1785
                            $481 = (HEAP32[3252] | 0) + 1 | 0; //@line 1787
                            HEAP32[3252] = $481; //@line 1788
                            if (($481 | 0) == (HEAP32[3254] | 0)) {
                                _fSPEAK(HEAP32[13032 + (HEAP32[3256] << 2) >> 2] | 0); //@line 1795
                                $488 = HEAP32[3256] | 0; //@line 1797
                                HEAP32[3264] = ((HEAP32[13064 + ($488 << 2) >> 2] | 0) / 1e5 | 0) + (HEAP32[3264] | 0); //@line 1802
                                $493 = $488 + 1 | 0; //@line 1803
                                HEAP32[3256] = $493; //@line 1804
                                HEAP32[3254] = -1; //@line 1805
                                if (($488 | 0) < (HEAP32[3272] | 0)) {
                                    HEAP32[3254] = (_fMOD(HEAP32[13064 + ($493 << 2) >> 2] | 0, 1e5) | 0) + 1; //@line 1813
                                }
                            }
                            $500 = HEAP32[3080] | 0; //@line 1816
                            $501 = HEAP32[3274] | 0; //@line 1817
                            if (($500 | 0) == ($501 | 0) & (HEAP32[3246] | 0) > 0) {
                                HEAP32[3080] = 0; //@line 1823
                                $505 = 0; //@line 1824
                            } else {
                                $505 = $500; //@line 1826
                            }
                            do {
                                if (($505 | 0) == ($501 | 0)) {
                                    HEAP32[66] = 4090; //@line 1831
                                    $672 = 4090; //@line 1832
                                    label = 239; //@line 1833
                                } else {
                                    $508 = HEAP32[74] | 0; //@line 1836
                                    do {
                                        if ((HEAP32[1826] | 0) != 0 | ($508 | 0) < 15 | ($508 + -145 | 0) >>> 0 < 22) {
                                            label = 190; //@line 1845
                                        } else {
                                            if (($508 | 0) == (HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0)) {
                                                label = 190; //@line 1852
                                                break;
                                            }
                                            if (($508 | 0) == 33 | ($508 | 0) == 179 | ($508 | 0) == 180 | ($508 | 0) == 182) {
                                                label = 190; //@line 1856
                                                break;
                                            }
                                            $515 = (HEAP32[3276] | 0) + -1 | 0; //@line 1860
                                            HEAP32[3276] = $515; //@line 1861
                                            $516 = $515; //@line 1862
                                        }
                                    } while (0);
                                    if ((label | 0) == 190) {
                                        label = 0; //@line 1866
                                        $516 = HEAP32[3276] | 0; //@line 1868
                                    }
                                    L337: do {
                                        if (!$516) {
                                            HEAP32[6048 + (HEAP32[3440] << 2) >> 2] = 0; //@line 1875
                                            HEAP32[6048 + (HEAP32[3452] << 2) >> 2] = 0; //@line 1878
                                            HEAP32[383] = 0; //@line 1879
                                            HEAP32[384] = 0; //@line 1879
                                            HEAP32[385] = 0; //@line 1879
                                            HEAP32[386] = 0; //@line 1879
                                            HEAP32[387] = 0; //@line 1879
                                            HEAP32[388] = 0; //@line 1879
                                            HEAP32[395] = 0; //@line 1880
                                            HEAP32[396] = 0; //@line 1880
                                            HEAP32[397] = 0; //@line 1880
                                            HEAP32[398] = 0; //@line 1880
                                            HEAP32[399] = 0; //@line 1880
                                            HEAP32[400] = 0; //@line 1880
                                            HEAP32[66] = 7; //@line 1881
                                            _fMOVE(HEAP32[3320] | 0, 0); //@line 1883
                                            _fMOVE((HEAP32[3320] | 0) + 100 | 0, 0); //@line 1886
                                            _fMOVE(HEAP32[3322] | 0, HEAP32[320 + (HEAP32[3320] << 2) >> 2] | 0); //@line 1891
                                            _fMOVE((HEAP32[3322] | 0) + 100 | 0, HEAP32[13296 + (HEAP32[3320] << 2) >> 2] | 0); //@line 1897
                                            _fJUGGLE(HEAP32[3426] | 0); //@line 1899
                                            $1061 = HEAP32[2676] | 0; //@line 1900
                                            if ((HEAP32[6048 + ($1061 << 2) >> 2] | 0) != 3) {
                                                _fDSTROY($1061); //@line 1905
                                            }
                                            $1065 = HEAP32[2874] | 0; //@line 1907
                                            HEAP32[6048 + ($1065 << 2) >> 2] = 0; //@line 1909
                                            HEAP32[6896 + ($1065 << 2) >> 2] = 0; //@line 1911
                                            $1068 = HEAP32[404] | 0; //@line 1912
                                            HEAP32[6048 + ($1068 << 2) >> 2] = 0; //@line 1914
                                            HEAP32[6896 + ($1068 << 2) >> 2] = 0; //@line 1916
                                            _fRSPEAK(129); //@line 1917
                                            HEAP32[3276] = -1; //@line 1918
                                            HEAP32[182] = 1; //@line 1919
                                        } else {
                                            $519 = HEAP32[186] | 0; //@line 1922
                                            if (($516 | 0) < 0) {
                                                $520 = $519 + -1 | 0; //@line 1924
                                                HEAP32[186] = $520; //@line 1925
                                                $521 = $520; //@line 1926
                                            } else {
                                                $521 = $519; //@line 1928
                                            }
                                            if (!$521) {
                                                label = 368; //@line 1932
                                                break L174;
                                            }
                                            $523 = HEAP32[1828] | 0; //@line 1935
                                            $524 = 6048 + ($523 << 2) | 0; //@line 1936
                                            $527 = HEAP32[76] | 0; //@line 1939
                                            if ((HEAP32[$524 >> 2] | 0) == 1) {
                                                $528 = $527 + -1 | 0; //@line 1941
                                                HEAP32[76] = $528; //@line 1942
                                                $529 = $528; //@line 1943
                                            } else {
                                                $529 = $527; //@line 1945
                                            }
                                            if (($529 | 0) >= 31) {
                                                break;
                                            }
                                            $531 = HEAP32[3278] | 0; //@line 1951
                                            $533 = HEAP32[6488 + ($531 << 2) >> 2] | 0; //@line 1953
                                            if (($533 | 0) == ($508 | 0)) {
                                                label = 200; //@line 1956
                                            } else {
                                                if (($533 | 0) == -1 ? 1 : (HEAP32[6896 + ($531 << 2) >> 2] | 0) == ($508 | 0)) {
                                                    label = 200; //@line 1964
                                                }
                                            }
                                            do {
                                                if ((label | 0) == 200) {
                                                    label = 0; //@line 1969
                                                    if (HEAP32[6048 + ($531 << 2) >> 2] | 0) {
                                                        break;
                                                    }
                                                    $543 = HEAP32[6488 + ($523 << 2) >> 2] | 0; //@line 1977
                                                    if (($543 | 0) != ($508 | 0)) {
                                                        if (!(($543 | 0) == -1 ? 1 : (HEAP32[6896 + ($523 << 2) >> 2] | 0) == ($508 | 0))) {
                                                            break;
                                                        }
                                                    }
                                                    _fRSPEAK(188); //@line 1989
                                                    $1135 = HEAP32[3278] | 0; //@line 1990
                                                    HEAP32[6048 + ($1135 << 2) >> 2] = 1; //@line 1992
                                                    if ((HEAP32[6488 + ($1135 << 2) >> 2] | 0) == -1) {
                                                        _fDROP($1135, HEAP32[74] | 0); //@line 1998
                                                    }
                                                    HEAP32[76] = (HEAP32[76] | 0) + 2500; //@line 2002
                                                    HEAP32[3568] = 0; //@line 2003
                                                    break L337;
                                                }
                                            } while (0);
                                            if (!$529) {
                                                HEAP32[76] = -1; //@line 2009
                                                HEAP32[$524 >> 2] = 0; //@line 2010
                                                $1158 = HEAP32[6488 + ($523 << 2) >> 2] | 0; //@line 2012
                                                if (($1158 | 0) != ($508 | 0)) {
                                                    if (!(($1158 | 0) == -1 ? 1 : (HEAP32[6896 + ($523 << 2) >> 2] | 0) == ($508 | 0))) {
                                                        break;
                                                    }
                                                }
                                                _fRSPEAK(184); //@line 2024
                                                break;
                                            }
                                            if (HEAP32[3568] | 0) {
                                                break;
                                            }
                                            $1144 = HEAP32[6488 + ($523 << 2) >> 2] | 0; //@line 2033
                                            if (($1144 | 0) != ($508 | 0)) {
                                                if (!(($1144 | 0) == -1 ? 1 : (HEAP32[6896 + ($523 << 2) >> 2] | 0) == ($508 | 0))) {
                                                    break;
                                                }
                                            }
                                            HEAP32[3568] = 1; //@line 2045
                                            $1150 = HEAP32[3278] | 0; //@line 2046
                                            $$$163 = (HEAP32[6048 + ($1150 << 2) >> 2] | 0) == 1 ? 189 : (HEAP32[6488 + ($1150 << 2) >> 2] | 0) == 0 ? 183 : 187; //@line 2054
                                            HEAP32[3078] = $$$163; //@line 2055
                                            _fRSPEAK($$$163); //@line 2056
                                        }
                                    } while (0);
                                    HEAP32[1614] = 43; //@line 2059
                                    $558 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 2066
                                    $564 = Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $558) | 0; //@line 2072
                                    $566 = Math_imul($564, HEAP32[3280] | 0) | 0; //@line 2074
                                    $573 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 2081
                                    $581 = ((Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $573) | 0) + 1 | 0) / 2 | 0; //@line 2089
                                    $582 = HEAP32[3280] | 0; //@line 2090
                                    if (((Math_imul((HEAP32[3282] | 0) + $582 | 0, $581) | 0) - $566 | 0) == ($582 | 0)) {
                                        HEAP32[1614] = 70; //@line 2097
                                    }
                                    HEAP32[3284] = _fVOCAB(HEAP32[3242] | 0, -1) | 0; //@line 2101
                                    $591 = _fVOCAB(HEAP32[3246] | 0, -1) | 0; //@line 2103
                                    HEAP32[3286] = $591; //@line 2104
                                    $592 = HEAP32[3284] | 0; //@line 2105
                                    $594 = ($592 | 0) == (HEAP32[3288] | 0); //@line 2107
                                    if ($594) {
                                        if (($591 | 0) == (HEAP32[3290] | 0)) {
                                            label = 149; //@line 2112
                                            break L282;
                                        }
                                        if (($591 | 0) == ((HEAP32[3280] | 0) + 1e3 | 0)) {
                                            label = 149; //@line 2119
                                            break L282;
                                        }
                                        if ($594 & (HEAP32[3246] | 0) > 0) {
                                            label = 234; //@line 2126
                                            break;
                                        }
                                    }
                                    if (($592 | 0) == ((HEAP32[3280] | 0) + 1e3 | 0)) {
                                        label = 213; //@line 2134
                                    } else {
                                        if (($592 | 0) == ((HEAP32[3282] | 0) + 1e3 | 0)) {
                                            label = 213; //@line 2140
                                        } else {
                                            $625 = $592; //@line 2142
                                        }
                                    }
                                    do {
                                        if ((label | 0) == 213) {
                                            label = 0; //@line 2147
                                            if (($591 | 0) != ((HEAP32[3292] | 0) + 1e3 | 0)) {
                                                if (($591 | 0) != ((HEAP32[3294] | 0) + 1e3 | 0)) {
                                                    $625 = $592; //@line 2156
                                                    break;
                                                }
                                            }
                                            $614 = $591 + -1e3 | 0; //@line 2160
                                            $617 = HEAP32[74] | 0; //@line 2163
                                            if ((HEAP32[6488 + ($614 << 2) >> 2] | 0) != ($617 | 0)) {
                                                if ((HEAP32[6896 + ($614 << 2) >> 2] | 0) != ($617 | 0)) {
                                                    $625 = $592; //@line 2170
                                                    break;
                                                }
                                            }
                                            HEAP32[3246] = _fMAKEWD(16152118) | 0; //@line 2175
                                            $625 = HEAP32[3284] | 0; //@line 2177
                                        }
                                    } while (0);
                                    $623 = HEAP32[3296] | 0; //@line 2180
                                    if (($625 | 0) != ($623 + 1e3 | 0)) {
                                        label = 225; //@line 2184
                                        break;
                                    }
                                    $628 = HEAP32[3298] | 0; //@line 2188
                                    if ((HEAP32[3286] | 0) != ($628 + 1e3 | 0)) {
                                        label = 225; //@line 2192
                                        break;
                                    }
                                    $632 = HEAP32[6488 + ($623 << 2) >> 2] | 0; //@line 2196
                                    $633 = HEAP32[74] | 0; //@line 2197
                                    if (($632 | 0) != ($633 | 0)) {
                                        if (!(($632 | 0) == -1 ? 1 : (HEAP32[6896 + ($623 << 2) >> 2] | 0) == ($633 | 0))) {
                                            label = 225; //@line 2206
                                            break;
                                        }
                                    }
                                    $640 = HEAP32[6488 + ($628 << 2) >> 2] | 0; //@line 2211
                                    if (($640 | 0) != ($633 | 0)) {
                                        if (!(($640 | 0) == -1 ? 1 : (HEAP32[6896 + ($628 << 2) >> 2] | 0) == ($633 | 0))) {
                                            label = 225; //@line 2220
                                            break;
                                        }
                                    }
                                    HEAP32[3242] = _fMAKEWD(301200308) | 0; //@line 2225
                                    label = 225; //@line 2226
                                }
                            } while (0);
                            L402: while (1) {
                                do {
                                    if ((label | 0) == 225) {
                                        label = 0; //@line 2232
                                        $647 = HEAP32[3242] | 0; //@line 2233
                                        do {
                                            if (($647 | 0) == (_fMAKEWD(23051920) | 0)) {
                                                $651 = (HEAP32[3300] | 0) + 1 | 0; //@line 2239
                                                HEAP32[3300] = $651; //@line 2240
                                                if (($651 | 0) != 10) {
                                                    break;
                                                }
                                                _fRSPEAK(17); //@line 2245
                                            }
                                        } while (0);
                                        $653 = HEAP32[3242] | 0; //@line 2248
                                        $655 = ($653 | 0) != (_fMAKEWD(715) | 0); //@line 2250
                                        if ($655 | (HEAP32[3246] | 0) == 0) {
                                            break;
                                        }
                                        $659 = (HEAP32[3302] | 0) + 1 | 0; //@line 2258
                                        HEAP32[3302] = $659; //@line 2259
                                        if (($659 | 0) != 10) {
                                            break;
                                        }
                                        _fRSPEAK(276); //@line 2264
                                    } else if ((label | 0) == 234) {
                                        label = 0; //@line 2267
                                        HEAP32[3242] = HEAP32[3246]; //@line 2269
                                        HEAP32[3244] = HEAP32[3248]; //@line 2271
                                        HEAP32[3246] = 0; //@line 2272
                                        label = 225; //@line 2273
                                        continue L402;
                                    } else if ((label | 0) == 239) {
                                        label = 0; //@line 2277
                                        $673 = _action($672) | 0; //@line 2278
                                        if (($673 | 0) == 2e3) {
                                            label = 115; //@line 2280
                                            continue L174;
                                        } else if (($673 | 0) == 2012) {
                                            label = 153; //@line 2283
                                            continue L242;
                                        } else if (($673 | 0) == 2010) {
                                            label = 149; //@line 2286
                                            break L282;
                                        } else if (($673 | 0) == 2011) {
                                            label = 151; //@line 2289
                                            break L282;
                                        } else if (($673 | 0) == 2600) {
                                            label = 154; //@line 2292
                                            continue L282;
                                        } else if (($673 | 0) == 2607) {
                                            continue L319;
                                        } else if (($673 | 0) == 2800) {
                                            label = 234; //@line 2297
                                            continue L402;
                                        } else if (($673 | 0) == 2009) {
                                            label = 240; //@line 2300
                                            break L282;
                                        } else if (($673 | 0) == 8e3) {
                                            label = 242; //@line 2303
                                            break L319;
                                        } else if (($673 | 0) == 8) {
                                            label = 243; //@line 2306
                                            break L282;
                                        } else if (($673 | 0) == 2) {
                                            break L174;
                                        } else if (($673 | 0) == 18999) {
                                            label = 382; //@line 2311
                                            break L10;
                                        } else if (($673 | 0) == 19e3) {
                                            label = 383; //@line 2314
                                            break L10;
                                        } else if (($673 | 0) != 2630) {
                                            label = 241; //@line 2317
                                            break L10;
                                        }
                                    }
                                } while (0);
                                $662 = _fVOCAB(HEAP32[3242] | 0, -1) | 0; //@line 2323
                                HEAP32[66] = $662; //@line 2324
                                if (($662 | 0) == -1) {
                                    label = 235; //@line 2327
                                    break L319;
                                }
                                HEAP32[1614] = _fMOD($662, 1e3) | 0; //@line 2331
                                $666 = (HEAP32[66] | 0) / 1e3 | 0; //@line 2333
                                HEAP32[3304] = $666 + 1; //@line 2335
                                if (($666 | 0) == 3) {
                                    label = 149; //@line 2337
                                    break L282;
                                } else if (($666 | 0) == 2) {
                                    HEAP32[66] = 4e3; //@line 2340
                                    $672 = 4e3; //@line 2341
                                    label = 239; //@line 2342
                                    continue;
                                } else if (($666 | 0) == 1) {
                                    HEAP32[66] = 5e3; //@line 2345
                                    $672 = 5e3; //@line 2346
                                    label = 239; //@line 2347
                                    continue;
                                } else if (!$666) {
                                    label = 243; //@line 2350
                                    break L282;
                                } else {
                                    label = 233; //@line 2353
                                    break L10;
                                }
                            }
                        }
                        if ((label | 0) == 235) {
                            label = 0; //@line 2359
                            _fSETPRM(1, HEAP32[3242] | 0, HEAP32[3244] | 0); //@line 2362
                            _fRSPEAK(254); //@line 2363
                            label = 154; //@line 2364
                            continue;
                        } else if ((label | 0) == 242) {
                            label = 0; //@line 2368
                            _fSETPRM(1, HEAP32[3242] | 0, HEAP32[3244] | 0); //@line 2371
                            _fRSPEAK(257); //@line 2372
                            HEAP32[2864] = 0; //@line 2373
                            label = 154; //@line 2374
                            continue;
                        }
                    }
                    if ((label | 0) == 149) {
                        label = 0; //@line 2379
                        $403 = HEAP32[1614] | 0; //@line 2381
                        label = 150; //@line 2382
                    } else if ((label | 0) == 151) {
                        label = 0; //@line 2385
                        $404 = HEAP32[3078] | 0; //@line 2387
                    } else if ((label | 0) == 240) {
                        label = 0; //@line 2390
                        HEAP32[1614] = 54; //@line 2391
                        $403 = 54; //@line 2392
                        label = 150; //@line 2393
                    } else if ((label | 0) == 243) {
                        label = 0; //@line 2396
                        $677 = HEAP32[74] | 0; //@line 2398
                        label = 244; //@line 2399
                        continue;
                    }
                    if ((label | 0) == 150) {
                        label = 0; //@line 2403
                        HEAP32[3078] = $403; //@line 2404
                        $404 = $403; //@line 2405
                    }
                    _fRSPEAK($404); //@line 2407
                    label = 153; //@line 2408
                }
                $680 = HEAP32[1614] | 0; //@line 2410
                if (($680 | 0) == (HEAP32[3306] | 0)) {
                    break;
                }
                if (($680 | 0) == (HEAP32[3308] | 0)) {
                    $803 = HEAP32[3314] | 0; //@line 2419
                    HEAP32[1614] = $803; //@line 2420
                    if ((HEAP32[752 + ($803 << 2) >> 2] | 0) == 2) {
                        $807 = HEAP32[1836] | 0; //@line 2425
                        HEAP32[1614] = $807; //@line 2426
                        $809 = $807; //@line 2427
                    } else {
                        $809 = $803; //@line 2429
                    }
                    HEAP32[1836] = $803; //@line 2431
                    $808 = HEAP32[74] | 0; //@line 2432
                    HEAP32[3314] = $808; //@line 2433
                    HEAP32[3428] = ($809 | 0) == ($808 | 0) ? 91 : 0; //@line 2436
                    if (_fTSTBIT(HEAP32[752 + ($808 << 2) >> 2] | 0, 4) | 0) {
                        label = 287; //@line 2442
                        break;
                    }
                    $$pr278 = HEAP32[3428] | 0; //@line 2445
                    if ($$pr278) {
                        $824 = $$pr278; //@line 2448
                        label = 290; //@line 2449
                        break;
                    }
                    $821 = _fMOD((_fIABS(HEAP32[2400 + (HEAP32[412] << 2) >> 2] | 0) | 0) / 1e3 | 0, 1e3) | 0; //@line 2457
                    HEAP32[3316] = $821; //@line 2458
                    L438: do {
                        if (($821 | 0) == (HEAP32[1614] | 0)) {
                            label = 299; //@line 2463
                        } else {
                            $825 = $821; //@line 2465
                            while (1) {
                                do {
                                    if (($825 | 0) <= 300) {
                                        $828 = HEAP32[1656 + ($825 << 2) >> 2] | 0; //@line 2471
                                        HEAP32[392] = $828; //@line 2472
                                        if ((HEAP32[752 + ($825 << 2) >> 2] | 0) == 2) {
                                            $836 = _fMOD((_fIABS(HEAP32[2400 + ($828 << 2) >> 2] | 0) | 0) / 1e3 | 0, 1e3) | 0; //@line 2481
                                            if (($836 | 0) != (HEAP32[1614] | 0)) {
                                                break;
                                            }
                                            HEAP32[3428] = HEAP32[412]; //@line 2488
                                        }
                                    }
                                } while (0);
                                $840 = HEAP32[412] | 0; //@line 2492
                                if ((HEAP32[2400 + ($840 << 2) >> 2] | 0) < 0) {
                                    break;
                                }
                                $844 = $840 + 1 | 0; //@line 2499
                                HEAP32[412] = $844; //@line 2500
                                $825 = _fMOD((_fIABS(HEAP32[2400 + ($844 << 2) >> 2] | 0) | 0) / 1e3 | 0, 1e3) | 0; //@line 2505
                                HEAP32[3316] = $825; //@line 2506
                                if (($825 | 0) == (HEAP32[1614] | 0)) {
                                    label = 299; //@line 2510
                                    break L438;
                                }
                            }
                            $852 = HEAP32[3428] | 0; //@line 2516
                            HEAP32[412] = $852; //@line 2517
                            if (!$852) {
                                label = 298; //@line 2520
                                break L174;
                            } else {
                                $855 = $852; //@line 2523
                            }
                        }
                    } while (0);
                    if ((label | 0) == 299) {
                        label = 0; //@line 2528
                        $855 = HEAP32[412] | 0; //@line 2530
                    }
                    HEAP32[1614] = _fMOD(_fIABS(HEAP32[2400 + ($855 << 2) >> 2] | 0) | 0, 1e3) | 0; //@line 2536
                    $861 = HEAP32[1656 + (HEAP32[74] << 2) >> 2] | 0; //@line 2539
                    HEAP32[412] = $861; //@line 2540
                    $692 = $861; //@line 2541
                } else {
                    if (($680 | 0) == (HEAP32[3310] | 0)) {
                        label = 301; //@line 2546
                        break;
                    }
                    if (($680 | 0) == (HEAP32[3312] | 0)) {
                        label = 304; //@line 2552
                        break;
                    }
                    HEAP32[1836] = HEAP32[3314]; //@line 2556
                    HEAP32[3314] = HEAP32[74]; //@line 2558
                    $692 = HEAP32[412] | 0; //@line 2560
                }
                $694 = _fIABS(HEAP32[2400 + ($692 << 2) >> 2] | 0) | 0; //@line 2564
                HEAP32[3316] = $694; //@line 2565
                L455: do {
                    if ((_fMOD($694, 1e3) | 0) != 1) {
                        do {
                            $698 = _fMOD(HEAP32[3316] | 0, 1e3) | 0; //@line 2572
                            $699 = HEAP32[1614] | 0; //@line 2573
                            if (($698 | 0) == ($699 | 0)) {
                                break L455;
                            }
                            $701 = HEAP32[412] | 0; //@line 2578
                            if ((HEAP32[2400 + ($701 << 2) >> 2] | 0) < 0) {
                                $$lcssa415 = $699; //@line 2583
                                label = 309; //@line 2584
                                break L174;
                            }
                            $705 = $701 + 1 | 0; //@line 2587
                            HEAP32[412] = $705; //@line 2588
                            $708 = _fIABS(HEAP32[2400 + ($705 << 2) >> 2] | 0) | 0; //@line 2591
                            HEAP32[3316] = $708; //@line 2592
                        } while ((_fMOD($708, 1e3) | 0) != 1);
                    }
                } while (0);
                $storemerge179 = (HEAP32[3316] | 0) / 1e3 | 0; //@line 2603
                L461: while (1) {
                    HEAP32[3316] = $storemerge179; //@line 2605
                    $713 = ($storemerge179 | 0) / 1e3 | 0; //@line 2606
                    HEAP32[72] = $713; //@line 2607
                    $714 = _fMOD($713, 100) | 0; //@line 2608
                    HEAP32[1614] = $714; //@line 2609
                    $715 = HEAP32[72] | 0; //@line 2610
                    do {
                        if (($715 | 0) < 301) {
                            if (($715 | 0) < 101) {
                                if (!$715) {
                                    label = 268; //@line 2618
                                    break;
                                }
                                $744 = _fRAN(100) | 0; //@line 2621
                                if (($744 | 0) < (HEAP32[72] | 0)) {
                                    label = 268; //@line 2625
                                    break;
                                } else {
                                    break;
                                }
                            }
                            $735 = HEAP32[6488 + ($714 << 2) >> 2] | 0; //@line 2632
                            if (($735 | 0) == -1) {
                                label = 268; //@line 2635
                            } else {
                                if (($715 | 0) > 200) {
                                    $738 = HEAP32[74] | 0; //@line 2639
                                    if (($735 | 0) == ($738 | 0)) {
                                        label = 268; //@line 2642
                                    } else {
                                        if ((HEAP32[6896 + ($714 << 2) >> 2] | 0) == ($738 | 0)) {
                                            label = 268; //@line 2648
                                        }
                                    }
                                }
                            }
                        } else {
                            if ((HEAP32[6048 + ($714 << 2) >> 2] | 0) != ((($715 | 0) / 100 | 0) + -3 | 0)) {
                                label = 268; //@line 2660
                            }
                        }
                    } while (0);
                    if ((label | 0) == 268) {
                        label = 0; //@line 2665
                        $748 = _fMOD(HEAP32[3316] | 0, 1e3) | 0; //@line 2667
                        HEAP32[72] = $748; //@line 2668
                        if (($748 | 0) < 301) {
                            break L174;
                        }
                        if (($748 | 0) >= 501) {
                            $$lcssa418 = $748; //@line 2675
                            label = 270; //@line 2676
                            break L174;
                        }
                        HEAP32[72] = $748 + -300; //@line 2680
                        if (($748 | 0) == 303) {
                            break;
                        } else if (($748 | 0) == 301) {
                            label = 274; //@line 2684
                            break L174;
                        } else if (($748 | 0) != 302) {
                            label = 273; //@line 2687
                            break L10;
                        }
                        _fDROP(HEAP32[1620] | 0, HEAP32[74] | 0); //@line 2692
                    }
                    while (1) {
                        $722 = HEAP32[412] | 0; //@line 2695
                        if ((HEAP32[2400 + ($722 << 2) >> 2] | 0) < 0) {
                            label = 259; //@line 2700
                            break L10;
                        }
                        $726 = $722 + 1 | 0; //@line 2703
                        HEAP32[412] = $726; //@line 2704
                        $730 = (_fIABS(HEAP32[2400 + ($726 << 2) >> 2] | 0) | 0) / 1e3 | 0; //@line 2708
                        HEAP32[72] = $730; //@line 2709
                        if (($730 | 0) != (HEAP32[3316] | 0)) {
                            $storemerge179 = $730; //@line 2713
                            continue L461;
                        }
                    }
                }
                $763 = HEAP32[3320] | 0; //@line 2718
                $764 = 6048 + ($763 << 2) | 0; //@line 2719
                $765 = HEAP32[$764 >> 2] | 0; //@line 2720
                if (($765 | 0) == 1) {
                    label = 279; //@line 2723
                    break;
                }
                HEAP32[72] = (HEAP32[13296 + ($763 << 2) >> 2] | 0) + (HEAP32[320 + ($763 << 2) >> 2] | 0) - (HEAP32[74] | 0); //@line 2733
                if (!$765) {
                    HEAP32[$764 >> 2] = 1; //@line 2736
                }
                if ((HEAP32[6488 + (HEAP32[2676] << 2) >> 2] | 0) != -1) {
                    break;
                }
                _fRSPEAK(162); //@line 2745
                HEAP32[6048 + (HEAP32[3426] << 2) >> 2] = 1; //@line 2748
                HEAP32[6048 + (HEAP32[3320] << 2) >> 2] = 2; //@line 2751
                _fDROP(HEAP32[2676] | 0, HEAP32[72] | 0); //@line 2754
                $799 = HEAP32[2676] | 0; //@line 2755
                HEAP32[6896 + ($799 << 2) >> 2] = -1; //@line 2757
                HEAP32[6048 + ($799 << 2) >> 2] = 3; //@line 2759
                HEAP32[1836] = HEAP32[72]; //@line 2761
                label = 320; //@line 2762
            }
            do {
                if ((label | 0) == 270) {
                    label = 0; //@line 2766
                    _fRSPEAK($$lcssa418 + -500 | 0); //@line 2768
                    HEAP32[72] = HEAP32[74]; //@line 2770
                } else if ((label | 0) == 274) {
                    label = 0; //@line 2773
                    $754 = HEAP32[74] | 0; //@line 2774
                    HEAP32[72] = 199 - $754; //@line 2776
                    $756 = HEAP32[3318] | 0; //@line 2777
                    if (!$756) {
                        break;
                    } else if (($756 | 0) == 1) {
                        if ((HEAP32[6488 + (HEAP32[1620] << 2) >> 2] | 0) == -1) {
                            break;
                        }
                    }
                    HEAP32[72] = $754; //@line 2789
                    _fRSPEAK(117); //@line 2790
                } else if ((label | 0) == 279) {
                    label = 0; //@line 2793
                    _fPSPEAK($763, 1); //@line 2794
                    HEAP32[6048 + (HEAP32[3320] << 2) >> 2] = 0; //@line 2797
                    _fMOVE(HEAP32[3322] | 0, 0); //@line 2799
                    _fMOVE((HEAP32[3322] | 0) + 100 | 0, 0); //@line 2802
                    $772 = HEAP32[3320] | 0; //@line 2803
                    _fMOVE($772, HEAP32[320 + ($772 << 2) >> 2] | 0); //@line 2806
                    $775 = HEAP32[3320] | 0; //@line 2807
                    _fMOVE($775 + 100 | 0, HEAP32[13296 + ($775 << 2) >> 2] | 0); //@line 2811
                    _fJUGGLE(HEAP32[3426] | 0); //@line 2813
                    HEAP32[72] = HEAP32[74]; //@line 2815
                } else if ((label | 0) == 287) {
                    label = 0; //@line 2818
                    HEAP32[3428] = 274; //@line 2819
                    $824 = 274; //@line 2820
                    label = 290; //@line 2821
                } else if ((label | 0) == 298) {
                    label = 0; //@line 2824
                    _fRSPEAK(140); //@line 2825
                } else if ((label | 0) == 301) {
                    label = 0; //@line 2828
                    $862 = HEAP32[3430] | 0; //@line 2829
                    if (($862 | 0) < 3) {
                        _fRSPEAK(15); //@line 2832
                        $865 = HEAP32[3430] | 0; //@line 2834
                    } else {
                        $865 = $862; //@line 2836
                    }
                    HEAP32[3430] = $865 + 1; //@line 2839
                    HEAP32[28] = 0; //@line 2840
                    HEAP32[8096 + (HEAP32[74] << 2) >> 2] = 0; //@line 2843
                } else if ((label | 0) == 304) {
                    label = 0; //@line 2846
                    HEAP32[1614] = 58; //@line 2847
                    $868 = HEAP32[74] | 0; //@line 2848
                    if (($868 | 0) < 9 | ($868 + -145 | 0) >>> 0 < 22) {
                        if (($868 | 0) == 8) {
                            $879 = 58; //@line 2856
                        } else {
                            label = 307; //@line 2858
                        }
                    } else {
                        if (($868 | 0) != 8 & (($868 & -3 | 0) == 180 ? 1 : ($868 | 0) == (HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0))) {
                            label = 307; //@line 2871
                        } else {
                            $879 = 58; //@line 2873
                        }
                    }
                    if ((label | 0) == 307) {
                        label = 0; //@line 2877
                        HEAP32[1614] = 57; //@line 2878
                        $879 = 57; //@line 2879
                    }
                    _fRSPEAK($879); //@line 2881
                } else if ((label | 0) == 309) {
                    label = 0; //@line 2884
                    $$$164 = ($$lcssa415 + -29 | 0) >>> 0 < 2 | ($$lcssa415 + -43 | 0) >>> 0 < 8 ? 52 : 12; //@line 2890
                    HEAP32[3078] = $$$164; //@line 2891
                    if (($$lcssa415 | 0) == 7 | ($$lcssa415 | 0) == 36 | ($$lcssa415 | 0) == 37) {
                        HEAP32[3078] = 10; //@line 2893
                        $1191 = 10; //@line 2894
                    } else {
                        $1191 = $$$164; //@line 2896
                    }
                    if (($$lcssa415 | 0) == 11 | ($$lcssa415 | 0) == 19) {
                        HEAP32[3078] = 11; //@line 2899
                        $1192 = 11; //@line 2900
                    } else {
                        $1192 = $1191; //@line 2902
                    }
                    $883 = HEAP32[3080] | 0; //@line 2904
                    if (($883 | 0) == (HEAP32[3432] | 0) | ($883 | 0) == (HEAP32[3434] | 0)) {
                        HEAP32[3078] = 59; //@line 2911
                        $1193 = 59; //@line 2912
                    } else {
                        $1193 = $1192; //@line 2914
                    }
                    if (($$lcssa415 | 0) == 17) {
                        HEAP32[3078] = 80; //@line 2917
                        $888 = 80; //@line 2918
                    } else if (($$lcssa415 | 0) == 62 | ($$lcssa415 | 0) == 65) {
                        HEAP32[3078] = 42; //@line 2920
                        $888 = 42; //@line 2921
                    } else {
                        $888 = $1193; //@line 2923
                    }
                    _fRSPEAK($888); //@line 2925
                } else if ((label | 0) == 368) {
                    label = 0; //@line 2928
                    $1072 = _fPUT(HEAP32[3454] | 0, 115, 1) | 0; //@line 2930
                    HEAP32[6048 + (HEAP32[3454] << 2) >> 2] = $1072; //@line 2933
                    $1076 = _fPUT(HEAP32[3292] | 0, 115, 0) | 0; //@line 2935
                    HEAP32[6048 + (HEAP32[3292] << 2) >> 2] = $1076; //@line 2938
                    $1080 = _fPUT(HEAP32[3240] | 0, 115, 0) | 0; //@line 2940
                    $1081 = HEAP32[3240] | 0; //@line 2941
                    HEAP32[6048 + ($1081 << 2) >> 2] = $1080; //@line 2943
                    HEAP32[13824 + ($1081 << 2) >> 2] = 3; //@line 2945
                    $1085 = _fPUT(HEAP32[1828] | 0, 115, 0) | 0; //@line 2947
                    HEAP32[6048 + (HEAP32[1828] << 2) >> 2] = $1085; //@line 2950
                    $1089 = _fPUT(HEAP32[3444] | 0, 115, 0) | 0; //@line 2952
                    HEAP32[6048 + (HEAP32[3444] << 2) >> 2] = $1089; //@line 2955
                    $1093 = _fPUT(HEAP32[3558] | 0, 115, 0) | 0; //@line 2957
                    HEAP32[6048 + (HEAP32[3558] << 2) >> 2] = $1093; //@line 2960
                    HEAP32[74] = 115; //@line 2961
                    HEAP32[3314] = 115; //@line 2962
                    HEAP32[72] = 115; //@line 2963
                    HEAP32[66] = _fPUT(HEAP32[3440] | 0, 116, 0) | 0; //@line 2966
                    HEAP32[66] = _fPUT(HEAP32[3560] | 0, 116, 0) | 0; //@line 2969
                    $1101 = 13824 + (HEAP32[3560] << 2) | 0; //@line 2971
                    HEAP32[$1101 >> 2] = (HEAP32[$1101 >> 2] | 0) + 1; //@line 2974
                    $1105 = _fPUT(HEAP32[3446] | 0, 116, 1) | 0; //@line 2976
                    HEAP32[6048 + (HEAP32[3446] << 2) >> 2] = $1105; //@line 2979
                    $1109 = _fPUT(HEAP32[3298] | 0, 116, 1) | 0; //@line 2981
                    HEAP32[6048 + (HEAP32[3298] << 2) >> 2] = $1109; //@line 2984
                    $1113 = _fPUT(HEAP32[3296] | 0, 116, 0) | 0; //@line 2986
                    HEAP32[6048 + (HEAP32[3296] << 2) >> 2] = $1113; //@line 2989
                    $1117 = _fPUT(HEAP32[3562] | 0, 116, 0) | 0; //@line 2991
                    HEAP32[6048 + (HEAP32[3562] << 2) >> 2] = $1117; //@line 2994
                    $1121 = _fPUT(HEAP32[3564] | 0, 116, 0) | 0; //@line 2996
                    HEAP32[6048 + (HEAP32[3564] << 2) >> 2] = $1121; //@line 2999
                    $1125 = _fPUT(HEAP32[3566] | 0, 115, 0) | 0; //@line 3001
                    $1126 = HEAP32[3566] | 0; //@line 3002
                    HEAP32[6048 + ($1126 << 2) >> 2] = $1125; //@line 3004
                    HEAP32[6896 + ($1126 << 2) >> 2] = 116; //@line 3006
                    HEAP32[66] = 1; //@line 3007
                    $storemerge182326 = 1; //@line 3008
                    do {
                        if ((HEAP32[6488 + ($storemerge182326 << 2) >> 2] | 0) == -1) {
                            _fDSTROY($storemerge182326); //@line 3014
                            $1133 = HEAP32[66] | 0; //@line 3016
                        } else {
                            $1133 = $storemerge182326; //@line 3018
                        }
                        $storemerge182326 = $1133 + 1 | 0; //@line 3020
                        HEAP32[66] = $storemerge182326; //@line 3021
                    } while (($storemerge182326 | 0) < 101);
                    _fRSPEAK(132); //@line 3029
                    HEAP32[2870] = 1; //@line 3030
                }
            } while (0);
            if ((label | 0) == 290) {
                label = 0; //@line 3034
                _fRSPEAK($824); //@line 3035
            }
            $15 = HEAP32[72] | 0; //@line 3038
        }
        if ((label | 0) == 233) {
            _fBUG(22); //@line 3041
        } else if ((label | 0) == 241) {
            _fBUG(99); //@line 3045
        } else if ((label | 0) == 245) {
            _fBUG(26); //@line 3049
        } else if ((label | 0) == 259) {
            _fBUG(25); //@line 3053
        } else if ((label | 0) == 273) {
            _fBUG(20); //@line 3057
        } else if ((label | 0) == 334) {
            _fBUG(27); //@line 3061
        } else if ((label | 0) == 382) {
            _fRSPEAK(HEAP32[3078] | 0); //@line 3066
            _fRSPEAK(136); //@line 3067
            _score(0); //@line 3068
            return 0; //@line 3069
        } else if ((label | 0) == 383) {
            _fRSPEAK(136); //@line 3072
            _score(0); //@line 3073
            return 0; //@line 3074
        }
        return 0; //@line 3076
    }

    function _action($STARTAT) {
        $STARTAT = $STARTAT | 0;
        var $$ = 0,
            $$$20 = 0,
            $$$21 = 0,
            $$0 = 0,
            $$37 = 0,
            $$lcssa = 0,
            $$lcssa237 = 0,
            $$pr163 = 0,
            $$pr166 = 0,
            $$pr166190 = 0,
            $$pr166191 = 0,
            $$pr168 = 0,
            $$pr173 = 0,
            $$pr173214 = 0,
            $$pre193 = 0,
            $$pre194 = 0,
            $$pre197 = 0,
            $$pre204 = 0,
            $0 = 0,
            $1001 = 0,
            $1004 = 0,
            $101 = 0,
            $1014 = 0,
            $1015 = 0,
            $1016 = 0,
            $102 = 0,
            $1023 = 0,
            $1026 = 0,
            $1029 = 0,
            $1039 = 0,
            $1041 = 0,
            $1044 = 0,
            $1047 = 0,
            $1054 = 0,
            $1055 = 0,
            $1060 = 0,
            $1065 = 0,
            $1066 = 0,
            $1067 = 0,
            $1068 = 0,
            $11 = 0,
            $113 = 0,
            $116 = 0,
            $12 = 0,
            $13 = 0,
            $131 = 0,
            $133 = 0,
            $134 = 0,
            $140 = 0,
            $145 = 0,
            $149 = 0,
            $15 = 0,
            $151 = 0,
            $16 = 0,
            $165 = 0,
            $170 = 0,
            $171 = 0,
            $172 = 0,
            $173 = 0,
            $175 = 0,
            $176 = 0,
            $182 = 0,
            $184 = 0,
            $190 = 0,
            $197 = 0,
            $2 = 0,
            $215 = 0,
            $217 = 0,
            $218 = 0,
            $22 = 0,
            $221 = 0,
            $229 = 0,
            $231 = 0,
            $234 = 0,
            $237 = 0,
            $238 = 0,
            $24 = 0,
            $248 = 0,
            $250 = 0,
            $252 = 0,
            $253 = 0,
            $256 = 0,
            $260 = 0,
            $265 = 0,
            $274 = 0,
            $275 = 0,
            $278 = 0,
            $286 = 0,
            $288 = 0,
            $299 = 0,
            $3 = 0,
            $30 = 0,
            $300 = 0,
            $302 = 0,
            $303 = 0,
            $314 = 0,
            $316 = 0,
            $32 = 0,
            $326 = 0,
            $327 = 0,
            $328 = 0,
            $33 = 0,
            $331 = 0,
            $333 = 0,
            $341 = 0,
            $344 = 0,
            $346 = 0,
            $347 = 0,
            $356 = 0,
            $358 = 0,
            $368 = 0,
            $369 = 0,
            $370 = 0,
            $373 = 0,
            $375 = 0,
            $382 = 0,
            $39 = 0,
            $391 = 0,
            $396 = 0,
            $397 = 0,
            $403 = 0,
            $406 = 0,
            $41 = 0,
            $412 = 0,
            $413 = 0,
            $415 = 0,
            $416 = 0,
            $42 = 0,
            $424 = 0,
            $438 = 0,
            $439 = 0,
            $44 = 0,
            $441 = 0,
            $446 = 0,
            $45 = 0,
            $454 = 0,
            $457 = 0,
            $462 = 0,
            $464 = 0,
            $470 = 0,
            $471 = 0,
            $473 = 0,
            $480 = 0,
            $481 = 0,
            $485 = 0,
            $486 = 0,
            $488 = 0,
            $489 = 0,
            $494 = 0,
            $495 = 0,
            $497 = 0,
            $5 = 0,
            $501 = 0,
            $503 = 0,
            $504 = 0,
            $506 = 0,
            $507 = 0,
            $517 = 0,
            $52 = 0,
            $524 = 0,
            $531 = 0,
            $54 = 0,
            $545 = 0,
            $55 = 0,
            $552 = 0,
            $554 = 0,
            $555 = 0,
            $561 = 0,
            $562 = 0,
            $583 = 0,
            $591 = 0,
            $599 = 0,
            $606 = 0,
            $614 = 0,
            $615 = 0,
            $617 = 0,
            $62 = 0,
            $621 = 0,
            $623 = 0,
            $624 = 0,
            $632 = 0,
            $633 = 0,
            $639 = 0,
            $643 = 0,
            $646 = 0,
            $647 = 0,
            $648 = 0,
            $649 = 0,
            $651 = 0,
            $659 = 0,
            $660 = 0,
            $67 = 0,
            $670 = 0,
            $673 = 0,
            $692 = 0,
            $695 = 0,
            $700 = 0,
            $702 = 0,
            $703 = 0,
            $705 = 0,
            $706 = 0,
            $719 = 0,
            $725 = 0,
            $73 = 0,
            $731 = 0,
            $733 = 0,
            $740 = 0,
            $748 = 0,
            $75 = 0,
            $769 = 0,
            $773 = 0,
            $775 = 0,
            $777 = 0,
            $784 = 0,
            $790 = 0,
            $793 = 0,
            $799 = 0,
            $8 = 0,
            $802 = 0,
            $804 = 0,
            $805 = 0,
            $810 = 0,
            $812 = 0,
            $814 = 0,
            $816 = 0,
            $817 = 0,
            $818 = 0,
            $82 = 0,
            $820 = 0,
            $824 = 0,
            $834 = 0,
            $835 = 0,
            $848 = 0,
            $849 = 0,
            $857 = 0,
            $862 = 0,
            $863 = 0,
            $874 = 0,
            $879 = 0,
            $880 = 0,
            $886 = 0,
            $888 = 0,
            $891 = 0,
            $899 = 0,
            $9 = 0,
            $90 = 0,
            $901 = 0,
            $914 = 0,
            $92 = 0,
            $931 = 0,
            $952 = 0,
            $966 = 0,
            $969 = 0,
            $97 = 0,
            $974 = 0,
            $975 = 0,
            $982 = 0,
            $986 = 0,
            $99 = 0,
            $990 = 0,
            $storemerge57180 = 0,
            label = 0;
        L1: do {
            if (($STARTAT | 0) == 4e3) {
                $0 = HEAP32[1614] | 0; //@line 4751
                HEAP32[3080] = $0; //@line 4752
                $2 = HEAP32[17704 + ($0 << 2) >> 2] | 0; //@line 4754
                HEAP32[3078] = $2; //@line 4755
                $3 = HEAP32[3246] | 0; //@line 4756
                $5 = HEAP32[3274] | 0; //@line 4758
                if (($3 | 0) > 0) {
                    if (($0 | 0) == ($5 | 0)) {
                        $8 = $0; //@line 4762
                    } else {
                        $$0 = 2800; //@line 4764
                        return $$0 | 0; //@line 4765
                    }
                } else {
                    $8 = $5; //@line 4768
                }
                if (($0 | 0) == ($8 | 0)) {
                    HEAP32[2864] = $3; //@line 4772
                    $9 = $3; //@line 4773
                } else {
                    $9 = HEAP32[2864] | 0; //@line 4776
                }
                if (($9 | 0) > 0) {
                    label = 14; //@line 4780
                } else {
                    L13: do {
                        switch ($0 | 0) {
                            case 29:
                            case 28:
                            case 21:
                            case 19:
                            case 17:
                            case 16:
                            case 10:
                            case 9:
                            case 3:
                            case 2:
                                {
                                    $$0 = 8e3; //@line 4785
                                    return $$0 | 0; //@line 4786
                                }
                            case 14:
                                {
                                    $552 = HEAP32[4516] | 0; //@line 4790
                                    $554 = HEAP32[6488 + ($552 << 2) >> 2] | 0; //@line 4792
                                    $555 = HEAP32[74] | 0; //@line 4793
                                    if (($554 | 0) == ($555 | 0)) {
                                        $561 = $552; //@line 4796
                                        label = 219; //@line 4797
                                        break L1;
                                    }
                                    if (($554 | 0) == -1 ? 1 : (HEAP32[6896 + ($552 << 2) >> 2] | 0) == ($555 | 0)) {
                                        $561 = $552; //@line 4806
                                        label = 219; //@line 4807
                                        break L1;
                                    } else {
                                        $$0 = 8e3; //@line 4810
                                    }
                                    return $$0 | 0; //@line 4812
                                }
                            case 13:
                                {
                                    $481 = $9; //@line 4816
                                    label = 199; //@line 4817
                                    break L1;
                                    break;
                                }
                            case 18:
                                {
                                    if (!(_fYES(22, 54, 54) | 0)) {
                                        $$0 = 2012; //@line 4825
                                        return $$0 | 0; //@line 4826
                                    }
                                    _score(1); //@line 4828
                                    $$0 = 2012; //@line 4829
                                    return $$0 | 0; //@line 4830
                                }
                            case 12:
                                {
                                    label = 198; //@line 4834
                                    break L1;
                                    break;
                                }
                            case 15:
                                {
                                    $583 = $9; //@line 4839
                                    label = 223; //@line 4840
                                    break L1;
                                    break;
                                }
                            case 23:
                                {
                                    label = 269; //@line 4845
                                    break L1;
                                    break;
                                }
                            case 26:
                                {
                                    HEAP32[3078] = 156; //@line 4850
                                    HEAP32[2210] = 1e4; //@line 4851
                                    HEAP32[3430] = 3; //@line 4852
                                    $$0 = 2011; //@line 4853
                                    return $$0 | 0; //@line 4854
                                }
                            case 25:
                                {
                                    $804 = _fVOCAB(HEAP32[3242] | 0, 3) | 0; //@line 4859
                                    HEAP32[1614] = $804; //@line 4860
                                    HEAP32[3078] = 42; //@line 4861
                                    $805 = HEAP32[3250] | 0; //@line 4862
                                    if (($805 | 0) != (1 - $804 | 0)) {
                                        if (!$805) {
                                            $$0 = 2011; //@line 4868
                                            return $$0 | 0; //@line 4869
                                        }
                                        HEAP32[3078] = 151; //@line 4871
                                        $$0 = 2011; //@line 4872
                                        return $$0 | 0; //@line 4873
                                    }
                                    HEAP32[3250] = $804; //@line 4875
                                    if (($804 | 0) != 4) {
                                        $$0 = 2009; //@line 4878
                                        return $$0 | 0; //@line 4879
                                    }
                                    HEAP32[3250] = 0; //@line 4881
                                    $810 = HEAP32[4512] | 0; //@line 4882
                                    $812 = HEAP32[6488 + ($810 << 2) >> 2] | 0; //@line 4884
                                    $814 = HEAP32[320 + ($810 << 2) >> 2] | 0; //@line 4886
                                    if (($812 | 0) == ($814 | 0)) {
                                        $$0 = 2011; //@line 4889
                                        return $$0 | 0; //@line 4890
                                    }
                                    $816 = ($812 | 0) == -1; //@line 4892
                                    $817 = HEAP32[74] | 0; //@line 4893
                                    $818 = ($817 | 0) == ($814 | 0); //@line 4894
                                    if ($816 & $818) {
                                        $$0 = 2011; //@line 4897
                                        return $$0 | 0; //@line 4898
                                    }
                                    if (!$812) {
                                        $820 = HEAP32[3320] | 0; //@line 4902
                                        if (!(HEAP32[6488 + ($820 << 2) >> 2] | 0)) {
                                            $824 = 6048 + ($820 << 2) | 0; //@line 4907
                                            if (!(HEAP32[$824 >> 2] | 0)) {
                                                HEAP32[$824 >> 2] = 1; //@line 4911
                                            }
                                        }
                                    }
                                    HEAP32[1614] = 2; //@line 4915
                                    if (($812 | 0) == ($817 | 0)) {
                                        label = 287; //@line 4918
                                    } else {
                                        if ($816 | (HEAP32[6896 + ($810 << 2) >> 2] | 0) == ($817 | 0)) {
                                            label = 287; //@line 4925
                                        }
                                    }
                                    if ((label | 0) == 287) {
                                        HEAP32[1614] = 1; //@line 4929
                                    }
                                    if ($818) {
                                        HEAP32[1614] = 0; //@line 4932
                                    }
                                    _fMOVE($810, $814); //@line 4934
                                    _fPSPEAK(HEAP32[4512] | 0, HEAP32[1614] | 0); //@line 4937
                                    $$0 = 2012; //@line 4938
                                    return $$0 | 0; //@line 4939
                                }
                            case 22:
                                {
                                    label = 268; //@line 4943
                                    break L1;
                                    break;
                                }
                            case 20:
                                {
                                    HEAP32[3078] = 98; //@line 4948
                                    HEAP32[66] = 1; //@line 4949
                                    $769 = HEAP32[2676] | 0; //@line 4951
                                    $773 = 98; //@line 4951
                                    $storemerge57180 = 1; //@line 4951
                                    while (1) {
                                        if (($storemerge57180 | 0) == ($769 | 0)) {
                                            $1066 = $769; //@line 4955
                                            $1067 = $773; //@line 4955
                                            $777 = $769; //@line 4955
                                        } else {
                                            if ((HEAP32[6488 + ($storemerge57180 << 2) >> 2] | 0) == -1) {
                                                if (($773 | 0) == 98) {
                                                    _fRSPEAK(99); //@line 4963
                                                    $775 = HEAP32[66] | 0; //@line 4965
                                                } else {
                                                    $775 = $storemerge57180; //@line 4967
                                                }
                                                HEAP32[2] = 0; //@line 4969
                                                _fPSPEAK($775, -1); //@line 4970
                                                HEAP32[2] = 1; //@line 4971
                                                HEAP32[3078] = 0; //@line 4972
                                                $1066 = HEAP32[2676] | 0; //@line 4975
                                                $1067 = 0; //@line 4975
                                                $777 = HEAP32[66] | 0; //@line 4975
                                            } else {
                                                $1066 = $769; //@line 4977
                                                $1067 = $773; //@line 4977
                                                $777 = $storemerge57180; //@line 4977
                                            }
                                        }
                                        $storemerge57180 = $777 + 1 | 0; //@line 4980
                                        HEAP32[66] = $storemerge57180; //@line 4981
                                        if (($storemerge57180 | 0) >= 101) {
                                            $$lcssa = $1066; //@line 4986
                                            break;
                                        } else {
                                            $769 = $1066; //@line 4984
                                            $773 = $1067; //@line 4984
                                        }
                                    }
                                    if ((HEAP32[6488 + ($$lcssa << 2) >> 2] | 0) != -1) {
                                        $$0 = 2011; //@line 4994
                                        return $$0 | 0; //@line 4995
                                    }
                                    HEAP32[3078] = 141; //@line 4997
                                    $$0 = 2011; //@line 4998
                                    return $$0 | 0; //@line 4999
                                }
                            case 24:
                                {
                                    label = 274; //@line 5003
                                    break L1;
                                    break;
                                }
                            case 34:
                                {
                                    label = 355; //@line 5008
                                    break L1;
                                    break;
                                }
                            case 33:
                                {
                                    HEAP32[3078] = 228; //@line 5013
                                    $1004 = HEAP32[18104 + (HEAP32[74] << 2) >> 2] | 0; //@line 5016
                                    HEAP32[1614] = $1004; //@line 5017
                                    do {
                                        if ($1004) {
                                            _fRSPEAK(_fIABS($1004) | 0); //@line 5022
                                            if ((HEAP32[1614] | 0) < 0) {
                                                $$0 = 2012; //@line 5026
                                                return $$0 | 0; //@line 5027
                                            } else {
                                                HEAP32[3078] = 0; //@line 5029
                                                break;
                                            }
                                        }
                                    } while (0);
                                    _fSETPRM(1, (HEAP32[68] | 0) - (HEAP32[16] << 1) | 0, 0); //@line 5038
                                    HEAP32[66] = 1; //@line 5039
                                    $1014 = 1; //@line 5040
                                    do {
                                        $1015 = HEAP32[6488 + ($1014 << 2) >> 2] | 0; //@line 5043
                                        $1016 = HEAP32[74] | 0; //@line 5044
                                        if (($1015 | 0) == ($1016 | 0)) {
                                            label = 349; //@line 5047
                                        } else {
                                            if (($1015 | 0) == -1 ? 1 : (HEAP32[6896 + ($1014 << 2) >> 2] | 0) == ($1016 | 0)) {
                                                label = 349; //@line 5055
                                            } else {
                                                $1039 = $1014; //@line 5057
                                            }
                                        }
                                        if ((label | 0) == 349) {
                                            label = 0; //@line 5061
                                            $1023 = HEAP32[18864 + ($1014 << 2) >> 2] | 0; //@line 5063
                                            if (!$1023) {
                                                $1039 = $1014; //@line 5066
                                            } else {
                                                $1026 = HEAP32[6048 + ($1014 << 2) >> 2] | 0; //@line 5069
                                                if (($1026 | 0) < 0) {
                                                    $1039 = $1014; //@line 5072
                                                } else {
                                                    _fPSPEAK($1014, $1026 + $1023 | 0); //@line 5075
                                                    HEAP32[3078] = 0; //@line 5076
                                                    $1029 = HEAP32[66] | 0; //@line 5077
                                                    if (($1029 | 0) == (HEAP32[3298] | 0)) {
                                                        if (((HEAP32[6048 + ($1029 << 2) >> 2] | 0) + (HEAP32[18864 + ($1029 << 2) >> 2] | 0) | 0) == 8) {
                                                            _fDSTROY($1029); //@line 5088
                                                            $1039 = HEAP32[66] | 0; //@line 5090
                                                        } else {
                                                            $1039 = $1029; //@line 5092
                                                        }
                                                    } else {
                                                        $1039 = $1029; //@line 5095
                                                    }
                                                }
                                            }
                                        }
                                        $1014 = $1039 + 1 | 0; //@line 5100
                                        HEAP32[66] = $1014; //@line 5101
                                    } while (($1014 | 0) < 101);
                                    $$0 = 2011; //@line 5106
                                    return $$0 | 0; //@line 5110
                                }
                            case 31:
                                {
                                    HEAP32[412] = 1; //@line 5114
                                    if (!((HEAP32[74] | 0) == 1 & (HEAP32[2025] | 0) == 1)) {
                                        _fRSPEAK(268); //@line 5121
                                        if (!(_fYES(200, 54, 54) | 0)) {
                                            $$0 = 2012; //@line 5125
                                            return $$0 | 0; //@line 5126
                                        }
                                    }
                                    break;
                                }
                            case 30:
                                {
                                    HEAP32[3078] = 201; //@line 5132
                                    _fRSPEAK(260); //@line 5133
                                    if (!(_fYES(200, 54, 54) | 0)) {
                                        $$0 = 2012; //@line 5137
                                        return $$0 | 0; //@line 5138
                                    } else {
                                        HEAP32[4826] = (HEAP32[4826] | 0) + 5; //@line 5142
                                        HEAP32[412] = -1; //@line 5143
                                        break L13;
                                    }
                                    break;
                                }
                            case 32:
                                {
                                    $969 = HEAP32[2872] | 0; //@line 5149
                                    if ((HEAP32[6048 + ($969 << 2) >> 2] | 0) == 2) {
                                        $982 = $2; //@line 5154
                                    } else {
                                        HEAP32[3078] = 224; //@line 5156
                                        $982 = 224; //@line 5157
                                    }
                                    $974 = HEAP32[6488 + ($969 << 2) >> 2] | 0; //@line 5160
                                    $975 = HEAP32[74] | 0; //@line 5161
                                    if (($974 | 0) != ($975 | 0)) {
                                        if (!(($974 | 0) == -1 ? 1 : (HEAP32[6896 + ($969 << 2) >> 2] | 0) == ($975 | 0))) {
                                            HEAP32[3078] = 225; //@line 5170
                                            $$0 = 2011; //@line 5171
                                            return $$0 | 0; //@line 5172
                                        }
                                    }
                                    if (($982 & -2 | 0) == 224) {
                                        $$0 = 2011; //@line 5178
                                        return $$0 | 0; //@line 5179
                                    } else {
                                        HEAP32[2864] = $969; //@line 5181
                                        $986 = $969; //@line 5182
                                        label = 341; //@line 5183
                                        break L1;
                                    }
                                    break;
                                }
                            case 8:
                                {
                                    $344 = HEAP32[1828] | 0; //@line 5189
                                    $346 = HEAP32[6488 + ($344 << 2) >> 2] | 0; //@line 5191
                                    $347 = HEAP32[74] | 0; //@line 5192
                                    if (($346 | 0) == ($347 | 0)) {
                                        label = 156; //@line 5195
                                    } else {
                                        if (($346 | 0) == -1 ? 1 : (HEAP32[6896 + ($344 << 2) >> 2] | 0) == ($347 | 0)) {
                                            label = 156; //@line 5203
                                        } else {
                                            $368 = $9; //@line 5205
                                        }
                                    }
                                    if ((label | 0) == 156) {
                                        if ((HEAP32[6048 + ($344 << 2) >> 2] | 0) == 1) {
                                            HEAP32[2864] = $344; //@line 5213
                                            $368 = $344; //@line 5214
                                        } else {
                                            $368 = $9; //@line 5216
                                        }
                                    }
                                    $356 = HEAP32[4840] | 0; //@line 5219
                                    $358 = HEAP32[6488 + ($356 << 2) >> 2] | 0; //@line 5221
                                    if (($358 | 0) == ($347 | 0)) {
                                        label = 160; //@line 5224
                                    } else {
                                        if (($358 | 0) == -1 ? 1 : (HEAP32[6896 + ($356 << 2) >> 2] | 0) == ($347 | 0)) {
                                            label = 160; //@line 5232
                                        } else {
                                            $370 = $368; //@line 5234
                                        }
                                    }
                                    if ((label | 0) == 160) {
                                        if ((HEAP32[6048 + ($356 << 2) >> 2] | 0) == 2) {
                                            $369 = ($368 * 100 | 0) + $356 | 0; //@line 5243
                                            HEAP32[2864] = $369; //@line 5244
                                            $370 = $369; //@line 5245
                                        } else {
                                            $370 = $368; //@line 5247
                                        }
                                    }
                                    if (($370 | 0) == 0 | ($370 | 0) > 100) {
                                        $$0 = 8e3; //@line 5254
                                    } else {
                                        $373 = $370; //@line 5256
                                        $375 = $356; //@line 5256
                                        label = 163; //@line 5257
                                        break L1;
                                    }
                                    return $$0 | 0; //@line 5260
                                }
                            case 7:
                                {
                                    $300 = HEAP32[1828] | 0; //@line 5264
                                    $302 = HEAP32[6488 + ($300 << 2) >> 2] | 0; //@line 5266
                                    $303 = HEAP32[74] | 0; //@line 5267
                                    if (($302 | 0) == ($303 | 0)) {
                                        label = 141; //@line 5270
                                    } else {
                                        if (($302 | 0) == -1 ? 1 : (HEAP32[6896 + ($300 << 2) >> 2] | 0) == ($303 | 0)) {
                                            label = 141; //@line 5278
                                        } else {
                                            $326 = $9; //@line 5280
                                        }
                                    }
                                    if ((label | 0) == 141) {
                                        if ((HEAP32[76] | 0) > -1 ? (HEAP32[6048 + ($300 << 2) >> 2] | 0) == 0 : 0) {
                                            HEAP32[2864] = $300; //@line 5291
                                            $326 = $300; //@line 5292
                                        } else {
                                            $326 = $9; //@line 5294
                                        }
                                    }
                                    $314 = HEAP32[4840] | 0; //@line 5297
                                    $316 = HEAP32[6488 + ($314 << 2) >> 2] | 0; //@line 5299
                                    if (($316 | 0) == ($303 | 0)) {
                                        label = 145; //@line 5302
                                    } else {
                                        if (($316 | 0) == -1 ? 1 : (HEAP32[6896 + ($314 << 2) >> 2] | 0) == ($303 | 0)) {
                                            label = 145; //@line 5310
                                        } else {
                                            $328 = $326; //@line 5312
                                        }
                                    }
                                    if ((label | 0) == 145) {
                                        if ((HEAP32[6048 + ($314 << 2) >> 2] | 0) == 1) {
                                            $327 = ($326 * 100 | 0) + $314 | 0; //@line 5321
                                            HEAP32[2864] = $327; //@line 5322
                                            $328 = $327; //@line 5323
                                        } else {
                                            $328 = $326; //@line 5325
                                        }
                                    }
                                    if (($328 | 0) == 0 | ($328 | 0) > 100) {
                                        $$0 = 8e3; //@line 5332
                                    } else {
                                        $331 = $328; //@line 5334
                                        $333 = $314; //@line 5334
                                        label = 148; //@line 5335
                                        break L1;
                                    }
                                    return $$0 | 0; //@line 5338
                                }
                            case 27:
                                {
                                    HEAP32[66] = 1; //@line 5342
                                    $11 = HEAP32[74] | 0; //@line 5343
                                    $834 = 1; //@line 5344
                                    $848 = $9; //@line 5344
                                    while (1) {
                                        $835 = HEAP32[6488 + ($834 << 2) >> 2] | 0; //@line 5347
                                        if (($835 | 0) == ($11 | 0)) {
                                            label = 294; //@line 5350
                                        } else {
                                            if (($835 | 0) == -1 ? 1 : (HEAP32[6896 + ($834 << 2) >> 2] | 0) == ($11 | 0)) {
                                                label = 294; //@line 5358
                                            } else {
                                                $1068 = $848; //@line 5360
                                            }
                                        }
                                        if ((label | 0) == 294) {
                                            label = 0; //@line 5364
                                            if (!(HEAP32[13824 + ($834 << 2) >> 2] | 0)) {
                                                $1068 = $848; //@line 5369
                                            } else {
                                                if ((HEAP32[6048 + ($834 << 2) >> 2] | 0) > -1) {
                                                    $849 = ($848 * 100 | 0) + $834 | 0; //@line 5376
                                                    HEAP32[2864] = $849; //@line 5377
                                                    $1068 = $849; //@line 5378
                                                } else {
                                                    $1068 = $848; //@line 5380
                                                }
                                            }
                                        }
                                        $834 = $834 + 1 | 0; //@line 5384
                                        if (($834 | 0) == 101) {
                                            $$lcssa237 = $1068; //@line 5387
                                            break;
                                        } else {
                                            $848 = $1068; //@line 5390
                                        }
                                    }
                                    HEAP32[66] = 101; //@line 5393
                                    if (($$lcssa237 | 0) > 100 | ($$lcssa237 | 0) == 0) {
                                        $$0 = 8e3; //@line 5398
                                        return $$0 | 0; //@line 5399
                                    }
                                    if (_fTSTBIT(HEAP32[752 + ($11 << 2) >> 2] | 0, 0) | 0) {
                                        label = 303; //@line 5406
                                        break L1;
                                    }
                                    $857 = HEAP32[1828] | 0; //@line 5409
                                    if (!(HEAP32[6048 + ($857 << 2) >> 2] | 0)) {
                                        $$0 = 8e3; //@line 5414
                                        return $$0 | 0; //@line 5415
                                    }
                                    $862 = HEAP32[6488 + ($857 << 2) >> 2] | 0; //@line 5418
                                    $863 = HEAP32[74] | 0; //@line 5419
                                    if (($862 | 0) == ($863 | 0)) {
                                        label = 303; //@line 5422
                                        break L1;
                                    }
                                    if (($862 | 0) == -1 ? 1 : (HEAP32[6896 + ($857 << 2) >> 2] | 0) == ($863 | 0)) {
                                        label = 303; //@line 5431
                                        break L1;
                                    } else {
                                        $$0 = 8e3; //@line 5434
                                    }
                                    return $$0 | 0; //@line 5436
                                }
                            case 5:
                                {
                                    $$0 = 2009; //@line 5440
                                    return $$0 | 0; //@line 5441
                                }
                            case 11:
                                {
                                    $$0 = 2011; //@line 5445
                                    return $$0 | 0; //@line 5446
                                }
                            case 1:
                                {
                                    $149 = HEAP32[74] | 0; //@line 5450
                                    $151 = HEAP32[10712 + ($149 << 2) >> 2] | 0; //@line 5452
                                    if (!$151) {
                                        $$0 = 8e3; //@line 5455
                                        return $$0 | 0; //@line 5456
                                    }
                                    if (HEAP32[11504 + ($151 << 2) >> 2] | 0) {
                                        $$0 = 8e3; //@line 5462
                                        return $$0 | 0; //@line 5463
                                    }
                                    if ((_fATDWRF($149) | 0) > 0) {
                                        $$0 = 8e3; //@line 5468
                                        return $$0 | 0; //@line 5469
                                    } else {
                                        HEAP32[2864] = HEAP32[10712 + (HEAP32[74] << 2) >> 2]; //@line 5474
                                        label = 76; //@line 5475
                                        break L1;
                                    }
                                    break;
                                }
                            case 6:
                            case 4:
                                {
                                    HEAP32[3078] = 28; //@line 5481
                                    $173 = HEAP32[4470] | 0; //@line 5482
                                    $175 = HEAP32[6488 + ($173 << 2) >> 2] | 0; //@line 5484
                                    $176 = HEAP32[74] | 0; //@line 5485
                                    if (($175 | 0) == ($176 | 0)) {
                                        label = 87; //@line 5488
                                    } else {
                                        if (($175 | 0) == -1 ? 1 : (HEAP32[6896 + ($173 << 2) >> 2] | 0) == ($176 | 0)) {
                                            label = 87; //@line 5496
                                        } else {
                                            $$pr166191 = $9; //@line 5498
                                        }
                                    }
                                    if ((label | 0) == 87) {
                                        HEAP32[2864] = $173; //@line 5502
                                        $$pr166191 = $173; //@line 5503
                                    }
                                    $182 = HEAP32[3240] | 0; //@line 5505
                                    $184 = HEAP32[6488 + ($182 << 2) >> 2] | 0; //@line 5507
                                    if (($184 | 0) == ($176 | 0)) {
                                        label = 90; //@line 5510
                                    } else {
                                        if (($184 | 0) == -1 ? 1 : (HEAP32[6896 + ($182 << 2) >> 2] | 0) == ($176 | 0)) {
                                            label = 90; //@line 5518
                                        } else {
                                            $$pr166190 = $$pr166191; //@line 5520
                                        }
                                    }
                                    if ((label | 0) == 90) {
                                        HEAP32[2864] = $182; //@line 5524
                                        $$pr166190 = $182; //@line 5525
                                    }
                                    $190 = HEAP32[3294] | 0; //@line 5527
                                    if ((HEAP32[6488 + ($190 << 2) >> 2] | 0) == ($176 | 0)) {
                                        label = 93; //@line 5532
                                    } else {
                                        if ((HEAP32[6896 + ($190 << 2) >> 2] | 0) == ($176 | 0)) {
                                            label = 93; //@line 5538
                                        } else {
                                            $$pr166 = $$pr166190; //@line 5540
                                        }
                                    }
                                    if ((label | 0) == 93) {
                                        HEAP32[2864] = $190; //@line 5544
                                        $$pr166 = $190; //@line 5545
                                    }
                                    $197 = HEAP32[3440] | 0; //@line 5547
                                    if ((HEAP32[6488 + ($197 << 2) >> 2] | 0) == ($176 | 0)) {
                                        label = 96; //@line 5552
                                    } else {
                                        if ((HEAP32[6896 + ($197 << 2) >> 2] | 0) == ($176 | 0)) {
                                            label = 96; //@line 5558
                                        } else {
                                            $$pr168 = $$pr166; //@line 5560
                                        }
                                    }
                                    if ((label | 0) == 96) {
                                        HEAP32[2864] = $197; //@line 5564
                                        $$pr168 = $197; //@line 5565
                                    }
                                    $$pre193 = HEAP32[2874] | 0; //@line 5568
                                    $$pre194 = HEAP32[6488 + ($$pre193 << 2) >> 2] | 0; //@line 5570
                                    if ($$pr168) {
                                        if (($$pre194 | 0) == ($176 | 0)) {
                                            $$0 = 8e3; //@line 5574
                                            return $$0 | 0; //@line 5575
                                        }
                                        if (($$pre194 | 0) == -1 ? 1 : (HEAP32[6896 + ($$pre193 << 2) >> 2] | 0) == ($176 | 0)) {
                                            $$0 = 8e3; //@line 5583
                                            return $$0 | 0; //@line 5584
                                        }
                                    }
                                    if (($$pre194 | 0) == ($176 | 0)) {
                                        label = 102; //@line 5589
                                    } else {
                                        if (($$pre194 | 0) == -1 ? 1 : (HEAP32[6896 + ($$pre193 << 2) >> 2] | 0) == ($176 | 0)) {
                                            label = 102; //@line 5597
                                        } else {
                                            $215 = $$pr168; //@line 5599
                                        }
                                    }
                                    if ((label | 0) == 102) {
                                        HEAP32[2864] = $$pre193; //@line 5603
                                        $215 = $$pre193; //@line 5604
                                    }
                                    if (!$215) {
                                        $$0 = 2011; //@line 5608
                                    } else {
                                        $252 = $0; //@line 5610
                                        label = 104; //@line 5611
                                        break L1;
                                    }
                                    return $$0 | 0; //@line 5614
                                }
                            default:
                                {
                                    _fBUG(23); //@line 5618
                                }
                        }
                    } while (0);
                    _fDATIME(264, 6456) | 0; //@line 5623
                    HEAP32[1614] = ((HEAP32[1614] | 0) * 650 | 0) + (HEAP32[66] | 0); //@line 5628
                    _fSAVWRD(HEAP32[412] | 0, 6456); //@line 5630
                    HEAP32[1614] = HEAP32[26]; //@line 5632
                    _fSAVWRD(0, 6456); //@line 5633
                    $931 = HEAP32[1614] | 0; //@line 5634
                    if (($931 | 0) != (HEAP32[26] | 0)) {
                        _fSETPRM(1, ($931 | 0) / 10 | 0, _fMOD($931, 10) | 0); //@line 5640
                        $966 = HEAP32[26] | 0; //@line 5641
                        _fSETPRM(3, ($966 | 0) / 10 | 0, _fMOD($966, 10) | 0); //@line 5644
                        _fRSPEAK(269); //@line 5645
                        $$0 = 2e3; //@line 5646
                        return $$0 | 0; //@line 5647
                    }
                    _fSAVWDS(8840, 8, 17864, 13104, 744, 11480, 728); //@line 5649
                    _fSAVWDS(13720, 1560, 18024, 1624, 13e3, 13272, 13200); //@line 5650
                    _fSAVWDS(7336, 304, 13264, 14272, 296, 288, 13744); //@line 5651
                    _fSAVWDS(11456, 7344, 13256, 12328, 736, 19304, 16); //@line 5652
                    _fSAVWDS(12312, 7304, 13016, 13024, 13056, 13008, 13824 + (HEAP32[3240] << 2) | 0); //@line 5655
                    _fSAVWDS(12320, 12968, 12976, 12984, 112, 272, 18864 + (HEAP32[3298] << 2) | 0); //@line 5658
                    _fSAVWDS(13824 + (HEAP32[3560] << 2) | 0, 17888, 280, 6456, 6456, 6456, 6456); //@line 5661
                    _fSAVARR(8096, HEAP32[14] | 0); //@line 5663
                    _fSAVARR(10712, HEAP32[14] | 0); //@line 5665
                    _fSAVARR(1576, 6); //@line 5666
                    _fSAVARR(1528, 6); //@line 5667
                    _fSAVARR(6896, 100); //@line 5668
                    _fSAVARR(12360, HEAP32[10] | 0); //@line 5670
                    _fSAVARR(12448, HEAP32[10] | 0); //@line 5672
                    _fSAVARR(11504, 200); //@line 5673
                    _fSAVARR(1496, 6); //@line 5674
                    _fSAVARR(6488, 100); //@line 5675
                    _fSAVARR(6048, 100); //@line 5676
                    _fSAVWRD(HEAP32[412] | 0, 6456); //@line 5678
                    if (HEAP32[1614] | 0) {
                        _fRSPEAK(270); //@line 5682
                        _exit(0); //@line 5683
                    }
                    HEAP32[1614] = HEAP32[3306]; //@line 5687
                    $952 = _fRNDVOC(3, (HEAP32[68] | 0) - (HEAP32[16] << 1) | 0) | 0; //@line 5692
                    HEAP32[68] = (HEAP32[16] << 1) + $952; //@line 5696
                    if ((HEAP32[412] | 0) > 0) {
                        $$0 = 8; //@line 5700
                        return $$0 | 0; //@line 5701
                    } else {
                        _fRSPEAK(266); //@line 5703
                        _exit(0); //@line 5704
                    }
                }
            } else if (($STARTAT | 0) == 4090) {
                label = 14; //@line 5709
            } else if (($STARTAT | 0) == 5e3) {
                $13 = HEAP32[1614] | 0; //@line 5711
                HEAP32[2864] = $13; //@line 5712
                $15 = HEAP32[6488 + ($13 << 2) >> 2] | 0; //@line 5714
                $16 = HEAP32[74] | 0; //@line 5715
                L218: do {
                    if (($15 | 0) != ($16 | 0)) {
                        if (!(($15 | 0) == -1 ? 1 : (HEAP32[6896 + ($13 << 2) >> 2] | 0) == ($16 | 0))) {
                            if (($13 | 0) == (HEAP32[3440] | 0)) {
                                if (($16 | 0) == 1 | ($16 | 0) == 4 | ($16 | 0) == 7) {
                                    $30 = HEAP32[4508] | 0; //@line 5729
                                    HEAP32[1614] = $30; //@line 5730
                                    $1065 = $30; //@line 5731
                                } else {
                                    $1065 = $13; //@line 5733
                                }
                                if (($16 + -10 | 0) >>> 0 < 5) {
                                    $32 = HEAP32[4514] | 0; //@line 5738
                                    HEAP32[1614] = $32; //@line 5739
                                    $33 = $32; //@line 5740
                                } else {
                                    $33 = $1065; //@line 5742
                                }
                                if (($33 | 0) != ($13 | 0)) {
                                    $$0 = 8; //@line 5746
                                    return $$0 | 0; //@line 5747
                                }
                            }
                            if (($13 | 0) == (HEAP32[3558] | 0)) {
                                if ((_fATDWRF($16) | 0) > 0) {
                                    break;
                                }
                                $52 = HEAP32[1614] | 0; //@line 5759
                            } else {
                                $52 = $13; //@line 5761
                            }
                            $39 = HEAP32[3454] | 0; //@line 5763
                            $41 = HEAP32[6048 + ($39 << 2) >> 2] | 0; //@line 5765
                            $42 = $41 >> 31 ^ $41; //@line 5767
                            $44 = HEAP32[3280] | 0; //@line 5769
                            $45 = Math_imul(1 - $42 | 0, $44) | 0; //@line 5770
                            if (((Math_imul((HEAP32[3282] | 0) + $44 | 0, ($42 | 0) / 2 | 0) | 0) + $45 | 0) == ($52 | 0)) {
                                $54 = HEAP32[6488 + ($39 << 2) >> 2] | 0; //@line 5779
                                $55 = HEAP32[74] | 0; //@line 5780
                                if (($54 | 0) == ($55 | 0)) {
                                    break;
                                }
                                if (($54 | 0) == -1 ? 1 : (HEAP32[6896 + ($39 << 2) >> 2] | 0) == ($55 | 0)) {
                                    break;
                                } else {
                                    $62 = $55; //@line 5793
                                }
                            } else {
                                $62 = HEAP32[74] | 0; //@line 5797
                            }
                            $67 = (_fMOD(((HEAP32[752 + ($62 << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 5804
                            $73 = Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $67) | 0; //@line 5810
                            $75 = Math_imul($73, HEAP32[3280] | 0) | 0; //@line 5812
                            $82 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 5819
                            $90 = ((Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $82) | 0) + 1 | 0) / 2 | 0; //@line 5827
                            $92 = HEAP32[3282] | 0; //@line 5829
                            if (($52 | 0) != ((Math_imul($92 + (HEAP32[3280] | 0) | 0, $90) | 0) - $75 | 0)) {
                                $97 = HEAP32[2864] | 0; //@line 5835
                                do {
                                    if (($97 | 0) == ($92 | 0)) {
                                        $99 = HEAP32[4840] | 0; //@line 5839
                                        $101 = HEAP32[6488 + ($99 << 2) >> 2] | 0; //@line 5841
                                        $102 = HEAP32[74] | 0; //@line 5842
                                        if (($101 | 0) != ($102 | 0)) {
                                            if (!(($101 | 0) == -1 ? 1 : (HEAP32[6896 + ($99 << 2) >> 2] | 0) == ($102 | 0))) {
                                                break;
                                            }
                                        }
                                        if (HEAP32[6048 + ($99 << 2) >> 2] | 0) {
                                            HEAP32[2864] = $99; //@line 5858
                                            break L218;
                                        }
                                    }
                                } while (0);
                                do {
                                    if (($97 | 0) == (HEAP32[3292] | 0)) {
                                        $113 = HEAP32[4820] | 0; //@line 5867
                                        $116 = HEAP32[74] | 0; //@line 5870
                                        if ((HEAP32[6488 + ($113 << 2) >> 2] | 0) != ($116 | 0)) {
                                            if ((HEAP32[6896 + ($113 << 2) >> 2] | 0) != ($116 | 0)) {
                                                break;
                                            }
                                        }
                                        if (HEAP32[6048 + ($113 << 2) >> 2] | 0) {
                                            HEAP32[2864] = $113; //@line 5884
                                            break L218;
                                        }
                                    }
                                } while (0);
                                if (($97 | 0) == (HEAP32[4518] | 0)) {
                                    if ((HEAP32[1834] | 0) == (HEAP32[74] | 0)) {
                                        HEAP32[1834] = -1; //@line 5896
                                        HEAP32[3078] = 116; //@line 5897
                                        $$0 = 2011; //@line 5898
                                        return $$0 | 0; //@line 5899
                                    }
                                }
                                if (($97 | 0) != (HEAP32[3444] | 0)) {
                                    label = 68; //@line 5905
                                    break L1;
                                }
                                $131 = HEAP32[3562] | 0; //@line 5908
                                $133 = HEAP32[6488 + ($131 << 2) >> 2] | 0; //@line 5910
                                $134 = HEAP32[74] | 0; //@line 5911
                                if (($133 | 0) != ($134 | 0)) {
                                    if (!(($133 | 0) == -1 ? 1 : (HEAP32[6896 + ($131 << 2) >> 2] | 0) == ($134 | 0))) {
                                        label = 68; //@line 5920
                                        break L1;
                                    }
                                }
                                HEAP32[2864] = $131; //@line 5924
                            }
                        }
                    }
                } while (0);
                $22 = HEAP32[3246] | 0; //@line 5930
                label = 33; //@line 5931
            } else {
                _fBUG(99); //@line 5933
            }
        } while (0);
        if ((label | 0) == 14) {
            $12 = HEAP32[3080] | 0; //@line 5939
            label = 15; //@line 5940
        }
        L267: while (1) {
            switch (label | 0) {
                case 15:
                    {
                        label = 0; //@line 5945
                        switch ($12 | 0) {
                            case 5:
                                {
                                    $$0 = 2009; //@line 5948
                                    label = 360; //@line 5949
                                    break L267;
                                    break;
                                }
                            case 20:
                            case 19:
                                {
                                    label = 245; //@line 5954
                                    break L267;
                                    break;
                                }
                            case 17:
                                {
                                    label = 242; //@line 5959
                                    break L267;
                                    break;
                                }
                            case 12:
                                {
                                    label = 198; //@line 5964
                                    continue L267;
                                    break;
                                }
                            case 16:
                                {
                                    label = 237; //@line 5969
                                    break L267;
                                    break;
                                }
                            case 14:
                                {
                                    $562 = HEAP32[2864] | 0; //@line 5974
                                    if (($562 | 0) == (HEAP32[4516] | 0)) {
                                        $561 = $562; //@line 5978
                                        label = 219; //@line 5979
                                        continue L267;
                                    } else {
                                        label = 221; //@line 5982
                                        break L267;
                                    }
                                    break;
                                }
                            case 23:
                                {
                                    label = 269; //@line 5988
                                    continue L267;
                                    break;
                                }
                            case 27:
                                {
                                    label = 303; //@line 5993
                                    continue L267;
                                    break;
                                }
                            case 22:
                                {
                                    label = 268; //@line 5998
                                    continue L267;
                                    break;
                                }
                            case 21:
                                {
                                    label = 267; //@line 6003
                                    break L267;
                                    break;
                                }
                            case 34:
                                {
                                    label = 355; //@line 6008
                                    continue L267;
                                    break;
                                }
                            case 28:
                                {
                                    label = 312; //@line 6013
                                    break L267;
                                    break;
                                }
                            case 32:
                                {
                                    $$pre197 = HEAP32[2872] | 0; //@line 6019
                                    if ((HEAP32[2864] | 0) == ($$pre197 | 0)) {
                                        $986 = $$pre197; //@line 6022
                                        label = 341; //@line 6023
                                        continue L267;
                                    } else {
                                        $$0 = 2011; //@line 6026
                                        label = 360; //@line 6027
                                        break L267;
                                    }
                                    break;
                                }
                            case 29:
                                {
                                    label = 321; //@line 6033
                                    break L267;
                                    break;
                                }
                            case 9:
                                {
                                    label = 173; //@line 6038
                                    break L267;
                                    break;
                                }
                            case 15:
                                {
                                    $583 = HEAP32[2864] | 0; //@line 6044
                                    label = 223; //@line 6045
                                    continue L267;
                                    break;
                                }
                            case 11:
                                {
                                    label = 21; //@line 6050
                                    break L267;
                                    break;
                                }
                            case 18:
                                {
                                    label = 22; //@line 6055
                                    break L267;
                                    break;
                                }
                            case 24:
                                {
                                    label = 23; //@line 6060
                                    break L267;
                                    break;
                                }
                            case 25:
                                {
                                    label = 24; //@line 6065
                                    break L267;
                                    break;
                                }
                            case 33:
                                {
                                    label = 28; //@line 6070
                                    break L267;
                                    break;
                                }
                            case 8:
                                {
                                    $373 = HEAP32[2864] | 0; //@line 6077
                                    $375 = HEAP32[4840] | 0; //@line 6077
                                    label = 163; //@line 6078
                                    continue L267;
                                    break;
                                }
                            case 13:
                                {
                                    $481 = HEAP32[2864] | 0; //@line 6084
                                    label = 199; //@line 6085
                                    continue L267;
                                    break;
                                }
                            case 10:
                                {
                                    label = 20; //@line 6090
                                    break L267;
                                    break;
                                }
                            case 30:
                                {
                                    label = 26; //@line 6095
                                    break L267;
                                    break;
                                }
                            case 31:
                                {
                                    label = 27; //@line 6100
                                    break L267;
                                    break;
                                }
                            case 26:
                                {
                                    label = 25; //@line 6105
                                    break L267;
                                    break;
                                }
                            case 7:
                                {
                                    $331 = HEAP32[2864] | 0; //@line 6112
                                    $333 = HEAP32[4840] | 0; //@line 6112
                                    label = 148; //@line 6113
                                    continue L267;
                                    break;
                                }
                            case 2:
                                {
                                    label = 77; //@line 6118
                                    break L267;
                                    break;
                                }
                            case 6:
                            case 4:
                                {
                                    $252 = $12; //@line 6123
                                    label = 104; //@line 6124
                                    continue L267;
                                    break;
                                }
                            case 1:
                                {
                                    label = 76; //@line 6129
                                    continue L267;
                                    break;
                                }
                            case 3:
                                {
                                    label = 78; //@line 6134
                                    break L267;
                                    break;
                                }
                            default:
                                {
                                    label = 29; //@line 6139
                                    break L267;
                                }
                        }
                        break;
                    }
                case 33:
                    {
                        label = 0; //@line 6146
                        if (($22 | 0) > 0) {
                            $$0 = 2800; //@line 6149
                            label = 360; //@line 6150
                            break L267;
                        }
                        $24 = HEAP32[3080] | 0; //@line 6154
                        break;
                    }
                case 68:
                    {
                        label = 0; //@line 6158
                        $140 = HEAP32[3080] | 0; //@line 6159
                        if (($140 | 0) == (HEAP32[3432] | 0)) {
                            if ((HEAP32[3246] | 0) < 1) {
                                $24 = $140; //@line 6166
                                break;
                            } else {
                                label = 71; //@line 6169
                                break L267;
                            }
                        } else {
                            $145 = HEAP32[3246] | 0; //@line 6175
                            if (($140 | 0) == (HEAP32[3434] | 0) & ($145 | 0) < 1) {
                                $22 = $145; //@line 6179
                                label = 33; //@line 6180
                                continue L267;
                            } else {
                                label = 71; //@line 6183
                                break L267;
                            }
                        }
                        break;
                    }
                case 76:
                    {
                        label = 0; //@line 6190
                        $$0 = _carry() | 0; //@line 6192
                        label = 360; //@line 6193
                        break L267;
                        break;
                    }
                case 104:
                    {
                        label = 0; //@line 6198
                        $217 = HEAP32[2864] | 0; //@line 6199
                        $218 = HEAP32[4470] | 0; //@line 6200
                        $221 = ($217 | 0) == (HEAP32[3240] | 0); //@line 6203
                        if (($217 | 0) == ($218 | 0) | $221) {
                            label = 122; //@line 6206
                            break L267;
                        } else {
                            label = 105; //@line 6209
                            break L267;
                        }
                        break;
                    }
                case 148:
                    {
                        label = 0; //@line 6215
                        if (($331 | 0) == ($333 | 0)) {
                            label = 152; //@line 6218
                            break L267;
                        } else {
                            label = 149; //@line 6221
                            break L267;
                        }
                        break;
                    }
                case 163:
                    {
                        label = 0; //@line 6227
                        if (($373 | 0) == ($375 | 0)) {
                            label = 167; //@line 6230
                            break L267;
                        } else {
                            label = 164; //@line 6233
                            break L267;
                        }
                        break;
                    }
                case 198:
                    {
                        label = 0; //@line 6239
                        $$0 = _attack() | 0; //@line 6241
                        label = 360; //@line 6242
                        break L267;
                        break;
                    }
                case 199:
                    {
                        label = 0; //@line 6247
                        $480 = HEAP32[3454] | 0; //@line 6248
                        if (($481 | 0) == 0 | ($481 | 0) == ($480 | 0)) {
                            $485 = HEAP32[6048 + ($480 << 2) >> 2] | 0; //@line 6254
                            $486 = $485 >> 31 ^ $485; //@line 6256
                            $488 = HEAP32[3280] | 0; //@line 6258
                            $489 = Math_imul(1 - $486 | 0, $488) | 0; //@line 6259
                            $494 = (Math_imul((HEAP32[3282] | 0) + $488 | 0, ($486 | 0) / 2 | 0) | 0) + $489 | 0; //@line 6264
                            HEAP32[2864] = $494; //@line 6265
                            $495 = $494; //@line 6266
                        } else {
                            $495 = $481; //@line 6268
                        }
                        if (!$495) {
                            $$0 = 8e3; //@line 6272
                            label = 360; //@line 6273
                            break L267;
                        }
                        $497 = 6488 + ($495 << 2) | 0; //@line 6276
                        if ((HEAP32[$497 >> 2] | 0) != -1) {
                            $$0 = 2011; //@line 6280
                            label = 360; //@line 6281
                            break L267;
                        }
                        HEAP32[3078] = 78; //@line 6284
                        $501 = ($495 | 0) == (HEAP32[3282] | 0); //@line 6286
                        $503 = ($495 | 0) == (HEAP32[3280] | 0); //@line 6288
                        if (!($501 | $503)) {
                            $$0 = 2011; //@line 6291
                            label = 360; //@line 6292
                            break L267;
                        }
                        $504 = HEAP32[4840] | 0; //@line 6295
                        $506 = HEAP32[6488 + ($504 << 2) >> 2] | 0; //@line 6297
                        $507 = HEAP32[74] | 0; //@line 6298
                        if (($506 | 0) != ($507 | 0)) {
                            if (!(($506 | 0) == -1 ? 1 : (HEAP32[6896 + ($504 << 2) >> 2] | 0) == ($507 | 0))) {
                                label = 207; //@line 6307
                                break L267;
                            }
                        }
                        if (HEAP32[6048 + ($504 << 2) >> 2] | 0) {
                            label = 207; //@line 6315
                            break L267;
                        }
                        HEAP32[2864] = $504; //@line 6318
                        label = 268; //@line 6319
                        continue L267;
                        break;
                    }
                case 219:
                    {
                        label = 0; //@line 6324
                        _fDSTROY($561); //@line 6325
                        HEAP32[3078] = 72; //@line 6326
                        $$0 = 2011; //@line 6327
                        label = 360; //@line 6328
                        break L267;
                        break;
                    }
                case 223:
                    {
                        label = 0; //@line 6333
                        if (!$583) {
                            label = 224; //@line 6336
                            break L267;
                        } else {
                            break L267;
                        }
                        break;
                    }
                case 268:
                    {
                        label = 0; //@line 6344
                        $$0 = _fill() | 0; //@line 6346
                        label = 360; //@line 6347
                        break L267;
                        break;
                    }
                case 269:
                    {
                        label = 0; //@line 6352
                        $784 = HEAP32[3562] | 0; //@line 6353
                        if (!((HEAP32[2870] | 0) != 0 ? (HEAP32[6048 + ($784 << 2) >> 2] | 0) > -1 : 0)) {
                            $$0 = 2011; //@line 6361
                            label = 360; //@line 6362
                            break L267;
                        }
                        $790 = HEAP32[74] | 0; //@line 6365
                        $$37 = ($790 | 0) == 115 ? 134 : 133; //@line 6367
                        HEAP32[4466] = $$37; //@line 6368
                        $793 = HEAP32[6488 + ($784 << 2) >> 2] | 0; //@line 6370
                        if (($793 | 0) == ($790 | 0)) {
                            label = 272; //@line 6373
                        } else {
                            if (($793 | 0) == -1 ? 1 : (HEAP32[6896 + ($784 << 2) >> 2] | 0) == ($790 | 0)) {
                                label = 272; //@line 6381
                            } else {
                                $799 = $$37; //@line 6383
                            }
                        }
                        if ((label | 0) == 272) {
                            label = 0; //@line 6387
                            HEAP32[4466] = 135; //@line 6388
                            $799 = 135; //@line 6389
                        }
                        _fRSPEAK($799); //@line 6391
                        _score(0); //@line 6392
                        label = 274; //@line 6393
                        continue L267;
                        break;
                    }
                case 274:
                    {
                        label = 0; //@line 6398
                        _score(-1); //@line 6399
                        _fSETPRM(1, HEAP32[4828] | 0, HEAP32[4714] | 0); //@line 6402
                        $802 = HEAP32[3252] | 0; //@line 6403
                        _fSETPRM(3, $802, $802); //@line 6404
                        _fRSPEAK(259); //@line 6405
                        $$0 = 2012; //@line 6406
                        label = 360; //@line 6407
                        break L267;
                        break;
                    }
                case 303:
                    {
                        label = 0; //@line 6412
                        if (_fTSTBIT(HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0, 0) | 0) {
                            label = 307; //@line 6419
                            break L267;
                        }
                        $874 = HEAP32[1828] | 0; //@line 6422
                        if (!(HEAP32[6048 + ($874 << 2) >> 2] | 0)) {
                            label = 68; //@line 6427
                            continue L267;
                        }
                        $879 = HEAP32[6488 + ($874 << 2) >> 2] | 0; //@line 6431
                        $880 = HEAP32[74] | 0; //@line 6432
                        if (($879 | 0) == ($880 | 0)) {
                            label = 307; //@line 6435
                            break L267;
                        }
                        if (($879 | 0) == -1 ? 1 : (HEAP32[6896 + ($874 << 2) >> 2] | 0) == ($880 | 0)) {
                            label = 307; //@line 6444
                            break L267;
                        } else {
                            label = 68; //@line 6447
                            continue L267;
                        }
                        break;
                    }
                case 341:
                    {
                        label = 0; //@line 6453
                        HEAP32[3078] = 223; //@line 6454
                        if ((HEAP32[6048 + ($986 << 2) >> 2] | 0) == 2) {
                            label = 342; //@line 6459
                            break L267;
                        } else {
                            $$0 = 2011; //@line 6462
                            label = 360; //@line 6463
                            break L267;
                        }
                        break;
                    }
                case 355:
                    {
                        label = 0; //@line 6469
                        $1041 = HEAP32[4822] | 0; //@line 6470
                        $1044 = HEAP32[74] | 0; //@line 6473
                        if ((HEAP32[6488 + ($1041 << 2) >> 2] | 0) == ($1044 | 0)) {
                            label = 357; //@line 6476
                            break L267;
                        } else {
                            label = 356; //@line 6479
                            break L267;
                        }
                        break;
                    }
            }
            if (!$24) {
                label = 36; //@line 6487
                break;
            } else {
                $12 = $24; //@line 6490
                label = 15; //@line 6491
            }
        }
        switch (label | 0) {
            case 20:
                {
                    $$0 = 2011; //@line 6496
                    return $$0 | 0; //@line 6497
                }
            case 21:
                {
                    $$0 = 2011; //@line 6501
                    return $$0 | 0; //@line 6502
                }
            case 22:
                {
                    $$0 = 2011; //@line 6506
                    return $$0 | 0; //@line 6507
                }
            case 23:
                {
                    $$0 = 2011; //@line 6511
                    return $$0 | 0; //@line 6512
                }
            case 24:
                {
                    $$0 = 2011; //@line 6516
                    return $$0 | 0; //@line 6517
                }
            case 25:
                {
                    $$0 = 2011; //@line 6521
                    return $$0 | 0; //@line 6522
                }
            case 26:
                {
                    $$0 = 2011; //@line 6526
                    return $$0 | 0; //@line 6527
                }
            case 27:
                {
                    $$0 = 2011; //@line 6531
                    return $$0 | 0; //@line 6532
                }
            case 28:
                {
                    $$0 = 2011; //@line 6536
                    return $$0 | 0; //@line 6537
                }
            case 29:
                {
                    _fBUG(24); //@line 6541
                    break;
                }
            case 36:
                {
                    _fSETPRM(1, HEAP32[3242] | 0, HEAP32[3244] | 0); //@line 6548
                    _fRSPEAK(255); //@line 6549
                    $$0 = 2600; //@line 6550
                    return $$0 | 0; //@line 6551
                }
            case 71:
                {
                    _fSETPRM(1, HEAP32[3242] | 0, HEAP32[3244] | 0); //@line 6557
                    _fRSPEAK(256); //@line 6558
                    $$0 = 2012; //@line 6559
                    return $$0 | 0; //@line 6560
                }
            case 77:
                {
                    $$0 = _discard(0) | 0; //@line 6565
                    return $$0 | 0; //@line 6566
                }
            case 78:
                {
                    _fSETPRM(1, HEAP32[3246] | 0, HEAP32[3248] | 0); //@line 6572
                    $165 = HEAP32[3246] | 0; //@line 6573
                    if (($165 | 0) < 1) {
                        _fSETPRM(1, HEAP32[3242] | 0, HEAP32[3244] | 0); //@line 6578
                        $$pr163 = HEAP32[3246] | 0; //@line 6579
                        if (($$pr163 | 0) > 0) {
                            $170 = $$pr163; //@line 6582
                            label = 81; //@line 6583
                        } else {
                            $171 = HEAP32[3242] | 0; //@line 6586
                        }
                    } else {
                        $170 = $165; //@line 6589
                        label = 81; //@line 6590
                    }
                    if ((label | 0) == 81) {
                        HEAP32[3242] = $170; //@line 6593
                        $171 = $170; //@line 6594
                    }
                    $172 = _fVOCAB($171, -1) | 0; //@line 6596
                    HEAP32[66] = $172; //@line 6597
                    switch ($172 | 0) {
                        case 62:
                        case 65:
                        case 71:
                        case 2025:
                        case 2034:
                            {
                                HEAP32[3246] = 0; //@line 6600
                                HEAP32[2864] = 0; //@line 6601
                                $$0 = 2630; //@line 6602
                                return $$0 | 0; //@line 6603
                            }
                        default:
                            {
                                _fRSPEAK(258); //@line 6607
                                $$0 = 2012; //@line 6608
                                return $$0 | 0; //@line 6609
                            }
                    }
                    break;
                }
            case 105:
                {
                    if (($217 | 0) == (HEAP32[3294] | 0)) {
                        HEAP32[3078] = 111; //@line 6618
                        HEAP32[3078] = (HEAP32[6048 + ($217 << 2) >> 2] | 0) == 1 ? 54 : 111; //@line 6623
                    }
                    if (($217 | 0) == (HEAP32[3296] | 0)) {
                        HEAP32[3078] = 32; //@line 6628
                    }
                    $229 = HEAP32[3442] | 0; //@line 6630
                    if (($217 | 0) == ($229 | 0)) {
                        HEAP32[3078] = 55; //@line 6633
                    }
                    $231 = HEAP32[3440] | 0; //@line 6635
                    $234 = ($217 | 0) == (HEAP32[2874] | 0); //@line 6638
                    if (($217 | 0) == ($231 | 0) | $234) {
                        HEAP32[3078] = 31; //@line 6641
                    } else {
                        if ((HEAP32[3078] | 0) != 31) {
                            $$0 = 2011; //@line 6646
                            return $$0 | 0; //@line 6647
                        }
                    }
                    $237 = HEAP32[6488 + ($229 << 2) >> 2] | 0; //@line 6651
                    $238 = HEAP32[74] | 0; //@line 6652
                    if (($237 | 0) != ($238 | 0)) {
                        if (!(($237 | 0) == -1 ? 1 : (HEAP32[6896 + ($229 << 2) >> 2] | 0) == ($238 | 0))) {
                            $$0 = 2011; //@line 6661
                            return $$0 | 0; //@line 6662
                        }
                    }
                    if (!$234) {
                        if (!(HEAP32[182] | 0)) {
                            $248 = 6048 + ($231 << 2) | 0; //@line 6669
                            $250 = (HEAP32[$248 >> 2] | 0) + 34 | 0; //@line 6671
                            HEAP32[1614] = $250; //@line 6672
                            HEAP32[$248 >> 2] = 1; //@line 6673
                            $253 = ($252 | 0) == (HEAP32[4524] | 0); //@line 6675
                            HEAP32[$248 >> 2] = $253 & 1 ^ 1; //@line 6678
                            HEAP32[1614] = ($253 ? 0 : 2) + $250; //@line 6681
                            $$0 = 2010; //@line 6682
                            return $$0 | 0; //@line 6683
                        }
                        HEAP32[1614] = 130; //@line 6685
                        if (!(HEAP32[184] | 0)) {
                            HEAP32[186] = 15; //@line 6689
                        }
                        HEAP32[184] = 1; //@line 6691
                        $$0 = 2010; //@line 6692
                        return $$0 | 0; //@line 6693
                    }
                    if (($252 | 0) == (HEAP32[4524] | 0)) {
                        $288 = 6048 + ($217 << 2) | 0; //@line 6698
                        $$$21 = ($238 | 0) != (HEAP32[320 + ($217 << 2) >> 2] | 0) ? 173 : (HEAP32[$288 >> 2] | 0) != 0 ? 34 : 172; //@line 6705
                        HEAP32[3078] = $$$21; //@line 6706
                        if (($$$21 | 0) != 172) {
                            $$0 = 2011; //@line 6709
                            return $$0 | 0; //@line 6710
                        }
                        HEAP32[$288 >> 2] = 2; //@line 6712
                        if ((HEAP32[6488 + ($217 << 2) >> 2] | 0) == -1) {
                            _fDROP($217, $238); //@line 6717
                            $299 = HEAP32[2874] | 0; //@line 6719
                        } else {
                            $299 = $217; //@line 6721
                        }
                        HEAP32[6896 + ($299 << 2) >> 2] = -1; //@line 6724
                        $$0 = 2011; //@line 6725
                        return $$0 | 0; //@line 6726
                    } else {
                        $274 = HEAP32[2676] | 0; //@line 6728
                        $275 = 6048 + ($274 << 2) | 0; //@line 6729
                        $278 = 6048 + ($217 << 2) | 0; //@line 6733
                        $$$20 = (HEAP32[$278 >> 2] | 0) == 0 ? 37 : (HEAP32[$275 >> 2] | 0) == 0 ? 41 : 171; //@line 6736
                        HEAP32[3078] = $$$20; //@line 6737
                        if (($$$20 | 0) != 171) {
                            $$0 = 2011; //@line 6740
                            return $$0 | 0; //@line 6741
                        }
                        HEAP32[$278 >> 2] = 0; //@line 6743
                        HEAP32[6896 + ($217 << 2) >> 2] = 0; //@line 6745
                        if ((HEAP32[$275 >> 2] | 0) == 3) {
                            $286 = 3; //@line 6749
                        } else {
                            HEAP32[$275 >> 2] = 2; //@line 6751
                            $286 = 2; //@line 6752
                        }
                        HEAP32[6896 + ($274 << 2) >> 2] = 2 - $286; //@line 6756
                        $$0 = 2011; //@line 6757
                        return $$0 | 0; //@line 6758
                    }
                    break;
                }
            case 122:
                {
                    $$ = $221 & 1; //@line 6763
                    HEAP32[1614] = $$; //@line 6764
                    $256 = $$ | 124; //@line 6765
                    HEAP32[3078] = $256; //@line 6766
                    if ((HEAP32[6488 + ($217 << 2) >> 2] | 0) == -1) {
                        $260 = $$ | 120; //@line 6771
                        HEAP32[3078] = $260; //@line 6772
                        $$pr173214 = $260; //@line 6773
                    } else {
                        $$pr173214 = $256; //@line 6775
                    }
                    if ((HEAP32[6488 + (HEAP32[4836] << 2) >> 2] | 0) == -1) {
                        $$pr173 = $$pr173214; //@line 6782
                    } else {
                        $265 = $$ | 122; //@line 6784
                        HEAP32[3078] = $265; //@line 6785
                        $$pr173 = $265; //@line 6786
                    }
                    if (($252 | 0) == (HEAP32[4524] | 0)) {
                        HEAP32[3078] = 61; //@line 6791
                        $$0 = 2011; //@line 6792
                        return $$0 | 0; //@line 6793
                    }
                    if (($$pr173 | 0) != 124) {
                        $$0 = 2011; //@line 6797
                        return $$0 | 0; //@line 6798
                    }
                    _fDSTROY($218); //@line 6800
                    _fDROP(HEAP32[3240] | 0, HEAP32[74] | 0); //@line 6803
                    _fDROP(HEAP32[4818] | 0, 105); //@line 6805
                    $$0 = 2011; //@line 6806
                    return $$0 | 0; //@line 6807
                }
            case 149:
                {
                    if (($331 | 0) != (HEAP32[1828] | 0)) {
                        $$0 = 2011; //@line 6814
                        return $$0 | 0; //@line 6815
                    }
                    HEAP32[3078] = 184; //@line 6817
                    if ((HEAP32[76] | 0) < 0) {
                        $$0 = 2011; //@line 6821
                        return $$0 | 0; //@line 6822
                    }
                    HEAP32[6048 + ($331 << 2) >> 2] = 1; //@line 6825
                    _fRSPEAK(39); //@line 6826
                    $$0 = (HEAP32[28] | 0) == 0 ? 2012 : 2e3; //@line 6830
                    return $$0 | 0; //@line 6831
                }
            case 152:
                {
                    HEAP32[3078] = 38; //@line 6835
                    $341 = 6048 + ($333 << 2) | 0; //@line 6836
                    if (!(HEAP32[$341 >> 2] | 0)) {
                        $$0 = 2011; //@line 6840
                        return $$0 | 0; //@line 6841
                    }
                    HEAP32[3078] = 209; //@line 6843
                    HEAP32[$341 >> 2] = 2; //@line 6844
                    $$0 = 2011; //@line 6845
                    return $$0 | 0; //@line 6846
                }
            case 164:
                {
                    if (($373 | 0) != (HEAP32[1828] | 0)) {
                        if (!(($373 | 0) == (HEAP32[4510] | 0) | ($373 | 0) == (HEAP32[4846] | 0))) {
                            $$0 = 2011; //@line 6859
                            return $$0 | 0; //@line 6860
                        }
                        HEAP32[3078] = 146; //@line 6862
                        $$0 = 2011; //@line 6863
                        return $$0 | 0; //@line 6864
                    }
                    HEAP32[6048 + ($373 << 2) >> 2] = 0; //@line 6867
                    _fRSPEAK(40); //@line 6868
                    if (_fTSTBIT(HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0, 0) | 0) {
                        $$0 = 2012; //@line 6875
                        return $$0 | 0; //@line 6876
                    }
                    $391 = HEAP32[1828] | 0; //@line 6878
                    if (HEAP32[6048 + ($391 << 2) >> 2] | 0) {
                        $396 = HEAP32[6488 + ($391 << 2) >> 2] | 0; //@line 6884
                        $397 = HEAP32[74] | 0; //@line 6885
                        if (($396 | 0) == ($397 | 0)) {
                            $$0 = 2012; //@line 6888
                            return $$0 | 0; //@line 6889
                        }
                        if (($396 | 0) == -1 ? 1 : (HEAP32[6896 + ($391 << 2) >> 2] | 0) == ($397 | 0)) {
                            $$0 = 2012; //@line 6897
                            return $$0 | 0; //@line 6898
                        }
                    }
                    _fRSPEAK(16); //@line 6901
                    $$0 = 2012; //@line 6902
                    return $$0 | 0; //@line 6903
                }
            case 167:
                {
                    $382 = 6048 + ($375 << 2) | 0; //@line 6907
                    HEAP32[$382 >> 2] = (HEAP32[$382 >> 2] | 0) / 2 | 0; //@line 6910
                    HEAP32[3078] = 210; //@line 6911
                    $$0 = 2011; //@line 6912
                    return $$0 | 0; //@line 6913
                }
            case 173:
                {
                    $403 = HEAP32[2864] | 0; //@line 6917
                    $406 = (HEAP32[6488 + ($403 << 2) >> 2] | 0) == -1; //@line 6920
                    $$pre204 = HEAP32[3444] | 0; //@line 6921
                    do {
                        if ($406) {
                            $412 = $$pre204; //@line 6924
                        } else {
                            if (($403 | 0) == ($$pre204 | 0)) {
                                if ((HEAP32[6488 + (HEAP32[3562] << 2) >> 2] | 0) == -1) {
                                    $412 = $403; //@line 6933
                                    break;
                                }
                            }
                            HEAP32[3078] = 29; //@line 6937
                            $412 = $$pre204; //@line 6938
                        }
                    } while (0);
                    if (($403 | 0) != ($412 | 0) | $406 ^ 1) {
                        $$0 = 2011; //@line 6945
                        return $$0 | 0; //@line 6946
                    }
                    $413 = HEAP32[3298] | 0; //@line 6948
                    $415 = HEAP32[6488 + ($413 << 2) >> 2] | 0; //@line 6950
                    $416 = HEAP32[74] | 0; //@line 6951
                    if (($415 | 0) == ($416 | 0)) {
                        label = 184; //@line 6954
                    } else {
                        if (!(($415 | 0) == -1 ? 1 : (HEAP32[6896 + ($413 << 2) >> 2] | 0) == ($416 | 0))) {
                            if (HEAP32[182] | 0) {
                                $$0 = 2011; //@line 6965
                                return $$0 | 0; //@line 6966
                            }
                            $424 = HEAP32[3452] | 0; //@line 6968
                            if ((HEAP32[6488 + ($424 << 2) >> 2] | 0) != ($416 | 0)) {
                                if ((HEAP32[6896 + ($424 << 2) >> 2] | 0) != ($416 | 0)) {
                                    $$0 = 2011; //@line 6977
                                    return $$0 | 0; //@line 6978
                                }
                            }
                        }
                        if (($415 | 0) == -1 ? 1 : (HEAP32[6896 + ($413 << 2) >> 2] | 0) == ($416 | 0)) {
                            label = 184; //@line 6988
                        } else {
                            $439 = HEAP32[3078] | 0; //@line 6991
                        }
                    }
                    if ((label | 0) == 184) {
                        $438 = (_fMOD(HEAP32[6048 + ($413 << 2) >> 2] | 0, 2) | 0) + 206 | 0; //@line 6998
                        HEAP32[3078] = $438; //@line 6999
                        $439 = $438; //@line 7000
                    }
                    if (($439 | 0) == 206) {
                        $441 = HEAP32[74] | 0; //@line 7004
                        if (($441 | 0) == (HEAP32[6488 + (HEAP32[2866] << 2) >> 2] | 0)) {
                            $446 = HEAP32[3450] | 0; //@line 7010
                            if ((HEAP32[6048 + ($446 << 2) >> 2] | 0) < 0) {
                                _fDROP($446, $441); //@line 7015
                                HEAP32[6048 + (HEAP32[3450] << 2) >> 2] = 0; //@line 7018
                                HEAP32[1826] = (HEAP32[1826] | 0) + -1; //@line 7021
                                HEAP32[3078] = 208; //@line 7022
                                $$0 = 2011; //@line 7023
                                return $$0 | 0; //@line 7024
                            }
                        }
                    }
                    if (HEAP32[2870] | 0) {
                        $$0 = 18999; //@line 7031
                        return $$0 | 0; //@line 7032
                    }
                    if (HEAP32[182] | 0) {
                        $$0 = 2011; //@line 7037
                        return $$0 | 0; //@line 7038
                    }
                    $454 = HEAP32[3452] | 0; //@line 7040
                    $457 = HEAP32[74] | 0; //@line 7043
                    if ((HEAP32[6488 + ($454 << 2) >> 2] | 0) != ($457 | 0)) {
                        if ((HEAP32[6896 + ($454 << 2) >> 2] | 0) != ($457 | 0)) {
                            $$0 = 2011; //@line 7050
                            return $$0 | 0; //@line 7051
                        }
                    }
                    $462 = HEAP32[3298] | 0; //@line 7054
                    $464 = HEAP32[6488 + ($462 << 2) >> 2] | 0; //@line 7056
                    if (($464 | 0) == ($457 | 0)) {
                        label = 195; //@line 7059
                    } else {
                        if (($464 | 0) == -1 ? 1 : (HEAP32[6896 + ($462 << 2) >> 2] | 0) == ($457 | 0)) {
                            label = 195; //@line 7067
                        } else {
                            $471 = $454; //@line 7069
                        }
                    }
                    if ((label | 0) == 195) {
                        _fRSPEAK($439); //@line 7073
                        $471 = HEAP32[3452] | 0; //@line 7075
                    }
                    $470 = 6048 + ($471 << 2) | 0; //@line 7077
                    $473 = 1 - (HEAP32[$470 >> 2] | 0) | 0; //@line 7079
                    HEAP32[$470 >> 2] = $473; //@line 7080
                    _fPSPEAK($471, 2 - $473 | 0); //@line 7082
                    $$0 = 2012; //@line 7083
                    return $$0 | 0; //@line 7084
                }
            case 207:
                {
                    HEAP32[6048 + ($480 << 2) >> 2] = 1; //@line 7089
                    HEAP32[$497 >> 2] = 0; //@line 7090
                    HEAP32[3078] = 77; //@line 7091
                    $517 = HEAP32[3292] | 0; //@line 7092
                    if ((HEAP32[6488 + ($517 << 2) >> 2] | 0) != ($507 | 0)) {
                        if ((HEAP32[6896 + ($517 << 2) >> 2] | 0) != ($507 | 0)) {
                            $524 = HEAP32[3294] | 0; //@line 7101
                            if ((HEAP32[6488 + ($524 << 2) >> 2] | 0) != ($507 | 0)) {
                                if ((HEAP32[6896 + ($524 << 2) >> 2] | 0) != ($507 | 0)) {
                                    $$0 = 2011; //@line 7110
                                    return $$0 | 0; //@line 7111
                                }
                            }
                        }
                    }
                    $531 = HEAP32[3294] | 0; //@line 7116
                    if ((HEAP32[6488 + ($531 << 2) >> 2] | 0) != ($507 | 0)) {
                        if ((HEAP32[6896 + ($531 << 2) >> 2] | 0) != ($507 | 0)) {
                            HEAP32[3078] = 112; //@line 7125
                            if (!$503) {
                                $$0 = 2011; //@line 7127
                                return $$0 | 0; //@line 7128
                            }
                            _fPSPEAK($517, (HEAP32[6048 + ($517 << 2) >> 2] | 0) + 3 | 0); //@line 7133
                            $545 = _fMOD((HEAP32[6048 + (HEAP32[3292] << 2) >> 2] | 0) + 1 | 0, 3) | 0; //@line 7138
                            HEAP32[6048 + (HEAP32[3292] << 2) >> 2] = $545; //@line 7141
                            HEAP32[6048 + (HEAP32[4820] << 2) >> 2] = $545; //@line 7144
                            HEAP32[1614] = HEAP32[3306]; //@line 7146
                            $$0 = 8; //@line 7147
                            return $$0 | 0; //@line 7148
                        }
                    }
                    HEAP32[6048 + ($531 << 2) >> 2] = $501 & 1; //@line 7154
                    HEAP32[3078] = $501 ? 114 : 113; //@line 7155
                    $$0 = 2011; //@line 7156
                    return $$0 | 0; //@line 7157
                }
            case 221:
                {
                    if (!(($562 | 0) == (HEAP32[3298] | 0) | ($562 | 0) == (HEAP32[3446] | 0) | ($562 | 0) == (HEAP32[4470] | 0) | ($562 | 0) == (HEAP32[3240] | 0) | ($562 | 0) == (HEAP32[3558] | 0) | ($562 | 0) == (HEAP32[4510] | 0) | ($562 | 0) == (HEAP32[3320] | 0) | ($562 | 0) == (HEAP32[2676] | 0) | ($562 | 0) == (HEAP32[3448] | 0))) {
                        $$0 = 2011; //@line 7188
                        return $$0 | 0; //@line 7189
                    }
                    HEAP32[3078] = 71; //@line 7191
                    $$0 = 2011; //@line 7192
                    return $$0 | 0; //@line 7193
                }
            case 224:
                {
                    $591 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 7203
                    $599 = Math_imul(Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $591) | 0, HEAP32[3280] | 0) | 0; //@line 7211
                    $606 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 7218
                    $614 = ((Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $606) | 0) + 1 | 0) / 2 | 0; //@line 7226
                    $615 = HEAP32[3280] | 0; //@line 7227
                    $617 = (HEAP32[3282] | 0) + $615 | 0; //@line 7229
                    if (((Math_imul($617, $614) | 0) - $599 | 0) != ($615 | 0)) {
                        $621 = HEAP32[3454] | 0; //@line 7234
                        $623 = HEAP32[6048 + ($621 << 2) >> 2] | 0; //@line 7236
                        $624 = $623 >> 31 ^ $623; //@line 7238
                        if (((Math_imul(1 - $624 | 0, $615) | 0) + (Math_imul(($624 | 0) / 2 | 0, $617) | 0) | 0) != ($615 | 0)) {
                            $$0 = 8e3; //@line 7246
                            return $$0 | 0; //@line 7247
                        }
                        $632 = HEAP32[6488 + ($621 << 2) >> 2] | 0; //@line 7250
                        $633 = HEAP32[74] | 0; //@line 7251
                        if (($632 | 0) != ($633 | 0)) {
                            if (!(($632 | 0) == -1 ? 1 : (HEAP32[6896 + ($621 << 2) >> 2] | 0) == ($633 | 0))) {
                                $$0 = 8e3; //@line 7260
                                return $$0 | 0; //@line 7261
                            }
                        }
                    }
                    break;
                }
            case 237:
                {
                    $673 = HEAP32[2864] | 0; //@line 7268
                    if (($673 | 0) != (HEAP32[1828] | 0)) {
                        HEAP32[3078] = 76; //@line 7272
                    }
                    if (($673 | 0) != (HEAP32[4840] | 0)) {
                        $$0 = 2011; //@line 7277
                        return $$0 | 0; //@line 7278
                    }
                    if ((HEAP32[6048 + ($673 << 2) >> 2] | 0) != 2) {
                        $$0 = 2011; //@line 7284
                        return $$0 | 0; //@line 7285
                    }
                    _fDSTROY($673); //@line 7287
                    _fDROP(HEAP32[4462] | 0, HEAP32[74] | 0); //@line 7290
                    HEAP32[6048 + (HEAP32[4462] << 2) >> 2] = 1; //@line 7293
                    HEAP32[1826] = (HEAP32[1826] | 0) + -1; //@line 7296
                    _fDROP(HEAP32[4468] | 0, HEAP32[74] | 0); //@line 7299
                    HEAP32[3078] = 216; //@line 7300
                    $$0 = 2011; //@line 7301
                    return $$0 | 0; //@line 7302
                }
            case 242:
                {
                    $$0 = _throw() | 0; //@line 7307
                    return $$0 | 0; //@line 7308
                }
            case 245:
                {
                    $692 = HEAP32[2864] | 0; //@line 7312
                    $695 = HEAP32[74] | 0; //@line 7315
                    do {
                        if ((HEAP32[6488 + ($692 << 2) >> 2] | 0) == ($695 | 0)) {
                            label = 253; //@line 7319
                        } else {
                            if ((HEAP32[6896 + ($692 << 2) >> 2] | 0) == ($695 | 0)) {
                                label = 253; //@line 7325
                            } else {
                                $700 = HEAP32[3454] | 0; //@line 7327
                                $702 = HEAP32[6048 + ($700 << 2) >> 2] | 0; //@line 7329
                                $703 = $702 >> 31 ^ $702; //@line 7331
                                $705 = HEAP32[3280] | 0; //@line 7333
                                $706 = Math_imul(1 - $703 | 0, $705) | 0; //@line 7334
                                if (((Math_imul((HEAP32[3282] | 0) + $705 | 0, ($703 | 0) / 2 | 0) | 0) + $706 | 0) == ($692 | 0)) {
                                    if ((HEAP32[6488 + ($700 << 2) >> 2] | 0) == ($695 | 0)) {
                                        label = 253; //@line 7346
                                        break;
                                    }
                                    if ((HEAP32[6896 + ($700 << 2) >> 2] | 0) == ($695 | 0)) {
                                        label = 253; //@line 7353
                                        break;
                                    }
                                }
                                $719 = HEAP32[1614] | 0; //@line 7357
                                $725 = (_fMOD(((HEAP32[752 + ($695 << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 7363
                                $731 = Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $725) | 0; //@line 7369
                                $733 = Math_imul($731, HEAP32[3280] | 0) | 0; //@line 7371
                                $740 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 7378
                                $748 = ((Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $740) | 0) + 1 | 0) / 2 | 0; //@line 7386
                                if (($719 | 0) == ((Math_imul((HEAP32[3282] | 0) + (HEAP32[3280] | 0) | 0, $748) | 0) - $733 | 0)) {
                                    label = 253; //@line 7394
                                } else {
                                    if ((HEAP32[2864] | 0) == (HEAP32[3558] | 0)) {
                                        if ((_fATDWRF(HEAP32[74] | 0) | 0) > 0) {
                                            label = 253; //@line 7404
                                        }
                                    }
                                }
                            }
                        }
                    } while (0);
                    if ((label | 0) == 253) {
                        HEAP32[3078] = 94; //@line 7412
                    }
                    if (HEAP32[2870] | 0) {
                        HEAP32[3078] = 138; //@line 7417
                    }
                    if ((HEAP32[6488 + (HEAP32[2864] << 2) >> 2] | 0) != -1) {
                        $$0 = 2011; //@line 7424
                        return $$0 | 0; //@line 7425
                    }
                    HEAP32[3078] = 24; //@line 7427
                    $$0 = 2011; //@line 7428
                    return $$0 | 0; //@line 7429
                }
            case 267:
                {
                    $$0 = _feed() | 0; //@line 7434
                    return $$0 | 0; //@line 7435
                }
            case 307:
                {
                    $886 = HEAP32[2864] | 0; //@line 7439
                    $888 = HEAP32[13824 + ($886 << 2) >> 2] | 0; //@line 7441
                    if (!$888) {
                        $$0 = 2011; //@line 7444
                        return $$0 | 0; //@line 7445
                    }
                    $891 = HEAP32[6048 + ($886 << 2) >> 2] | 0; //@line 7448
                    if (($891 | 0) < 0) {
                        $$0 = 2011; //@line 7451
                        return $$0 | 0; //@line 7452
                    }
                    if (($886 | 0) != (HEAP32[3240] | 0) | (HEAP32[4472] | 0) != 0) {
                        _fPSPEAK($886, $891 + $888 | 0); //@line 7461
                        $$0 = 2012; //@line 7462
                        return $$0 | 0; //@line 7463
                    } else {
                        HEAP32[4472] = _fYES(192, 193, 54) | 0; //@line 7466
                        $$0 = 2012; //@line 7467
                        return $$0 | 0; //@line 7468
                    }
                    break;
                }
            case 312:
                {
                    $899 = HEAP32[2864] | 0; //@line 7473
                    $901 = ($899 | 0) == (HEAP32[3566] | 0); //@line 7475
                    if ($901) {
                        HEAP32[3078] = 148; //@line 7477
                    }
                    if (($899 | 0) == (HEAP32[4842] | 0)) {
                        if (!(HEAP32[6048 + ($899 << 2) >> 2] | 0)) {
                            HEAP32[3078] = 198; //@line 7486
                            if ((HEAP32[6488 + ($899 << 2) >> 2] | 0) == -1) {
                                _fDROP($899, HEAP32[74] | 0); //@line 7492
                                $914 = HEAP32[4842] | 0; //@line 7494
                            } else {
                                $914 = $899; //@line 7496
                            }
                            HEAP32[6048 + ($914 << 2) >> 2] = 2; //@line 7499
                            HEAP32[6896 + ($914 << 2) >> 2] = -1; //@line 7501
                            $$0 = 2011; //@line 7502
                            return $$0 | 0; //@line 7503
                        }
                    }
                    if (!($901 & (HEAP32[2870] | 0) != 0)) {
                        $$0 = 2011; //@line 7510
                        return $$0 | 0; //@line 7511
                    }
                    HEAP32[3078] = 197; //@line 7513
                    $$0 = 18999; //@line 7514
                    return $$0 | 0; //@line 7515
                }
            case 321:
                {
                    if (!((HEAP32[2870] | 0) != 0 ? (HEAP32[2864] | 0) == (HEAP32[3558] | 0) : 0)) {
                        $$0 = 2011; //@line 7526
                        return $$0 | 0; //@line 7527
                    }
                    HEAP32[3078] = 199; //@line 7529
                    $$0 = 18999; //@line 7530
                    return $$0 | 0; //@line 7531
                }
            case 342:
                {
                    HEAP32[1836] = HEAP32[3314]; //@line 7536
                    $990 = HEAP32[74] | 0; //@line 7537
                    HEAP32[3314] = $990; //@line 7538
                    HEAP32[72] = (HEAP32[6896 + ($986 << 2) >> 2] | 0) + (HEAP32[6488 + ($986 << 2) >> 2] | 0) - $990; //@line 7545
                    $1001 = (HEAP32[6048 + (HEAP32[78] << 2) >> 2] >> 31) + 227 | 0; //@line 7550
                    HEAP32[3078] = $1001; //@line 7551
                    _fRSPEAK($1001); //@line 7552
                    $$0 = 2; //@line 7553
                    return $$0 | 0; //@line 7554
                }
            case 356:
                {
                    $1047 = HEAP32[6896 + ($1041 << 2) >> 2] | 0; //@line 7559
                    if (($1047 | 0) == ($1044 | 0) | ($1044 | 0) == ($1047 + -1 | 0)) {
                        label = 357; //@line 7565
                    } else {
                        $$0 = 2011; //@line 7567
                        return $$0 | 0; //@line 7568
                    }
                    break;
                }
            case 360:
                {
                    return $$0 | 0; //@line 7573
                }
        }
        if ((label | 0) == 357) {
            _fPSPEAK($1041, (HEAP32[6048 + ($1041 << 2) >> 2] | 0) + 1 | 0); //@line 7581
            $1054 = HEAP32[4822] | 0; //@line 7582
            $1055 = 6048 + ($1054 << 2) | 0; //@line 7583
            HEAP32[$1055 >> 2] = 1 - (HEAP32[$1055 >> 2] | 0); //@line 7586
            $1060 = HEAP32[74] | 0; //@line 7589
            if ((HEAP32[6488 + ($1054 << 2) >> 2] | 0) == ($1060 | 0)) {
                $$0 = 2012; //@line 7592
                return $$0 | 0; //@line 7593
            }
            if ((HEAP32[6896 + ($1054 << 2) >> 2] | 0) == ($1060 | 0)) {
                $$0 = 2012; //@line 7599
                return $$0 | 0; //@line 7600
            }
            HEAP32[1836] = $1060; //@line 7602
            HEAP32[72] = 0; //@line 7603
            _fRSPEAK(241); //@line 7604
            $$0 = 2; //@line 7605
            return $$0 | 0; //@line 7606
        }
        $639 = HEAP32[2864] | 0; //@line 7608
        if (($639 | 0) == (HEAP32[4464] | 0)) {
            _fDSTROY($639); //@line 7612
            HEAP32[6048 + (HEAP32[4510] << 2) >> 2] = 2; //@line 7615
            $670 = 18864 + (HEAP32[3298] << 2) | 0; //@line 7617
            HEAP32[$670 >> 2] = (HEAP32[$670 >> 2] | 0) + 3; //@line 7620
            HEAP32[3078] = 240; //@line 7621
            $$0 = 2011; //@line 7622
            return $$0 | 0; //@line 7623
        }
        $643 = HEAP32[3280] | 0; //@line 7626
        if (!(($639 | 0) == 0 | ($639 | 0) == ($643 | 0))) {
            HEAP32[3078] = 110; //@line 7630
            $$0 = 2011; //@line 7631
            return $$0 | 0; //@line 7632
        }
        if ((HEAP32[3078] | 0) == 110) {
            $$0 = 2011; //@line 7637
            return $$0 | 0; //@line 7638
        }
        $646 = HEAP32[3454] | 0; //@line 7640
        $647 = 6048 + ($646 << 2) | 0; //@line 7641
        $648 = HEAP32[$647 >> 2] | 0; //@line 7642
        $649 = $648 >> 31 ^ $648; //@line 7644
        $651 = Math_imul(1 - $649 | 0, $643) | 0; //@line 7646
        if (((Math_imul((HEAP32[3282] | 0) + $643 | 0, ($649 | 0) / 2 | 0) | 0) + $651 | 0) != ($643 | 0)) {
            $$0 = 2011; //@line 7654
            return $$0 | 0; //@line 7655
        }
        $659 = HEAP32[6488 + ($646 << 2) >> 2] | 0; //@line 7658
        $660 = HEAP32[74] | 0; //@line 7659
        if (($659 | 0) != ($660 | 0)) {
            if (!(($659 | 0) == -1 ? 1 : (HEAP32[6896 + ($646 << 2) >> 2] | 0) == ($660 | 0))) {
                $$0 = 2011; //@line 7668
                return $$0 | 0; //@line 7669
            }
        }
        HEAP32[$647 >> 2] = 1; //@line 7672
        HEAP32[6488 + ($643 << 2) >> 2] = 0; //@line 7674
        HEAP32[3078] = 74; //@line 7675
        $$0 = 2011; //@line 7676
        return $$0 | 0; //@line 7677
    }

    function _malloc($bytes) {
        $bytes = $bytes | 0;
        var $$3$i = 0,
            $$lcssa = 0,
            $$lcssa211 = 0,
            $$lcssa215 = 0,
            $$lcssa216 = 0,
            $$lcssa217 = 0,
            $$lcssa219 = 0,
            $$lcssa222 = 0,
            $$lcssa224 = 0,
            $$lcssa226 = 0,
            $$lcssa228 = 0,
            $$lcssa230 = 0,
            $$lcssa232 = 0,
            $$pre$phi$i$iZ2D = 0,
            $$pre$phi$i23$iZ2D = 0,
            $$pre$phi$i26Z2D = 0,
            $$pre$phi$iZ2D = 0,
            $$pre$phi58$i$iZ2D = 0,
            $$pre$phiZ2D = 0,
            $$rsize$3$i = 0,
            $$sum$i19$i = 0,
            $$sum2$i21$i = 0,
            $$sum3132$i$i = 0,
            $$sum67$i$i = 0,
            $100 = 0,
            $1000 = 0,
            $1002 = 0,
            $1005 = 0,
            $1010 = 0,
            $1016 = 0,
            $1019 = 0,
            $1020 = 0,
            $1027 = 0,
            $1039 = 0,
            $1044 = 0,
            $1051 = 0,
            $1052 = 0,
            $1053 = 0,
            $106 = 0,
            $1060 = 0,
            $1062 = 0,
            $1063 = 0,
            $110 = 0,
            $112 = 0,
            $113 = 0,
            $115 = 0,
            $117 = 0,
            $119 = 0,
            $12 = 0,
            $121 = 0,
            $123 = 0,
            $125 = 0,
            $127 = 0,
            $13 = 0,
            $132 = 0,
            $138 = 0,
            $14 = 0,
            $141 = 0,
            $144 = 0,
            $147 = 0,
            $148 = 0,
            $149 = 0,
            $15 = 0,
            $151 = 0,
            $154 = 0,
            $156 = 0,
            $159 = 0,
            $16 = 0,
            $161 = 0,
            $164 = 0,
            $167 = 0,
            $168 = 0,
            $17 = 0,
            $170 = 0,
            $171 = 0,
            $173 = 0,
            $174 = 0,
            $176 = 0,
            $177 = 0,
            $18 = 0,
            $182 = 0,
            $183 = 0,
            $192 = 0,
            $197 = 0,
            $201 = 0,
            $207 = 0,
            $214 = 0,
            $217 = 0,
            $225 = 0,
            $227 = 0,
            $228 = 0,
            $229 = 0,
            $230 = 0,
            $231 = 0,
            $232 = 0,
            $236 = 0,
            $237 = 0,
            $245 = 0,
            $246 = 0,
            $247 = 0,
            $249 = 0,
            $25 = 0,
            $250 = 0,
            $255 = 0,
            $256 = 0,
            $259 = 0,
            $261 = 0,
            $264 = 0,
            $269 = 0,
            $276 = 0,
            $28 = 0,
            $285 = 0,
            $286 = 0,
            $290 = 0,
            $300 = 0,
            $303 = 0,
            $307 = 0,
            $309 = 0,
            $31 = 0,
            $310 = 0,
            $312 = 0,
            $314 = 0,
            $316 = 0,
            $318 = 0,
            $320 = 0,
            $322 = 0,
            $324 = 0,
            $334 = 0,
            $335 = 0,
            $337 = 0,
            $34 = 0,
            $346 = 0,
            $348 = 0,
            $351 = 0,
            $353 = 0,
            $356 = 0,
            $358 = 0,
            $361 = 0,
            $364 = 0,
            $365 = 0,
            $367 = 0,
            $368 = 0,
            $370 = 0,
            $371 = 0,
            $373 = 0,
            $374 = 0,
            $379 = 0,
            $38 = 0,
            $380 = 0,
            $389 = 0,
            $394 = 0,
            $398 = 0,
            $4 = 0,
            $404 = 0,
            $41 = 0,
            $411 = 0,
            $414 = 0,
            $422 = 0,
            $424 = 0,
            $425 = 0,
            $426 = 0,
            $427 = 0,
            $431 = 0,
            $432 = 0,
            $438 = 0,
            $44 = 0,
            $443 = 0,
            $444 = 0,
            $447 = 0,
            $449 = 0,
            $452 = 0,
            $457 = 0,
            $46 = 0,
            $463 = 0,
            $467 = 0,
            $468 = 0,
            $47 = 0,
            $475 = 0,
            $487 = 0,
            $49 = 0,
            $492 = 0,
            $499 = 0,
            $5 = 0,
            $500 = 0,
            $501 = 0,
            $509 = 0,
            $51 = 0,
            $511 = 0,
            $512 = 0,
            $522 = 0,
            $526 = 0,
            $528 = 0,
            $529 = 0,
            $53 = 0,
            $538 = 0,
            $545 = 0,
            $546 = 0,
            $547 = 0,
            $548 = 0,
            $549 = 0,
            $55 = 0,
            $550 = 0,
            $552 = 0,
            $554 = 0,
            $555 = 0,
            $561 = 0,
            $563 = 0,
            $565 = 0,
            $57 = 0,
            $572 = 0,
            $574 = 0,
            $575 = 0,
            $576 = 0,
            $584 = 0,
            $585 = 0,
            $588 = 0,
            $59 = 0,
            $592 = 0,
            $593 = 0,
            $596 = 0,
            $598 = 0,
            $6 = 0,
            $602 = 0,
            $604 = 0,
            $608 = 0,
            $61 = 0,
            $612 = 0,
            $621 = 0,
            $622 = 0,
            $628 = 0,
            $630 = 0,
            $632 = 0,
            $635 = 0,
            $637 = 0,
            $64 = 0,
            $641 = 0,
            $642 = 0,
            $648 = 0,
            $65 = 0,
            $653 = 0,
            $655 = 0,
            $66 = 0,
            $660 = 0,
            $661 = 0,
            $662 = 0,
            $67 = 0,
            $676 = 0,
            $678 = 0,
            $68 = 0,
            $683 = 0,
            $685 = 0,
            $69 = 0,
            $690 = 0,
            $692 = 0,
            $7 = 0,
            $70 = 0,
            $702 = 0,
            $706 = 0,
            $711 = 0,
            $714 = 0,
            $719 = 0,
            $720 = 0,
            $724 = 0,
            $725 = 0,
            $730 = 0,
            $736 = 0,
            $741 = 0,
            $744 = 0,
            $745 = 0,
            $748 = 0,
            $750 = 0,
            $752 = 0,
            $755 = 0,
            $766 = 0,
            $77 = 0,
            $771 = 0,
            $773 = 0,
            $776 = 0,
            $778 = 0,
            $781 = 0,
            $784 = 0,
            $785 = 0,
            $787 = 0,
            $788 = 0,
            $790 = 0,
            $791 = 0,
            $793 = 0,
            $794 = 0,
            $799 = 0,
            $80 = 0,
            $800 = 0,
            $809 = 0,
            $81 = 0,
            $814 = 0,
            $818 = 0,
            $824 = 0,
            $832 = 0,
            $838 = 0,
            $84 = 0,
            $840 = 0,
            $841 = 0,
            $842 = 0,
            $843 = 0,
            $847 = 0,
            $848 = 0,
            $854 = 0,
            $859 = 0,
            $860 = 0,
            $863 = 0,
            $865 = 0,
            $868 = 0,
            $873 = 0,
            $879 = 0,
            $88 = 0,
            $883 = 0,
            $884 = 0,
            $891 = 0,
            $90 = 0,
            $903 = 0,
            $908 = 0,
            $91 = 0,
            $915 = 0,
            $916 = 0,
            $917 = 0,
            $92 = 0,
            $925 = 0,
            $928 = 0,
            $929 = 0,
            $93 = 0,
            $934 = 0,
            $94 = 0,
            $940 = 0,
            $941 = 0,
            $943 = 0,
            $944 = 0,
            $947 = 0,
            $95 = 0,
            $952 = 0,
            $954 = 0,
            $959 = 0,
            $960 = 0,
            $964 = 0,
            $970 = 0,
            $975 = 0,
            $977 = 0,
            $978 = 0,
            $979 = 0,
            $980 = 0,
            $984 = 0,
            $985 = 0,
            $99 = 0,
            $991 = 0,
            $996 = 0,
            $997 = 0,
            $F$0$i$i = 0,
            $F1$0$i = 0,
            $F4$0 = 0,
            $F4$0$i$i = 0,
            $F5$0$i = 0,
            $I1$0$i$i = 0,
            $I7$0$i = 0,
            $I7$0$i$i = 0,
            $K12$029$i = 0,
            $K2$07$i$i = 0,
            $K8$051$i$i = 0,
            $R$0$i = 0,
            $R$0$i$i = 0,
            $R$0$i$i$lcssa = 0,
            $R$0$i$lcssa = 0,
            $R$0$i18 = 0,
            $R$0$i18$lcssa = 0,
            $R$1$i = 0,
            $R$1$i$i = 0,
            $R$1$i20 = 0,
            $RP$0$i = 0,
            $RP$0$i$i = 0,
            $RP$0$i$i$lcssa = 0,
            $RP$0$i$lcssa = 0,
            $RP$0$i17 = 0,
            $RP$0$i17$lcssa = 0,
            $T$0$lcssa$i = 0,
            $T$0$lcssa$i$i = 0,
            $T$0$lcssa$i25$i = 0,
            $T$028$i = 0,
            $T$028$i$lcssa = 0,
            $T$050$i$i = 0,
            $T$050$i$i$lcssa = 0,
            $T$06$i$i = 0,
            $T$06$i$i$lcssa = 0,
            $br$0$ph$i = 0,
            $i$02$i$i = 0,
            $idx$0$i = 0,
            $mem$0 = 0,
            $nb$0 = 0,
            $oldfirst$0$i$i = 0,
            $qsize$0$i$i = 0,
            $rsize$0$i = 0,
            $rsize$0$i$lcssa = 0,
            $rsize$0$i15 = 0,
            $rsize$1$i = 0,
            $rsize$2$i = 0,
            $rsize$3$lcssa$i = 0,
            $rsize$331$i = 0,
            $rst$0$i = 0,
            $rst$1$i = 0,
            $sizebits$0$i = 0,
            $sp$0$i$i = 0,
            $sp$0$i$i$i = 0,
            $sp$084$i = 0,
            $sp$084$i$lcssa = 0,
            $sp$183$i = 0,
            $sp$183$i$lcssa = 0,
            $ssize$0$$i = 0,
            $ssize$0$i = 0,
            $ssize$1$ph$i = 0,
            $ssize$2$i = 0,
            $t$0$i = 0,
            $t$0$i14 = 0,
            $t$1$i = 0,
            $t$2$ph$i = 0,
            $t$2$v$3$i = 0,
            $t$230$i = 0,
            $tbase$255$i = 0,
            $tsize$0$ph$i = 0,
            $tsize$0323944$i = 0,
            $tsize$1$i = 0,
            $tsize$254$i = 0,
            $v$0$i = 0,
            $v$0$i$lcssa = 0,
            $v$0$i16 = 0,
            $v$1$i = 0,
            $v$2$i = 0,
            $v$3$lcssa$i = 0,
            $v$3$ph$i = 0,
            $v$332$i = 0,
            label = 0,
            $964$looptemp = 0;
        do {
            if ($bytes >>> 0 < 245) {
                $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8; //@line 15019
                $5 = $4 >>> 3; //@line 15020
                $6 = HEAP32[5226] | 0; //@line 15021
                $7 = $6 >>> $5; //@line 15022
                if ($7 & 3) {
                    $12 = ($7 & 1 ^ 1) + $5 | 0; //@line 15028
                    $13 = $12 << 1; //@line 15029
                    $14 = 20944 + ($13 << 2) | 0; //@line 15030
                    $15 = 20944 + ($13 + 2 << 2) | 0; //@line 15032
                    $16 = HEAP32[$15 >> 2] | 0; //@line 15033
                    $17 = $16 + 8 | 0; //@line 15034
                    $18 = HEAP32[$17 >> 2] | 0; //@line 15035
                    do {
                        if (($14 | 0) == ($18 | 0)) {
                            HEAP32[5226] = $6 & ~(1 << $12); //@line 15042
                        } else {
                            if ($18 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                _abort(); //@line 15047
                            }
                            $25 = $18 + 12 | 0; //@line 15050
                            if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
                                HEAP32[$25 >> 2] = $14; //@line 15054
                                HEAP32[$15 >> 2] = $18; //@line 15055
                                break;
                            } else {
                                _abort(); //@line 15058
                            }
                        }
                    } while (0);
                    $28 = $12 << 3; //@line 15063
                    HEAP32[$16 + 4 >> 2] = $28 | 3; //@line 15066
                    $31 = $16 + ($28 | 4) | 0; //@line 15068
                    HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1; //@line 15071
                    $mem$0 = $17; //@line 15072
                    return $mem$0 | 0; //@line 15073
                }
                $34 = HEAP32[5228] | 0; //@line 15075
                if ($4 >>> 0 > $34 >>> 0) {
                    if ($7) {
                        $38 = 2 << $5; //@line 15081
                        $41 = $7 << $5 & ($38 | 0 - $38); //@line 15084
                        $44 = ($41 & 0 - $41) + -1 | 0; //@line 15087
                        $46 = $44 >>> 12 & 16; //@line 15089
                        $47 = $44 >>> $46; //@line 15090
                        $49 = $47 >>> 5 & 8; //@line 15092
                        $51 = $47 >>> $49; //@line 15094
                        $53 = $51 >>> 2 & 4; //@line 15096
                        $55 = $51 >>> $53; //@line 15098
                        $57 = $55 >>> 1 & 2; //@line 15100
                        $59 = $55 >>> $57; //@line 15102
                        $61 = $59 >>> 1 & 1; //@line 15104
                        $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0; //@line 15107
                        $65 = $64 << 1; //@line 15108
                        $66 = 20944 + ($65 << 2) | 0; //@line 15109
                        $67 = 20944 + ($65 + 2 << 2) | 0; //@line 15111
                        $68 = HEAP32[$67 >> 2] | 0; //@line 15112
                        $69 = $68 + 8 | 0; //@line 15113
                        $70 = HEAP32[$69 >> 2] | 0; //@line 15114
                        do {
                            if (($66 | 0) == ($70 | 0)) {
                                HEAP32[5226] = $6 & ~(1 << $64); //@line 15121
                                $88 = $34; //@line 15122
                            } else {
                                if ($70 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                    _abort(); //@line 15127
                                }
                                $77 = $70 + 12 | 0; //@line 15130
                                if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
                                    HEAP32[$77 >> 2] = $66; //@line 15134
                                    HEAP32[$67 >> 2] = $70; //@line 15135
                                    $88 = HEAP32[5228] | 0; //@line 15137
                                    break;
                                } else {
                                    _abort(); //@line 15140
                                }
                            }
                        } while (0);
                        $80 = $64 << 3; //@line 15145
                        $81 = $80 - $4 | 0; //@line 15146
                        HEAP32[$68 + 4 >> 2] = $4 | 3; //@line 15149
                        $84 = $68 + $4 | 0; //@line 15150
                        HEAP32[$68 + ($4 | 4) >> 2] = $81 | 1; //@line 15154
                        HEAP32[$68 + $80 >> 2] = $81; //@line 15156
                        if ($88) {
                            $90 = HEAP32[5231] | 0; //@line 15159
                            $91 = $88 >>> 3; //@line 15160
                            $92 = $91 << 1; //@line 15161
                            $93 = 20944 + ($92 << 2) | 0; //@line 15162
                            $94 = HEAP32[5226] | 0; //@line 15163
                            $95 = 1 << $91; //@line 15164
                            if (!($94 & $95)) {
                                HEAP32[5226] = $94 | $95; //@line 15169
                                $$pre$phiZ2D = 20944 + ($92 + 2 << 2) | 0; //@line 15172
                                $F4$0 = $93; //@line 15172
                            } else {
                                $99 = 20944 + ($92 + 2 << 2) | 0; //@line 15175
                                $100 = HEAP32[$99 >> 2] | 0; //@line 15176
                                if ($100 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                    _abort(); //@line 15180
                                } else {
                                    $$pre$phiZ2D = $99; //@line 15183
                                    $F4$0 = $100; //@line 15183
                                }
                            }
                            HEAP32[$$pre$phiZ2D >> 2] = $90; //@line 15186
                            HEAP32[$F4$0 + 12 >> 2] = $90; //@line 15188
                            HEAP32[$90 + 8 >> 2] = $F4$0; //@line 15190
                            HEAP32[$90 + 12 >> 2] = $93; //@line 15192
                        }
                        HEAP32[5228] = $81; //@line 15194
                        HEAP32[5231] = $84; //@line 15195
                        $mem$0 = $69; //@line 15196
                        return $mem$0 | 0; //@line 15197
                    }
                    $106 = HEAP32[5227] | 0; //@line 15199
                    if (!$106) {
                        $nb$0 = $4; //@line 15202
                    } else {
                        $110 = ($106 & 0 - $106) + -1 | 0; //@line 15206
                        $112 = $110 >>> 12 & 16; //@line 15208
                        $113 = $110 >>> $112; //@line 15209
                        $115 = $113 >>> 5 & 8; //@line 15211
                        $117 = $113 >>> $115; //@line 15213
                        $119 = $117 >>> 2 & 4; //@line 15215
                        $121 = $117 >>> $119; //@line 15217
                        $123 = $121 >>> 1 & 2; //@line 15219
                        $125 = $121 >>> $123; //@line 15221
                        $127 = $125 >>> 1 & 1; //@line 15223
                        $132 = HEAP32[21208 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0; //@line 15228
                        $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $4 | 0; //@line 15233
                        $t$0$i = $132; //@line 15233
                        $v$0$i = $132; //@line 15233
                        while (1) {
                            $138 = HEAP32[$t$0$i + 16 >> 2] | 0; //@line 15236
                            if (!$138) {
                                $141 = HEAP32[$t$0$i + 20 >> 2] | 0; //@line 15240
                                if (!$141) {
                                    $rsize$0$i$lcssa = $rsize$0$i; //@line 15243
                                    $v$0$i$lcssa = $v$0$i; //@line 15243
                                    break;
                                } else {
                                    $144 = $141; //@line 15246
                                }
                            } else {
                                $144 = $138; //@line 15249
                            }
                            $147 = (HEAP32[$144 + 4 >> 2] & -8) - $4 | 0; //@line 15254
                            $148 = $147 >>> 0 < $rsize$0$i >>> 0; //@line 15255
                            $rsize$0$i = $148 ? $147 : $rsize$0$i; //@line 15258
                            $t$0$i = $144; //@line 15258
                            $v$0$i = $148 ? $144 : $v$0$i; //@line 15258
                        }
                        $149 = HEAP32[5230] | 0; //@line 15260
                        if ($v$0$i$lcssa >>> 0 < $149 >>> 0) {
                            _abort(); //@line 15263
                        }
                        $151 = $v$0$i$lcssa + $4 | 0; //@line 15266
                        if ($v$0$i$lcssa >>> 0 >= $151 >>> 0) {
                            _abort(); //@line 15269
                        }
                        $154 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0; //@line 15273
                        $156 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0; //@line 15275
                        do {
                            if (($156 | 0) == ($v$0$i$lcssa | 0)) {
                                $167 = $v$0$i$lcssa + 20 | 0; //@line 15279
                                $168 = HEAP32[$167 >> 2] | 0; //@line 15280
                                if (!$168) {
                                    $170 = $v$0$i$lcssa + 16 | 0; //@line 15283
                                    $171 = HEAP32[$170 >> 2] | 0; //@line 15284
                                    if (!$171) {
                                        $R$1$i = 0; //@line 15287
                                        break;
                                    } else {
                                        $R$0$i = $171; //@line 15290
                                        $RP$0$i = $170; //@line 15290
                                    }
                                } else {
                                    $R$0$i = $168; //@line 15293
                                    $RP$0$i = $167; //@line 15293
                                }
                                while (1) {
                                    $173 = $R$0$i + 20 | 0; //@line 15296
                                    $174 = HEAP32[$173 >> 2] | 0; //@line 15297
                                    if ($174) {
                                        $R$0$i = $174; //@line 15300
                                        $RP$0$i = $173; //@line 15300
                                        continue;
                                    }
                                    $176 = $R$0$i + 16 | 0; //@line 15303
                                    $177 = HEAP32[$176 >> 2] | 0; //@line 15304
                                    if (!$177) {
                                        $R$0$i$lcssa = $R$0$i; //@line 15307
                                        $RP$0$i$lcssa = $RP$0$i; //@line 15307
                                        break;
                                    } else {
                                        $R$0$i = $177; //@line 15310
                                        $RP$0$i = $176; //@line 15310
                                    }
                                }
                                if ($RP$0$i$lcssa >>> 0 < $149 >>> 0) {
                                    _abort(); //@line 15315
                                } else {
                                    HEAP32[$RP$0$i$lcssa >> 2] = 0; //@line 15318
                                    $R$1$i = $R$0$i$lcssa; //@line 15319
                                    break;
                                }
                            } else {
                                $159 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0; //@line 15324
                                if ($159 >>> 0 < $149 >>> 0) {
                                    _abort(); //@line 15327
                                }
                                $161 = $159 + 12 | 0; //@line 15330
                                if ((HEAP32[$161 >> 2] | 0) != ($v$0$i$lcssa | 0)) {
                                    _abort(); //@line 15334
                                }
                                $164 = $156 + 8 | 0; //@line 15337
                                if ((HEAP32[$164 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
                                    HEAP32[$161 >> 2] = $156; //@line 15341
                                    HEAP32[$164 >> 2] = $159; //@line 15342
                                    $R$1$i = $156; //@line 15343
                                    break;
                                } else {
                                    _abort(); //@line 15346
                                }
                            }
                        } while (0);
                        do {
                            if ($154) {
                                $182 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0; //@line 15355
                                $183 = 21208 + ($182 << 2) | 0; //@line 15356
                                if (($v$0$i$lcssa | 0) == (HEAP32[$183 >> 2] | 0)) {
                                    HEAP32[$183 >> 2] = $R$1$i; //@line 15360
                                    if (!$R$1$i) {
                                        HEAP32[5227] = HEAP32[5227] & ~(1 << $182); //@line 15367
                                        break;
                                    }
                                } else {
                                    if ($154 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                        _abort(); //@line 15374
                                    }
                                    $192 = $154 + 16 | 0; //@line 15377
                                    if ((HEAP32[$192 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
                                        HEAP32[$192 >> 2] = $R$1$i; //@line 15381
                                    } else {
                                        HEAP32[$154 + 20 >> 2] = $R$1$i; //@line 15384
                                    }
                                    if (!$R$1$i) {
                                        break;
                                    }
                                }
                                $197 = HEAP32[5230] | 0; //@line 15391
                                if ($R$1$i >>> 0 < $197 >>> 0) {
                                    _abort(); //@line 15394
                                }
                                HEAP32[$R$1$i + 24 >> 2] = $154; //@line 15398
                                $201 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0; //@line 15400
                                do {
                                    if ($201) {
                                        if ($201 >>> 0 < $197 >>> 0) {
                                            _abort(); //@line 15406
                                        } else {
                                            HEAP32[$R$1$i + 16 >> 2] = $201; //@line 15410
                                            HEAP32[$201 + 24 >> 2] = $R$1$i; //@line 15412
                                            break;
                                        }
                                    }
                                } while (0);
                                $207 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0; //@line 15418
                                if ($207) {
                                    if ($207 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                        _abort(); //@line 15424
                                    } else {
                                        HEAP32[$R$1$i + 20 >> 2] = $207; //@line 15428
                                        HEAP32[$207 + 24 >> 2] = $R$1$i; //@line 15430
                                        break;
                                    }
                                }
                            }
                        } while (0);
                        if ($rsize$0$i$lcssa >>> 0 < 16) {
                            $214 = $rsize$0$i$lcssa + $4 | 0; //@line 15438
                            HEAP32[$v$0$i$lcssa + 4 >> 2] = $214 | 3; //@line 15441
                            $217 = $v$0$i$lcssa + ($214 + 4) | 0; //@line 15443
                            HEAP32[$217 >> 2] = HEAP32[$217 >> 2] | 1; //@line 15446
                        } else {
                            HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3; //@line 15450
                            HEAP32[$v$0$i$lcssa + ($4 | 4) >> 2] = $rsize$0$i$lcssa | 1; //@line 15454
                            HEAP32[$v$0$i$lcssa + ($rsize$0$i$lcssa + $4) >> 2] = $rsize$0$i$lcssa; //@line 15457
                            $225 = HEAP32[5228] | 0; //@line 15458
                            if ($225) {
                                $227 = HEAP32[5231] | 0; //@line 15461
                                $228 = $225 >>> 3; //@line 15462
                                $229 = $228 << 1; //@line 15463
                                $230 = 20944 + ($229 << 2) | 0; //@line 15464
                                $231 = HEAP32[5226] | 0; //@line 15465
                                $232 = 1 << $228; //@line 15466
                                if (!($231 & $232)) {
                                    HEAP32[5226] = $231 | $232; //@line 15471
                                    $$pre$phi$iZ2D = 20944 + ($229 + 2 << 2) | 0; //@line 15474
                                    $F1$0$i = $230; //@line 15474
                                } else {
                                    $236 = 20944 + ($229 + 2 << 2) | 0; //@line 15477
                                    $237 = HEAP32[$236 >> 2] | 0; //@line 15478
                                    if ($237 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                        _abort(); //@line 15482
                                    } else {
                                        $$pre$phi$iZ2D = $236; //@line 15485
                                        $F1$0$i = $237; //@line 15485
                                    }
                                }
                                HEAP32[$$pre$phi$iZ2D >> 2] = $227; //@line 15488
                                HEAP32[$F1$0$i + 12 >> 2] = $227; //@line 15490
                                HEAP32[$227 + 8 >> 2] = $F1$0$i; //@line 15492
                                HEAP32[$227 + 12 >> 2] = $230; //@line 15494
                            }
                            HEAP32[5228] = $rsize$0$i$lcssa; //@line 15496
                            HEAP32[5231] = $151; //@line 15497
                        }
                        $mem$0 = $v$0$i$lcssa + 8 | 0; //@line 15500
                        return $mem$0 | 0; //@line 15501
                    }
                } else {
                    $nb$0 = $4; //@line 15504
                }
            } else {
                if ($bytes >>> 0 > 4294967231) {
                    $nb$0 = -1; //@line 15509
                } else {
                    $245 = $bytes + 11 | 0; //@line 15511
                    $246 = $245 & -8; //@line 15512
                    $247 = HEAP32[5227] | 0; //@line 15513
                    if (!$247) {
                        $nb$0 = $246; //@line 15516
                    } else {
                        $249 = 0 - $246 | 0; //@line 15518
                        $250 = $245 >>> 8; //@line 15519
                        if (!$250) {
                            $idx$0$i = 0; //@line 15522
                        } else {
                            if ($246 >>> 0 > 16777215) {
                                $idx$0$i = 31; //@line 15526
                            } else {
                                $255 = ($250 + 1048320 | 0) >>> 16 & 8; //@line 15530
                                $256 = $250 << $255; //@line 15531
                                $259 = ($256 + 520192 | 0) >>> 16 & 4; //@line 15534
                                $261 = $256 << $259; //@line 15536
                                $264 = ($261 + 245760 | 0) >>> 16 & 2; //@line 15539
                                $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0; //@line 15544
                                $idx$0$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1; //@line 15550
                            }
                        }
                        $276 = HEAP32[21208 + ($idx$0$i << 2) >> 2] | 0; //@line 15554
                        L123: do {
                            if (!$276) {
                                $rsize$2$i = $249; //@line 15558
                                $t$1$i = 0; //@line 15558
                                $v$2$i = 0; //@line 15558
                                label = 86; //@line 15559
                            } else {
                                $rsize$0$i15 = $249; //@line 15566
                                $rst$0$i = 0; //@line 15566
                                $sizebits$0$i = $246 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0); //@line 15566
                                $t$0$i14 = $276; //@line 15566
                                $v$0$i16 = 0; //@line 15566
                                while (1) {
                                    $285 = HEAP32[$t$0$i14 + 4 >> 2] & -8; //@line 15570
                                    $286 = $285 - $246 | 0; //@line 15571
                                    if ($286 >>> 0 < $rsize$0$i15 >>> 0) {
                                        if (($285 | 0) == ($246 | 0)) {
                                            $rsize$331$i = $286; //@line 15576
                                            $t$230$i = $t$0$i14; //@line 15576
                                            $v$332$i = $t$0$i14; //@line 15576
                                            label = 90; //@line 15577
                                            break L123;
                                        } else {
                                            $rsize$1$i = $286; //@line 15580
                                            $v$1$i = $t$0$i14; //@line 15580
                                        }
                                    } else {
                                        $rsize$1$i = $rsize$0$i15; //@line 15583
                                        $v$1$i = $v$0$i16; //@line 15583
                                    }
                                    $290 = HEAP32[$t$0$i14 + 20 >> 2] | 0; //@line 15586
                                    $t$0$i14 = HEAP32[$t$0$i14 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0; //@line 15589
                                    $rst$1$i = ($290 | 0) == 0 | ($290 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $290; //@line 15593
                                    if (!$t$0$i14) {
                                        $rsize$2$i = $rsize$1$i; //@line 15597
                                        $t$1$i = $rst$1$i; //@line 15597
                                        $v$2$i = $v$1$i; //@line 15597
                                        label = 86; //@line 15598
                                        break;
                                    } else {
                                        $rsize$0$i15 = $rsize$1$i; //@line 15601
                                        $rst$0$i = $rst$1$i; //@line 15601
                                        $sizebits$0$i = $sizebits$0$i << 1; //@line 15601
                                        $v$0$i16 = $v$1$i; //@line 15601
                                    }
                                }
                            }
                        } while (0);
                        if ((label | 0) == 86) {
                            if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
                                $300 = 2 << $idx$0$i; //@line 15611
                                $303 = $247 & ($300 | 0 - $300); //@line 15614
                                if (!$303) {
                                    $nb$0 = $246; //@line 15617
                                    break;
                                }
                                $307 = ($303 & 0 - $303) + -1 | 0; //@line 15622
                                $309 = $307 >>> 12 & 16; //@line 15624
                                $310 = $307 >>> $309; //@line 15625
                                $312 = $310 >>> 5 & 8; //@line 15627
                                $314 = $310 >>> $312; //@line 15629
                                $316 = $314 >>> 2 & 4; //@line 15631
                                $318 = $314 >>> $316; //@line 15633
                                $320 = $318 >>> 1 & 2; //@line 15635
                                $322 = $318 >>> $320; //@line 15637
                                $324 = $322 >>> 1 & 1; //@line 15639
                                $t$2$ph$i = HEAP32[21208 + (($312 | $309 | $316 | $320 | $324) + ($322 >>> $324) << 2) >> 2] | 0; //@line 15645
                                $v$3$ph$i = 0; //@line 15645
                            } else {
                                $t$2$ph$i = $t$1$i; //@line 15647
                                $v$3$ph$i = $v$2$i; //@line 15647
                            }
                            if (!$t$2$ph$i) {
                                $rsize$3$lcssa$i = $rsize$2$i; //@line 15651
                                $v$3$lcssa$i = $v$3$ph$i; //@line 15651
                            } else {
                                $rsize$331$i = $rsize$2$i; //@line 15653
                                $t$230$i = $t$2$ph$i; //@line 15653
                                $v$332$i = $v$3$ph$i; //@line 15653
                                label = 90; //@line 15654
                            }
                        }
                        if ((label | 0) == 90) {
                            while (1) {
                                label = 0; //@line 15659
                                $334 = (HEAP32[$t$230$i + 4 >> 2] & -8) - $246 | 0; //@line 15663
                                $335 = $334 >>> 0 < $rsize$331$i >>> 0; //@line 15664
                                $$rsize$3$i = $335 ? $334 : $rsize$331$i; //@line 15665
                                $t$2$v$3$i = $335 ? $t$230$i : $v$332$i; //@line 15666
                                $337 = HEAP32[$t$230$i + 16 >> 2] | 0; //@line 15668
                                if ($337) {
                                    $rsize$331$i = $$rsize$3$i; //@line 15671
                                    $t$230$i = $337; //@line 15671
                                    $v$332$i = $t$2$v$3$i; //@line 15671
                                    label = 90; //@line 15672
                                    continue;
                                }
                                $t$230$i = HEAP32[$t$230$i + 20 >> 2] | 0; //@line 15676
                                if (!$t$230$i) {
                                    $rsize$3$lcssa$i = $$rsize$3$i; //@line 15679
                                    $v$3$lcssa$i = $t$2$v$3$i; //@line 15679
                                    break;
                                } else {
                                    $rsize$331$i = $$rsize$3$i; //@line 15682
                                    $v$332$i = $t$2$v$3$i; //@line 15682
                                    label = 90; //@line 15683
                                }
                            }
                        }
                        if (!$v$3$lcssa$i) {
                            $nb$0 = $246; //@line 15689
                        } else {
                            if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[5228] | 0) - $246 | 0) >>> 0) {
                                $346 = HEAP32[5230] | 0; //@line 15695
                                if ($v$3$lcssa$i >>> 0 < $346 >>> 0) {
                                    _abort(); //@line 15698
                                }
                                $348 = $v$3$lcssa$i + $246 | 0; //@line 15701
                                if ($v$3$lcssa$i >>> 0 >= $348 >>> 0) {
                                    _abort(); //@line 15704
                                }
                                $351 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0; //@line 15708
                                $353 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0; //@line 15710
                                do {
                                    if (($353 | 0) == ($v$3$lcssa$i | 0)) {
                                        $364 = $v$3$lcssa$i + 20 | 0; //@line 15714
                                        $365 = HEAP32[$364 >> 2] | 0; //@line 15715
                                        if (!$365) {
                                            $367 = $v$3$lcssa$i + 16 | 0; //@line 15718
                                            $368 = HEAP32[$367 >> 2] | 0; //@line 15719
                                            if (!$368) {
                                                $R$1$i20 = 0; //@line 15722
                                                break;
                                            } else {
                                                $R$0$i18 = $368; //@line 15725
                                                $RP$0$i17 = $367; //@line 15725
                                            }
                                        } else {
                                            $R$0$i18 = $365; //@line 15728
                                            $RP$0$i17 = $364; //@line 15728
                                        }
                                        while (1) {
                                            $370 = $R$0$i18 + 20 | 0; //@line 15731
                                            $371 = HEAP32[$370 >> 2] | 0; //@line 15732
                                            if ($371) {
                                                $R$0$i18 = $371; //@line 15735
                                                $RP$0$i17 = $370; //@line 15735
                                                continue;
                                            }
                                            $373 = $R$0$i18 + 16 | 0; //@line 15738
                                            $374 = HEAP32[$373 >> 2] | 0; //@line 15739
                                            if (!$374) {
                                                $R$0$i18$lcssa = $R$0$i18; //@line 15742
                                                $RP$0$i17$lcssa = $RP$0$i17; //@line 15742
                                                break;
                                            } else {
                                                $R$0$i18 = $374; //@line 15745
                                                $RP$0$i17 = $373; //@line 15745
                                            }
                                        }
                                        if ($RP$0$i17$lcssa >>> 0 < $346 >>> 0) {
                                            _abort(); //@line 15750
                                        } else {
                                            HEAP32[$RP$0$i17$lcssa >> 2] = 0; //@line 15753
                                            $R$1$i20 = $R$0$i18$lcssa; //@line 15754
                                            break;
                                        }
                                    } else {
                                        $356 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0; //@line 15759
                                        if ($356 >>> 0 < $346 >>> 0) {
                                            _abort(); //@line 15762
                                        }
                                        $358 = $356 + 12 | 0; //@line 15765
                                        if ((HEAP32[$358 >> 2] | 0) != ($v$3$lcssa$i | 0)) {
                                            _abort(); //@line 15769
                                        }
                                        $361 = $353 + 8 | 0; //@line 15772
                                        if ((HEAP32[$361 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
                                            HEAP32[$358 >> 2] = $353; //@line 15776
                                            HEAP32[$361 >> 2] = $356; //@line 15777
                                            $R$1$i20 = $353; //@line 15778
                                            break;
                                        } else {
                                            _abort(); //@line 15781
                                        }
                                    }
                                } while (0);
                                do {
                                    if ($351) {
                                        $379 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0; //@line 15790
                                        $380 = 21208 + ($379 << 2) | 0; //@line 15791
                                        if (($v$3$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
                                            HEAP32[$380 >> 2] = $R$1$i20; //@line 15795
                                            if (!$R$1$i20) {
                                                HEAP32[5227] = HEAP32[5227] & ~(1 << $379); //@line 15802
                                                break;
                                            }
                                        } else {
                                            if ($351 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                                _abort(); //@line 15809
                                            }
                                            $389 = $351 + 16 | 0; //@line 15812
                                            if ((HEAP32[$389 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
                                                HEAP32[$389 >> 2] = $R$1$i20; //@line 15816
                                            } else {
                                                HEAP32[$351 + 20 >> 2] = $R$1$i20; //@line 15819
                                            }
                                            if (!$R$1$i20) {
                                                break;
                                            }
                                        }
                                        $394 = HEAP32[5230] | 0; //@line 15826
                                        if ($R$1$i20 >>> 0 < $394 >>> 0) {
                                            _abort(); //@line 15829
                                        }
                                        HEAP32[$R$1$i20 + 24 >> 2] = $351; //@line 15833
                                        $398 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0; //@line 15835
                                        do {
                                            if ($398) {
                                                if ($398 >>> 0 < $394 >>> 0) {
                                                    _abort(); //@line 15841
                                                } else {
                                                    HEAP32[$R$1$i20 + 16 >> 2] = $398; //@line 15845
                                                    HEAP32[$398 + 24 >> 2] = $R$1$i20; //@line 15847
                                                    break;
                                                }
                                            }
                                        } while (0);
                                        $404 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0; //@line 15853
                                        if ($404) {
                                            if ($404 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                                _abort(); //@line 15859
                                            } else {
                                                HEAP32[$R$1$i20 + 20 >> 2] = $404; //@line 15863
                                                HEAP32[$404 + 24 >> 2] = $R$1$i20; //@line 15865
                                                break;
                                            }
                                        }
                                    }
                                } while (0);
                                L199: do {
                                    if ($rsize$3$lcssa$i >>> 0 < 16) {
                                        $411 = $rsize$3$lcssa$i + $246 | 0; //@line 15874
                                        HEAP32[$v$3$lcssa$i + 4 >> 2] = $411 | 3; //@line 15877
                                        $414 = $v$3$lcssa$i + ($411 + 4) | 0; //@line 15879
                                        HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1; //@line 15882
                                    } else {
                                        HEAP32[$v$3$lcssa$i + 4 >> 2] = $246 | 3; //@line 15886
                                        HEAP32[$v$3$lcssa$i + ($246 | 4) >> 2] = $rsize$3$lcssa$i | 1; //@line 15890
                                        HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $246) >> 2] = $rsize$3$lcssa$i; //@line 15893
                                        $422 = $rsize$3$lcssa$i >>> 3; //@line 15894
                                        if ($rsize$3$lcssa$i >>> 0 < 256) {
                                            $424 = $422 << 1; //@line 15897
                                            $425 = 20944 + ($424 << 2) | 0; //@line 15898
                                            $426 = HEAP32[5226] | 0; //@line 15899
                                            $427 = 1 << $422; //@line 15900
                                            if (!($426 & $427)) {
                                                HEAP32[5226] = $426 | $427; //@line 15905
                                                $$pre$phi$i26Z2D = 20944 + ($424 + 2 << 2) | 0; //@line 15908
                                                $F5$0$i = $425; //@line 15908
                                            } else {
                                                $431 = 20944 + ($424 + 2 << 2) | 0; //@line 15911
                                                $432 = HEAP32[$431 >> 2] | 0; //@line 15912
                                                if ($432 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                                    _abort(); //@line 15916
                                                } else {
                                                    $$pre$phi$i26Z2D = $431; //@line 15919
                                                    $F5$0$i = $432; //@line 15919
                                                }
                                            }
                                            HEAP32[$$pre$phi$i26Z2D >> 2] = $348; //@line 15922
                                            HEAP32[$F5$0$i + 12 >> 2] = $348; //@line 15924
                                            HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $F5$0$i; //@line 15927
                                            HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $425; //@line 15930
                                            break;
                                        }
                                        $438 = $rsize$3$lcssa$i >>> 8; //@line 15933
                                        if (!$438) {
                                            $I7$0$i = 0; //@line 15936
                                        } else {
                                            if ($rsize$3$lcssa$i >>> 0 > 16777215) {
                                                $I7$0$i = 31; //@line 15940
                                            } else {
                                                $443 = ($438 + 1048320 | 0) >>> 16 & 8; //@line 15944
                                                $444 = $438 << $443; //@line 15945
                                                $447 = ($444 + 520192 | 0) >>> 16 & 4; //@line 15948
                                                $449 = $444 << $447; //@line 15950
                                                $452 = ($449 + 245760 | 0) >>> 16 & 2; //@line 15953
                                                $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0; //@line 15958
                                                $I7$0$i = $rsize$3$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1; //@line 15964
                                            }
                                        }
                                        $463 = 21208 + ($I7$0$i << 2) | 0; //@line 15967
                                        HEAP32[$v$3$lcssa$i + ($246 + 28) >> 2] = $I7$0$i; //@line 15970
                                        HEAP32[$v$3$lcssa$i + ($246 + 20) >> 2] = 0; //@line 15975
                                        HEAP32[$v$3$lcssa$i + ($246 + 16) >> 2] = 0; //@line 15976
                                        $467 = HEAP32[5227] | 0; //@line 15977
                                        $468 = 1 << $I7$0$i; //@line 15978
                                        if (!($467 & $468)) {
                                            HEAP32[5227] = $467 | $468; //@line 15983
                                            HEAP32[$463 >> 2] = $348; //@line 15984
                                            HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $463; //@line 15987
                                            HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348; //@line 15990
                                            HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348; //@line 15993
                                            break;
                                        }
                                        $475 = HEAP32[$463 >> 2] | 0; //@line 15996
                                        L217: do {
                                            if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
                                                $T$0$lcssa$i = $475; //@line 16003
                                            } else {
                                                $K12$029$i = $rsize$3$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0); //@line 16010
                                                $T$028$i = $475; //@line 16010
                                                while (1) {
                                                    $492 = $T$028$i + 16 + ($K12$029$i >>> 31 << 2) | 0; //@line 16013
                                                    $487 = HEAP32[$492 >> 2] | 0; //@line 16014
                                                    if (!$487) {
                                                        $$lcssa232 = $492; //@line 16017
                                                        $T$028$i$lcssa = $T$028$i; //@line 16017
                                                        break;
                                                    }
                                                    if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
                                                        $T$0$lcssa$i = $487; //@line 16026
                                                        break L217;
                                                    } else {
                                                        $K12$029$i = $K12$029$i << 1; //@line 16029
                                                        $T$028$i = $487; //@line 16029
                                                    }
                                                }
                                                if ($$lcssa232 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                                    _abort(); //@line 16035
                                                } else {
                                                    HEAP32[$$lcssa232 >> 2] = $348; //@line 16038
                                                    HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $T$028$i$lcssa; //@line 16041
                                                    HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348; //@line 16044
                                                    HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348; //@line 16047
                                                    break L199;
                                                }
                                            }
                                        } while (0);
                                        $499 = $T$0$lcssa$i + 8 | 0; //@line 16052
                                        $500 = HEAP32[$499 >> 2] | 0; //@line 16053
                                        $501 = HEAP32[5230] | 0; //@line 16054
                                        if ($500 >>> 0 >= $501 >>> 0 & $T$0$lcssa$i >>> 0 >= $501 >>> 0) {
                                            HEAP32[$500 + 12 >> 2] = $348; //@line 16060
                                            HEAP32[$499 >> 2] = $348; //@line 16061
                                            HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $500; //@line 16064
                                            HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $T$0$lcssa$i; //@line 16067
                                            HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = 0; //@line 16070
                                            break;
                                        } else {
                                            _abort(); //@line 16073
                                        }
                                    }
                                } while (0);
                                $mem$0 = $v$3$lcssa$i + 8 | 0; //@line 16079
                                return $mem$0 | 0; //@line 16080
                            } else {
                                $nb$0 = $246; //@line 16082
                            }
                        }
                    }
                }
            }
        } while (0);
        $509 = HEAP32[5228] | 0; //@line 16089
        if ($509 >>> 0 >= $nb$0 >>> 0) {
            $511 = $509 - $nb$0 | 0; //@line 16092
            $512 = HEAP32[5231] | 0; //@line 16093
            if ($511 >>> 0 > 15) {
                HEAP32[5231] = $512 + $nb$0; //@line 16097
                HEAP32[5228] = $511; //@line 16098
                HEAP32[$512 + ($nb$0 + 4) >> 2] = $511 | 1; //@line 16102
                HEAP32[$512 + $509 >> 2] = $511; //@line 16104
                HEAP32[$512 + 4 >> 2] = $nb$0 | 3; //@line 16107
            } else {
                HEAP32[5228] = 0; //@line 16109
                HEAP32[5231] = 0; //@line 16110
                HEAP32[$512 + 4 >> 2] = $509 | 3; //@line 16113
                $522 = $512 + ($509 + 4) | 0; //@line 16115
                HEAP32[$522 >> 2] = HEAP32[$522 >> 2] | 1; //@line 16118
            }
            $mem$0 = $512 + 8 | 0; //@line 16121
            return $mem$0 | 0; //@line 16122
        }
        $526 = HEAP32[5229] | 0; //@line 16124
        if ($526 >>> 0 > $nb$0 >>> 0) {
            $528 = $526 - $nb$0 | 0; //@line 16127
            HEAP32[5229] = $528; //@line 16128
            $529 = HEAP32[5232] | 0; //@line 16129
            HEAP32[5232] = $529 + $nb$0; //@line 16131
            HEAP32[$529 + ($nb$0 + 4) >> 2] = $528 | 1; //@line 16135
            HEAP32[$529 + 4 >> 2] = $nb$0 | 3; //@line 16138
            $mem$0 = $529 + 8 | 0; //@line 16140
            return $mem$0 | 0; //@line 16141
        }
        do {
            if (!(HEAP32[5344] | 0)) {
                $538 = _sysconf(30) | 0; //@line 16147
                if (!($538 + -1 & $538)) {
                    HEAP32[5346] = $538; //@line 16152
                    HEAP32[5345] = $538; //@line 16153
                    HEAP32[5347] = -1; //@line 16154
                    HEAP32[5348] = -1; //@line 16155
                    HEAP32[5349] = 0; //@line 16156
                    HEAP32[5337] = 0; //@line 16157
                    HEAP32[5344] = (_time(0) | 0) & -16 ^ 1431655768; //@line 16161
                    break;
                } else {
                    _abort(); //@line 16164
                }
            }
        } while (0);
        $545 = $nb$0 + 48 | 0; //@line 16169
        $546 = HEAP32[5346] | 0; //@line 16170
        $547 = $nb$0 + 47 | 0; //@line 16171
        $548 = $546 + $547 | 0; //@line 16172
        $549 = 0 - $546 | 0; //@line 16173
        $550 = $548 & $549; //@line 16174
        if ($550 >>> 0 <= $nb$0 >>> 0) {
            $mem$0 = 0; //@line 16177
            return $mem$0 | 0; //@line 16178
        }
        $552 = HEAP32[5336] | 0; //@line 16180
        if ($552) {
            $554 = HEAP32[5334] | 0; //@line 16183
            $555 = $554 + $550 | 0; //@line 16184
            if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
                $mem$0 = 0; //@line 16189
                return $mem$0 | 0; //@line 16190
            }
        }
        L258: do {
            if (!(HEAP32[5337] & 4)) {
                $561 = HEAP32[5232] | 0; //@line 16198
                L260: do {
                    if (!$561) {
                        label = 174; //@line 16202
                    } else {
                        $sp$0$i$i = 21352; //@line 16204
                        while (1) {
                            $563 = HEAP32[$sp$0$i$i >> 2] | 0; //@line 16206
                            if ($563 >>> 0 <= $561 >>> 0) {
                                $565 = $sp$0$i$i + 4 | 0; //@line 16209
                                if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
                                    $$lcssa228 = $sp$0$i$i; //@line 16214
                                    $$lcssa230 = $565; //@line 16214
                                    break;
                                }
                            }
                            $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0; //@line 16219
                            if (!$sp$0$i$i) {
                                label = 174; //@line 16222
                                break L260;
                            }
                        }
                        $596 = $548 - (HEAP32[5229] | 0) & $549; //@line 16230
                        if ($596 >>> 0 < 2147483647) {
                            $598 = _sbrk($596 | 0) | 0; //@line 16233
                            $602 = ($598 | 0) == ((HEAP32[$$lcssa228 >> 2] | 0) + (HEAP32[$$lcssa230 >> 2] | 0) | 0); //@line 16237
                            $$3$i = $602 ? $596 : 0; //@line 16238
                            if ($602) {
                                if (($598 | 0) == (-1 | 0)) {
                                    $tsize$0323944$i = $$3$i; //@line 16242
                                } else {
                                    $tbase$255$i = $598; //@line 16244
                                    $tsize$254$i = $$3$i; //@line 16244
                                    label = 194; //@line 16245
                                    break L258;
                                }
                            } else {
                                $br$0$ph$i = $598; //@line 16249
                                $ssize$1$ph$i = $596; //@line 16249
                                $tsize$0$ph$i = $$3$i; //@line 16249
                                label = 184; //@line 16250
                            }
                        } else {
                            $tsize$0323944$i = 0; //@line 16253
                        }
                    }
                } while (0);
                do {
                    if ((label | 0) == 174) {
                        $572 = _sbrk(0) | 0; //@line 16259
                        if (($572 | 0) == (-1 | 0)) {
                            $tsize$0323944$i = 0; //@line 16262
                        } else {
                            $574 = $572; //@line 16264
                            $575 = HEAP32[5345] | 0; //@line 16265
                            $576 = $575 + -1 | 0; //@line 16266
                            if (!($576 & $574)) {
                                $ssize$0$i = $550; //@line 16270
                            } else {
                                $ssize$0$i = $550 - $574 + ($576 + $574 & 0 - $575) | 0; //@line 16277
                            }
                            $584 = HEAP32[5334] | 0; //@line 16279
                            $585 = $584 + $ssize$0$i | 0; //@line 16280
                            if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
                                $588 = HEAP32[5336] | 0; //@line 16285
                                if ($588) {
                                    if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
                                        $tsize$0323944$i = 0; //@line 16292
                                        break;
                                    }
                                }
                                $592 = _sbrk($ssize$0$i | 0) | 0; //@line 16296
                                $593 = ($592 | 0) == ($572 | 0); //@line 16297
                                $ssize$0$$i = $593 ? $ssize$0$i : 0; //@line 16298
                                if ($593) {
                                    $tbase$255$i = $572; //@line 16300
                                    $tsize$254$i = $ssize$0$$i; //@line 16300
                                    label = 194; //@line 16301
                                    break L258;
                                } else {
                                    $br$0$ph$i = $592; //@line 16304
                                    $ssize$1$ph$i = $ssize$0$i; //@line 16304
                                    $tsize$0$ph$i = $ssize$0$$i; //@line 16304
                                    label = 184; //@line 16305
                                }
                            } else {
                                $tsize$0323944$i = 0; //@line 16308
                            }
                        }
                    }
                } while (0);
                L280: do {
                    if ((label | 0) == 184) {
                        $604 = 0 - $ssize$1$ph$i | 0; //@line 16315
                        do {
                            if ($545 >>> 0 > $ssize$1$ph$i >>> 0 & ($ssize$1$ph$i >>> 0 < 2147483647 & ($br$0$ph$i | 0) != (-1 | 0))) {
                                $608 = HEAP32[5346] | 0; //@line 16323
                                $612 = $547 - $ssize$1$ph$i + $608 & 0 - $608; //@line 16327
                                if ($612 >>> 0 < 2147483647) {
                                    if ((_sbrk($612 | 0) | 0) == (-1 | 0)) {
                                        _sbrk($604 | 0) | 0; //@line 16333
                                        $tsize$0323944$i = $tsize$0$ph$i; //@line 16334
                                        break L280;
                                    } else {
                                        $ssize$2$i = $612 + $ssize$1$ph$i | 0; //@line 16338
                                        break;
                                    }
                                } else {
                                    $ssize$2$i = $ssize$1$ph$i; //@line 16342
                                }
                            } else {
                                $ssize$2$i = $ssize$1$ph$i; //@line 16345
                            }
                        } while (0);
                        if (($br$0$ph$i | 0) == (-1 | 0)) {
                            $tsize$0323944$i = $tsize$0$ph$i; //@line 16350
                        } else {
                            $tbase$255$i = $br$0$ph$i; //@line 16352
                            $tsize$254$i = $ssize$2$i; //@line 16352
                            label = 194; //@line 16353
                            break L258;
                        }
                    }
                } while (0);
                HEAP32[5337] = HEAP32[5337] | 4; //@line 16360
                $tsize$1$i = $tsize$0323944$i; //@line 16361
                label = 191; //@line 16362
            } else {
                $tsize$1$i = 0; //@line 16364
                label = 191; //@line 16365
            }
        } while (0);
        if ((label | 0) == 191) {
            if ($550 >>> 0 < 2147483647) {
                $621 = _sbrk($550 | 0) | 0; //@line 16371
                $622 = _sbrk(0) | 0; //@line 16372
                if ($621 >>> 0 < $622 >>> 0 & (($621 | 0) != (-1 | 0) & ($622 | 0) != (-1 | 0))) {
                    $628 = $622 - $621 | 0; //@line 16381
                    $630 = $628 >>> 0 > ($nb$0 + 40 | 0) >>> 0; //@line 16383
                    if ($630) {
                        $tbase$255$i = $621; //@line 16386
                        $tsize$254$i = $630 ? $628 : $tsize$1$i; //@line 16386
                        label = 194; //@line 16387
                    }
                }
            }
        }
        if ((label | 0) == 194) {
            $632 = (HEAP32[5334] | 0) + $tsize$254$i | 0; //@line 16394
            HEAP32[5334] = $632; //@line 16395
            if ($632 >>> 0 > (HEAP32[5335] | 0) >>> 0) {
                HEAP32[5335] = $632; //@line 16399
            }
            $635 = HEAP32[5232] | 0; //@line 16401
            L299: do {
                if (!$635) {
                    $637 = HEAP32[5230] | 0; //@line 16405
                    if (($637 | 0) == 0 | $tbase$255$i >>> 0 < $637 >>> 0) {
                        HEAP32[5230] = $tbase$255$i; //@line 16410
                    }
                    HEAP32[5338] = $tbase$255$i; //@line 16412
                    HEAP32[5339] = $tsize$254$i; //@line 16413
                    HEAP32[5341] = 0; //@line 16414
                    HEAP32[5235] = HEAP32[5344]; //@line 16416
                    HEAP32[5234] = -1; //@line 16417
                    $i$02$i$i = 0; //@line 16418
                    do {
                        $641 = $i$02$i$i << 1; //@line 16420
                        $642 = 20944 + ($641 << 2) | 0; //@line 16421
                        HEAP32[20944 + ($641 + 3 << 2) >> 2] = $642; //@line 16424
                        HEAP32[20944 + ($641 + 2 << 2) >> 2] = $642; //@line 16427
                        $i$02$i$i = $i$02$i$i + 1 | 0; //@line 16428
                    } while (($i$02$i$i | 0) != 32);
                    $648 = $tbase$255$i + 8 | 0; //@line 16438
                    $653 = ($648 & 7 | 0) == 0 ? 0 : 0 - $648 & 7; //@line 16443
                    $655 = $tsize$254$i + -40 - $653 | 0; //@line 16445
                    HEAP32[5232] = $tbase$255$i + $653; //@line 16446
                    HEAP32[5229] = $655; //@line 16447
                    HEAP32[$tbase$255$i + ($653 + 4) >> 2] = $655 | 1; //@line 16451
                    HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40; //@line 16454
                    HEAP32[5233] = HEAP32[5348]; //@line 16456
                } else {
                    $sp$084$i = 21352; //@line 16458
                    do {
                        $660 = HEAP32[$sp$084$i >> 2] | 0; //@line 16460
                        $661 = $sp$084$i + 4 | 0; //@line 16461
                        $662 = HEAP32[$661 >> 2] | 0; //@line 16462
                        if (($tbase$255$i | 0) == ($660 + $662 | 0)) {
                            $$lcssa222 = $660; //@line 16466
                            $$lcssa224 = $661; //@line 16466
                            $$lcssa226 = $662; //@line 16466
                            $sp$084$i$lcssa = $sp$084$i; //@line 16466
                            label = 204; //@line 16467
                            break;
                        }
                        $sp$084$i = HEAP32[$sp$084$i + 8 >> 2] | 0; //@line 16471
                    } while (($sp$084$i | 0) != 0);
                    if ((label | 0) == 204) {
                        if (!(HEAP32[$sp$084$i$lcssa + 12 >> 2] & 8)) {
                            if ($635 >>> 0 < $tbase$255$i >>> 0 & $635 >>> 0 >= $$lcssa222 >>> 0) {
                                HEAP32[$$lcssa224 >> 2] = $$lcssa226 + $tsize$254$i; //@line 16490
                                $676 = (HEAP32[5229] | 0) + $tsize$254$i | 0; //@line 16492
                                $678 = $635 + 8 | 0; //@line 16494
                                $683 = ($678 & 7 | 0) == 0 ? 0 : 0 - $678 & 7; //@line 16499
                                $685 = $676 - $683 | 0; //@line 16501
                                HEAP32[5232] = $635 + $683; //@line 16502
                                HEAP32[5229] = $685; //@line 16503
                                HEAP32[$635 + ($683 + 4) >> 2] = $685 | 1; //@line 16507
                                HEAP32[$635 + ($676 + 4) >> 2] = 40; //@line 16510
                                HEAP32[5233] = HEAP32[5348]; //@line 16512
                                break;
                            }
                        }
                    }
                    $690 = HEAP32[5230] | 0; //@line 16517
                    if ($tbase$255$i >>> 0 < $690 >>> 0) {
                        HEAP32[5230] = $tbase$255$i; //@line 16520
                        $755 = $tbase$255$i; //@line 16521
                    } else {
                        $755 = $690; //@line 16523
                    }
                    $692 = $tbase$255$i + $tsize$254$i | 0; //@line 16525
                    $sp$183$i = 21352; //@line 16526
                    while (1) {
                        if ((HEAP32[$sp$183$i >> 2] | 0) == ($692 | 0)) {
                            $$lcssa219 = $sp$183$i; //@line 16531
                            $sp$183$i$lcssa = $sp$183$i; //@line 16531
                            label = 212; //@line 16532
                            break;
                        }
                        $sp$183$i = HEAP32[$sp$183$i + 8 >> 2] | 0; //@line 16536
                        if (!$sp$183$i) {
                            $sp$0$i$i$i = 21352; //@line 16539
                            break;
                        }
                    }
                    if ((label | 0) == 212) {
                        if (!(HEAP32[$sp$183$i$lcssa + 12 >> 2] & 8)) {
                            HEAP32[$$lcssa219 >> 2] = $tbase$255$i; //@line 16551
                            $702 = $sp$183$i$lcssa + 4 | 0; //@line 16552
                            HEAP32[$702 >> 2] = (HEAP32[$702 >> 2] | 0) + $tsize$254$i; //@line 16555
                            $706 = $tbase$255$i + 8 | 0; //@line 16557
                            $711 = ($706 & 7 | 0) == 0 ? 0 : 0 - $706 & 7; //@line 16562
                            $714 = $tbase$255$i + ($tsize$254$i + 8) | 0; //@line 16566
                            $719 = ($714 & 7 | 0) == 0 ? 0 : 0 - $714 & 7; //@line 16571
                            $720 = $tbase$255$i + ($719 + $tsize$254$i) | 0; //@line 16573
                            $$sum$i19$i = $711 + $nb$0 | 0; //@line 16577
                            $724 = $tbase$255$i + $$sum$i19$i | 0; //@line 16578
                            $725 = $720 - ($tbase$255$i + $711) - $nb$0 | 0; //@line 16579
                            HEAP32[$tbase$255$i + ($711 + 4) >> 2] = $nb$0 | 3; //@line 16583
                            L317: do {
                                if (($720 | 0) == ($635 | 0)) {
                                    $730 = (HEAP32[5229] | 0) + $725 | 0; //@line 16588
                                    HEAP32[5229] = $730; //@line 16589
                                    HEAP32[5232] = $724; //@line 16590
                                    HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $730 | 1; //@line 16594
                                } else {
                                    if (($720 | 0) == (HEAP32[5231] | 0)) {
                                        $736 = (HEAP32[5228] | 0) + $725 | 0; //@line 16600
                                        HEAP32[5228] = $736; //@line 16601
                                        HEAP32[5231] = $724; //@line 16602
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $736 | 1; //@line 16606
                                        HEAP32[$tbase$255$i + ($736 + $$sum$i19$i) >> 2] = $736; //@line 16609
                                        break;
                                    }
                                    $$sum2$i21$i = $tsize$254$i + 4 | 0; //@line 16612
                                    $741 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $719) >> 2] | 0; //@line 16615
                                    if (($741 & 3 | 0) == 1) {
                                        $744 = $741 & -8; //@line 16619
                                        $745 = $741 >>> 3; //@line 16620
                                        L325: do {
                                            if ($741 >>> 0 < 256) {
                                                $748 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0; //@line 16627
                                                $750 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0; //@line 16631
                                                $752 = 20944 + ($745 << 1 << 2) | 0; //@line 16633
                                                do {
                                                    if (($748 | 0) != ($752 | 0)) {
                                                        if ($748 >>> 0 < $755 >>> 0) {
                                                            _abort(); //@line 16639
                                                        }
                                                        if ((HEAP32[$748 + 12 >> 2] | 0) == ($720 | 0)) {
                                                            break;
                                                        }
                                                        _abort(); //@line 16648
                                                    }
                                                } while (0);
                                                if (($750 | 0) == ($748 | 0)) {
                                                    HEAP32[5226] = HEAP32[5226] & ~(1 << $745); //@line 16658
                                                    break;
                                                }
                                                do {
                                                    if (($750 | 0) == ($752 | 0)) {
                                                        $$pre$phi58$i$iZ2D = $750 + 8 | 0; //@line 16665
                                                    } else {
                                                        if ($750 >>> 0 < $755 >>> 0) {
                                                            _abort(); //@line 16669
                                                        }
                                                        $766 = $750 + 8 | 0; //@line 16672
                                                        if ((HEAP32[$766 >> 2] | 0) == ($720 | 0)) {
                                                            $$pre$phi58$i$iZ2D = $766; //@line 16676
                                                            break;
                                                        }
                                                        _abort(); //@line 16679
                                                    }
                                                } while (0);
                                                HEAP32[$748 + 12 >> 2] = $750; //@line 16684
                                                HEAP32[$$pre$phi58$i$iZ2D >> 2] = $748; //@line 16685
                                            } else {
                                                $771 = HEAP32[$tbase$255$i + (($719 | 24) + $tsize$254$i) >> 2] | 0; //@line 16690
                                                $773 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0; //@line 16694
                                                do {
                                                    if (($773 | 0) == ($720 | 0)) {
                                                        $$sum67$i$i = $719 | 16; //@line 16698
                                                        $784 = $tbase$255$i + ($$sum2$i21$i + $$sum67$i$i) | 0; //@line 16700
                                                        $785 = HEAP32[$784 >> 2] | 0; //@line 16701
                                                        if (!$785) {
                                                            $787 = $tbase$255$i + ($$sum67$i$i + $tsize$254$i) | 0; //@line 16705
                                                            $788 = HEAP32[$787 >> 2] | 0; //@line 16706
                                                            if (!$788) {
                                                                $R$1$i$i = 0; //@line 16709
                                                                break;
                                                            } else {
                                                                $R$0$i$i = $788; //@line 16712
                                                                $RP$0$i$i = $787; //@line 16712
                                                            }
                                                        } else {
                                                            $R$0$i$i = $785; //@line 16715
                                                            $RP$0$i$i = $784; //@line 16715
                                                        }
                                                        while (1) {
                                                            $790 = $R$0$i$i + 20 | 0; //@line 16718
                                                            $791 = HEAP32[$790 >> 2] | 0; //@line 16719
                                                            if ($791) {
                                                                $R$0$i$i = $791; //@line 16722
                                                                $RP$0$i$i = $790; //@line 16722
                                                                continue;
                                                            }
                                                            $793 = $R$0$i$i + 16 | 0; //@line 16725
                                                            $794 = HEAP32[$793 >> 2] | 0; //@line 16726
                                                            if (!$794) {
                                                                $R$0$i$i$lcssa = $R$0$i$i; //@line 16729
                                                                $RP$0$i$i$lcssa = $RP$0$i$i; //@line 16729
                                                                break;
                                                            } else {
                                                                $R$0$i$i = $794; //@line 16732
                                                                $RP$0$i$i = $793; //@line 16732
                                                            }
                                                        }
                                                        if ($RP$0$i$i$lcssa >>> 0 < $755 >>> 0) {
                                                            _abort(); //@line 16737
                                                        } else {
                                                            HEAP32[$RP$0$i$i$lcssa >> 2] = 0; //@line 16740
                                                            $R$1$i$i = $R$0$i$i$lcssa; //@line 16741
                                                            break;
                                                        }
                                                    } else {
                                                        $776 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0; //@line 16748
                                                        if ($776 >>> 0 < $755 >>> 0) {
                                                            _abort(); //@line 16751
                                                        }
                                                        $778 = $776 + 12 | 0; //@line 16754
                                                        if ((HEAP32[$778 >> 2] | 0) != ($720 | 0)) {
                                                            _abort(); //@line 16758
                                                        }
                                                        $781 = $773 + 8 | 0; //@line 16761
                                                        if ((HEAP32[$781 >> 2] | 0) == ($720 | 0)) {
                                                            HEAP32[$778 >> 2] = $773; //@line 16765
                                                            HEAP32[$781 >> 2] = $776; //@line 16766
                                                            $R$1$i$i = $773; //@line 16767
                                                            break;
                                                        } else {
                                                            _abort(); //@line 16770
                                                        }
                                                    }
                                                } while (0);
                                                if (!$771) {
                                                    break;
                                                }
                                                $799 = HEAP32[$tbase$255$i + ($tsize$254$i + 28 + $719) >> 2] | 0; //@line 16782
                                                $800 = 21208 + ($799 << 2) | 0; //@line 16783
                                                do {
                                                    if (($720 | 0) == (HEAP32[$800 >> 2] | 0)) {
                                                        HEAP32[$800 >> 2] = $R$1$i$i; //@line 16788
                                                        if ($R$1$i$i) {
                                                            break;
                                                        }
                                                        HEAP32[5227] = HEAP32[5227] & ~(1 << $799); //@line 16797
                                                        break L325;
                                                    } else {
                                                        if ($771 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                                            _abort(); //@line 16803
                                                        }
                                                        $809 = $771 + 16 | 0; //@line 16806
                                                        if ((HEAP32[$809 >> 2] | 0) == ($720 | 0)) {
                                                            HEAP32[$809 >> 2] = $R$1$i$i; //@line 16810
                                                        } else {
                                                            HEAP32[$771 + 20 >> 2] = $R$1$i$i; //@line 16813
                                                        }
                                                        if (!$R$1$i$i) {
                                                            break L325;
                                                        }
                                                    }
                                                } while (0);
                                                $814 = HEAP32[5230] | 0; //@line 16821
                                                if ($R$1$i$i >>> 0 < $814 >>> 0) {
                                                    _abort(); //@line 16824
                                                }
                                                HEAP32[$R$1$i$i + 24 >> 2] = $771; //@line 16828
                                                $$sum3132$i$i = $719 | 16; //@line 16829
                                                $818 = HEAP32[$tbase$255$i + ($$sum3132$i$i + $tsize$254$i) >> 2] | 0; //@line 16832
                                                do {
                                                    if ($818) {
                                                        if ($818 >>> 0 < $814 >>> 0) {
                                                            _abort(); //@line 16838
                                                        } else {
                                                            HEAP32[$R$1$i$i + 16 >> 2] = $818; //@line 16842
                                                            HEAP32[$818 + 24 >> 2] = $R$1$i$i; //@line 16844
                                                            break;
                                                        }
                                                    }
                                                } while (0);
                                                $824 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $$sum3132$i$i) >> 2] | 0; //@line 16851
                                                if (!$824) {
                                                    break;
                                                }
                                                if ($824 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                                    _abort(); //@line 16859
                                                } else {
                                                    HEAP32[$R$1$i$i + 20 >> 2] = $824; //@line 16863
                                                    HEAP32[$824 + 24 >> 2] = $R$1$i$i; //@line 16865
                                                    break;
                                                }
                                            }
                                        } while (0);
                                        $oldfirst$0$i$i = $tbase$255$i + (($744 | $719) + $tsize$254$i) | 0; //@line 16874
                                        $qsize$0$i$i = $744 + $725 | 0; //@line 16874
                                    } else {
                                        $oldfirst$0$i$i = $720; //@line 16876
                                        $qsize$0$i$i = $725; //@line 16876
                                    }
                                    $832 = $oldfirst$0$i$i + 4 | 0; //@line 16878
                                    HEAP32[$832 >> 2] = HEAP32[$832 >> 2] & -2; //@line 16881
                                    HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $qsize$0$i$i | 1; //@line 16885
                                    HEAP32[$tbase$255$i + ($qsize$0$i$i + $$sum$i19$i) >> 2] = $qsize$0$i$i; //@line 16888
                                    $838 = $qsize$0$i$i >>> 3; //@line 16889
                                    if ($qsize$0$i$i >>> 0 < 256) {
                                        $840 = $838 << 1; //@line 16892
                                        $841 = 20944 + ($840 << 2) | 0; //@line 16893
                                        $842 = HEAP32[5226] | 0; //@line 16894
                                        $843 = 1 << $838; //@line 16895
                                        do {
                                            if (!($842 & $843)) {
                                                HEAP32[5226] = $842 | $843; //@line 16901
                                                $$pre$phi$i23$iZ2D = 20944 + ($840 + 2 << 2) | 0; //@line 16904
                                                $F4$0$i$i = $841; //@line 16904
                                            } else {
                                                $847 = 20944 + ($840 + 2 << 2) | 0; //@line 16907
                                                $848 = HEAP32[$847 >> 2] | 0; //@line 16908
                                                if ($848 >>> 0 >= (HEAP32[5230] | 0) >>> 0) {
                                                    $$pre$phi$i23$iZ2D = $847; //@line 16912
                                                    $F4$0$i$i = $848; //@line 16912
                                                    break;
                                                }
                                                _abort(); //@line 16915
                                            }
                                        } while (0);
                                        HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724; //@line 16919
                                        HEAP32[$F4$0$i$i + 12 >> 2] = $724; //@line 16921
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $F4$0$i$i; //@line 16924
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $841; //@line 16927
                                        break;
                                    }
                                    $854 = $qsize$0$i$i >>> 8; //@line 16930
                                    do {
                                        if (!$854) {
                                            $I7$0$i$i = 0; //@line 16934
                                        } else {
                                            if ($qsize$0$i$i >>> 0 > 16777215) {
                                                $I7$0$i$i = 31; //@line 16938
                                                break;
                                            }
                                            $859 = ($854 + 1048320 | 0) >>> 16 & 8; //@line 16943
                                            $860 = $854 << $859; //@line 16944
                                            $863 = ($860 + 520192 | 0) >>> 16 & 4; //@line 16947
                                            $865 = $860 << $863; //@line 16949
                                            $868 = ($865 + 245760 | 0) >>> 16 & 2; //@line 16952
                                            $873 = 14 - ($863 | $859 | $868) + ($865 << $868 >>> 15) | 0; //@line 16957
                                            $I7$0$i$i = $qsize$0$i$i >>> ($873 + 7 | 0) & 1 | $873 << 1; //@line 16963
                                        }
                                    } while (0);
                                    $879 = 21208 + ($I7$0$i$i << 2) | 0; //@line 16966
                                    HEAP32[$tbase$255$i + ($$sum$i19$i + 28) >> 2] = $I7$0$i$i; //@line 16969
                                    HEAP32[$tbase$255$i + ($$sum$i19$i + 20) >> 2] = 0; //@line 16974
                                    HEAP32[$tbase$255$i + ($$sum$i19$i + 16) >> 2] = 0; //@line 16975
                                    $883 = HEAP32[5227] | 0; //@line 16976
                                    $884 = 1 << $I7$0$i$i; //@line 16977
                                    if (!($883 & $884)) {
                                        HEAP32[5227] = $883 | $884; //@line 16982
                                        HEAP32[$879 >> 2] = $724; //@line 16983
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $879; //@line 16986
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724; //@line 16989
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724; //@line 16992
                                        break;
                                    }
                                    $891 = HEAP32[$879 >> 2] | 0; //@line 16995
                                    L411: do {
                                        if ((HEAP32[$891 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
                                            $T$0$lcssa$i25$i = $891; //@line 17002
                                        } else {
                                            $K8$051$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0); //@line 17009
                                            $T$050$i$i = $891; //@line 17009
                                            while (1) {
                                                $908 = $T$050$i$i + 16 + ($K8$051$i$i >>> 31 << 2) | 0; //@line 17012
                                                $903 = HEAP32[$908 >> 2] | 0; //@line 17013
                                                if (!$903) {
                                                    $$lcssa = $908; //@line 17016
                                                    $T$050$i$i$lcssa = $T$050$i$i; //@line 17016
                                                    break;
                                                }
                                                if ((HEAP32[$903 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
                                                    $T$0$lcssa$i25$i = $903; //@line 17025
                                                    break L411;
                                                } else {
                                                    $K8$051$i$i = $K8$051$i$i << 1; //@line 17028
                                                    $T$050$i$i = $903; //@line 17028
                                                }
                                            }
                                            if ($$lcssa >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                                _abort(); //@line 17034
                                            } else {
                                                HEAP32[$$lcssa >> 2] = $724; //@line 17037
                                                HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $T$050$i$i$lcssa; //@line 17040
                                                HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724; //@line 17043
                                                HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724; //@line 17046
                                                break L317;
                                            }
                                        }
                                    } while (0);
                                    $915 = $T$0$lcssa$i25$i + 8 | 0; //@line 17051
                                    $916 = HEAP32[$915 >> 2] | 0; //@line 17052
                                    $917 = HEAP32[5230] | 0; //@line 17053
                                    if ($916 >>> 0 >= $917 >>> 0 & $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0) {
                                        HEAP32[$916 + 12 >> 2] = $724; //@line 17059
                                        HEAP32[$915 >> 2] = $724; //@line 17060
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $916; //@line 17063
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $T$0$lcssa$i25$i; //@line 17066
                                        HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = 0; //@line 17069
                                        break;
                                    } else {
                                        _abort(); //@line 17072
                                    }
                                }
                            } while (0);
                            $mem$0 = $tbase$255$i + ($711 | 8) | 0; //@line 17079
                            return $mem$0 | 0; //@line 17080
                        } else {
                            $sp$0$i$i$i = 21352; //@line 17082
                        }
                    }
                    while (1) {
                        $925 = HEAP32[$sp$0$i$i$i >> 2] | 0; //@line 17086
                        if ($925 >>> 0 <= $635 >>> 0) {
                            $928 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0; //@line 17090
                            $929 = $925 + $928 | 0; //@line 17091
                            if ($929 >>> 0 > $635 >>> 0) {
                                $$lcssa215 = $925; //@line 17094
                                $$lcssa216 = $928; //@line 17094
                                $$lcssa217 = $929; //@line 17094
                                break;
                            }
                        }
                        $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0; //@line 17100
                    }
                    $934 = $$lcssa215 + ($$lcssa216 + -39) | 0; //@line 17105
                    $940 = $$lcssa215 + ($$lcssa216 + -47 + (($934 & 7 | 0) == 0 ? 0 : 0 - $934 & 7)) | 0; //@line 17112
                    $941 = $635 + 16 | 0; //@line 17113
                    $943 = $940 >>> 0 < $941 >>> 0 ? $635 : $940; //@line 17115
                    $944 = $943 + 8 | 0; //@line 17116
                    $947 = $tbase$255$i + 8 | 0; //@line 17119
                    $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7; //@line 17124
                    $954 = $tsize$254$i + -40 - $952 | 0; //@line 17126
                    HEAP32[5232] = $tbase$255$i + $952; //@line 17127
                    HEAP32[5229] = $954; //@line 17128
                    HEAP32[$tbase$255$i + ($952 + 4) >> 2] = $954 | 1; //@line 17132
                    HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40; //@line 17135
                    HEAP32[5233] = HEAP32[5348]; //@line 17137
                    $959 = $943 + 4 | 0; //@line 17138
                    HEAP32[$959 >> 2] = 27; //@line 17139
                    HEAP32[$944 >> 2] = HEAP32[5338]; //@line 17140
                    HEAP32[$944 + 4 >> 2] = HEAP32[5339]; //@line 17140
                    HEAP32[$944 + 8 >> 2] = HEAP32[5340]; //@line 17140
                    HEAP32[$944 + 12 >> 2] = HEAP32[5341]; //@line 17140
                    HEAP32[5338] = $tbase$255$i; //@line 17141
                    HEAP32[5339] = $tsize$254$i; //@line 17142
                    HEAP32[5341] = 0; //@line 17143
                    HEAP32[5340] = $944; //@line 17144
                    $960 = $943 + 28 | 0; //@line 17145
                    HEAP32[$960 >> 2] = 7; //@line 17146
                    if (($943 + 32 | 0) >>> 0 < $$lcssa217 >>> 0) {
                        $964 = $960; //@line 17150
                        do {
                            $964$looptemp = $964;
                            $964 = $964 + 4 | 0; //@line 17152
                            HEAP32[$964 >> 2] = 7; //@line 17153
                        } while (($964$looptemp + 8 | 0) >>> 0 < $$lcssa217 >>> 0);
                    }
                    if (($943 | 0) != ($635 | 0)) {
                        $970 = $943 - $635 | 0; //@line 17167
                        HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2; //@line 17170
                        HEAP32[$635 + 4 >> 2] = $970 | 1; //@line 17173
                        HEAP32[$943 >> 2] = $970; //@line 17174
                        $975 = $970 >>> 3; //@line 17175
                        if ($970 >>> 0 < 256) {
                            $977 = $975 << 1; //@line 17178
                            $978 = 20944 + ($977 << 2) | 0; //@line 17179
                            $979 = HEAP32[5226] | 0; //@line 17180
                            $980 = 1 << $975; //@line 17181
                            if (!($979 & $980)) {
                                HEAP32[5226] = $979 | $980; //@line 17186
                                $$pre$phi$i$iZ2D = 20944 + ($977 + 2 << 2) | 0; //@line 17189
                                $F$0$i$i = $978; //@line 17189
                            } else {
                                $984 = 20944 + ($977 + 2 << 2) | 0; //@line 17192
                                $985 = HEAP32[$984 >> 2] | 0; //@line 17193
                                if ($985 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                    _abort(); //@line 17197
                                } else {
                                    $$pre$phi$i$iZ2D = $984; //@line 17200
                                    $F$0$i$i = $985; //@line 17200
                                }
                            }
                            HEAP32[$$pre$phi$i$iZ2D >> 2] = $635; //@line 17203
                            HEAP32[$F$0$i$i + 12 >> 2] = $635; //@line 17205
                            HEAP32[$635 + 8 >> 2] = $F$0$i$i; //@line 17207
                            HEAP32[$635 + 12 >> 2] = $978; //@line 17209
                            break;
                        }
                        $991 = $970 >>> 8; //@line 17212
                        if (!$991) {
                            $I1$0$i$i = 0; //@line 17215
                        } else {
                            if ($970 >>> 0 > 16777215) {
                                $I1$0$i$i = 31; //@line 17219
                            } else {
                                $996 = ($991 + 1048320 | 0) >>> 16 & 8; //@line 17223
                                $997 = $991 << $996; //@line 17224
                                $1000 = ($997 + 520192 | 0) >>> 16 & 4; //@line 17227
                                $1002 = $997 << $1000; //@line 17229
                                $1005 = ($1002 + 245760 | 0) >>> 16 & 2; //@line 17232
                                $1010 = 14 - ($1000 | $996 | $1005) + ($1002 << $1005 >>> 15) | 0; //@line 17237
                                $I1$0$i$i = $970 >>> ($1010 + 7 | 0) & 1 | $1010 << 1; //@line 17243
                            }
                        }
                        $1016 = 21208 + ($I1$0$i$i << 2) | 0; //@line 17246
                        HEAP32[$635 + 28 >> 2] = $I1$0$i$i; //@line 17248
                        HEAP32[$635 + 20 >> 2] = 0; //@line 17250
                        HEAP32[$941 >> 2] = 0; //@line 17251
                        $1019 = HEAP32[5227] | 0; //@line 17252
                        $1020 = 1 << $I1$0$i$i; //@line 17253
                        if (!($1019 & $1020)) {
                            HEAP32[5227] = $1019 | $1020; //@line 17258
                            HEAP32[$1016 >> 2] = $635; //@line 17259
                            HEAP32[$635 + 24 >> 2] = $1016; //@line 17261
                            HEAP32[$635 + 12 >> 2] = $635; //@line 17263
                            HEAP32[$635 + 8 >> 2] = $635; //@line 17265
                            break;
                        }
                        $1027 = HEAP32[$1016 >> 2] | 0; //@line 17268
                        L452: do {
                            if ((HEAP32[$1027 + 4 >> 2] & -8 | 0) == ($970 | 0)) {
                                $T$0$lcssa$i$i = $1027; //@line 17275
                            } else {
                                $K2$07$i$i = $970 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0); //@line 17282
                                $T$06$i$i = $1027; //@line 17282
                                while (1) {
                                    $1044 = $T$06$i$i + 16 + ($K2$07$i$i >>> 31 << 2) | 0; //@line 17285
                                    $1039 = HEAP32[$1044 >> 2] | 0; //@line 17286
                                    if (!$1039) {
                                        $$lcssa211 = $1044; //@line 17289
                                        $T$06$i$i$lcssa = $T$06$i$i; //@line 17289
                                        break;
                                    }
                                    if ((HEAP32[$1039 + 4 >> 2] & -8 | 0) == ($970 | 0)) {
                                        $T$0$lcssa$i$i = $1039; //@line 17298
                                        break L452;
                                    } else {
                                        $K2$07$i$i = $K2$07$i$i << 1; //@line 17301
                                        $T$06$i$i = $1039; //@line 17301
                                    }
                                }
                                if ($$lcssa211 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                    _abort(); //@line 17307
                                } else {
                                    HEAP32[$$lcssa211 >> 2] = $635; //@line 17310
                                    HEAP32[$635 + 24 >> 2] = $T$06$i$i$lcssa; //@line 17312
                                    HEAP32[$635 + 12 >> 2] = $635; //@line 17314
                                    HEAP32[$635 + 8 >> 2] = $635; //@line 17316
                                    break L299;
                                }
                            }
                        } while (0);
                        $1051 = $T$0$lcssa$i$i + 8 | 0; //@line 17321
                        $1052 = HEAP32[$1051 >> 2] | 0; //@line 17322
                        $1053 = HEAP32[5230] | 0; //@line 17323
                        if ($1052 >>> 0 >= $1053 >>> 0 & $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0) {
                            HEAP32[$1052 + 12 >> 2] = $635; //@line 17329
                            HEAP32[$1051 >> 2] = $635; //@line 17330
                            HEAP32[$635 + 8 >> 2] = $1052; //@line 17332
                            HEAP32[$635 + 12 >> 2] = $T$0$lcssa$i$i; //@line 17334
                            HEAP32[$635 + 24 >> 2] = 0; //@line 17336
                            break;
                        } else {
                            _abort(); //@line 17339
                        }
                    }
                }
            } while (0);
            $1060 = HEAP32[5229] | 0; //@line 17345
            if ($1060 >>> 0 > $nb$0 >>> 0) {
                $1062 = $1060 - $nb$0 | 0; //@line 17348
                HEAP32[5229] = $1062; //@line 17349
                $1063 = HEAP32[5232] | 0; //@line 17350
                HEAP32[5232] = $1063 + $nb$0; //@line 17352
                HEAP32[$1063 + ($nb$0 + 4) >> 2] = $1062 | 1; //@line 17356
                HEAP32[$1063 + 4 >> 2] = $nb$0 | 3; //@line 17359
                $mem$0 = $1063 + 8 | 0; //@line 17361
                return $mem$0 | 0; //@line 17362
            }
        }
        HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 17366
        $mem$0 = 0; //@line 17367
        return $mem$0 | 0; //@line 17368
    }

    function _fGETIN($wORD1, $wORD1X, $wORD2, $wORD2X) {
        $wORD1 = $wORD1 | 0;
        $wORD1X = $wORD1X | 0;
        $wORD2 = $wORD2 | 0;
        $wORD2X = $wORD2X | 0;
        var $$0$i = 0,
            $$0$i12 = 0,
            $$0$i39 = 0,
            $$0$i52 = 0,
            $$lcssa = 0,
            $$lcssa169 = 0,
            $$lcssa171 = 0,
            $$lcssa173 = 0,
            $$lcssa175 = 0,
            $$lcssa177 = 0,
            $$pre = 0,
            $$pre129 = 0,
            $$pre130 = 0,
            $$pre131 = 0,
            $0 = 0,
            $1 = 0,
            $100 = 0,
            $101 = 0,
            $103 = 0,
            $106 = 0,
            $109 = 0,
            $111 = 0,
            $115 = 0,
            $118 = 0,
            $119 = 0,
            $120 = 0,
            $122 = 0,
            $123 = 0,
            $125 = 0,
            $128 = 0,
            $130 = 0,
            $134 = 0,
            $137 = 0,
            $138 = 0,
            $139 = 0,
            $14 = 0,
            $141 = 0,
            $143 = 0,
            $146 = 0,
            $147 = 0,
            $152 = 0,
            $156 = 0,
            $159 = 0,
            $160 = 0,
            $161 = 0,
            $165 = 0,
            $167 = 0,
            $172 = 0,
            $177 = 0,
            $178 = 0,
            $179 = 0,
            $182 = 0,
            $184 = 0,
            $189 = 0,
            $194 = 0,
            $195 = 0,
            $196 = 0,
            $199 = 0,
            $20 = 0,
            $201 = 0,
            $206 = 0,
            $211 = 0,
            $212 = 0,
            $213 = 0,
            $216 = 0,
            $218 = 0,
            $223 = 0,
            $23 = 0,
            $230 = 0,
            $232 = 0,
            $237 = 0,
            $24 = 0,
            $242 = 0,
            $243 = 0,
            $244 = 0,
            $247 = 0,
            $249 = 0,
            $254 = 0,
            $259 = 0,
            $260 = 0,
            $261 = 0,
            $264 = 0,
            $266 = 0,
            $271 = 0,
            $276 = 0,
            $277 = 0,
            $278 = 0,
            $281 = 0,
            $283 = 0,
            $288 = 0,
            $29 = 0,
            $295 = 0,
            $297 = 0,
            $3 = 0,
            $302 = 0,
            $307 = 0,
            $308 = 0,
            $309 = 0,
            $312 = 0,
            $314 = 0,
            $319 = 0,
            $324 = 0,
            $325 = 0,
            $326 = 0,
            $329 = 0,
            $33 = 0,
            $331 = 0,
            $336 = 0,
            $341 = 0,
            $342 = 0,
            $343 = 0,
            $346 = 0,
            $348 = 0,
            $353 = 0,
            $358 = 0,
            $36 = 0,
            $361 = 0,
            $363 = 0,
            $368 = 0,
            $37 = 0,
            $373 = 0,
            $374 = 0,
            $375 = 0,
            $378 = 0,
            $38 = 0,
            $380 = 0,
            $385 = 0,
            $390 = 0,
            $391 = 0,
            $392 = 0,
            $395 = 0,
            $397 = 0,
            $402 = 0,
            $407 = 0,
            $408 = 0,
            $409 = 0,
            $412 = 0,
            $414 = 0,
            $419 = 0,
            $426 = 0,
            $428 = 0,
            $43 = 0,
            $433 = 0,
            $438 = 0,
            $439 = 0,
            $440 = 0,
            $443 = 0,
            $445 = 0,
            $450 = 0,
            $455 = 0,
            $456 = 0,
            $457 = 0,
            $46 = 0,
            $460 = 0,
            $462 = 0,
            $467 = 0,
            $472 = 0,
            $473 = 0,
            $474 = 0,
            $477 = 0,
            $479 = 0,
            $484 = 0,
            $49 = 0,
            $491 = 0,
            $493 = 0,
            $498 = 0,
            $503 = 0,
            $504 = 0,
            $505 = 0,
            $508 = 0,
            $51 = 0,
            $510 = 0,
            $515 = 0,
            $520 = 0,
            $521 = 0,
            $522 = 0,
            $525 = 0,
            $527 = 0,
            $532 = 0,
            $537 = 0,
            $538 = 0,
            $539 = 0,
            $542 = 0,
            $544 = 0,
            $549 = 0,
            $55 = 0,
            $554 = 0,
            $557 = 0,
            $559 = 0,
            $564 = 0,
            $569 = 0,
            $570 = 0,
            $571 = 0,
            $574 = 0,
            $576 = 0,
            $58 = 0,
            $581 = 0,
            $586 = 0,
            $587 = 0,
            $588 = 0,
            $59 = 0,
            $591 = 0,
            $593 = 0,
            $598 = 0,
            $60 = 0,
            $603 = 0,
            $604 = 0,
            $605 = 0,
            $608 = 0,
            $610 = 0,
            $615 = 0,
            $62 = 0,
            $622 = 0,
            $623 = 0,
            $624 = 0,
            $625 = 0,
            $626 = 0,
            $627 = 0,
            $628 = 0,
            $629 = 0,
            $63 = 0,
            $630 = 0,
            $631 = 0,
            $632 = 0,
            $633 = 0,
            $634 = 0,
            $635 = 0,
            $636 = 0,
            $637 = 0,
            $638 = 0,
            $639 = 0,
            $640 = 0,
            $641 = 0,
            $642 = 0,
            $643 = 0,
            $644 = 0,
            $645 = 0,
            $646 = 0,
            $647 = 0,
            $648 = 0,
            $649 = 0,
            $65 = 0,
            $650 = 0,
            $651 = 0,
            $652 = 0,
            $653 = 0,
            $68 = 0,
            $70 = 0,
            $74 = 0,
            $77 = 0,
            $78 = 0,
            $79 = 0,
            $8 = 0,
            $81 = 0,
            $83 = 0,
            $86 = 0,
            $87 = 0,
            $9 = 0,
            $92 = 0,
            $96 = 0,
            $99 = 0,
            $GETTXT$1$i = 0,
            $GETTXT$1$i$1 = 0,
            $GETTXT$1$i$2 = 0,
            $GETTXT$1$i$3 = 0,
            $GETTXT$1$i$4 = 0,
            $GETTXT$1$i21 = 0,
            $GETTXT$1$i21$1 = 0,
            $GETTXT$1$i21$2 = 0,
            $GETTXT$1$i21$3 = 0,
            $GETTXT$1$i21$4 = 0,
            $GETTXT$1$i35 = 0,
            $GETTXT$1$i35$1 = 0,
            $GETTXT$1$i35$2 = 0,
            $GETTXT$1$i35$3 = 0,
            $GETTXT$1$i35$4 = 0,
            $GETTXT$1$i48 = 0,
            $GETTXT$1$i48$1 = 0,
            $GETTXT$1$i48$2 = 0,
            $GETTXT$1$i48$3 = 0,
            $GETTXT$1$i48$4 = 0,
            $GETTXT$1$i62 = 0,
            $GETTXT$1$i62$1 = 0,
            $GETTXT$1$i62$2 = 0,
            $GETTXT$1$i62$3 = 0,
            $GETTXT$1$i62$4 = 0,
            $GETTXT$1$i75 = 0,
            $GETTXT$1$i75$1 = 0,
            $GETTXT$1$i75$2 = 0,
            $GETTXT$1$i75$3 = 0,
            $GETTXT$1$i75$4 = 0,
            $GETTXT$1$i8 = 0,
            $GETTXT$1$i8$1 = 0,
            $GETTXT$1$i8$2 = 0,
            $GETTXT$1$i8$3 = 0,
            $GETTXT$1$i8$4 = 0,
            $GETTXT$2$i = 0,
            $GETTXT$2$i$1 = 0,
            $GETTXT$2$i$2 = 0,
            $GETTXT$2$i$3 = 0,
            $GETTXT$2$i22 = 0,
            $GETTXT$2$i22$1 = 0,
            $GETTXT$2$i22$2 = 0,
            $GETTXT$2$i22$3 = 0,
            $GETTXT$2$i22$4 = 0,
            $GETTXT$2$i36 = 0,
            $GETTXT$2$i36$1 = 0,
            $GETTXT$2$i36$2 = 0,
            $GETTXT$2$i36$3 = 0,
            $GETTXT$2$i49 = 0,
            $GETTXT$2$i49$1 = 0,
            $GETTXT$2$i49$2 = 0,
            $GETTXT$2$i49$3 = 0,
            $GETTXT$2$i63 = 0,
            $GETTXT$2$i63$1 = 0,
            $GETTXT$2$i63$2 = 0,
            $GETTXT$2$i63$3 = 0,
            $GETTXT$2$i63$4 = 0,
            $GETTXT$2$i76 = 0,
            $GETTXT$2$i76$1 = 0,
            $GETTXT$2$i76$2 = 0,
            $GETTXT$2$i76$3 = 0,
            $GETTXT$2$i76$4 = 0,
            $GETTXT$2$i9 = 0,
            $GETTXT$2$i9$1 = 0,
            $GETTXT$2$i9$2 = 0,
            $GETTXT$2$i9$3 = 0,
            $I$02$i = 0,
            label = 0,
            $23$looptemp = 0,
            $86$looptemp = 0,
            $146$looptemp = 0;
        $0 = HEAP32[_stdin >> 2] | 0; //@line 10822
        //$0=null;
         L1:while(1) {
            // $0 =lastInput;
            //if($0=null){ window.setTimeout(L1,100); break;}else{
                lastInput=null;
            $1 = HEAP32[2] | 0; //@line 10825
            do {
                if ($1) {
                    $3 = HEAP32[4234] | 0; //@line 10829
                    HEAP32[4234] = 0; //@line 10830
                    _putchar(10) | 0; //@line 10831
                    HEAP32[4234] = $3; //@line 10832
                }
                if (!(HEAP8[129] | 0)) {
                    _fMPINIT(); //@line 10837
                }
                _gets(17465) | 0; //@line 10839
                if (_feof($0 | 0) | 0) {
                    _score(1); //@line 10843
                }
                HEAP32[4234] = 0; //@line 10845
                $622 = 0; //@line 10846
                $I$02$i = 1; //@line 10846
                while (1) {
                    $8 = 17464 + $I$02$i | 0; //@line 10848
                    $9 = HEAP8[$8 >> 0] | 0; //@line 10849
                    if (!($9 << 24 >> 24)) {
                        $20 = $622; //@line 10852
                        break;
                    }
                    $14 = HEAP8[17568 + (($9 << 24 >> 24) + 1) >> 0] | 0; //@line 10858
                    HEAP8[$8 >> 0] = $14; //@line 10859
                    if (!($14 << 24 >> 24)) {
                        $623 = $622; //@line 10862
                    } else {
                        HEAP32[4234] = $I$02$i; //@line 10864
                        $623 = $I$02$i; //@line 10865
                    }
                    $I$02$i = $I$02$i + 1 | 0; //@line 10867
                    if (($I$02$i | 0) >= 101) {
                        $20 = $623; //@line 10872
                        break;
                    } else {
                        $622 = $623; //@line 10870
                    }
                }
                HEAP32[4236] = 1; //@line 10876
                if ((HEAP32[4926] | 0) == 1) {
                    $33 = 1; //@line 10880
                } else {
                    HEAP32[4926] = -1; //@line 10882
                    $33 = -1; //@line 10883
                }
                L24: do {
                    if (($20 | 0) < 1) {
                        $$0$i = -1; //@line 10888
                    } else {
                        $23 = 1; //@line 10890
                        while (1) {
                            $24 = HEAP8[17464 + $23 >> 0] | 0; //@line 10893
                            if ($24 << 24 >> 24) {
                                $$lcssa = $23; //@line 10896
                                $$lcssa169 = $24; //@line 10896
                                break;
                            }
                            $23$looptemp = $23;
                            $23 = $23 + 1 | 0; //@line 10899
                            HEAP32[4236] = $23; //@line 10900
                            if (($23$looptemp | 0) >= ($20 | 0)) {
                                $$0$i = -1; //@line 10905
                                break L24;
                            }
                        }
                        L29: do {
                            if (($$lcssa | 0) > ($20 | 0)) {
                                $172 = $33; //@line 10912
                                $38 = $$lcssa; //@line 10912
                                $GETTXT$2$i = 0; //@line 10912
                            } else {
                                $29 = $$lcssa169 << 24 >> 24; //@line 10914
                                do {
                                    if ($$lcssa169 << 24 >> 24 > 62) {
                                        if (($33 | 0) == ($$lcssa | 0)) {
                                            HEAP32[4926] = -1; //@line 10921
                                            $GETTXT$1$i = $29 + -63 | 0; //@line 10922
                                            break;
                                        } else {
                                            HEAP32[4926] = $$lcssa; //@line 10925
                                            $172 = $$lcssa; //@line 10926
                                            $38 = $$lcssa; //@line 10926
                                            $GETTXT$2$i = 63; //@line 10926
                                            break L29;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 10930
                                        $GETTXT$1$i = $$lcssa169 << 24 >> 24 > 36 ? $29 + -26 | 0 : $29; //@line 10934
                                    }
                                } while (0);
                                $36 = $$lcssa + 1 | 0; //@line 10937
                                HEAP32[4236] = $36; //@line 10938
                                $172 = -1; //@line 10939
                                $38 = $36; //@line 10939
                                $GETTXT$2$i = $GETTXT$1$i; //@line 10939
                            }
                        } while (0);
                        $37 = $GETTXT$2$i << 6; //@line 10942
                        L39: do {
                            if (($38 | 0) > ($20 | 0)) {
                                $179 = $38; //@line 10946
                                $189 = $172; //@line 10946
                                $GETTXT$2$i$1 = $37; //@line 10946
                            } else {
                                $165 = HEAP8[17464 + $38 >> 0] | 0; //@line 10949
                                if (!($165 << 24 >> 24)) {
                                    $179 = $38; //@line 10952
                                    $189 = $172; //@line 10952
                                    $GETTXT$2$i$1 = $37; //@line 10952
                                } else {
                                    $167 = $165 << 24 >> 24; //@line 10954
                                    do {
                                        if ($165 << 24 >> 24 > 62) {
                                            if (($172 | 0) == ($38 | 0)) {
                                                HEAP32[4926] = -1; //@line 10962
                                                $GETTXT$1$i$1 = $37 + -63 + $167 | 0; //@line 10963
                                                break;
                                            } else {
                                                HEAP32[4926] = $38; //@line 10967
                                                $179 = $38; //@line 10968
                                                $189 = $38; //@line 10968
                                                $GETTXT$2$i$1 = $37 | 63; //@line 10968
                                                break L39;
                                            }
                                        } else {
                                            HEAP32[4926] = -1; //@line 10972
                                            $GETTXT$1$i$1 = ($165 << 24 >> 24 > 36 ? $167 + -26 | 0 : $167) + $37 | 0; //@line 10977
                                        }
                                    } while (0);
                                    $177 = $38 + 1 | 0; //@line 10980
                                    HEAP32[4236] = $177; //@line 10981
                                    $179 = $177; //@line 10982
                                    $189 = -1; //@line 10982
                                    $GETTXT$2$i$1 = $GETTXT$1$i$1; //@line 10982
                                }
                            }
                        } while (0);
                        $178 = $GETTXT$2$i$1 << 6; //@line 10986
                        L50: do {
                            if (($179 | 0) > ($20 | 0)) {
                                $196 = $179; //@line 10990
                                $206 = $189; //@line 10990
                                $GETTXT$2$i$2 = $178; //@line 10990
                            } else {
                                $182 = HEAP8[17464 + $179 >> 0] | 0; //@line 10993
                                if (!($182 << 24 >> 24)) {
                                    $196 = $179; //@line 10996
                                    $206 = $189; //@line 10996
                                    $GETTXT$2$i$2 = $178; //@line 10996
                                } else {
                                    $184 = $182 << 24 >> 24; //@line 10998
                                    do {
                                        if ($182 << 24 >> 24 > 62) {
                                            if (($189 | 0) == ($179 | 0)) {
                                                HEAP32[4926] = -1; //@line 11006
                                                $GETTXT$1$i$2 = $178 + -63 + $184 | 0; //@line 11007
                                                break;
                                            } else {
                                                HEAP32[4926] = $179; //@line 11011
                                                $196 = $179; //@line 11012
                                                $206 = $179; //@line 11012
                                                $GETTXT$2$i$2 = $178 | 63; //@line 11012
                                                break L50;
                                            }
                                        } else {
                                            HEAP32[4926] = -1; //@line 11016
                                            $GETTXT$1$i$2 = ($182 << 24 >> 24 > 36 ? $184 + -26 | 0 : $184) + $178 | 0; //@line 11021
                                        }
                                    } while (0);
                                    $194 = $179 + 1 | 0; //@line 11024
                                    HEAP32[4236] = $194; //@line 11025
                                    $196 = $194; //@line 11026
                                    $206 = -1; //@line 11026
                                    $GETTXT$2$i$2 = $GETTXT$1$i$2; //@line 11026
                                }
                            }
                        } while (0);
                        $195 = $GETTXT$2$i$2 << 6; //@line 11030
                        L61: do {
                            if (($196 | 0) > ($20 | 0)) {
                                $213 = $196; //@line 11034
                                $223 = $206; //@line 11034
                                $GETTXT$2$i$3 = $195; //@line 11034
                            } else {
                                $199 = HEAP8[17464 + $196 >> 0] | 0; //@line 11037
                                if (!($199 << 24 >> 24)) {
                                    $213 = $196; //@line 11040
                                    $223 = $206; //@line 11040
                                    $GETTXT$2$i$3 = $195; //@line 11040
                                } else {
                                    $201 = $199 << 24 >> 24; //@line 11042
                                    do {
                                        if ($199 << 24 >> 24 > 62) {
                                            if (($206 | 0) == ($196 | 0)) {
                                                HEAP32[4926] = -1; //@line 11050
                                                $GETTXT$1$i$3 = $195 + -63 + $201 | 0; //@line 11051
                                                break;
                                            } else {
                                                HEAP32[4926] = $196; //@line 11055
                                                $213 = $196; //@line 11056
                                                $223 = $196; //@line 11056
                                                $GETTXT$2$i$3 = $195 | 63; //@line 11056
                                                break L61;
                                            }
                                        } else {
                                            HEAP32[4926] = -1; //@line 11060
                                            $GETTXT$1$i$3 = ($199 << 24 >> 24 > 36 ? $201 + -26 | 0 : $201) + $195 | 0; //@line 11065
                                        }
                                    } while (0);
                                    $211 = $196 + 1 | 0; //@line 11068
                                    HEAP32[4236] = $211; //@line 11069
                                    $213 = $211; //@line 11070
                                    $223 = -1; //@line 11070
                                    $GETTXT$2$i$3 = $GETTXT$1$i$3; //@line 11070
                                }
                            }
                        } while (0);
                        $212 = $GETTXT$2$i$3 << 6; //@line 11074
                        if (($213 | 0) > ($20 | 0)) {
                            $$0$i = $212; //@line 11077
                        } else {
                            $216 = HEAP8[17464 + $213 >> 0] | 0; //@line 11080
                            if (!($216 << 24 >> 24)) {
                                $$0$i = $212; //@line 11083
                            } else {
                                $218 = $216 << 24 >> 24; //@line 11085
                                do {
                                    if ($216 << 24 >> 24 > 62) {
                                        if (($223 | 0) == ($213 | 0)) {
                                            HEAP32[4926] = -1; //@line 11093
                                            $GETTXT$1$i$4 = $212 + -63 + $218 | 0; //@line 11094
                                            break;
                                        } else {
                                            HEAP32[4926] = $213; //@line 11098
                                            $$0$i = $212 | 63; //@line 11099
                                            break L24;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11103
                                        $GETTXT$1$i$4 = ($216 << 24 >> 24 > 36 ? $218 + -26 | 0 : $218) + $212 | 0; //@line 11108
                                    }
                                } while (0);
                                HEAP32[4236] = $213 + 1; //@line 11112
                                $$0$i = $GETTXT$1$i$4; //@line 11113
                            }
                        }
                    }
                } while (0);
                HEAP32[$wORD1 >> 2] = $$0$i; //@line 11118
                $1 = HEAP32[2] | 0; //@line 11119
            } while (($$0$i | 0) < 0 & ($1 | 0) != 0);
            $43 = HEAP32[4236] | 0; //@line 11129
            if (($43 | 0) == (HEAP32[4926] | 0)) {
                $55 = $43; //@line 11133
            } else {
                HEAP32[4926] = -1; //@line 11135
                $55 = -1; //@line 11136
            }
            $46 = HEAP32[4234] | 0; //@line 11138
            L86: do {
                if (($43 | 0) > ($46 | 0)) {
                    $$0$i12 = -1; //@line 11142
                } else {
                    $49 = HEAP8[17464 + $43 >> 0] | 0; //@line 11145
                    L88: do {
                        if (!($49 << 24 >> 24)) {
                            $237 = $55; //@line 11149
                            $60 = $43; //@line 11149
                            $GETTXT$2$i9 = 0; //@line 11149
                        } else {
                            $51 = $49 << 24 >> 24; //@line 11151
                            do {
                                if ($49 << 24 >> 24 > 62) {
                                    if (($55 | 0) == ($43 | 0)) {
                                        HEAP32[4926] = -1; //@line 11158
                                        $GETTXT$1$i8 = $51 + -63 | 0; //@line 11159
                                        break;
                                    } else {
                                        HEAP32[4926] = $43; //@line 11162
                                        $237 = $43; //@line 11163
                                        $60 = $43; //@line 11163
                                        $GETTXT$2$i9 = 63; //@line 11163
                                        break L88;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11167
                                    $GETTXT$1$i8 = $49 << 24 >> 24 > 36 ? $51 + -26 | 0 : $51; //@line 11171
                                }
                            } while (0);
                            $58 = $43 + 1 | 0; //@line 11174
                            HEAP32[4236] = $58; //@line 11175
                            $237 = -1; //@line 11176
                            $60 = $58; //@line 11176
                            $GETTXT$2$i9 = $GETTXT$1$i8; //@line 11176
                        }
                    } while (0);
                    $59 = $GETTXT$2$i9 << 6; //@line 11179
                    L98: do {
                        if (($60 | 0) > ($46 | 0)) {
                            $244 = $60; //@line 11183
                            $254 = $237; //@line 11183
                            $GETTXT$2$i9$1 = $59; //@line 11183
                        } else {
                            $230 = HEAP8[17464 + $60 >> 0] | 0; //@line 11186
                            if (!($230 << 24 >> 24)) {
                                $244 = $60; //@line 11189
                                $254 = $237; //@line 11189
                                $GETTXT$2$i9$1 = $59; //@line 11189
                            } else {
                                $232 = $230 << 24 >> 24; //@line 11191
                                do {
                                    if ($230 << 24 >> 24 > 62) {
                                        if (($237 | 0) == ($60 | 0)) {
                                            HEAP32[4926] = -1; //@line 11199
                                            $GETTXT$1$i8$1 = $59 + -63 + $232 | 0; //@line 11200
                                            break;
                                        } else {
                                            HEAP32[4926] = $60; //@line 11204
                                            $244 = $60; //@line 11205
                                            $254 = $60; //@line 11205
                                            $GETTXT$2$i9$1 = $59 | 63; //@line 11205
                                            break L98;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11209
                                        $GETTXT$1$i8$1 = ($230 << 24 >> 24 > 36 ? $232 + -26 | 0 : $232) + $59 | 0; //@line 11214
                                    }
                                } while (0);
                                $242 = $60 + 1 | 0; //@line 11217
                                HEAP32[4236] = $242; //@line 11218
                                $244 = $242; //@line 11219
                                $254 = -1; //@line 11219
                                $GETTXT$2$i9$1 = $GETTXT$1$i8$1; //@line 11219
                            }
                        }
                    } while (0);
                    $243 = $GETTXT$2$i9$1 << 6; //@line 11223
                    L109: do {
                        if (($244 | 0) > ($46 | 0)) {
                            $261 = $244; //@line 11227
                            $271 = $254; //@line 11227
                            $GETTXT$2$i9$2 = $243; //@line 11227
                        } else {
                            $247 = HEAP8[17464 + $244 >> 0] | 0; //@line 11230
                            if (!($247 << 24 >> 24)) {
                                $261 = $244; //@line 11233
                                $271 = $254; //@line 11233
                                $GETTXT$2$i9$2 = $243; //@line 11233
                            } else {
                                $249 = $247 << 24 >> 24; //@line 11235
                                do {
                                    if ($247 << 24 >> 24 > 62) {
                                        if (($254 | 0) == ($244 | 0)) {
                                            HEAP32[4926] = -1; //@line 11243
                                            $GETTXT$1$i8$2 = $243 + -63 + $249 | 0; //@line 11244
                                            break;
                                        } else {
                                            HEAP32[4926] = $244; //@line 11248
                                            $261 = $244; //@line 11249
                                            $271 = $244; //@line 11249
                                            $GETTXT$2$i9$2 = $243 | 63; //@line 11249
                                            break L109;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11253
                                        $GETTXT$1$i8$2 = ($247 << 24 >> 24 > 36 ? $249 + -26 | 0 : $249) + $243 | 0; //@line 11258
                                    }
                                } while (0);
                                $259 = $244 + 1 | 0; //@line 11261
                                HEAP32[4236] = $259; //@line 11262
                                $261 = $259; //@line 11263
                                $271 = -1; //@line 11263
                                $GETTXT$2$i9$2 = $GETTXT$1$i8$2; //@line 11263
                            }
                        }
                    } while (0);
                    $260 = $GETTXT$2$i9$2 << 6; //@line 11267
                    L120: do {
                        if (($261 | 0) > ($46 | 0)) {
                            $278 = $261; //@line 11271
                            $288 = $271; //@line 11271
                            $GETTXT$2$i9$3 = $260; //@line 11271
                        } else {
                            $264 = HEAP8[17464 + $261 >> 0] | 0; //@line 11274
                            if (!($264 << 24 >> 24)) {
                                $278 = $261; //@line 11277
                                $288 = $271; //@line 11277
                                $GETTXT$2$i9$3 = $260; //@line 11277
                            } else {
                                $266 = $264 << 24 >> 24; //@line 11279
                                do {
                                    if ($264 << 24 >> 24 > 62) {
                                        if (($271 | 0) == ($261 | 0)) {
                                            HEAP32[4926] = -1; //@line 11287
                                            $GETTXT$1$i8$3 = $260 + -63 + $266 | 0; //@line 11288
                                            break;
                                        } else {
                                            HEAP32[4926] = $261; //@line 11292
                                            $278 = $261; //@line 11293
                                            $288 = $261; //@line 11293
                                            $GETTXT$2$i9$3 = $260 | 63; //@line 11293
                                            break L120;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11297
                                        $GETTXT$1$i8$3 = ($264 << 24 >> 24 > 36 ? $266 + -26 | 0 : $266) + $260 | 0; //@line 11302
                                    }
                                } while (0);
                                $276 = $261 + 1 | 0; //@line 11305
                                HEAP32[4236] = $276; //@line 11306
                                $278 = $276; //@line 11307
                                $288 = -1; //@line 11307
                                $GETTXT$2$i9$3 = $GETTXT$1$i8$3; //@line 11307
                            }
                        }
                    } while (0);
                    $277 = $GETTXT$2$i9$3 << 6; //@line 11311
                    if (($278 | 0) > ($46 | 0)) {
                        $$0$i12 = $277; //@line 11314
                    } else {
                        $281 = HEAP8[17464 + $278 >> 0] | 0; //@line 11317
                        if (!($281 << 24 >> 24)) {
                            $$0$i12 = $277; //@line 11320
                        } else {
                            $283 = $281 << 24 >> 24; //@line 11322
                            do {
                                if ($281 << 24 >> 24 > 62) {
                                    if (($288 | 0) == ($278 | 0)) {
                                        HEAP32[4926] = -1; //@line 11330
                                        $GETTXT$1$i8$4 = $277 + -63 + $283 | 0; //@line 11331
                                        break;
                                    } else {
                                        HEAP32[4926] = $278; //@line 11335
                                        $$0$i12 = $277 | 63; //@line 11336
                                        break L86;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11340
                                    $GETTXT$1$i8$4 = ($281 << 24 >> 24 > 36 ? $283 + -26 | 0 : $283) + $277 | 0; //@line 11345
                                }
                            } while (0);
                            HEAP32[4236] = $278 + 1; //@line 11349
                            $$0$i12 = $GETTXT$1$i8$4; //@line 11350
                        }
                    }
                }
            } while (0);
            HEAP32[$wORD1X >> 2] = $$0$i12; //@line 11355
            $62 = HEAP32[4234] | 0; //@line 11356
            $$pre = HEAP32[4236] | 0; //@line 11357
            $$pre129 = HEAP32[4926] | 0; //@line 11358
            $624 = $$pre129; //@line 11359
            $625 = $$pre; //@line 11359
            $63 = $$pre; //@line 11359
            $65 = $$pre129; //@line 11359
            while (1) {
                if (($63 | 0) == ($65 | 0)) {
                    $626 = $624; //@line 11363
                    $74 = $65; //@line 11363
                } else {
                    HEAP32[4926] = -1; //@line 11365
                    $626 = -1; //@line 11366
                    $74 = -1; //@line 11366
                }
                if (($63 | 0) > ($62 | 0)) {
                    $81 = $625; //@line 11370
                    $83 = $626; //@line 11370
                    break;
                }
                $68 = HEAP8[17464 + $63 >> 0] | 0; //@line 11374
                L147: do {
                    if (!($68 << 24 >> 24)) {
                        $302 = $74; //@line 11378
                        $627 = $626; //@line 11378
                        $628 = $625; //@line 11378
                        $79 = $63; //@line 11378
                        $GETTXT$2$i22 = 0; //@line 11378
                    } else {
                        $70 = $68 << 24 >> 24; //@line 11380
                        do {
                            if ($68 << 24 >> 24 > 62) {
                                if (($74 | 0) == ($63 | 0)) {
                                    HEAP32[4926] = -1; //@line 11387
                                    $GETTXT$1$i21 = $70 + -63 | 0; //@line 11388
                                    break;
                                } else {
                                    HEAP32[4926] = $63; //@line 11391
                                    $302 = $63; //@line 11392
                                    $627 = $63; //@line 11392
                                    $628 = $625; //@line 11392
                                    $79 = $63; //@line 11392
                                    $GETTXT$2$i22 = 63; //@line 11392
                                    break L147;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 11396
                                $GETTXT$1$i21 = $68 << 24 >> 24 > 36 ? $70 + -26 | 0 : $70; //@line 11400
                            }
                        } while (0);
                        $77 = $63 + 1 | 0; //@line 11403
                        HEAP32[4236] = $77; //@line 11404
                        $302 = -1; //@line 11405
                        $627 = -1; //@line 11405
                        $628 = $77; //@line 11405
                        $79 = $77; //@line 11405
                        $GETTXT$2$i22 = $GETTXT$1$i21; //@line 11405
                    }
                } while (0);
                $78 = $GETTXT$2$i22 << 6; //@line 11408
                L157: do {
                    if (($79 | 0) > ($62 | 0)) {
                        $309 = $79; //@line 11412
                        $319 = $302; //@line 11412
                        $629 = $627; //@line 11412
                        $630 = $628; //@line 11412
                        $GETTXT$2$i22$1 = $78; //@line 11412
                    } else {
                        $295 = HEAP8[17464 + $79 >> 0] | 0; //@line 11415
                        if (!($295 << 24 >> 24)) {
                            $309 = $79; //@line 11418
                            $319 = $302; //@line 11418
                            $629 = $627; //@line 11418
                            $630 = $628; //@line 11418
                            $GETTXT$2$i22$1 = $78; //@line 11418
                        } else {
                            $297 = $295 << 24 >> 24; //@line 11420
                            do {
                                if ($295 << 24 >> 24 > 62) {
                                    if (($302 | 0) == ($79 | 0)) {
                                        HEAP32[4926] = -1; //@line 11428
                                        $GETTXT$1$i21$1 = $78 + -63 + $297 | 0; //@line 11429
                                        break;
                                    } else {
                                        HEAP32[4926] = $79; //@line 11433
                                        $309 = $79; //@line 11434
                                        $319 = $79; //@line 11434
                                        $629 = $79; //@line 11434
                                        $630 = $628; //@line 11434
                                        $GETTXT$2$i22$1 = $78 | 63; //@line 11434
                                        break L157;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11438
                                    $GETTXT$1$i21$1 = ($295 << 24 >> 24 > 36 ? $297 + -26 | 0 : $297) + $78 | 0; //@line 11443
                                }
                            } while (0);
                            $307 = $79 + 1 | 0; //@line 11446
                            HEAP32[4236] = $307; //@line 11447
                            $309 = $307; //@line 11448
                            $319 = -1; //@line 11448
                            $629 = -1; //@line 11448
                            $630 = $307; //@line 11448
                            $GETTXT$2$i22$1 = $GETTXT$1$i21$1; //@line 11448
                        }
                    }
                } while (0);
                $308 = $GETTXT$2$i22$1 << 6; //@line 11452
                L168: do {
                    if (($309 | 0) > ($62 | 0)) {
                        $326 = $309; //@line 11456
                        $336 = $319; //@line 11456
                        $638 = $629; //@line 11456
                        $639 = $630; //@line 11456
                        $GETTXT$2$i22$2 = $308; //@line 11456
                    } else {
                        $312 = HEAP8[17464 + $309 >> 0] | 0; //@line 11459
                        if (!($312 << 24 >> 24)) {
                            $326 = $309; //@line 11462
                            $336 = $319; //@line 11462
                            $638 = $629; //@line 11462
                            $639 = $630; //@line 11462
                            $GETTXT$2$i22$2 = $308; //@line 11462
                        } else {
                            $314 = $312 << 24 >> 24; //@line 11464
                            do {
                                if ($312 << 24 >> 24 > 62) {
                                    if (($319 | 0) == ($309 | 0)) {
                                        HEAP32[4926] = -1; //@line 11472
                                        $GETTXT$1$i21$2 = $308 + -63 + $314 | 0; //@line 11473
                                        break;
                                    } else {
                                        HEAP32[4926] = $309; //@line 11477
                                        $326 = $309; //@line 11478
                                        $336 = $309; //@line 11478
                                        $638 = $309; //@line 11478
                                        $639 = $630; //@line 11478
                                        $GETTXT$2$i22$2 = $308 | 63; //@line 11478
                                        break L168;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11482
                                    $GETTXT$1$i21$2 = ($312 << 24 >> 24 > 36 ? $314 + -26 | 0 : $314) + $308 | 0; //@line 11487
                                }
                            } while (0);
                            $324 = $309 + 1 | 0; //@line 11490
                            HEAP32[4236] = $324; //@line 11491
                            $326 = $324; //@line 11492
                            $336 = -1; //@line 11492
                            $638 = -1; //@line 11492
                            $639 = $324; //@line 11492
                            $GETTXT$2$i22$2 = $GETTXT$1$i21$2; //@line 11492
                        }
                    }
                } while (0);
                $325 = $GETTXT$2$i22$2 << 6; //@line 11496
                L179: do {
                    if (($326 | 0) > ($62 | 0)) {
                        $343 = $326; //@line 11500
                        $353 = $336; //@line 11500
                        $640 = $638; //@line 11500
                        $641 = $639; //@line 11500
                        $GETTXT$2$i22$3 = $325; //@line 11500
                    } else {
                        $329 = HEAP8[17464 + $326 >> 0] | 0; //@line 11503
                        if (!($329 << 24 >> 24)) {
                            $343 = $326; //@line 11506
                            $353 = $336; //@line 11506
                            $640 = $638; //@line 11506
                            $641 = $639; //@line 11506
                            $GETTXT$2$i22$3 = $325; //@line 11506
                        } else {
                            $331 = $329 << 24 >> 24; //@line 11508
                            do {
                                if ($329 << 24 >> 24 > 62) {
                                    if (($336 | 0) == ($326 | 0)) {
                                        HEAP32[4926] = -1; //@line 11516
                                        $GETTXT$1$i21$3 = $325 + -63 + $331 | 0; //@line 11517
                                        break;
                                    } else {
                                        HEAP32[4926] = $326; //@line 11521
                                        $343 = $326; //@line 11522
                                        $353 = $326; //@line 11522
                                        $640 = $326; //@line 11522
                                        $641 = $639; //@line 11522
                                        $GETTXT$2$i22$3 = $325 | 63; //@line 11522
                                        break L179;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11526
                                    $GETTXT$1$i21$3 = ($329 << 24 >> 24 > 36 ? $331 + -26 | 0 : $331) + $325 | 0; //@line 11531
                                }
                            } while (0);
                            $341 = $326 + 1 | 0; //@line 11534
                            HEAP32[4236] = $341; //@line 11535
                            $343 = $341; //@line 11536
                            $353 = -1; //@line 11536
                            $640 = -1; //@line 11536
                            $641 = $341; //@line 11536
                            $GETTXT$2$i22$3 = $GETTXT$1$i21$3; //@line 11536
                        }
                    }
                } while (0);
                $342 = $GETTXT$2$i22$3 << 6; //@line 11540
                L190: do {
                    if (($343 | 0) > ($62 | 0)) {
                        $642 = $640; //@line 11544
                        $643 = $641; //@line 11544
                        $644 = $353; //@line 11544
                        $645 = $343; //@line 11544
                        $GETTXT$2$i22$4 = $342; //@line 11544
                    } else {
                        $346 = HEAP8[17464 + $343 >> 0] | 0; //@line 11547
                        if (!($346 << 24 >> 24)) {
                            $642 = $640; //@line 11550
                            $643 = $641; //@line 11550
                            $644 = $353; //@line 11550
                            $645 = $343; //@line 11550
                            $GETTXT$2$i22$4 = $342; //@line 11550
                        } else {
                            $348 = $346 << 24 >> 24; //@line 11552
                            do {
                                if ($346 << 24 >> 24 > 62) {
                                    if (($353 | 0) == ($343 | 0)) {
                                        HEAP32[4926] = -1; //@line 11560
                                        $GETTXT$1$i21$4 = $342 + -63 + $348 | 0; //@line 11561
                                        break;
                                    } else {
                                        HEAP32[4926] = $343; //@line 11565
                                        $642 = $343; //@line 11566
                                        $643 = $641; //@line 11566
                                        $644 = $343; //@line 11566
                                        $645 = $343; //@line 11566
                                        $GETTXT$2$i22$4 = $342 | 63; //@line 11566
                                        break L190;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11570
                                    $GETTXT$1$i21$4 = ($346 << 24 >> 24 > 36 ? $348 + -26 | 0 : $348) + $342 | 0; //@line 11575
                                }
                            } while (0);
                            $358 = $343 + 1 | 0; //@line 11578
                            HEAP32[4236] = $358; //@line 11579
                            $642 = -1; //@line 11580
                            $643 = $358; //@line 11580
                            $644 = -1; //@line 11580
                            $645 = $358; //@line 11580
                            $GETTXT$2$i22$4 = $GETTXT$1$i21$4; //@line 11580
                        }
                    }
                } while (0);
                if (($GETTXT$2$i22$4 | 0) > 0) {
                    $624 = $642; //@line 11586
                    $625 = $643; //@line 11586
                    $63 = $645; //@line 11586
                    $65 = $644; //@line 11586
                } else {
                    $81 = $643; //@line 11588
                    $83 = $642; //@line 11588
                    break;
                }
            }
            if (($81 | 0) == ($83 | 0)) {
                $96 = $83; //@line 11594
            } else {
                HEAP32[4926] = -1; //@line 11596
                $96 = -1; //@line 11597
            }
            L205: do {
                if (($81 | 0) > ($62 | 0)) {
                    $$0$i39 = -1; //@line 11602
                } else {
                    $86 = $81; //@line 11604
                    while (1) {
                        $87 = HEAP8[17464 + $86 >> 0] | 0; //@line 11607
                        if ($87 << 24 >> 24) {
                            $$lcssa171 = $86; //@line 11610
                            $$lcssa173 = $87; //@line 11610
                            break;
                        }
                        $86$looptemp = $86;
                        $86 = $86 + 1 | 0; //@line 11613
                        HEAP32[4236] = $86; //@line 11614
                        if (($86$looptemp | 0) >= ($62 | 0)) {
                            $$0$i39 = -1; //@line 11619
                            break L205;
                        }
                    }
                    L210: do {
                        if (($$lcssa171 | 0) > ($62 | 0)) {
                            $101 = $$lcssa171; //@line 11626
                            $368 = $96; //@line 11626
                            $GETTXT$2$i36 = 0; //@line 11626
                        } else {
                            $92 = $$lcssa173 << 24 >> 24; //@line 11628
                            do {
                                if ($$lcssa173 << 24 >> 24 > 62) {
                                    if (($96 | 0) == ($$lcssa171 | 0)) {
                                        HEAP32[4926] = -1; //@line 11635
                                        $GETTXT$1$i35 = $92 + -63 | 0; //@line 11636
                                        break;
                                    } else {
                                        HEAP32[4926] = $$lcssa171; //@line 11639
                                        $101 = $$lcssa171; //@line 11640
                                        $368 = $$lcssa171; //@line 11640
                                        $GETTXT$2$i36 = 63; //@line 11640
                                        break L210;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11644
                                    $GETTXT$1$i35 = $$lcssa173 << 24 >> 24 > 36 ? $92 + -26 | 0 : $92; //@line 11648
                                }
                            } while (0);
                            $99 = $$lcssa171 + 1 | 0; //@line 11651
                            HEAP32[4236] = $99; //@line 11652
                            $101 = $99; //@line 11653
                            $368 = -1; //@line 11653
                            $GETTXT$2$i36 = $GETTXT$1$i35; //@line 11653
                        }
                    } while (0);
                    $100 = $GETTXT$2$i36 << 6; //@line 11656
                    L220: do {
                        if (($101 | 0) > ($62 | 0)) {
                            $375 = $101; //@line 11660
                            $385 = $368; //@line 11660
                            $GETTXT$2$i36$1 = $100; //@line 11660
                        } else {
                            $361 = HEAP8[17464 + $101 >> 0] | 0; //@line 11663
                            if (!($361 << 24 >> 24)) {
                                $375 = $101; //@line 11666
                                $385 = $368; //@line 11666
                                $GETTXT$2$i36$1 = $100; //@line 11666
                            } else {
                                $363 = $361 << 24 >> 24; //@line 11668
                                do {
                                    if ($361 << 24 >> 24 > 62) {
                                        if (($368 | 0) == ($101 | 0)) {
                                            HEAP32[4926] = -1; //@line 11676
                                            $GETTXT$1$i35$1 = $100 + -63 + $363 | 0; //@line 11677
                                            break;
                                        } else {
                                            HEAP32[4926] = $101; //@line 11681
                                            $375 = $101; //@line 11682
                                            $385 = $101; //@line 11682
                                            $GETTXT$2$i36$1 = $100 | 63; //@line 11682
                                            break L220;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11686
                                        $GETTXT$1$i35$1 = ($361 << 24 >> 24 > 36 ? $363 + -26 | 0 : $363) + $100 | 0; //@line 11691
                                    }
                                } while (0);
                                $373 = $101 + 1 | 0; //@line 11694
                                HEAP32[4236] = $373; //@line 11695
                                $375 = $373; //@line 11696
                                $385 = -1; //@line 11696
                                $GETTXT$2$i36$1 = $GETTXT$1$i35$1; //@line 11696
                            }
                        }
                    } while (0);
                    $374 = $GETTXT$2$i36$1 << 6; //@line 11700
                    L231: do {
                        if (($375 | 0) > ($62 | 0)) {
                            $392 = $375; //@line 11704
                            $402 = $385; //@line 11704
                            $GETTXT$2$i36$2 = $374; //@line 11704
                        } else {
                            $378 = HEAP8[17464 + $375 >> 0] | 0; //@line 11707
                            if (!($378 << 24 >> 24)) {
                                $392 = $375; //@line 11710
                                $402 = $385; //@line 11710
                                $GETTXT$2$i36$2 = $374; //@line 11710
                            } else {
                                $380 = $378 << 24 >> 24; //@line 11712
                                do {
                                    if ($378 << 24 >> 24 > 62) {
                                        if (($385 | 0) == ($375 | 0)) {
                                            HEAP32[4926] = -1; //@line 11720
                                            $GETTXT$1$i35$2 = $374 + -63 + $380 | 0; //@line 11721
                                            break;
                                        } else {
                                            HEAP32[4926] = $375; //@line 11725
                                            $392 = $375; //@line 11726
                                            $402 = $375; //@line 11726
                                            $GETTXT$2$i36$2 = $374 | 63; //@line 11726
                                            break L231;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11730
                                        $GETTXT$1$i35$2 = ($378 << 24 >> 24 > 36 ? $380 + -26 | 0 : $380) + $374 | 0; //@line 11735
                                    }
                                } while (0);
                                $390 = $375 + 1 | 0; //@line 11738
                                HEAP32[4236] = $390; //@line 11739
                                $392 = $390; //@line 11740
                                $402 = -1; //@line 11740
                                $GETTXT$2$i36$2 = $GETTXT$1$i35$2; //@line 11740
                            }
                        }
                    } while (0);
                    $391 = $GETTXT$2$i36$2 << 6; //@line 11744
                    L242: do {
                        if (($392 | 0) > ($62 | 0)) {
                            $409 = $392; //@line 11748
                            $419 = $402; //@line 11748
                            $GETTXT$2$i36$3 = $391; //@line 11748
                        } else {
                            $395 = HEAP8[17464 + $392 >> 0] | 0; //@line 11751
                            if (!($395 << 24 >> 24)) {
                                $409 = $392; //@line 11754
                                $419 = $402; //@line 11754
                                $GETTXT$2$i36$3 = $391; //@line 11754
                            } else {
                                $397 = $395 << 24 >> 24; //@line 11756
                                do {
                                    if ($395 << 24 >> 24 > 62) {
                                        if (($402 | 0) == ($392 | 0)) {
                                            HEAP32[4926] = -1; //@line 11764
                                            $GETTXT$1$i35$3 = $391 + -63 + $397 | 0; //@line 11765
                                            break;
                                        } else {
                                            HEAP32[4926] = $392; //@line 11769
                                            $409 = $392; //@line 11770
                                            $419 = $392; //@line 11770
                                            $GETTXT$2$i36$3 = $391 | 63; //@line 11770
                                            break L242;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11774
                                        $GETTXT$1$i35$3 = ($395 << 24 >> 24 > 36 ? $397 + -26 | 0 : $397) + $391 | 0; //@line 11779
                                    }
                                } while (0);
                                $407 = $392 + 1 | 0; //@line 11782
                                HEAP32[4236] = $407; //@line 11783
                                $409 = $407; //@line 11784
                                $419 = -1; //@line 11784
                                $GETTXT$2$i36$3 = $GETTXT$1$i35$3; //@line 11784
                            }
                        }
                    } while (0);
                    $408 = $GETTXT$2$i36$3 << 6; //@line 11788
                    if (($409 | 0) > ($62 | 0)) {
                        $$0$i39 = $408; //@line 11791
                    } else {
                        $412 = HEAP8[17464 + $409 >> 0] | 0; //@line 11794
                        if (!($412 << 24 >> 24)) {
                            $$0$i39 = $408; //@line 11797
                        } else {
                            $414 = $412 << 24 >> 24; //@line 11799
                            do {
                                if ($412 << 24 >> 24 > 62) {
                                    if (($419 | 0) == ($409 | 0)) {
                                        HEAP32[4926] = -1; //@line 11807
                                        $GETTXT$1$i35$4 = $408 + -63 + $414 | 0; //@line 11808
                                        break;
                                    } else {
                                        HEAP32[4926] = $409; //@line 11812
                                        $$0$i39 = $408 | 63; //@line 11813
                                        break L205;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11817
                                    $GETTXT$1$i35$4 = ($412 << 24 >> 24 > 36 ? $414 + -26 | 0 : $414) + $408 | 0; //@line 11822
                                }
                            } while (0);
                            HEAP32[4236] = $409 + 1; //@line 11826
                            $$0$i39 = $GETTXT$1$i35$4; //@line 11827
                        }
                    }
                }
            } while (0);
            HEAP32[$wORD2 >> 2] = $$0$i39; //@line 11832
            $103 = HEAP32[4236] | 0; //@line 11833
            if (($103 | 0) == (HEAP32[4926] | 0)) {
                $115 = $103; //@line 11837
            } else {
                HEAP32[4926] = -1; //@line 11839
                $115 = -1; //@line 11840
            }
            $106 = HEAP32[4234] | 0; //@line 11842
            L266: do {
                if (($103 | 0) > ($106 | 0)) {
                    $$0$i52 = -1; //@line 11846
                } else {
                    $109 = HEAP8[17464 + $103 >> 0] | 0; //@line 11849
                    L268: do {
                        if (!($109 << 24 >> 24)) {
                            $120 = $103; //@line 11853
                            $433 = $115; //@line 11853
                            $GETTXT$2$i49 = 0; //@line 11853
                        } else {
                            $111 = $109 << 24 >> 24; //@line 11855
                            do {
                                if ($109 << 24 >> 24 > 62) {
                                    if (($115 | 0) == ($103 | 0)) {
                                        HEAP32[4926] = -1; //@line 11862
                                        $GETTXT$1$i48 = $111 + -63 | 0; //@line 11863
                                        break;
                                    } else {
                                        HEAP32[4926] = $103; //@line 11866
                                        $120 = $103; //@line 11867
                                        $433 = $103; //@line 11867
                                        $GETTXT$2$i49 = 63; //@line 11867
                                        break L268;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 11871
                                    $GETTXT$1$i48 = $109 << 24 >> 24 > 36 ? $111 + -26 | 0 : $111; //@line 11875
                                }
                            } while (0);
                            $118 = $103 + 1 | 0; //@line 11878
                            HEAP32[4236] = $118; //@line 11879
                            $120 = $118; //@line 11880
                            $433 = -1; //@line 11880
                            $GETTXT$2$i49 = $GETTXT$1$i48; //@line 11880
                        }
                    } while (0);
                    $119 = $GETTXT$2$i49 << 6; //@line 11883
                    L278: do {
                        if (($120 | 0) > ($106 | 0)) {
                            $440 = $120; //@line 11887
                            $450 = $433; //@line 11887
                            $GETTXT$2$i49$1 = $119; //@line 11887
                        } else {
                            $426 = HEAP8[17464 + $120 >> 0] | 0; //@line 11890
                            if (!($426 << 24 >> 24)) {
                                $440 = $120; //@line 11893
                                $450 = $433; //@line 11893
                                $GETTXT$2$i49$1 = $119; //@line 11893
                            } else {
                                $428 = $426 << 24 >> 24; //@line 11895
                                do {
                                    if ($426 << 24 >> 24 > 62) {
                                        if (($433 | 0) == ($120 | 0)) {
                                            HEAP32[4926] = -1; //@line 11903
                                            $GETTXT$1$i48$1 = $119 + -63 + $428 | 0; //@line 11904
                                            break;
                                        } else {
                                            HEAP32[4926] = $120; //@line 11908
                                            $440 = $120; //@line 11909
                                            $450 = $120; //@line 11909
                                            $GETTXT$2$i49$1 = $119 | 63; //@line 11909
                                            break L278;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11913
                                        $GETTXT$1$i48$1 = ($426 << 24 >> 24 > 36 ? $428 + -26 | 0 : $428) + $119 | 0; //@line 11918
                                    }
                                } while (0);
                                $438 = $120 + 1 | 0; //@line 11921
                                HEAP32[4236] = $438; //@line 11922
                                $440 = $438; //@line 11923
                                $450 = -1; //@line 11923
                                $GETTXT$2$i49$1 = $GETTXT$1$i48$1; //@line 11923
                            }
                        }
                    } while (0);
                    $439 = $GETTXT$2$i49$1 << 6; //@line 11927
                    L289: do {
                        if (($440 | 0) > ($106 | 0)) {
                            $457 = $440; //@line 11931
                            $467 = $450; //@line 11931
                            $GETTXT$2$i49$2 = $439; //@line 11931
                        } else {
                            $443 = HEAP8[17464 + $440 >> 0] | 0; //@line 11934
                            if (!($443 << 24 >> 24)) {
                                $457 = $440; //@line 11937
                                $467 = $450; //@line 11937
                                $GETTXT$2$i49$2 = $439; //@line 11937
                            } else {
                                $445 = $443 << 24 >> 24; //@line 11939
                                do {
                                    if ($443 << 24 >> 24 > 62) {
                                        if (($450 | 0) == ($440 | 0)) {
                                            HEAP32[4926] = -1; //@line 11947
                                            $GETTXT$1$i48$2 = $439 + -63 + $445 | 0; //@line 11948
                                            break;
                                        } else {
                                            HEAP32[4926] = $440; //@line 11952
                                            $457 = $440; //@line 11953
                                            $467 = $440; //@line 11953
                                            $GETTXT$2$i49$2 = $439 | 63; //@line 11953
                                            break L289;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 11957
                                        $GETTXT$1$i48$2 = ($443 << 24 >> 24 > 36 ? $445 + -26 | 0 : $445) + $439 | 0; //@line 11962
                                    }
                                } while (0);
                                $455 = $440 + 1 | 0; //@line 11965
                                HEAP32[4236] = $455; //@line 11966
                                $457 = $455; //@line 11967
                                $467 = -1; //@line 11967
                                $GETTXT$2$i49$2 = $GETTXT$1$i48$2; //@line 11967
                            }
                        }
                    } while (0);
                    $456 = $GETTXT$2$i49$2 << 6; //@line 11971
                    L300: do {
                        if (($457 | 0) > ($106 | 0)) {
                            $474 = $457; //@line 11975
                            $484 = $467; //@line 11975
                            $GETTXT$2$i49$3 = $456; //@line 11975
                        } else {
                            $460 = HEAP8[17464 + $457 >> 0] | 0; //@line 11978
                            if (!($460 << 24 >> 24)) {
                                $474 = $457; //@line 11981
                                $484 = $467; //@line 11981
                                $GETTXT$2$i49$3 = $456; //@line 11981
                            } else {
                                $462 = $460 << 24 >> 24; //@line 11983
                                do {
                                    if ($460 << 24 >> 24 > 62) {
                                        if (($467 | 0) == ($457 | 0)) {
                                            HEAP32[4926] = -1; //@line 11991
                                            $GETTXT$1$i48$3 = $456 + -63 + $462 | 0; //@line 11992
                                            break;
                                        } else {
                                            HEAP32[4926] = $457; //@line 11996
                                            $474 = $457; //@line 11997
                                            $484 = $457; //@line 11997
                                            $GETTXT$2$i49$3 = $456 | 63; //@line 11997
                                            break L300;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 12001
                                        $GETTXT$1$i48$3 = ($460 << 24 >> 24 > 36 ? $462 + -26 | 0 : $462) + $456 | 0; //@line 12006
                                    }
                                } while (0);
                                $472 = $457 + 1 | 0; //@line 12009
                                HEAP32[4236] = $472; //@line 12010
                                $474 = $472; //@line 12011
                                $484 = -1; //@line 12011
                                $GETTXT$2$i49$3 = $GETTXT$1$i48$3; //@line 12011
                            }
                        }
                    } while (0);
                    $473 = $GETTXT$2$i49$3 << 6; //@line 12015
                    if (($474 | 0) > ($106 | 0)) {
                        $$0$i52 = $473; //@line 12018
                    } else {
                        $477 = HEAP8[17464 + $474 >> 0] | 0; //@line 12021
                        if (!($477 << 24 >> 24)) {
                            $$0$i52 = $473; //@line 12024
                        } else {
                            $479 = $477 << 24 >> 24; //@line 12026
                            do {
                                if ($477 << 24 >> 24 > 62) {
                                    if (($484 | 0) == ($474 | 0)) {
                                        HEAP32[4926] = -1; //@line 12034
                                        $GETTXT$1$i48$4 = $473 + -63 + $479 | 0; //@line 12035
                                        break;
                                    } else {
                                        HEAP32[4926] = $474; //@line 12039
                                        $$0$i52 = $473 | 63; //@line 12040
                                        break L266;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 12044
                                    $GETTXT$1$i48$4 = ($477 << 24 >> 24 > 36 ? $479 + -26 | 0 : $479) + $473 | 0; //@line 12049
                                }
                            } while (0);
                            HEAP32[4236] = $474 + 1; //@line 12053
                            $$0$i52 = $GETTXT$1$i48$4; //@line 12054
                        }
                    }
                }
            } while (0);
            HEAP32[$wORD2X >> 2] = $$0$i52; //@line 12059
            $122 = HEAP32[4234] | 0; //@line 12060
            $$pre130 = HEAP32[4236] | 0; //@line 12061
            $$pre131 = HEAP32[4926] | 0; //@line 12062
            $123 = $$pre130; //@line 12063
            $125 = $$pre131; //@line 12063
            $631 = $$pre131; //@line 12063
            $632 = $$pre130; //@line 12063
            while (1) {
                if (($123 | 0) == ($125 | 0)) {
                    $134 = $125; //@line 12067
                    $633 = $631; //@line 12067
                } else {
                    HEAP32[4926] = -1; //@line 12069
                    $134 = -1; //@line 12070
                    $633 = -1; //@line 12070
                }
                if (($123 | 0) > ($122 | 0)) {
                    $141 = $632; //@line 12074
                    $143 = $633; //@line 12074
                    break;
                }
                $128 = HEAP8[17464 + $123 >> 0] | 0; //@line 12078
                L327: do {
                    if (!($128 << 24 >> 24)) {
                        $139 = $123; //@line 12082
                        $498 = $134; //@line 12082
                        $634 = $633; //@line 12082
                        $635 = $632; //@line 12082
                        $GETTXT$2$i76 = 0; //@line 12082
                    } else {
                        $130 = $128 << 24 >> 24; //@line 12084
                        do {
                            if ($128 << 24 >> 24 > 62) {
                                if (($134 | 0) == ($123 | 0)) {
                                    HEAP32[4926] = -1; //@line 12091
                                    $GETTXT$1$i75 = $130 + -63 | 0; //@line 12092
                                    break;
                                } else {
                                    HEAP32[4926] = $123; //@line 12095
                                    $139 = $123; //@line 12096
                                    $498 = $123; //@line 12096
                                    $634 = $123; //@line 12096
                                    $635 = $632; //@line 12096
                                    $GETTXT$2$i76 = 63; //@line 12096
                                    break L327;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12100
                                $GETTXT$1$i75 = $128 << 24 >> 24 > 36 ? $130 + -26 | 0 : $130; //@line 12104
                            }
                        } while (0);
                        $137 = $123 + 1 | 0; //@line 12107
                        HEAP32[4236] = $137; //@line 12108
                        $139 = $137; //@line 12109
                        $498 = -1; //@line 12109
                        $634 = -1; //@line 12109
                        $635 = $137; //@line 12109
                        $GETTXT$2$i76 = $GETTXT$1$i75; //@line 12109
                    }
                } while (0);
                $138 = $GETTXT$2$i76 << 6; //@line 12112
                L337: do {
                    if (($139 | 0) > ($122 | 0)) {
                        $505 = $139; //@line 12116
                        $515 = $498; //@line 12116
                        $636 = $634; //@line 12116
                        $637 = $635; //@line 12116
                        $GETTXT$2$i76$1 = $138; //@line 12116
                    } else {
                        $491 = HEAP8[17464 + $139 >> 0] | 0; //@line 12119
                        if (!($491 << 24 >> 24)) {
                            $505 = $139; //@line 12122
                            $515 = $498; //@line 12122
                            $636 = $634; //@line 12122
                            $637 = $635; //@line 12122
                            $GETTXT$2$i76$1 = $138; //@line 12122
                        } else {
                            $493 = $491 << 24 >> 24; //@line 12124
                            do {
                                if ($491 << 24 >> 24 > 62) {
                                    if (($498 | 0) == ($139 | 0)) {
                                        HEAP32[4926] = -1; //@line 12132
                                        $GETTXT$1$i75$1 = $138 + -63 + $493 | 0; //@line 12133
                                        break;
                                    } else {
                                        HEAP32[4926] = $139; //@line 12137
                                        $505 = $139; //@line 12138
                                        $515 = $139; //@line 12138
                                        $636 = $139; //@line 12138
                                        $637 = $635; //@line 12138
                                        $GETTXT$2$i76$1 = $138 | 63; //@line 12138
                                        break L337;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 12142
                                    $GETTXT$1$i75$1 = ($491 << 24 >> 24 > 36 ? $493 + -26 | 0 : $493) + $138 | 0; //@line 12147
                                }
                            } while (0);
                            $503 = $139 + 1 | 0; //@line 12150
                            HEAP32[4236] = $503; //@line 12151
                            $505 = $503; //@line 12152
                            $515 = -1; //@line 12152
                            $636 = -1; //@line 12152
                            $637 = $503; //@line 12152
                            $GETTXT$2$i76$1 = $GETTXT$1$i75$1; //@line 12152
                        }
                    }
                } while (0);
                $504 = $GETTXT$2$i76$1 << 6; //@line 12156
                L348: do {
                    if (($505 | 0) > ($122 | 0)) {
                        $522 = $505; //@line 12160
                        $532 = $515; //@line 12160
                        $646 = $636; //@line 12160
                        $647 = $637; //@line 12160
                        $GETTXT$2$i76$2 = $504; //@line 12160
                    } else {
                        $508 = HEAP8[17464 + $505 >> 0] | 0; //@line 12163
                        if (!($508 << 24 >> 24)) {
                            $522 = $505; //@line 12166
                            $532 = $515; //@line 12166
                            $646 = $636; //@line 12166
                            $647 = $637; //@line 12166
                            $GETTXT$2$i76$2 = $504; //@line 12166
                        } else {
                            $510 = $508 << 24 >> 24; //@line 12168
                            do {
                                if ($508 << 24 >> 24 > 62) {
                                    if (($515 | 0) == ($505 | 0)) {
                                        HEAP32[4926] = -1; //@line 12176
                                        $GETTXT$1$i75$2 = $504 + -63 + $510 | 0; //@line 12177
                                        break;
                                    } else {
                                        HEAP32[4926] = $505; //@line 12181
                                        $522 = $505; //@line 12182
                                        $532 = $505; //@line 12182
                                        $646 = $505; //@line 12182
                                        $647 = $637; //@line 12182
                                        $GETTXT$2$i76$2 = $504 | 63; //@line 12182
                                        break L348;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 12186
                                    $GETTXT$1$i75$2 = ($508 << 24 >> 24 > 36 ? $510 + -26 | 0 : $510) + $504 | 0; //@line 12191
                                }
                            } while (0);
                            $520 = $505 + 1 | 0; //@line 12194
                            HEAP32[4236] = $520; //@line 12195
                            $522 = $520; //@line 12196
                            $532 = -1; //@line 12196
                            $646 = -1; //@line 12196
                            $647 = $520; //@line 12196
                            $GETTXT$2$i76$2 = $GETTXT$1$i75$2; //@line 12196
                        }
                    }
                } while (0);
                $521 = $GETTXT$2$i76$2 << 6; //@line 12200
                L359: do {
                    if (($522 | 0) > ($122 | 0)) {
                        $539 = $522; //@line 12204
                        $549 = $532; //@line 12204
                        $648 = $646; //@line 12204
                        $649 = $647; //@line 12204
                        $GETTXT$2$i76$3 = $521; //@line 12204
                    } else {
                        $525 = HEAP8[17464 + $522 >> 0] | 0; //@line 12207
                        if (!($525 << 24 >> 24)) {
                            $539 = $522; //@line 12210
                            $549 = $532; //@line 12210
                            $648 = $646; //@line 12210
                            $649 = $647; //@line 12210
                            $GETTXT$2$i76$3 = $521; //@line 12210
                        } else {
                            $527 = $525 << 24 >> 24; //@line 12212
                            do {
                                if ($525 << 24 >> 24 > 62) {
                                    if (($532 | 0) == ($522 | 0)) {
                                        HEAP32[4926] = -1; //@line 12220
                                        $GETTXT$1$i75$3 = $521 + -63 + $527 | 0; //@line 12221
                                        break;
                                    } else {
                                        HEAP32[4926] = $522; //@line 12225
                                        $539 = $522; //@line 12226
                                        $549 = $522; //@line 12226
                                        $648 = $522; //@line 12226
                                        $649 = $647; //@line 12226
                                        $GETTXT$2$i76$3 = $521 | 63; //@line 12226
                                        break L359;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 12230
                                    $GETTXT$1$i75$3 = ($525 << 24 >> 24 > 36 ? $527 + -26 | 0 : $527) + $521 | 0; //@line 12235
                                }
                            } while (0);
                            $537 = $522 + 1 | 0; //@line 12238
                            HEAP32[4236] = $537; //@line 12239
                            $539 = $537; //@line 12240
                            $549 = -1; //@line 12240
                            $648 = -1; //@line 12240
                            $649 = $537; //@line 12240
                            $GETTXT$2$i76$3 = $GETTXT$1$i75$3; //@line 12240
                        }
                    }
                } while (0);
                $538 = $GETTXT$2$i76$3 << 6; //@line 12244
                L370: do {
                    if (($539 | 0) > ($122 | 0)) {
                        $650 = $648; //@line 12248
                        $651 = $649; //@line 12248
                        $652 = $549; //@line 12248
                        $653 = $539; //@line 12248
                        $GETTXT$2$i76$4 = $538; //@line 12248
                    } else {
                        $542 = HEAP8[17464 + $539 >> 0] | 0; //@line 12251
                        if (!($542 << 24 >> 24)) {
                            $650 = $648; //@line 12254
                            $651 = $649; //@line 12254
                            $652 = $549; //@line 12254
                            $653 = $539; //@line 12254
                            $GETTXT$2$i76$4 = $538; //@line 12254
                        } else {
                            $544 = $542 << 24 >> 24; //@line 12256
                            do {
                                if ($542 << 24 >> 24 > 62) {
                                    if (($549 | 0) == ($539 | 0)) {
                                        HEAP32[4926] = -1; //@line 12264
                                        $GETTXT$1$i75$4 = $538 + -63 + $544 | 0; //@line 12265
                                        break;
                                    } else {
                                        HEAP32[4926] = $539; //@line 12269
                                        $650 = $539; //@line 12270
                                        $651 = $649; //@line 12270
                                        $652 = $539; //@line 12270
                                        $653 = $539; //@line 12270
                                        $GETTXT$2$i76$4 = $538 | 63; //@line 12270
                                        break L370;
                                    }
                                } else {
                                    HEAP32[4926] = -1; //@line 12274
                                    $GETTXT$1$i75$4 = ($542 << 24 >> 24 > 36 ? $544 + -26 | 0 : $544) + $538 | 0; //@line 12279
                                }
                            } while (0);
                            $554 = $539 + 1 | 0; //@line 12282
                            HEAP32[4236] = $554; //@line 12283
                            $650 = -1; //@line 12284
                            $651 = $554; //@line 12284
                            $652 = -1; //@line 12284
                            $653 = $554; //@line 12284
                            $GETTXT$2$i76$4 = $GETTXT$1$i75$4; //@line 12284
                        }
                    }
                } while (0);
                if (($GETTXT$2$i76$4 | 0) > 0) {
                    $123 = $653; //@line 12290
                    $125 = $652; //@line 12290
                    $631 = $650; //@line 12290
                    $632 = $651; //@line 12290
                } else {
                    $141 = $651; //@line 12292
                    $143 = $650; //@line 12292
                    break;
                }
            }
            if (($141 | 0) == ($143 | 0)) {
                $156 = $143; //@line 12298
            } else {
                HEAP32[4926] = -1; //@line 12300
                $156 = -1; //@line 12301
            }
            if (($141 | 0) > ($122 | 0)) {
                label = 100; //@line 12305
                break;
            } else {
                $146 = $141; //@line 12308
            }
            while (1) {
                $147 = HEAP8[17464 + $146 >> 0] | 0; //@line 12312
                if ($147 << 24 >> 24) {
                    $$lcssa175 = $146; //@line 12315
                    $$lcssa177 = $147; //@line 12315
                    break;
                }
                $146$looptemp = $146;
                $146 = $146 + 1 | 0; //@line 12318
                HEAP32[4236] = $146; //@line 12319
                if (($146$looptemp | 0) >= ($122 | 0)) {
                    label = 100; //@line 12324
                    break L1;
                }
            }
            L389: do {
                if (($$lcssa175 | 0) > ($122 | 0)) {
                    $161 = $$lcssa175; //@line 12331
                    $564 = $156; //@line 12331
                    $GETTXT$2$i63 = 0; //@line 12331
                } else {
                    $152 = $$lcssa177 << 24 >> 24; //@line 12333
                    do {
                        if ($$lcssa177 << 24 >> 24 > 62) {
                            if (($156 | 0) == ($$lcssa175 | 0)) {
                                HEAP32[4926] = -1; //@line 12340
                                $GETTXT$1$i62 = $152 + -63 | 0; //@line 12341
                                break;
                            } else {
                                HEAP32[4926] = $$lcssa175; //@line 12344
                                $161 = $$lcssa175; //@line 12345
                                $564 = $$lcssa175; //@line 12345
                                $GETTXT$2$i63 = 63; //@line 12345
                                break L389;
                            }
                        } else {
                            HEAP32[4926] = -1; //@line 12349
                            $GETTXT$1$i62 = $$lcssa177 << 24 >> 24 > 36 ? $152 + -26 | 0 : $152; //@line 12353
                        }
                    } while (0);
                    $159 = $$lcssa175 + 1 | 0; //@line 12356
                    HEAP32[4236] = $159; //@line 12357
                    $161 = $159; //@line 12358
                    $564 = -1; //@line 12358
                    $GETTXT$2$i63 = $GETTXT$1$i62; //@line 12358
                }
            } while (0);
            $160 = $GETTXT$2$i63 << 6; //@line 12361
            L399: do {
                if (($161 | 0) > ($122 | 0)) {
                    $571 = $161; //@line 12365
                    $581 = $564; //@line 12365
                    $GETTXT$2$i63$1 = $160; //@line 12365
                } else {
                    $557 = HEAP8[17464 + $161 >> 0] | 0; //@line 12368
                    if (!($557 << 24 >> 24)) {
                        $571 = $161; //@line 12371
                        $581 = $564; //@line 12371
                        $GETTXT$2$i63$1 = $160; //@line 12371
                    } else {
                        $559 = $557 << 24 >> 24; //@line 12373
                        do {
                            if ($557 << 24 >> 24 > 62) {
                                if (($564 | 0) == ($161 | 0)) {
                                    HEAP32[4926] = -1; //@line 12381
                                    $GETTXT$1$i62$1 = $160 + -63 + $559 | 0; //@line 12382
                                    break;
                                } else {
                                    HEAP32[4926] = $161; //@line 12386
                                    $571 = $161; //@line 12387
                                    $581 = $161; //@line 12387
                                    $GETTXT$2$i63$1 = $160 | 63; //@line 12387
                                    break L399;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12391
                                $GETTXT$1$i62$1 = ($557 << 24 >> 24 > 36 ? $559 + -26 | 0 : $559) + $160 | 0; //@line 12396
                            }
                        } while (0);
                        $569 = $161 + 1 | 0; //@line 12399
                        HEAP32[4236] = $569; //@line 12400
                        $571 = $569; //@line 12401
                        $581 = -1; //@line 12401
                        $GETTXT$2$i63$1 = $GETTXT$1$i62$1; //@line 12401
                    }
                }
            } while (0);
            $570 = $GETTXT$2$i63$1 << 6; //@line 12405
            L410: do {
                if (($571 | 0) > ($122 | 0)) {
                    $588 = $571; //@line 12409
                    $598 = $581; //@line 12409
                    $GETTXT$2$i63$2 = $570; //@line 12409
                } else {
                    $574 = HEAP8[17464 + $571 >> 0] | 0; //@line 12412
                    if (!($574 << 24 >> 24)) {
                        $588 = $571; //@line 12415
                        $598 = $581; //@line 12415
                        $GETTXT$2$i63$2 = $570; //@line 12415
                    } else {
                        $576 = $574 << 24 >> 24; //@line 12417
                        do {
                            if ($574 << 24 >> 24 > 62) {
                                if (($581 | 0) == ($571 | 0)) {
                                    HEAP32[4926] = -1; //@line 12425
                                    $GETTXT$1$i62$2 = $570 + -63 + $576 | 0; //@line 12426
                                    break;
                                } else {
                                    HEAP32[4926] = $571; //@line 12430
                                    $588 = $571; //@line 12431
                                    $598 = $571; //@line 12431
                                    $GETTXT$2$i63$2 = $570 | 63; //@line 12431
                                    break L410;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12435
                                $GETTXT$1$i62$2 = ($574 << 24 >> 24 > 36 ? $576 + -26 | 0 : $576) + $570 | 0; //@line 12440
                            }
                        } while (0);
                        $586 = $571 + 1 | 0; //@line 12443
                        HEAP32[4236] = $586; //@line 12444
                        $588 = $586; //@line 12445
                        $598 = -1; //@line 12445
                        $GETTXT$2$i63$2 = $GETTXT$1$i62$2; //@line 12445
                    }
                }
            } while (0);
            $587 = $GETTXT$2$i63$2 << 6; //@line 12449
            L421: do {
                if (($588 | 0) > ($122 | 0)) {
                    $605 = $588; //@line 12453
                    $615 = $598; //@line 12453
                    $GETTXT$2$i63$3 = $587; //@line 12453
                } else {
                    $591 = HEAP8[17464 + $588 >> 0] | 0; //@line 12456
                    if (!($591 << 24 >> 24)) {
                        $605 = $588; //@line 12459
                        $615 = $598; //@line 12459
                        $GETTXT$2$i63$3 = $587; //@line 12459
                    } else {
                        $593 = $591 << 24 >> 24; //@line 12461
                        do {
                            if ($591 << 24 >> 24 > 62) {
                                if (($598 | 0) == ($588 | 0)) {
                                    HEAP32[4926] = -1; //@line 12469
                                    $GETTXT$1$i62$3 = $587 + -63 + $593 | 0; //@line 12470
                                    break;
                                } else {
                                    HEAP32[4926] = $588; //@line 12474
                                    $605 = $588; //@line 12475
                                    $615 = $588; //@line 12475
                                    $GETTXT$2$i63$3 = $587 | 63; //@line 12475
                                    break L421;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12479
                                $GETTXT$1$i62$3 = ($591 << 24 >> 24 > 36 ? $593 + -26 | 0 : $593) + $587 | 0; //@line 12484
                            }
                        } while (0);
                        $603 = $588 + 1 | 0; //@line 12487
                        HEAP32[4236] = $603; //@line 12488
                        $605 = $603; //@line 12489
                        $615 = -1; //@line 12489
                        $GETTXT$2$i63$3 = $GETTXT$1$i62$3; //@line 12489
                    }
                }
            } while (0);
            $604 = $GETTXT$2$i63$3 << 6; //@line 12493
            L432: do {
                if (($605 | 0) > ($122 | 0)) {
                    $GETTXT$2$i63$4 = $604; //@line 12497
                } else {
                    $608 = HEAP8[17464 + $605 >> 0] | 0; //@line 12500
                    if (!($608 << 24 >> 24)) {
                        $GETTXT$2$i63$4 = $604; //@line 12503
                    } else {
                        $610 = $608 << 24 >> 24; //@line 12505
                        do {
                            if ($608 << 24 >> 24 > 62) {
                                if (($615 | 0) == ($605 | 0)) {
                                    HEAP32[4926] = -1; //@line 12513
                                    $GETTXT$1$i62$4 = $604 + -63 + $610 | 0; //@line 12514
                                    break;
                                } else {
                                    HEAP32[4926] = $605; //@line 12518
                                    $GETTXT$2$i63$4 = $604 | 63; //@line 12519
                                    break L432;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12523
                                $GETTXT$1$i62$4 = ($608 << 24 >> 24 > 36 ? $610 + -26 | 0 : $610) + $604 | 0; //@line 12528
                            }
                        } while (0);
                        HEAP32[4236] = $605 + 1; //@line 12532
                        $GETTXT$2$i63$4 = $GETTXT$1$i62$4; //@line 12533
                    }
                }
            } while (0);
            if (($GETTXT$2$i63$4 | 0) < 1) {
                label = 100; //@line 12539
                break;
            }
            _fSPEAK(HEAP32[2451] | 0); //@line 12543
        };
        
        if ((label | 0) == 100) {
            return;
        }
    }

    function _initialise() {
        var $$lcssa = 0,
            $$lcssa81 = 0,
            $$lcssa82 = 0,
            $$lcssa83 = 0,
            $$lcssa84 = 0,
            $$lcssa85 = 0,
            $$lcssa86 = 0,
            $$lcssa87 = 0,
            $$off$i5 = 0,
            $$phi$trans$insert = 0,
            $$pr36$i = 0,
            $0 = 0,
            $101 = 0,
            $102 = 0,
            $111 = 0,
            $114 = 0,
            $116 = 0,
            $119 = 0,
            $124 = 0,
            $125 = 0,
            $127 = 0,
            $134 = 0,
            $137 = 0,
            $141 = 0,
            $147 = 0,
            $148 = 0,
            $15 = 0,
            $150 = 0,
            $151 = 0,
            $156 = 0,
            $158 = 0,
            $16 = 0,
            $161 = 0,
            $164 = 0,
            $166 = 0,
            $169 = 0,
            $17 = 0,
            $171 = 0,
            $173 = 0,
            $176 = 0,
            $18 = 0,
            $183 = 0,
            $186 = 0,
            $191 = 0,
            $195 = 0,
            $196 = 0,
            $197 = 0,
            $199 = 0,
            $2 = 0,
            $201 = 0,
            $204 = 0,
            $207 = 0,
            $209 = 0,
            $212 = 0,
            $217 = 0,
            $221 = 0,
            $224 = 0,
            $225 = 0,
            $231 = 0,
            $233 = 0,
            $235 = 0,
            $241 = 0,
            $244 = 0,
            $249 = 0,
            $250 = 0,
            $275 = 0,
            $282 = 0,
            $287 = 0,
            $292 = 0,
            $298 = 0,
            $299 = 0,
            $302 = 0,
            $306 = 0,
            $308 = 0,
            $311 = 0,
            $315 = 0,
            $317 = 0,
            $319 = 0,
            $322 = 0,
            $326 = 0,
            $328 = 0,
            $33 = 0,
            $334 = 0,
            $337 = 0,
            $338 = 0,
            $339 = 0,
            $34 = 0,
            $36 = 0,
            $38 = 0,
            $394 = 0,
            $399 = 0,
            $4 = 0,
            $40 = 0,
            $408 = 0,
            $42 = 0,
            $44 = 0,
            $45 = 0,
            $46 = 0,
            $489 = 0,
            $55 = 0,
            $56 = 0,
            $59 = 0,
            $61 = 0,
            $63 = 0,
            $69 = 0,
            $76 = 0,
            $78 = 0,
            $82 = 0,
            $88 = 0,
            $93 = 0,
            $94 = 0,
            $storemerge$i = 0,
            $storemerge225$i = 0,
            $storemerge324$i = 0,
            label = 0,
            $224$looptemp = 0,
            $249$looptemp = 0;
        _puts(19416) | 0; //@line 3107
        $0 = _getenv(19432) | 0; //@line 3108
        HEAP32[4862] = 0; //@line 3109
        if (!$0) {
            label = 3; //@line 3112
        } else {
            $2 = _fopen($0 | 0, 19736) | 0; //@line 3114
            HEAP32[4862] = $2; //@line 3115
            if (!$2) {
                label = 3; //@line 3118
            } else {
                label = 4; //@line 3120
            }
        }
        if ((label | 0) == 3) {
            $4 = _fopen(19456, 19736) | 0; //@line 3124
            HEAP32[4862] = $4; //@line 3125
            if (!$4) {
                label = 8; //@line 3128
            } else {
                label = 4; //@line 3130
            }
        }
        if ((label | 0) == 4) {
            HEAP32[4868] = 1; //@line 3134
            HEAP32[4870] = 1; //@line 3135
            _quick_io(); //@line 3136
            if ((_fread(6456, 4, 1, HEAP32[4862] | 0) | 0) == 1) {
                $storemerge$i = (HEAP32[4870] | 0) - (HEAP32[1614] | 0) | 0; //@line 3144
            } else {
                $storemerge$i = 1; //@line 3146
            }
            HEAP32[4870] = $storemerge$i; //@line 3148
            _fclose(HEAP32[4862] | 0) | 0; //@line 3150
            if (HEAP32[4870] | 0) {
                _puts(19488) | 0; //@line 3154
                if (HEAP32[4870] | 0) {
                    label = 8; //@line 3158
                }
            }
        }
        L11: do {
            if ((label | 0) == 8) {
                _puts(19504) | 0; //@line 3164
                HEAP32[66] = 1; //@line 3165
                $15 = HEAP32[18] | 0; //@line 3166
                $16 = HEAP32[8] | 0; //@line 3167
                $17 = HEAP32[14] | 0; //@line 3168
                $$pr36$i = 1; //@line 3169
                do {
                    $18 = ($$pr36$i | 0) < 101; //@line 3171
                    if ($18) {
                        HEAP32[17056 + ($$pr36$i << 2) >> 2] = 0; //@line 3174
                    }
                    if (($$pr36$i | 0) <= ($15 | 0)) {
                        HEAP32[9592 + ($$pr36$i << 2) >> 2] = 0; //@line 3179
                    }
                    if (($$pr36$i | 0) <= ($16 | 0)) {
                        HEAP32[17912 + ($$pr36$i << 2) >> 2] = 0; //@line 3184
                    }
                    if ($18) {
                        HEAP32[18864 + ($$pr36$i << 2) >> 2] = 0; //@line 3188
                        HEAP32[13824 + ($$pr36$i << 2) >> 2] = 0; //@line 3190
                    }
                    if (($$pr36$i | 0) <= ($17 | 0)) {
                        HEAP32[7352 + ($$pr36$i << 2) >> 2] = 0; //@line 3195
                        HEAP32[8848 + ($$pr36$i << 2) >> 2] = 0; //@line 3197
                        HEAP32[752 + ($$pr36$i << 2) >> 2] = 0; //@line 3199
                        HEAP32[1656 + ($$pr36$i << 2) >> 2] = 0; //@line 3201
                        HEAP32[18104 + ($$pr36$i << 2) >> 2] = 0; //@line 3203
                    }
                    $$pr36$i = $$pr36$i + 1 | 0; //@line 3205
                } while (($$pr36$i | 0) != 301);
                HEAP32[66] = 301; //@line 3213
                HEAP32[4522] = 1; //@line 3214
                HEAP32[4838] = 1; //@line 3215
                HEAP32[4474] = 0; //@line 3216
                HEAP32[3272] = 0; //@line 3217
                L31: while (1) {
                    $33 = _fGETNUM(1) | 0; //@line 3219
                    HEAP32[4830] = $33; //@line 3220
                    HEAP32[3314] = -1; //@line 3221
                    switch ($33 | 0) {
                        case 4:
                            {
                                HEAP32[392] = 1e4; //@line 3224
                                HEAP32[4832] = 1; //@line 3225
                                if ((HEAP32[6] | 0) < 1) {
                                    label = 69; //@line 3229
                                    break L31;
                                }
                                while (1) {
                                    $141 = _fGETNUM(1) | 0; //@line 3233
                                    HEAP32[15608 + (HEAP32[4832] << 2) >> 2] = $141; //@line 3236
                                    if (($141 | 0) == -1) {
                                        continue L31;
                                    }
                                    HEAP32[392] = (HEAP32[392] | 0) + 7; //@line 3243
                                    $147 = _fGETTXT(1, 1, 1, 0) | 0; //@line 3244
                                    $148 = HEAP32[392] | 0; //@line 3245
                                    $150 = (Math_imul($148, $148) | 0) + $147 | 0; //@line 3247
                                    $151 = HEAP32[4832] | 0; //@line 3248
                                    HEAP32[14280 + ($151 << 2) >> 2] = $150; //@line 3250
                                    HEAP32[4832] = $151 + 1; //@line 3252
                                    if (($151 | 0) >= (HEAP32[6] | 0)) {
                                        label = 69; //@line 3256
                                        break L31;
                                    }
                                }
                                break;
                            }
                        case 7:
                            {
                                $156 = _fGETNUM(1) | 0; //@line 3263
                                HEAP32[2864] = $156; //@line 3264
                                if (($156 | 0) == -1) {
                                    continue L31;
                                }
                                while (1) {
                                    $158 = _fGETNUM(0) | 0; //@line 3270
                                    HEAP32[320 + (HEAP32[2864] << 2) >> 2] = $158; //@line 3273
                                    $161 = _fGETNUM(0) | 0; //@line 3274
                                    HEAP32[13296 + (HEAP32[2864] << 2) >> 2] = $161; //@line 3277
                                    $164 = _fGETNUM(1) | 0; //@line 3278
                                    HEAP32[2864] = $164; //@line 3279
                                    if (($164 | 0) == -1) {
                                        continue L31;
                                    }
                                }
                                break;
                            }
                        case 0:
                            {
                                label = 87; //@line 3288
                                break L31;
                                break;
                            }
                        case 11:
                            {
                                HEAP32[3088] = 0; //@line 3293
                                $36 = _fGETNUM(1) | 0; //@line 3294
                                HEAP32[1614] = $36; //@line 3295
                                if (($36 | 0) == -1) {
                                    continue L31;
                                } else {
                                    $191 = $36; //@line 3300
                                }
                                while (1) {
                                    if (($191 | 0) < 1 | ($191 | 0) > (HEAP32[10] | 0)) {
                                        label = 79; //@line 3308
                                        break L31;
                                    }
                                    HEAP32[66] = 1; //@line 3311
                                    do {
                                        $195 = _fGETNUM(0) | 0; //@line 3313
                                        $196 = HEAP32[66] | 0; //@line 3314
                                        $197 = HEAP32[1614] | 0; //@line 3315
                                        HEAP32[12536 + ($197 * 20 | 0) + ($196 << 2) >> 2] = $195; //@line 3317
                                        $199 = $196 + 1 | 0; //@line 3318
                                        HEAP32[66] = $199; //@line 3319
                                    } while (($199 | 0) < 5);
                                    $$lcssa85 = $197; //@line 3322
                                    $201 = HEAP32[3088] | 0; //@line 3326
                                    HEAP32[3088] = ($201 | 0) > ($$lcssa85 | 0) ? $201 : $$lcssa85; //@line 3329
                                    $204 = _fGETNUM(1) | 0; //@line 3330
                                    HEAP32[1614] = $204; //@line 3331
                                    if (($204 | 0) == -1) {
                                        continue L31;
                                    } else {
                                        $191 = $204; //@line 3336
                                    }
                                }
                                break;
                            }
                        case 14:
                        case 10:
                        case 6:
                        case 5:
                        case 2:
                        case 1:
                            {
                                $44 = HEAP32[4522] | 0; //@line 3342
                                HEAP32[412] = $44; //@line 3343
                                $45 = $44; //@line 3344
                                while (1) {
                                    HEAP32[4522] = $45; //@line 3346
                                    $46 = _fGETNUM(1) | 0; //@line 3347
                                    HEAP32[74] = $46; //@line 3348
                                    if ((HEAP32[4234] | 0) >= ((HEAP32[4236] | 0) + 70 | 0)) {
                                        label = 30; //@line 3354
                                        break L31;
                                    }
                                    if (($46 | 0) == -1) {
                                        continue L31;
                                    }
                                    if ((HEAP32[4234] | 0) < (HEAP32[4236] | 0)) {
                                        label = 33; //@line 3365
                                        break L31;
                                    }
                                    $56 = HEAP32[412] | 0; //@line 3369
                                    while (1) {
                                        $55 = $56 + 1 | 0; //@line 3371
                                        HEAP32[412] = $55; //@line 3372
                                        if (($55 | 0) >= (HEAP32[12] | 0)) {
                                            label = 36; //@line 3376
                                            break L31;
                                        }
                                        $59 = _fGETTXT(0, 0, 0, $55) | 0; //@line 3379
                                        $61 = HEAP32[30] | 0; //@line 3381
                                        HEAP32[$61 + (HEAP32[412] << 2) >> 2] = $59; //@line 3383
                                        $63 = HEAP32[412] | 0; //@line 3384
                                        if ((HEAP32[$61 + ($63 << 2) >> 2] | 0) == -1) {
                                            $$lcssa86 = $61; //@line 3389
                                            $$lcssa87 = $63; //@line 3389
                                            break;
                                        } else {
                                            $56 = $63; //@line 3392
                                        }
                                    }
                                    HEAP32[$$lcssa86 + (HEAP32[4522] << 2) >> 2] = $$lcssa87; //@line 3397
                                    $69 = HEAP32[74] | 0; //@line 3398
                                    do {
                                        if (($69 | 0) != (HEAP32[3314] | 0)) {
                                            HEAP32[3314] = $69; //@line 3403
                                            HEAP32[$$lcssa86 + (HEAP32[4522] << 2) >> 2] = 0 - (HEAP32[412] | 0); //@line 3408
                                            $76 = HEAP32[4830] | 0; //@line 3409
                                            if (($76 | 0) == 10) {
                                                $93 = HEAP32[4474] | 0; //@line 3411
                                                $94 = $93 + 1 | 0; //@line 3412
                                                HEAP32[4474] = $94; //@line 3413
                                                if (($93 | 0) >= (HEAP32[8] | 0)) {
                                                    label = 53; //@line 3417
                                                    break L31;
                                                }
                                                HEAP32[17912 + ($94 << 2) >> 2] = HEAP32[4522]; //@line 3422
                                                HEAP32[17968 + ($94 << 2) >> 2] = HEAP32[74]; //@line 3425
                                                break;
                                            } else if (($76 | 0) == 14) {
                                                $101 = HEAP32[3272] | 0; //@line 3428
                                                $102 = $101 + 1 | 0; //@line 3429
                                                HEAP32[3272] = $102; //@line 3430
                                                if (($101 | 0) >= (HEAP32[20] | 0)) {
                                                    label = 56; //@line 3434
                                                    break L31;
                                                }
                                                HEAP32[13032 + ($102 << 2) >> 2] = HEAP32[4522]; //@line 3439
                                                HEAP32[13064 + ($102 << 2) >> 2] = HEAP32[74]; //@line 3442
                                                break;
                                            } else if (($76 | 0) == 6) {
                                                $88 = HEAP32[74] | 0; //@line 3445
                                                if (($88 | 0) > (HEAP32[18] | 0)) {
                                                    label = 50; //@line 3449
                                                    break L31;
                                                }
                                                HEAP32[9592 + ($88 << 2) >> 2] = HEAP32[4522]; //@line 3454
                                                break;
                                            } else {
                                                $78 = HEAP32[74] | 0; //@line 3458
                                                if (($76 | 0) == 5) {
                                                    if (($78 + -1 | 0) >>> 0 >= 100) {
                                                        break;
                                                    }
                                                    HEAP32[17056 + ($78 << 2) >> 2] = HEAP32[4522]; //@line 3467
                                                    break;
                                                }
                                                if (($78 | 0) > (HEAP32[14] | 0)) {
                                                    label = 42; //@line 3473
                                                    break L31;
                                                }
                                                $82 = HEAP32[4522] | 0; //@line 3477
                                                if (($76 | 0) == 1) {
                                                    HEAP32[8848 + ($78 << 2) >> 2] = $82; //@line 3480
                                                    break;
                                                } else {
                                                    HEAP32[7352 + ($78 << 2) >> 2] = $82; //@line 3484
                                                    break;
                                                }
                                            }
                                        }
                                    } while (0);
                                    $45 = HEAP32[412] | 0; //@line 3491
                                }
                                break;
                            }
                        case 3:
                            {
                                $42 = _fGETNUM(1) | 0; //@line 3496
                                HEAP32[74] = $42; //@line 3497
                                if (($42 | 0) == -1) {
                                    continue L31;
                                }
                                while (1) {
                                    HEAP32[72] = _fGETNUM(0) | 0; //@line 3504
                                    $111 = 1656 + (HEAP32[74] << 2) | 0; //@line 3506
                                    $114 = HEAP32[4838] | 0; //@line 3509
                                    if (!(HEAP32[$111 >> 2] | 0)) {
                                        HEAP32[$111 >> 2] = $114; //@line 3511
                                    } else {
                                        $116 = 2400 + ($114 + -1 << 2) | 0; //@line 3514
                                        HEAP32[$116 >> 2] = 0 - (HEAP32[$116 >> 2] | 0); //@line 3517
                                        HEAP32[4838] = $114; //@line 3518
                                    }
                                    $119 = _fGETNUM(0) | 0; //@line 3520
                                    HEAP32[4520] = $119; //@line 3521
                                    if ($119) {
                                        $124 = $119; //@line 3524
                                        do {
                                            $125 = HEAP32[4838] | 0; //@line 3529
                                            HEAP32[2400 + ($125 << 2) >> 2] = ((HEAP32[72] | 0) * 1e3 | 0) + $124; //@line 3531
                                            $127 = $125 + 1 | 0; //@line 3532
                                            HEAP32[4838] = $127; //@line 3533
                                            if (($127 | 0) == (HEAP32[22] | 0)) {
                                                label = 63; //@line 3537
                                                break L31;
                                            }
                                            $124 = _fGETNUM(0) | 0; //@line 3540
                                            HEAP32[4520] = $124; //@line 3541
                                        } while (($124 | 0) != 0);
                                    }
                                    $134 = 2400 + ((HEAP32[4838] | 0) + -1 << 2) | 0; //@line 3552
                                    HEAP32[$134 >> 2] = 0 - (HEAP32[$134 >> 2] | 0); //@line 3555
                                    $137 = _fGETNUM(1) | 0; //@line 3556
                                    HEAP32[74] = $137; //@line 3557
                                    if (($137 | 0) == -1) {
                                        continue L31;
                                    }
                                }
                                break;
                            }
                        case 13:
                            {
                                $34 = _fGETNUM(1) | 0; //@line 3566
                                HEAP32[1614] = $34; //@line 3567
                                if (($34 | 0) == -1) {
                                    continue L31;
                                }
                                while (1) {
                                    HEAP32[412] = _fGETNUM(0) | 0; //@line 3574
                                    $207 = _fGETNUM(0) | 0; //@line 3575
                                    HEAP32[66] = $207; //@line 3576
                                    $209 = HEAP32[412] | 0; //@line 3578
                                    if (!$207) {
                                        HEAP32[18104 + (HEAP32[1614] << 2) >> 2] = $209; //@line 3582
                                    } else {
                                        $212 = HEAP32[1614] | 0; //@line 3586
                                        HEAP32[18864 + ($212 << 2) >> 2] = ($209 | 0) > 0 ? $209 : 0; //@line 3588
                                        HEAP32[13824 + ($212 << 2) >> 2] = ($207 | 0) > 0 ? $207 : 0; //@line 3592
                                    }
                                    $217 = _fGETNUM(1) | 0; //@line 3594
                                    HEAP32[1614] = $217; //@line 3595
                                    if (($217 | 0) == -1) {
                                        continue L31;
                                    }
                                }
                                break;
                            }
                        case 8:
                            {
                                $40 = _fGETNUM(1) | 0; //@line 3604
                                HEAP32[3080] = $40; //@line 3605
                                if (($40 | 0) == -1) {
                                    continue L31;
                                }
                                while (1) {
                                    $166 = _fGETNUM(0) | 0; //@line 3611
                                    HEAP32[17704 + (HEAP32[3080] << 2) >> 2] = $166; //@line 3614
                                    $169 = _fGETNUM(1) | 0; //@line 3615
                                    HEAP32[3080] = $169; //@line 3616
                                    if (($169 | 0) == -1) {
                                        continue L31;
                                    }
                                }
                                break;
                            }
                        case 9:
                            {
                                $38 = _fGETNUM(1) | 0; //@line 3625
                                HEAP32[1614] = $38; //@line 3626
                                if (($38 | 0) == -1) {
                                    continue L31;
                                }
                                while (1) {
                                    $173 = _fGETNUM(0) | 0; //@line 3632
                                    HEAP32[74] = $173; //@line 3633
                                    if ($173) {
                                        $176 = $173; //@line 3636
                                        do {
                                            if (_fTSTBIT(HEAP32[752 + ($176 << 2) >> 2] | 0, HEAP32[1614] | 0) | 0) {
                                                label = 76; //@line 3644
                                                break L31;
                                            }
                                            $183 = HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0; //@line 3649
                                            $186 = (_fSETBIT(HEAP32[1614] | 0) | 0) + $183 | 0; //@line 3652
                                            HEAP32[752 + (HEAP32[74] << 2) >> 2] = $186; //@line 3655
                                            $176 = _fGETNUM(0) | 0; //@line 3656
                                            HEAP32[74] = $176; //@line 3657
                                        } while (($176 | 0) != 0);
                                    }
                                    $171 = _fGETNUM(1) | 0; //@line 3666
                                    HEAP32[1614] = $171; //@line 3667
                                    if (($171 | 0) == -1) {
                                        continue L31;
                                    }
                                }
                                break;
                            }
                        default:
                            {
                                label = 27; //@line 3676
                                break L31;
                            }
                    }
                }
                switch (label | 0) {
                    case 27:
                        {
                            _fBUG(9); //@line 3683
                            break;
                        }
                    case 30:
                        {
                            _fBUG(0); //@line 3688
                            break;
                        }
                    case 33:
                        {
                            _fBUG(1); //@line 3693
                            break;
                        }
                    case 36:
                        {
                            _fBUG(2); //@line 3698
                            break;
                        }
                    case 42:
                        {
                            _fBUG(10); //@line 3703
                            break;
                        }
                    case 50:
                        {
                            _fBUG(6); //@line 3708
                            break;
                        }
                    case 53:
                        {
                            _fBUG(11); //@line 3713
                            break;
                        }
                    case 56:
                        {
                            _fBUG(11); //@line 3718
                            break;
                        }
                    case 63:
                        {
                            _fBUG(3); //@line 3723
                            break;
                        }
                    case 69:
                        {
                            _fBUG(4); //@line 3728
                            break;
                        }
                    case 76:
                        {
                            _fBUG(8); //@line 3733
                            break;
                        }
                    case 79:
                        {
                            _fBUG(7); //@line 3738
                            break;
                        }
                    case 87:
                        {
                            HEAP32[1614] = 1; //@line 3743
                            $221 = HEAP32[14] | 0; //@line 3744
                            do {
                                if (($221 | 0) < 1) {
                                    label = 91; //@line 3748
                                } else {
                                    $224 = 1; //@line 3750
                                    while (1) {
                                        $225 = 1 - $224 + $221 | 0; //@line 3753
                                        if (HEAP32[8848 + ($225 << 2) >> 2] | 0) {
                                            $$lcssa83 = $225; //@line 3758
                                            label = 92; //@line 3759
                                            break;
                                        }
                                        $224$looptemp = $224;
                                        $224 = $224 + 1 | 0; //@line 3762
                                        HEAP32[1614] = $224; //@line 3763
                                        if (($224$looptemp | 0) >= ($221 | 0)) {
                                            $$lcssa84 = $225; //@line 3768
                                            label = 90; //@line 3769
                                            break;
                                        }
                                    }
                                    if ((label | 0) == 90) {
                                        HEAP32[412] = $$lcssa84; //@line 3774
                                        label = 91; //@line 3775
                                        break;
                                    } else if ((label | 0) == 92) {
                                        HEAP32[412] = $$lcssa83; //@line 3779
                                        break;
                                    }
                                }
                            } while (0);
                            if ((label | 0) == 91) {
                                HEAP32[2864] = 0; //@line 3785
                            }
                            HEAP32[1614] = 1; //@line 3787
                            $235 = 1; //@line 3788
                            do {
                                if (HEAP32[17056 + ($235 << 2) >> 2] | 0) {
                                    HEAP32[2864] = (HEAP32[2864] | 0) + 1; //@line 3796
                                }
                                $235 = $235 + 1 | 0; //@line 3798
                            } while (($235 | 0) != 101);
                            HEAP32[1614] = 1; //@line 3806
                            $231 = HEAP32[4832] | 0; //@line 3807
                            if (($231 | 0) >= 1) {
                                $233 = $231 + 1 | 0; //@line 3810
                                $244 = 1; //@line 3811
                                do {
                                    $$off$i5 = (HEAP32[15608 + ($244 << 2) >> 2] | 0) + -2e3 | 0; //@line 3815
                                    if ($$off$i5 >>> 0 < 1e3) {
                                        HEAP32[3080] = $$off$i5; //@line 3818
                                    }
                                    $244 = $244 + 1 | 0; //@line 3820
                                } while (($244 | 0) != ($233 | 0));
                                HEAP32[1614] = $233; //@line 3828
                            }
                            HEAP32[1614] = 1; //@line 3830
                            $241 = HEAP32[18] | 0; //@line 3831
                            do {
                                if (($241 | 0) >= 1) {
                                    $249 = 1; //@line 3835
                                    while (1) {
                                        $250 = 1 - $249 + $241 | 0; //@line 3838
                                        if (HEAP32[9592 + ($250 << 2) >> 2] | 0) {
                                            $$lcssa81 = $250; //@line 3843
                                            label = 106; //@line 3844
                                            break;
                                        }
                                        $249$looptemp = $249;
                                        $249 = $249 + 1 | 0; //@line 3847
                                        HEAP32[1614] = $249; //@line 3848
                                        if (($249$looptemp | 0) >= ($241 | 0)) {
                                            $$lcssa82 = $250; //@line 3853
                                            label = 107; //@line 3854
                                            break;
                                        }
                                    }
                                    if ((label | 0) == 106) {
                                        HEAP32[392] = $$lcssa81; //@line 3859
                                        break;
                                    } else if ((label | 0) == 107) {
                                        HEAP32[392] = $$lcssa82; //@line 3863
                                        break;
                                    }
                                }
                            } while (0);
                            _fSETPRM(1, HEAP32[4522] | 0, HEAP32[12] | 0); //@line 3870
                            _fSETPRM(3, HEAP32[4838] | 0, HEAP32[22] | 0); //@line 3873
                            _fSETPRM(5, HEAP32[4832] | 0, HEAP32[6] | 0); //@line 3876
                            _fSETPRM(7, HEAP32[412] | 0, HEAP32[14] | 0); //@line 3879
                            _fSETPRM(9, HEAP32[2864] | 0, 100); //@line 3881
                            _fSETPRM(11, HEAP32[3080] | 0, HEAP32[24] | 0); //@line 3884
                            _fSETPRM(13, HEAP32[392] | 0, HEAP32[18] | 0); //@line 3887
                            _fSETPRM(15, HEAP32[4474] | 0, HEAP32[8] | 0); //@line 3890
                            _fSETPRM(17, HEAP32[3088] | 0, HEAP32[10] | 0); //@line 3893
                            _fSETPRM(19, HEAP32[3272] | 0, HEAP32[20] | 0); //@line 3896
                            _fRSPEAK(267); //@line 3897
                            _fTYPE0(); //@line 3898
                            _puts(19560) | 0; //@line 3899
                            $275 = _fopen(19456, 20832) | 0; //@line 3900
                            HEAP32[4862] = $275; //@line 3901
                            if (!$275) {
                                _puts(19592) | 0; //@line 3904
                                break L11;
                            } else {
                                HEAP32[4868] = 0; //@line 3907
                                HEAP32[4870] = 1; //@line 3908
                                _quick_io(); //@line 3909
                                _fwrite(19480, 4, 1, HEAP32[4862] | 0) | 0; //@line 3911
                                _fclose(HEAP32[4862] | 0) | 0; //@line 3913
                                break L11;
                            }
                            break;
                        }
                }
            }
        } while (0);
        HEAP32[66] = 1; //@line 3921
        _memset(6492, 0, 400) | 0; //@line 3922
        _memset(6052, 0, 400) | 0; //@line 3923
        $282 = 1; //@line 3924
        do {
            HEAP32[11504 + ($282 << 2) >> 2] = 0; //@line 3927
            HEAP32[11504 + ($282 + 100 << 2) >> 2] = 0; //@line 3930
            $282 = $282 + 1 | 0; //@line 3931
        } while (($282 | 0) != 101);
        HEAP32[66] = 1; //@line 3939
        if ((HEAP32[14] | 0) >= 1) {
            $287 = 1; //@line 3943
            do {
                HEAP32[8096 + ($287 << 2) >> 2] = 0; //@line 3946
                if (!(HEAP32[8848 + ($287 << 2) >> 2] | 0)) {
                    $302 = $287; //@line 3951
                } else {
                    $292 = HEAP32[1656 + ($287 << 2) >> 2] | 0; //@line 3954
                    if (!$292) {
                        $302 = $287; //@line 3957
                    } else {
                        HEAP32[1614] = $292; //@line 3959
                        $298 = (_fMOD(_fIABS(HEAP32[2400 + ($292 << 2) >> 2] | 0) | 0, 1e3) | 0) == 1; //@line 3964
                        $299 = HEAP32[66] | 0; //@line 3965
                        if ($298) {
                            HEAP32[752 + ($299 << 2) >> 2] = 2; //@line 3968
                            $302 = $299; //@line 3969
                        } else {
                            $302 = $299; //@line 3971
                        }
                    }
                }
                HEAP32[10712 + ($302 << 2) >> 2] = 0; //@line 3976
                $287 = $302 + 1 | 0; //@line 3977
                HEAP32[66] = $287; //@line 3978
            } while (($302 | 0) < (HEAP32[14] | 0));
        }
        HEAP32[66] = 1; //@line 3988
        $storemerge225$i = 1; //@line 3989
        do {
            $306 = 101 - $storemerge225$i | 0; //@line 3991
            HEAP32[1614] = $306; //@line 3992
            $308 = HEAP32[13296 + ($306 << 2) >> 2] | 0; //@line 3994
            if (($308 | 0) < 1) {
                $315 = $storemerge225$i; //@line 3997
            } else {
                _fDROP($306 + 100 | 0, $308); //@line 4000
                $311 = HEAP32[1614] | 0; //@line 4001
                _fDROP($311, HEAP32[320 + ($311 << 2) >> 2] | 0); //@line 4004
                $315 = HEAP32[66] | 0; //@line 4006
            }
            $storemerge225$i = $315 + 1 | 0; //@line 4008
            HEAP32[66] = $storemerge225$i; //@line 4009
        } while (($storemerge225$i | 0) < 101);
        HEAP32[66] = 1; //@line 4017
        $storemerge324$i = 1; //@line 4018
        do {
            $317 = 101 - $storemerge324$i | 0; //@line 4020
            HEAP32[1614] = $317; //@line 4021
            $319 = HEAP32[13296 + ($317 << 2) >> 2] | 0; //@line 4023
            HEAP32[6896 + ($317 << 2) >> 2] = $319; //@line 4025
            $322 = HEAP32[320 + ($317 << 2) >> 2] | 0; //@line 4027
            if (($319 | 0) < 1 & ($322 | 0) != 0) {
                _fDROP($317, $322); //@line 4032
                $326 = HEAP32[66] | 0; //@line 4034
            } else {
                $326 = $storemerge324$i; //@line 4036
            }
            $storemerge324$i = $326 + 1 | 0; //@line 4038
            HEAP32[66] = $storemerge324$i; //@line 4039
        } while (($storemerge324$i | 0) < 101);
        HEAP32[1616] = 79; //@line 4047
        HEAP32[1826] = 0; //@line 4048
        HEAP32[66] = 50; //@line 4049
        $334 = 50; //@line 4050
        $338 = 0; //@line 4050
        while (1) {
            $$phi$trans$insert = 6048 + ($334 << 2) | 0; //@line 4055
            if (!(HEAP32[17056 + ($334 << 2) >> 2] | 0)) {
                $339 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 4058
            } else {
                HEAP32[$$phi$trans$insert >> 2] = -1; //@line 4060
                $339 = -1; //@line 4061
            }
            $337 = $338 - $339 | 0; //@line 4063
            $334 = $334 + 1 | 0; //@line 4064
            if (($334 | 0) == 80) {
                $$lcssa = $337; //@line 4067
                break;
            } else {
                $338 = $337; //@line 4070
            }
        }
        HEAP32[1826] = $$lcssa; //@line 4073
        HEAP32[66] = 1; //@line 4074
        $328 = HEAP32[3088] | 0; //@line 4075
        if (($328 | 0) >= 1) {
            _memset(12452, 0, $328 << 2 | 0) | 0; //@line 4080
            _memset(12364, 0, $328 << 2 | 0) | 0; //@line 4082
            HEAP32[66] = $328 + 1; //@line 4083
        }
        HEAP32[404] = _fVOCAB(_fMAKEWD(12405) | 0, 1) | 0; //@line 4087
        HEAP32[3278] = _fVOCAB(_fMAKEWD(201202005) | 0, 1) | 0; //@line 4090
        HEAP32[2676] = _fVOCAB(_fMAKEWD(2050118) | 0, 1) | 0; //@line 4093
        HEAP32[3298] = _fVOCAB(_fMAKEWD(2091804) | 0, 1) | 0; //@line 4096
        HEAP32[4464] = _fVOCAB(_fMAKEWD(212151504) | 0, 1) | 0; //@line 4099
        HEAP32[3454] = _fVOCAB(_fMAKEWD(215202012) | 0, 1) | 0; //@line 4102
        HEAP32[3296] = _fVOCAB(_fMAKEWD(3010705) | 0, 1) | 0; //@line 4105
        HEAP32[4468] = _fVOCAB(_fMAKEWD(301220920) | 0, 1) | 0; //@line 4108
        HEAP32[3426] = _fVOCAB(_fMAKEWD(308011913) | 0, 1) | 0; //@line 4111
        HEAP32[4470] = _fVOCAB(_fMAKEWD(3120113) | 0, 1) | 0; //@line 4114
        HEAP32[3294] = _fVOCAB(_fMAKEWD(4151518) | 0, 1) | 0; //@line 4117
        HEAP32[4510] = _fVOCAB(_fMAKEWD(418010715) | 0, 1) | 0; //@line 4120
        HEAP32[3558] = _fVOCAB(_fMAKEWD(423011806) | 0, 1) | 0; //@line 4123
        HEAP32[3452] = _fVOCAB(_fMAKEWD(609191921) | 0, 1) | 0; //@line 4126
        HEAP32[4516] = _fVOCAB(_fMAKEWD(6151504) | 0, 1) | 0; //@line 4129
        HEAP32[3440] = _fVOCAB(_fMAKEWD(718012005) | 0, 1) | 0; //@line 4132
        HEAP32[3442] = _fVOCAB(_fMAKEWD(11052519) | 0, 1) | 0; //@line 4135
        HEAP32[4518] = _fVOCAB(_fMAKEWD(1114090605) | 0, 1) | 0; //@line 4138
        HEAP32[1828] = _fVOCAB(_fMAKEWD(12011316) | 0, 1) | 0; //@line 4141
        HEAP32[4712] = _fVOCAB(_fMAKEWD(1301070126) | 0, 1) | 0; //@line 4144
        HEAP32[1830] = _fVOCAB(_fMAKEWD(1305191901) | 0, 1) | 0; //@line 4147
        HEAP32[3566] = _fVOCAB(_fMAKEWD(1309181815) | 0, 1) | 0; //@line 4150
        HEAP32[3448] = _fVOCAB(_fMAKEWD(15071805) | 0, 1) | 0; //@line 4153
        HEAP32[3282] = _fVOCAB(_fMAKEWD(150912) | 0, 1) | 0; //@line 4156
        HEAP32[3240] = _fVOCAB(_fMAKEWD(1525192005) | 0, 1) | 0; //@line 4159
        HEAP32[3564] = _fVOCAB(_fMAKEWD(1609121215) | 0, 1) | 0; //@line 4162
        $394 = _fVOCAB(_fMAKEWD(1612011420) | 0, 1) | 0; //@line 4164
        HEAP32[3292] = $394; //@line 4165
        HEAP32[4820] = $394 + 1; //@line 4167
        HEAP32[4822] = _fVOCAB(_fMAKEWD(1805190518) | 0, 1) | 0; //@line 4170
        $399 = _fVOCAB(_fMAKEWD(181504) | 0, 1) | 0; //@line 4172
        HEAP32[3444] = $399; //@line 4173
        HEAP32[3562] = $399 + 1; //@line 4175
        HEAP32[3560] = _fVOCAB(_fMAKEWD(19090714) | 0, 1) | 0; //@line 4178
        HEAP32[3446] = _fVOCAB(_fMAKEWD(1914011105) | 0, 1) | 0; //@line 4181
        HEAP32[2866] = _fVOCAB(_fMAKEWD(1920051619) | 0, 1) | 0; //@line 4184
        $408 = _fVOCAB(_fMAKEWD(2018151212) | 0, 1) | 0; //@line 4186
        HEAP32[3320] = $408; //@line 4187
        HEAP32[3322] = $408 + 1; //@line 4189
        HEAP32[4840] = _fVOCAB(_fMAKEWD(211814) | 0, 1) | 0; //@line 4192
        HEAP32[4844] = _fVOCAB(_fMAKEWD(1755140409) | 0, 1) | 0; //@line 4195
        HEAP32[4846] = _fVOCAB(_fMAKEWD(1765120301) | 0, 1) | 0; //@line 4198
        HEAP32[3280] = _fVOCAB(_fMAKEWD(1851200518) | 0, 1) | 0; //@line 4201
        HEAP32[4462] = _fVOCAB(_fMAKEWD(113020518) | 0, 1) | 0; //@line 4204
        HEAP32[2874] = _fVOCAB(_fMAKEWD(308010914) | 0, 1) | 0; //@line 4207
        HEAP32[1510] = _fVOCAB(_fMAKEWD(308051920) | 0, 1) | 0; //@line 4210
        HEAP32[4476] = _fVOCAB(_fMAKEWD(315091419) | 0, 1) | 0; //@line 4213
        HEAP32[4512] = _fVOCAB(_fMAKEWD(5070719) | 0, 1) | 0; //@line 4216
        HEAP32[1620] = _fVOCAB(_fMAKEWD(513051801) | 0, 1) | 0; //@line 4219
        HEAP32[3450] = _fVOCAB(_fMAKEWD(10010405) | 0, 1) | 0; //@line 4222
        HEAP32[2868] = _fVOCAB(_fMAKEWD(7151204) | 0, 1) | 0; //@line 4225
        HEAP32[4818] = _fVOCAB(_fMAKEWD(1605011812) | 0, 1) | 0; //@line 4228
        HEAP32[1618] = _fVOCAB(_fMAKEWD(1625180113) | 0, 1) | 0; //@line 4231
        HEAP32[4824] = _fVOCAB(_fMAKEWD(18210225) | 0, 1) | 0; //@line 4234
        HEAP32[2872] = _fVOCAB(_fMAKEWD(182107) | 0, 1) | 0; //@line 4237
        HEAP32[78] = _fVOCAB(_fMAKEWD(1901161608) | 0, 1) | 0; //@line 4240
        HEAP32[4836] = _fVOCAB(_fMAKEWD(2018090405) | 0, 1) | 0; //@line 4243
        HEAP32[4842] = _fVOCAB(_fMAKEWD(22011905) | 0, 1) | 0; //@line 4246
        HEAP32[3308] = _fVOCAB(_fMAKEWD(2010311) | 0, 0) | 0; //@line 4249
        HEAP32[3312] = _fVOCAB(_fMAKEWD(3012205) | 0, 0) | 0; //@line 4252
        HEAP32[4508] = _fVOCAB(_fMAKEWD(405161805) | 0, 0) | 0; //@line 4255
        HEAP32[3288] = _fVOCAB(_fMAKEWD(514200518) | 0, 0) | 0; //@line 4258
        HEAP32[4514] = _fVOCAB(_fMAKEWD(514201801) | 0, 0) | 0; //@line 4261
        HEAP32[3310] = _fVOCAB(_fMAKEWD(12151511) | 0, 0) | 0; //@line 4264
        HEAP32[3306] = _fVOCAB(_fMAKEWD(14211212) | 0, 0) | 0; //@line 4267
        HEAP32[3290] = _fVOCAB(_fMAKEWD(1920180501) | 0, 0) | 0; //@line 4270
        HEAP32[3432] = _fVOCAB(_fMAKEWD(6091404) | 0, 2) | 0; //@line 4273
        HEAP32[3434] = _fVOCAB(_fMAKEWD(914220514) | 0, 2) | 0; //@line 4276
        HEAP32[4524] = _fVOCAB(_fMAKEWD(12150311) | 0, 2) | 0; //@line 4279
        HEAP32[3274] = _fVOCAB(_fMAKEWD(190125) | 0, 2) | 0; //@line 4282
        HEAP32[4834] = _fVOCAB(_fMAKEWD(2008181523) | 0, 2) | 0; //@line 4285
        HEAP32[1508] = 114; //@line 4286
        HEAP32[1832] = 140; //@line 4287
        HEAP32[383] = 0; //@line 4288
        HEAP32[384] = 0; //@line 4288
        HEAP32[385] = 0; //@line 4288
        HEAP32[386] = 0; //@line 4288
        HEAP32[387] = 0; //@line 4288
        HEAP32[388] = 0; //@line 4288
        HEAP32[66] = 7; //@line 4289
        HEAP32[390] = 0; //@line 4290
        HEAP32[395] = 19; //@line 4291
        HEAP32[396] = 27; //@line 4292
        HEAP32[397] = 33; //@line 4293
        HEAP32[398] = 44; //@line 4294
        HEAP32[399] = 64; //@line 4295
        HEAP32[400] = 114; //@line 4296
        HEAP32[402] = 18; //@line 4297
        HEAP32[3252] = 0; //@line 4298
        HEAP32[3256] = 1; //@line 4299
        HEAP32[3254] = -1; //@line 4300
        if ((HEAP32[3272] | 0) > 0) {
            HEAP32[3254] = (_fMOD(HEAP32[3267] | 0, 1e5) | 0) + 1; //@line 4307
        }
        HEAP32[3264] = 0; //@line 4309
        HEAP32[3568] = 0; //@line 4310
        HEAP32[3302] = 0; //@line 4311
        HEAP32[3300] = 0; //@line 4312
        HEAP32[1834] = 0; //@line 4313
        HEAP32[3430] = 0; //@line 4314
        HEAP32[2210] = 5; //@line 4315
        HEAP32[66] = 0; //@line 4316
        if (HEAP32[2479] | 0) {
            HEAP32[3438] = 1; //@line 4320
        }
        if (HEAP32[2481] | 0) {
            HEAP32[3438] = 2; //@line 4325
        }
        if (HEAP32[2483] | 0) {
            HEAP32[3438] = 3; //@line 4330
        }
        if (HEAP32[2485] | 0) {
            HEAP32[3438] = 4; //@line 4335
        }
        if (!(HEAP32[2487] | 0)) {
            HEAP32[66] = 5; //@line 4340
            HEAP32[3436] = 0; //@line 4341
            HEAP32[3318] = 0; //@line 4342
            HEAP32[4506] = 0; //@line 4343
            HEAP32[3250] = 0; //@line 4344
            HEAP32[4466] = 0; //@line 4345
            HEAP32[3276] = 30; //@line 4346
            HEAP32[186] = 50; //@line 4347
            $489 = _fSETBIT(11) | 0; //@line 4348
            HEAP32[3084] = $489; //@line 4349
            HEAP32[4826] = 0; //@line 4350
            HEAP32[182] = 0; //@line 4351
            HEAP32[184] = 0; //@line 4352
            HEAP32[2870] = 0; //@line 4353
            HEAP32[4472] = 0; //@line 4354
            HEAP32[70] = 0; //@line 4355
            HEAP32[4] = 1; //@line 4356
            return 0; //@line 4357
        }
        HEAP32[3438] = 5; //@line 4359
        HEAP32[66] = 5; //@line 4360
        HEAP32[3436] = 0; //@line 4361
        HEAP32[3318] = 0; //@line 4362
        HEAP32[4506] = 0; //@line 4363
        HEAP32[3250] = 0; //@line 4364
        HEAP32[4466] = 0; //@line 4365
        HEAP32[3276] = 30; //@line 4366
        HEAP32[186] = 50; //@line 4367
        $489 = _fSETBIT(11) | 0; //@line 4368
        HEAP32[3084] = $489; //@line 4369
        HEAP32[4826] = 0; //@line 4370
        HEAP32[182] = 0; //@line 4371
        HEAP32[184] = 0; //@line 4372
        HEAP32[2870] = 0; //@line 4373
        HEAP32[4472] = 0; //@line 4374
        HEAP32[70] = 0; //@line 4375
        HEAP32[4] = 1; //@line 4376
        return 0; //@line 4377
    }

    function _free($mem) {
        $mem = $mem | 0;
        var $$lcssa = 0,
            $$pre$phi59Z2D = 0,
            $$pre$phi61Z2D = 0,
            $$pre$phiZ2D = 0,
            $$sum2 = 0,
            $1 = 0,
            $103 = 0,
            $104 = 0,
            $111 = 0,
            $112 = 0,
            $12 = 0,
            $120 = 0,
            $128 = 0,
            $133 = 0,
            $134 = 0,
            $137 = 0,
            $139 = 0,
            $14 = 0,
            $141 = 0,
            $15 = 0,
            $156 = 0,
            $161 = 0,
            $163 = 0,
            $166 = 0,
            $169 = 0,
            $172 = 0,
            $175 = 0,
            $176 = 0,
            $178 = 0,
            $179 = 0,
            $181 = 0,
            $182 = 0,
            $184 = 0,
            $185 = 0,
            $19 = 0,
            $191 = 0,
            $192 = 0,
            $2 = 0,
            $201 = 0,
            $206 = 0,
            $210 = 0,
            $216 = 0,
            $22 = 0,
            $231 = 0,
            $233 = 0,
            $234 = 0,
            $235 = 0,
            $236 = 0,
            $24 = 0,
            $240 = 0,
            $241 = 0,
            $247 = 0,
            $252 = 0,
            $253 = 0,
            $256 = 0,
            $258 = 0,
            $26 = 0,
            $261 = 0,
            $266 = 0,
            $272 = 0,
            $276 = 0,
            $277 = 0,
            $284 = 0,
            $296 = 0,
            $301 = 0,
            $308 = 0,
            $309 = 0,
            $310 = 0,
            $318 = 0,
            $39 = 0,
            $44 = 0,
            $46 = 0,
            $49 = 0,
            $5 = 0,
            $51 = 0,
            $54 = 0,
            $57 = 0,
            $58 = 0,
            $6 = 0,
            $60 = 0,
            $61 = 0,
            $63 = 0,
            $64 = 0,
            $66 = 0,
            $67 = 0,
            $72 = 0,
            $73 = 0,
            $8 = 0,
            $82 = 0,
            $87 = 0,
            $9 = 0,
            $91 = 0,
            $97 = 0,
            $F16$0 = 0,
            $I18$0 = 0,
            $K19$052 = 0,
            $R$0 = 0,
            $R$0$lcssa = 0,
            $R$1 = 0,
            $R7$0 = 0,
            $R7$0$lcssa = 0,
            $R7$1 = 0,
            $RP$0 = 0,
            $RP$0$lcssa = 0,
            $RP9$0 = 0,
            $RP9$0$lcssa = 0,
            $T$0$lcssa = 0,
            $T$051 = 0,
            $T$051$lcssa = 0,
            $p$0 = 0,
            $psize$0 = 0,
            $psize$1 = 0,
            $sp$0$i = 0,
            $sp$0$in$i = 0;
        if (!$mem) {
            return;
        }
        $1 = $mem + -8 | 0; //@line 17396
        $2 = HEAP32[5230] | 0; //@line 17397
        if ($1 >>> 0 < $2 >>> 0) {
            _abort(); //@line 17400
        }
        $5 = HEAP32[$mem + -4 >> 2] | 0; //@line 17404
        $6 = $5 & 3; //@line 17405
        if (($6 | 0) == 1) {
            _abort(); //@line 17408
        }
        $8 = $5 & -8; //@line 17411
        $9 = $mem + ($8 + -8) | 0; //@line 17413
        do {
            if (!($5 & 1)) {
                $12 = HEAP32[$1 >> 2] | 0; //@line 17418
                if (!$6) {
                    return;
                }
                $$sum2 = -8 - $12 | 0; //@line 17423
                $14 = $mem + $$sum2 | 0; //@line 17424
                $15 = $12 + $8 | 0; //@line 17425
                if ($14 >>> 0 < $2 >>> 0) {
                    _abort(); //@line 17428
                }
                if (($14 | 0) == (HEAP32[5231] | 0)) {
                    $103 = $mem + ($8 + -4) | 0; //@line 17435
                    $104 = HEAP32[$103 >> 2] | 0; //@line 17436
                    if (($104 & 3 | 0) != 3) {
                        $p$0 = $14; //@line 17440
                        $psize$0 = $15; //@line 17440
                        break;
                    }
                    HEAP32[5228] = $15; //@line 17443
                    HEAP32[$103 >> 2] = $104 & -2; //@line 17445
                    HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1; //@line 17449
                    HEAP32[$9 >> 2] = $15; //@line 17450
                    return;
                }
                $19 = $12 >>> 3; //@line 17453
                if ($12 >>> 0 < 256) {
                    $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 17458
                    $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 17461
                    $26 = 20944 + ($19 << 1 << 2) | 0; //@line 17463
                    if (($22 | 0) != ($26 | 0)) {
                        if ($22 >>> 0 < $2 >>> 0) {
                            _abort(); //@line 17468
                        }
                        if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) {
                            _abort(); //@line 17475
                        }
                    }
                    if (($24 | 0) == ($22 | 0)) {
                        HEAP32[5226] = HEAP32[5226] & ~(1 << $19); //@line 17485
                        $p$0 = $14; //@line 17486
                        $psize$0 = $15; //@line 17486
                        break;
                    }
                    if (($24 | 0) == ($26 | 0)) {
                        $$pre$phi61Z2D = $24 + 8 | 0; //@line 17492
                    } else {
                        if ($24 >>> 0 < $2 >>> 0) {
                            _abort(); //@line 17496
                        }
                        $39 = $24 + 8 | 0; //@line 17499
                        if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) {
                            $$pre$phi61Z2D = $39; //@line 17503
                        } else {
                            _abort(); //@line 17505
                        }
                    }
                    HEAP32[$22 + 12 >> 2] = $24; //@line 17510
                    HEAP32[$$pre$phi61Z2D >> 2] = $22; //@line 17511
                    $p$0 = $14; //@line 17512
                    $psize$0 = $15; //@line 17512
                    break;
                }
                $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0; //@line 17517
                $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0; //@line 17520
                do {
                    if (($46 | 0) == ($14 | 0)) {
                        $57 = $mem + ($$sum2 + 20) | 0; //@line 17525
                        $58 = HEAP32[$57 >> 2] | 0; //@line 17526
                        if (!$58) {
                            $60 = $mem + ($$sum2 + 16) | 0; //@line 17530
                            $61 = HEAP32[$60 >> 2] | 0; //@line 17531
                            if (!$61) {
                                $R$1 = 0; //@line 17534
                                break;
                            } else {
                                $R$0 = $61; //@line 17537
                                $RP$0 = $60; //@line 17537
                            }
                        } else {
                            $R$0 = $58; //@line 17540
                            $RP$0 = $57; //@line 17540
                        }
                        while (1) {
                            $63 = $R$0 + 20 | 0; //@line 17543
                            $64 = HEAP32[$63 >> 2] | 0; //@line 17544
                            if ($64) {
                                $R$0 = $64; //@line 17547
                                $RP$0 = $63; //@line 17547
                                continue;
                            }
                            $66 = $R$0 + 16 | 0; //@line 17550
                            $67 = HEAP32[$66 >> 2] | 0; //@line 17551
                            if (!$67) {
                                $R$0$lcssa = $R$0; //@line 17554
                                $RP$0$lcssa = $RP$0; //@line 17554
                                break;
                            } else {
                                $R$0 = $67; //@line 17557
                                $RP$0 = $66; //@line 17557
                            }
                        }
                        if ($RP$0$lcssa >>> 0 < $2 >>> 0) {
                            _abort(); //@line 17562
                        } else {
                            HEAP32[$RP$0$lcssa >> 2] = 0; //@line 17565
                            $R$1 = $R$0$lcssa; //@line 17566
                            break;
                        }
                    } else {
                        $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0; //@line 17572
                        if ($49 >>> 0 < $2 >>> 0) {
                            _abort(); //@line 17575
                        }
                        $51 = $49 + 12 | 0; //@line 17578
                        if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) {
                            _abort(); //@line 17582
                        }
                        $54 = $46 + 8 | 0; //@line 17585
                        if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
                            HEAP32[$51 >> 2] = $46; //@line 17589
                            HEAP32[$54 >> 2] = $49; //@line 17590
                            $R$1 = $46; //@line 17591
                            break;
                        } else {
                            _abort(); //@line 17594
                        }
                    }
                } while (0);
                if (!$44) {
                    $p$0 = $14; //@line 17601
                    $psize$0 = $15; //@line 17601
                } else {
                    $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0; //@line 17605
                    $73 = 21208 + ($72 << 2) | 0; //@line 17606
                    if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
                        HEAP32[$73 >> 2] = $R$1; //@line 17610
                        if (!$R$1) {
                            HEAP32[5227] = HEAP32[5227] & ~(1 << $72); //@line 17617
                            $p$0 = $14; //@line 17618
                            $psize$0 = $15; //@line 17618
                            break;
                        }
                    } else {
                        if ($44 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                            _abort(); //@line 17625
                        }
                        $82 = $44 + 16 | 0; //@line 17628
                        if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) {
                            HEAP32[$82 >> 2] = $R$1; //@line 17632
                        } else {
                            HEAP32[$44 + 20 >> 2] = $R$1; //@line 17635
                        }
                        if (!$R$1) {
                            $p$0 = $14; //@line 17639
                            $psize$0 = $15; //@line 17639
                            break;
                        }
                    }
                    $87 = HEAP32[5230] | 0; //@line 17643
                    if ($R$1 >>> 0 < $87 >>> 0) {
                        _abort(); //@line 17646
                    }
                    HEAP32[$R$1 + 24 >> 2] = $44; //@line 17650
                    $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0; //@line 17653
                    do {
                        if ($91) {
                            if ($91 >>> 0 < $87 >>> 0) {
                                _abort(); //@line 17659
                            } else {
                                HEAP32[$R$1 + 16 >> 2] = $91; //@line 17663
                                HEAP32[$91 + 24 >> 2] = $R$1; //@line 17665
                                break;
                            }
                        }
                    } while (0);
                    $97 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0; //@line 17672
                    if (!$97) {
                        $p$0 = $14; //@line 17675
                        $psize$0 = $15; //@line 17675
                    } else {
                        if ($97 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                            _abort(); //@line 17680
                        } else {
                            HEAP32[$R$1 + 20 >> 2] = $97; //@line 17684
                            HEAP32[$97 + 24 >> 2] = $R$1; //@line 17686
                            $p$0 = $14; //@line 17687
                            $psize$0 = $15; //@line 17687
                            break;
                        }
                    }
                }
            } else {
                $p$0 = $1; //@line 17693
                $psize$0 = $8; //@line 17693
            }
        } while (0);
        if ($p$0 >>> 0 >= $9 >>> 0) {
            _abort(); //@line 17698
        }
        $111 = $mem + ($8 + -4) | 0; //@line 17702
        $112 = HEAP32[$111 >> 2] | 0; //@line 17703
        if (!($112 & 1)) {
            _abort(); //@line 17707
        }
        if (!($112 & 2)) {
            if (($9 | 0) == (HEAP32[5232] | 0)) {
                $120 = (HEAP32[5229] | 0) + $psize$0 | 0; //@line 17717
                HEAP32[5229] = $120; //@line 17718
                HEAP32[5232] = $p$0; //@line 17719
                HEAP32[$p$0 + 4 >> 2] = $120 | 1; //@line 17722
                if (($p$0 | 0) != (HEAP32[5231] | 0)) {
                    return;
                }
                HEAP32[5231] = 0; //@line 17728
                HEAP32[5228] = 0; //@line 17729
                return;
            }
            if (($9 | 0) == (HEAP32[5231] | 0)) {
                $128 = (HEAP32[5228] | 0) + $psize$0 | 0; //@line 17736
                HEAP32[5228] = $128; //@line 17737
                HEAP32[5231] = $p$0; //@line 17738
                HEAP32[$p$0 + 4 >> 2] = $128 | 1; //@line 17741
                HEAP32[$p$0 + $128 >> 2] = $128; //@line 17743
                return;
            }
            $133 = ($112 & -8) + $psize$0 | 0; //@line 17747
            $134 = $112 >>> 3; //@line 17748
            do {
                if ($112 >>> 0 < 256) {
                    $137 = HEAP32[$mem + $8 >> 2] | 0; //@line 17753
                    $139 = HEAP32[$mem + ($8 | 4) >> 2] | 0; //@line 17756
                    $141 = 20944 + ($134 << 1 << 2) | 0; //@line 17758
                    if (($137 | 0) != ($141 | 0)) {
                        if ($137 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                            _abort(); //@line 17764
                        }
                        if ((HEAP32[$137 + 12 >> 2] | 0) != ($9 | 0)) {
                            _abort(); //@line 17771
                        }
                    }
                    if (($139 | 0) == ($137 | 0)) {
                        HEAP32[5226] = HEAP32[5226] & ~(1 << $134); //@line 17781
                        break;
                    }
                    if (($139 | 0) == ($141 | 0)) {
                        $$pre$phi59Z2D = $139 + 8 | 0; //@line 17787
                    } else {
                        if ($139 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                            _abort(); //@line 17792
                        }
                        $156 = $139 + 8 | 0; //@line 17795
                        if ((HEAP32[$156 >> 2] | 0) == ($9 | 0)) {
                            $$pre$phi59Z2D = $156; //@line 17799
                        } else {
                            _abort(); //@line 17801
                        }
                    }
                    HEAP32[$137 + 12 >> 2] = $139; //@line 17806
                    HEAP32[$$pre$phi59Z2D >> 2] = $137; //@line 17807
                } else {
                    $161 = HEAP32[$mem + ($8 + 16) >> 2] | 0; //@line 17811
                    $163 = HEAP32[$mem + ($8 | 4) >> 2] | 0; //@line 17814
                    do {
                        if (($163 | 0) == ($9 | 0)) {
                            $175 = $mem + ($8 + 12) | 0; //@line 17819
                            $176 = HEAP32[$175 >> 2] | 0; //@line 17820
                            if (!$176) {
                                $178 = $mem + ($8 + 8) | 0; //@line 17824
                                $179 = HEAP32[$178 >> 2] | 0; //@line 17825
                                if (!$179) {
                                    $R7$1 = 0; //@line 17828
                                    break;
                                } else {
                                    $R7$0 = $179; //@line 17831
                                    $RP9$0 = $178; //@line 17831
                                }
                            } else {
                                $R7$0 = $176; //@line 17834
                                $RP9$0 = $175; //@line 17834
                            }
                            while (1) {
                                $181 = $R7$0 + 20 | 0; //@line 17837
                                $182 = HEAP32[$181 >> 2] | 0; //@line 17838
                                if ($182) {
                                    $R7$0 = $182; //@line 17841
                                    $RP9$0 = $181; //@line 17841
                                    continue;
                                }
                                $184 = $R7$0 + 16 | 0; //@line 17844
                                $185 = HEAP32[$184 >> 2] | 0; //@line 17845
                                if (!$185) {
                                    $R7$0$lcssa = $R7$0; //@line 17848
                                    $RP9$0$lcssa = $RP9$0; //@line 17848
                                    break;
                                } else {
                                    $R7$0 = $185; //@line 17851
                                    $RP9$0 = $184; //@line 17851
                                }
                            }
                            if ($RP9$0$lcssa >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                _abort(); //@line 17857
                            } else {
                                HEAP32[$RP9$0$lcssa >> 2] = 0; //@line 17860
                                $R7$1 = $R7$0$lcssa; //@line 17861
                                break;
                            }
                        } else {
                            $166 = HEAP32[$mem + $8 >> 2] | 0; //@line 17866
                            if ($166 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                _abort(); //@line 17870
                            }
                            $169 = $166 + 12 | 0; //@line 17873
                            if ((HEAP32[$169 >> 2] | 0) != ($9 | 0)) {
                                _abort(); //@line 17877
                            }
                            $172 = $163 + 8 | 0; //@line 17880
                            if ((HEAP32[$172 >> 2] | 0) == ($9 | 0)) {
                                HEAP32[$169 >> 2] = $163; //@line 17884
                                HEAP32[$172 >> 2] = $166; //@line 17885
                                $R7$1 = $163; //@line 17886
                                break;
                            } else {
                                _abort(); //@line 17889
                            }
                        }
                    } while (0);
                    if ($161) {
                        $191 = HEAP32[$mem + ($8 + 20) >> 2] | 0; //@line 17898
                        $192 = 21208 + ($191 << 2) | 0; //@line 17899
                        if (($9 | 0) == (HEAP32[$192 >> 2] | 0)) {
                            HEAP32[$192 >> 2] = $R7$1; //@line 17903
                            if (!$R7$1) {
                                HEAP32[5227] = HEAP32[5227] & ~(1 << $191); //@line 17910
                                break;
                            }
                        } else {
                            if ($161 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                _abort(); //@line 17917
                            }
                            $201 = $161 + 16 | 0; //@line 17920
                            if ((HEAP32[$201 >> 2] | 0) == ($9 | 0)) {
                                HEAP32[$201 >> 2] = $R7$1; //@line 17924
                            } else {
                                HEAP32[$161 + 20 >> 2] = $R7$1; //@line 17927
                            }
                            if (!$R7$1) {
                                break;
                            }
                        }
                        $206 = HEAP32[5230] | 0; //@line 17934
                        if ($R7$1 >>> 0 < $206 >>> 0) {
                            _abort(); //@line 17937
                        }
                        HEAP32[$R7$1 + 24 >> 2] = $161; //@line 17941
                        $210 = HEAP32[$mem + ($8 + 8) >> 2] | 0; //@line 17944
                        do {
                            if ($210) {
                                if ($210 >>> 0 < $206 >>> 0) {
                                    _abort(); //@line 17950
                                } else {
                                    HEAP32[$R7$1 + 16 >> 2] = $210; //@line 17954
                                    HEAP32[$210 + 24 >> 2] = $R7$1; //@line 17956
                                    break;
                                }
                            }
                        } while (0);
                        $216 = HEAP32[$mem + ($8 + 12) >> 2] | 0; //@line 17963
                        if ($216) {
                            if ($216 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                                _abort(); //@line 17969
                            } else {
                                HEAP32[$R7$1 + 20 >> 2] = $216; //@line 17973
                                HEAP32[$216 + 24 >> 2] = $R7$1; //@line 17975
                                break;
                            }
                        }
                    }
                }
            } while (0);
            HEAP32[$p$0 + 4 >> 2] = $133 | 1; //@line 17984
            HEAP32[$p$0 + $133 >> 2] = $133; //@line 17986
            if (($p$0 | 0) == (HEAP32[5231] | 0)) {
                HEAP32[5228] = $133; //@line 17990
                return;
            } else {
                $psize$1 = $133; //@line 17993
            }
        } else {
            HEAP32[$111 >> 2] = $112 & -2; //@line 17997
            HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1; //@line 18000
            HEAP32[$p$0 + $psize$0 >> 2] = $psize$0; //@line 18002
            $psize$1 = $psize$0; //@line 18003
        }
        $231 = $psize$1 >>> 3; //@line 18005
        if ($psize$1 >>> 0 < 256) {
            $233 = $231 << 1; //@line 18008
            $234 = 20944 + ($233 << 2) | 0; //@line 18009
            $235 = HEAP32[5226] | 0; //@line 18010
            $236 = 1 << $231; //@line 18011
            if (!($235 & $236)) {
                HEAP32[5226] = $235 | $236; //@line 18016
                $$pre$phiZ2D = 20944 + ($233 + 2 << 2) | 0; //@line 18019
                $F16$0 = $234; //@line 18019
            } else {
                $240 = 20944 + ($233 + 2 << 2) | 0; //@line 18022
                $241 = HEAP32[$240 >> 2] | 0; //@line 18023
                if ($241 >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                    _abort(); //@line 18027
                } else {
                    $$pre$phiZ2D = $240; //@line 18030
                    $F16$0 = $241; //@line 18030
                }
            }
            HEAP32[$$pre$phiZ2D >> 2] = $p$0; //@line 18033
            HEAP32[$F16$0 + 12 >> 2] = $p$0; //@line 18035
            HEAP32[$p$0 + 8 >> 2] = $F16$0; //@line 18037
            HEAP32[$p$0 + 12 >> 2] = $234; //@line 18039
            return;
        }
        $247 = $psize$1 >>> 8; //@line 18042
        if (!$247) {
            $I18$0 = 0; //@line 18045
        } else {
            if ($psize$1 >>> 0 > 16777215) {
                $I18$0 = 31; //@line 18049
            } else {
                $252 = ($247 + 1048320 | 0) >>> 16 & 8; //@line 18053
                $253 = $247 << $252; //@line 18054
                $256 = ($253 + 520192 | 0) >>> 16 & 4; //@line 18057
                $258 = $253 << $256; //@line 18059
                $261 = ($258 + 245760 | 0) >>> 16 & 2; //@line 18062
                $266 = 14 - ($256 | $252 | $261) + ($258 << $261 >>> 15) | 0; //@line 18067
                $I18$0 = $psize$1 >>> ($266 + 7 | 0) & 1 | $266 << 1; //@line 18073
            }
        }
        $272 = 21208 + ($I18$0 << 2) | 0; //@line 18076
        HEAP32[$p$0 + 28 >> 2] = $I18$0; //@line 18078
        HEAP32[$p$0 + 20 >> 2] = 0; //@line 18081
        HEAP32[$p$0 + 16 >> 2] = 0; //@line 18082
        $276 = HEAP32[5227] | 0; //@line 18083
        $277 = 1 << $I18$0; //@line 18084
        L199: do {
            if (!($276 & $277)) {
                HEAP32[5227] = $276 | $277; //@line 18090
                HEAP32[$272 >> 2] = $p$0; //@line 18091
                HEAP32[$p$0 + 24 >> 2] = $272; //@line 18093
                HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 18095
                HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 18097
            } else {
                $284 = HEAP32[$272 >> 2] | 0; //@line 18099
                L201: do {
                    if ((HEAP32[$284 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
                        $T$0$lcssa = $284; //@line 18106
                    } else {
                        $K19$052 = $psize$1 << (($I18$0 | 0) == 31 ? 0 : 25 - ($I18$0 >>> 1) | 0); //@line 18113
                        $T$051 = $284; //@line 18113
                        while (1) {
                            $301 = $T$051 + 16 + ($K19$052 >>> 31 << 2) | 0; //@line 18116
                            $296 = HEAP32[$301 >> 2] | 0; //@line 18117
                            if (!$296) {
                                $$lcssa = $301; //@line 18120
                                $T$051$lcssa = $T$051; //@line 18120
                                break;
                            }
                            if ((HEAP32[$296 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
                                $T$0$lcssa = $296; //@line 18129
                                break L201;
                            } else {
                                $K19$052 = $K19$052 << 1; //@line 18132
                                $T$051 = $296; //@line 18132
                            }
                        }
                        if ($$lcssa >>> 0 < (HEAP32[5230] | 0) >>> 0) {
                            _abort(); //@line 18138
                        } else {
                            HEAP32[$$lcssa >> 2] = $p$0; //@line 18141
                            HEAP32[$p$0 + 24 >> 2] = $T$051$lcssa; //@line 18143
                            HEAP32[$p$0 + 12 >> 2] = $p$0; //@line 18145
                            HEAP32[$p$0 + 8 >> 2] = $p$0; //@line 18147
                            break L199;
                        }
                    }
                } while (0);
                $308 = $T$0$lcssa + 8 | 0; //@line 18152
                $309 = HEAP32[$308 >> 2] | 0; //@line 18153
                $310 = HEAP32[5230] | 0; //@line 18154
                if ($309 >>> 0 >= $310 >>> 0 & $T$0$lcssa >>> 0 >= $310 >>> 0) {
                    HEAP32[$309 + 12 >> 2] = $p$0; //@line 18160
                    HEAP32[$308 >> 2] = $p$0; //@line 18161
                    HEAP32[$p$0 + 8 >> 2] = $309; //@line 18163
                    HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa; //@line 18165
                    HEAP32[$p$0 + 24 >> 2] = 0; //@line 18167
                    break;
                } else {
                    _abort(); //@line 18170
                }
            }
        } while (0);
        $318 = (HEAP32[5234] | 0) + -1 | 0; //@line 18176
        HEAP32[5234] = $318; //@line 18177
        if (!$318) {
            $sp$0$in$i = 21360; //@line 18180
        } else {
            return;
        }
        while (1) {
            $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0; //@line 18185
            if (!$sp$0$i) {
                break;
            } else {
                $sp$0$in$i = $sp$0$i + 8 | 0; //@line 18191
            }
        }
        HEAP32[5234] = -1; //@line 18194
        return;
    }

    function _fSPEAK($N) {
        $N = $N | 0;
        var $$$10 = 0,
            $$lcssa = 0,
            $$lcssa241 = 0,
            $$lcssa242 = 0,
            $$lcssa243 = 0,
            $$lcssa244 = 0,
            $$lcssa245 = 0,
            $$lcssa248 = 0,
            $$lcssa250 = 0,
            $$lcssa251 = 0,
            $$lcssa255 = 0,
            $$lcssa265 = 0,
            $$lcssa266 = 0,
            $$lcssa272 = 0,
            $$ph = 0,
            $$ph99 = 0,
            $$pr = 0,
            $$pre = 0,
            $$pre93 = 0,
            $$pre94 = 0,
            $101 = 0,
            $102 = 0,
            $105 = 0,
            $109 = 0,
            $110 = 0,
            $111 = 0,
            $116 = 0,
            $132 = 0,
            $133 = 0,
            $134 = 0,
            $135 = 0,
            $149 = 0,
            $15 = 0,
            $159 = 0,
            $161 = 0,
            $17 = 0,
            $2 = 0,
            $21 = 0,
            $22 = 0,
            $24 = 0,
            $25 = 0,
            $26 = 0,
            $31 = 0,
            $45 = 0,
            $47 = 0,
            $54 = 0,
            $56 = 0,
            $6 = 0,
            $67 = 0,
            $69 = 0,
            $77 = 0,
            $89 = 0,
            $9 = 0,
            $99 = 0,
            $BLANK$0 = 0,
            $CASE$053 = 0,
            $I$01$i = 0,
            $I$02$i = 0,
            $I$02$i13 = 0,
            $I$02$i17 = 0,
            $I$02$i21 = 0,
            $I$02$i25 = 0,
            $I$02$i32 = 0,
            $I$02$us$i = 0,
            $I$02$us$i30 = 0,
            $I$048194 = 0,
            $I$048196 = 0,
            $I$157 = 0,
            $K$0 = 0,
            $NEG$055 = 0,
            $NPARMS$0 = 0,
            $NPARMS$2$be = 0,
            $NPARMS$2$lcssa = 0,
            $NPARMS$263$ph = 0,
            $NPARMS$3 = 0,
            $NPARMS$452 = 0,
            $PARM$056 = 0,
            $STATE = 0,
            $or$cond9 = 0,
            label = 0,
            sp = 0,
            $15$looptemp = 0,
            $K$0$looptemp = 0;
        sp = STACKTOP; //@line 9983
        STACKTOP = STACKTOP + 16 | 0; //@line 9984
        $STATE = sp; //@line 9985
        if (!$N) {
            STACKTOP = sp; //@line 9988
            return;
        }
        $$pre = HEAP32[30] | 0; //@line 9991
        $2 = HEAP32[$$pre + ($N << 2) >> 2] | 0; //@line 9994
        $9 = $$pre; //@line 9994
        $BLANK$0 = HEAP32[2] | 0; //@line 9994
        $K$0 = $N; //@line 9994
        $NPARMS$0 = 1; //@line 9994
        L4: while (1) {
            $K$0$looptemp = $K$0;
            $K$0 = ($2 | 0) < 0 ? 0 - $2 | 0 : $2; //@line 9998
            $6 = $K$0 + -1 | 0; //@line 9999
            HEAP32[4234] = 0; //@line 10000
            HEAP32[4236] = 1; //@line 10001
            HEAP32[$STATE >> 2] = 0; //@line 10002
            L6: do {
                if (($K$0$looptemp | 0) < ($6 | 0)) {
                    $I$048194 = $K$0$looptemp + 1 | 0; //@line 10006
                    _fPUTTXT(HEAP32[$9 + ($I$048194 << 2) >> 2] | 0, $STATE, 2, $I$048194); //@line 10009
                    if (($I$048194 | 0) != ($6 | 0)) {
                        $I$048196 = $I$048194; //@line 10012
                        do {
                            $I$048196 = $I$048196 + 1 | 0; //@line 10015
                            _fPUTTXT(HEAP32[(HEAP32[30] | 0) + ($I$048196 << 2) >> 2] | 0, $STATE, 2, $I$048196); //@line 10018
                        } while (($I$048196 | 0) != ($6 | 0));
                    }
                    $$pre93 = HEAP32[4234] | 0; //@line 10027
                    HEAP32[4236] = 1; //@line 10028
                    if (($$pre93 | 0) < 1) {
                        $$pr = $$pre93; //@line 10031
                        $NPARMS$2$lcssa = $NPARMS$0; //@line 10031
                    } else {
                        $$ph = $$pre93; //@line 10033
                        $$ph99 = 1; //@line 10033
                        $NPARMS$263$ph = $NPARMS$0; //@line 10033
                        while (1) {
                            $15 = $$ph99; //@line 10035
                            L15: while (1) {
                                $17 = 17464 + $15 | 0; //@line 10037
                                $15$looptemp = $15;
                                $15 = $15 + 1 | 0; //@line 10040
                                if ((HEAP8[$17 >> 0] | 0) == 63) {
                                    $21 = HEAP8[17464 + $15 >> 0] | 0; //@line 10043
                                    $22 = $21 << 24 >> 24; //@line 10044
                                    switch ($21 << 24 >> 24) {
                                        case 30:
                                            {
                                                $$lcssa242 = $15$looptemp; //@line 10047
                                                label = 30; //@line 10048
                                                break L15;
                                                break;
                                            }
                                        case 12:
                                            {
                                                $$lcssa243 = $15$looptemp; //@line 10053
                                                $$lcssa250 = $17; //@line 10053
                                                label = 34; //@line 10054
                                                break L15;
                                                break;
                                            }
                                        case 13:
                                        case 22:
                                        case 31:
                                        case 33:
                                            {
                                                $$lcssa244 = $15$looptemp; //@line 10059
                                                $$lcssa251 = $17; //@line 10059
                                                $$lcssa265 = $21; //@line 10059
                                                label = 40; //@line 10060
                                                break L15;
                                                break;
                                            }
                                        case 29:
                                            {
                                                $$lcssa241 = $15$looptemp; //@line 10065
                                                $$lcssa248 = $17; //@line 10065
                                                $$lcssa255 = $15; //@line 10065
                                                label = 24; //@line 10066
                                                break L15;
                                                break;
                                            }
                                        case 1:
                                            {
                                                label = 56; //@line 10071
                                                break L4;
                                                break;
                                            }
                                        default:
                                            {}
                                    }
                                    if (($22 + -65 | 0) >>> 0 <= 8) {
                                        $$lcssa245 = $15$looptemp; //@line 10081
                                        $$lcssa266 = $21; //@line 10081
                                        $$lcssa272 = $22; //@line 10081
                                        label = 12; //@line 10082
                                        break;
                                    }
                                }
                                HEAP32[4236] = $15; //@line 10086
                                if (($15$looptemp | 0) >= ($$ph | 0)) {
                                    $$pr = $$ph; //@line 10091
                                    $NPARMS$2$lcssa = $NPARMS$263$ph; //@line 10091
                                    break L6;
                                }
                            }
                            if ((label | 0) == 12) {
                                label = 0; //@line 10096
                                $24 = $$lcssa272 + -64 | 0; //@line 10097
                                $25 = $$lcssa245 + 2 | 0; //@line 10098
                                $26 = $$lcssa272 + -66 | 0; //@line 10099
                                if (!(($$ph | 0) < ($25 | 0) | ($26 | 0) == 0)) {
                                    if ($$lcssa266 << 24 >> 24 > 66) {
                                        $I$02$us$i = $25; //@line 10106
                                        while (1) {
                                            $31 = $25 - $I$02$us$i + $$ph | 0; //@line 10109
                                            HEAP8[17464 + ($31 + $26) >> 0] = HEAP8[17464 + $31 >> 0] | 0; //@line 10114
                                            if (($I$02$us$i | 0) < ($$ph | 0)) {
                                                $I$02$us$i = $I$02$us$i + 1 | 0; //@line 10118
                                            } else {
                                                break;
                                            }
                                        }
                                    } else {
                                        $I$02$i = $25; //@line 10124
                                        while (1) {
                                            HEAP8[17464 + ($I$02$i + $26) >> 0] = HEAP8[17464 + $I$02$i >> 0] | 0; //@line 10130
                                            if (($I$02$i | 0) < ($$ph | 0)) {
                                                $I$02$i = $I$02$i + 1 | 0; //@line 10134
                                            } else {
                                                break;
                                            }
                                        }
                                    }
                                }
                                HEAP32[4234] = $26 + $$ph; //@line 10142
                                $45 = $$lcssa245 + $24 | 0; //@line 10143
                                HEAP32[4236] = $45; //@line 10144
                                $47 = HEAP32[16952 + ($NPARMS$263$ph << 2) >> 2] | 0; //@line 10146
                                if (($24 | 0) < 1) {
                                    $$lcssa = $45; //@line 10149
                                } else {
                                    $54 = $$lcssa272 + -63 | 0; //@line 10156
                                    $56 = $45; //@line 10157
                                    $I$157 = 1; //@line 10157
                                    $NEG$055 = $47 >> 31 & 9; //@line 10157
                                    $PARM$056 = ($47 | 0) < 0 ? 0 - $47 | 0 : $47; //@line 10157
                                    while (1) {
                                        $56 = $56 + -1 | 0; //@line 10159
                                        $or$cond9 = ($PARM$056 | 0) != 0 | ($I$157 | 0) == 1; //@line 10165
                                        HEAP8[17464 + $56 >> 0] = $or$cond9 ? (($PARM$056 | 0) % 10 | 0) + 64 | 0 : $NEG$055; //@line 10169
                                        $I$157 = $I$157 + 1 | 0; //@line 10171
                                        if (($I$157 | 0) == ($54 | 0)) {
                                            break;
                                        } else {
                                            $NEG$055 = $or$cond9 ? $NEG$055 : 0; //@line 10176
                                            $PARM$056 = ($PARM$056 | 0) / 10 | 0; //@line 10176
                                        }
                                    }
                                    HEAP32[4236] = $$lcssa245; //@line 10179
                                    $$lcssa = $$lcssa245; //@line 10180
                                }
                                HEAP32[4236] = $$lcssa + $24; //@line 10183
                                $NPARMS$3 = $NPARMS$263$ph; //@line 10184
                                label = 21; //@line 10185
                            } else if ((label | 0) == 24) {
                                label = 0; //@line 10188
                                $69 = $$lcssa241 + 2 | 0; //@line 10189
                                if (($$ph | 0) >= ($69 | 0)) {
                                    $I$02$i13 = $69; //@line 10192
                                    while (1) {
                                        HEAP8[17464 + ($I$02$i13 + -1) >> 0] = HEAP8[17464 + $I$02$i13 >> 0] | 0; //@line 10198
                                        if (($I$02$i13 | 0) < ($$ph | 0)) {
                                            $I$02$i13 = $I$02$i13 + 1 | 0; //@line 10202
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                $77 = $$ph + -1 | 0; //@line 10208
                                HEAP32[4234] = $77; //@line 10209
                                HEAP8[$$lcssa248 >> 0] = 55; //@line 10210
                                if ((HEAP32[16952 + ($NPARMS$263$ph << 2) >> 2] | 0) == 1) {
                                    if (($$ph | 0) > ($$lcssa255 | 0)) {
                                        $I$02$i17 = $$lcssa255; //@line 10217
                                        while (1) {
                                            HEAP8[17464 + ($I$02$i17 + -1) >> 0] = HEAP8[17464 + $I$02$i17 >> 0] | 0; //@line 10223
                                            if (($I$02$i17 | 0) < ($77 | 0)) {
                                                $I$02$i17 = $I$02$i17 + 1 | 0; //@line 10227
                                            } else {
                                                break;
                                            }
                                        }
                                    }
                                    HEAP32[4234] = $$ph + -2; //@line 10234
                                    $NPARMS$3 = $NPARMS$263$ph; //@line 10235
                                    label = 21; //@line 10236
                                } else {
                                    $NPARMS$3 = $NPARMS$263$ph; //@line 10238
                                    label = 21; //@line 10239
                                }
                            } else if ((label | 0) == 30) {
                                label = 0; //@line 10243
                                $89 = $$lcssa242 + 2 | 0; //@line 10244
                                if (($$ph | 0) >= ($89 | 0)) {
                                    $I$02$i21 = $89; //@line 10247
                                    while (1) {
                                        HEAP8[17464 + ($I$02$i21 + -2) >> 0] = HEAP8[17464 + $I$02$i21 >> 0] | 0; //@line 10253
                                        if (($I$02$i21 | 0) < ($$ph | 0)) {
                                            $I$02$i21 = $I$02$i21 + 1 | 0; //@line 10257
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                HEAP32[4234] = $$ph + -2; //@line 10264
                                HEAP32[$STATE >> 2] = 0; //@line 10265
                                $99 = HEAP32[16952 + ($NPARMS$263$ph << 2) >> 2] | 0; //@line 10267
                                if (($99 | 0) < 0) {
                                    $NPARMS$3 = $NPARMS$263$ph; //@line 10270
                                    label = 21; //@line 10271
                                } else {
                                    $105 = $99; //@line 10273
                                    $CASE$053 = 2; //@line 10273
                                    $NPARMS$452 = $NPARMS$263$ph; //@line 10273
                                    while (1) {
                                        $101 = $NPARMS$452 + 1 | 0; //@line 10275
                                        $102 = 16952 + ($101 << 2) | 0; //@line 10276
                                        $CASE$053 = (HEAP32[$102 >> 2] | 0) < 0 ? 0 : $CASE$053; //@line 10279
                                        _fPUTTXT($105, $STATE, $CASE$053, 0); //@line 10280
                                        $105 = HEAP32[$102 >> 2] | 0; //@line 10281
                                        if (($105 | 0) < 0) {
                                            $NPARMS$3 = $101; //@line 10284
                                            label = 21; //@line 10285
                                            break;
                                        } else {
                                            $NPARMS$452 = $101; //@line 10288
                                        }
                                    }
                                }
                            } else if ((label | 0) == 34) {
                                label = 0; //@line 10294
                                $109 = HEAP32[16952 + ($NPARMS$263$ph << 2) >> 2] | 0; //@line 10296
                                $110 = $$lcssa243 + 2 | 0; //@line 10297
                                $111 = $109 + -2 | 0; //@line 10298
                                if (!(($$ph | 0) < ($110 | 0) | ($111 | 0) == 0)) {
                                    if (($109 | 0) > 2) {
                                        $I$02$us$i30 = $110; //@line 10305
                                        while (1) {
                                            $116 = $110 - $I$02$us$i30 + $$ph | 0; //@line 10308
                                            HEAP8[17464 + ($116 + $111) >> 0] = HEAP8[17464 + $116 >> 0] | 0; //@line 10313
                                            if (($I$02$us$i30 | 0) < ($$ph | 0)) {
                                                $I$02$us$i30 = $I$02$us$i30 + 1 | 0; //@line 10317
                                            } else {
                                                break;
                                            }
                                        }
                                    } else {
                                        $I$02$i32 = $110; //@line 10323
                                        while (1) {
                                            HEAP8[17464 + ($I$02$i32 + $111) >> 0] = HEAP8[17464 + $I$02$i32 >> 0] | 0; //@line 10329
                                            if (($I$02$i32 | 0) < ($$ph | 0)) {
                                                $I$02$i32 = $I$02$i32 + 1 | 0; //@line 10333
                                            } else {
                                                break;
                                            }
                                        }
                                    }
                                }
                                HEAP32[4234] = $111 + $$ph; //@line 10341
                                if (($109 | 0) < 1) {
                                    $NPARMS$3 = $NPARMS$263$ph; //@line 10344
                                    label = 21; //@line 10345
                                } else {
                                    _memset($$lcssa250 | 0, 0, $109 | 0) | 0; //@line 10347
                                    HEAP32[4236] = $109 + $$lcssa243; //@line 10349
                                    $NPARMS$3 = $NPARMS$263$ph; //@line 10350
                                    label = 21; //@line 10351
                                }
                            } else if ((label | 0) == 40) {
                                label = 0; //@line 10355
                                $132 = $$lcssa265 << 24 >> 24 == 33; //@line 10356
                                $133 = $$lcssa265 << 24 >> 24 == 31; //@line 10357
                                $134 = $$lcssa265 << 24 >> 24 == 13; //@line 10358
                                $135 = $$lcssa244 + 2 | 0; //@line 10359
                                if (($$ph | 0) >= ($135 | 0)) {
                                    $I$02$i25 = $135; //@line 10362
                                    while (1) {
                                        HEAP8[17464 + ($I$02$i25 + -2) >> 0] = HEAP8[17464 + $I$02$i25 >> 0] | 0; //@line 10368
                                        if (($I$02$i25 | 0) < ($$ph | 0)) {
                                            $I$02$i25 = $I$02$i25 + 1 | 0; //@line 10372
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                HEAP32[4234] = $$ph + -2; //@line 10379
                                HEAP32[$STATE >> 2] = 0; //@line 10380
                                $$$10 = $132 ? 0 : $133 ? 1 : -1; //@line 10382
                                _fPUTTXT(HEAP32[16952 + ($NPARMS$263$ph << 2) >> 2] | 0, $STATE, $$$10, 0); //@line 10385
                                _fPUTTXT(HEAP32[16952 + ($NPARMS$263$ph + 1 << 2) >> 2] | 0, $STATE, $$$10, 0); //@line 10389
                                if ($134) {
                                    $149 = HEAP8[$$lcssa251 >> 0] | 0; //@line 10391
                                    if (($149 + -37 & 255) < 26) {
                                        HEAP8[$$lcssa251 >> 0] = ($149 & 255) + 230; //@line 10398
                                    }
                                }
                                $NPARMS$2$be = $NPARMS$263$ph + 2 | 0; //@line 10402
                            }
                            if ((label | 0) == 21) {
                                label = 0; //@line 10405
                                $NPARMS$2$be = $NPARMS$3 + 1 | 0; //@line 10407
                            }
                            $$ph99 = HEAP32[4236] | 0; //@line 10409
                            $67 = HEAP32[4234] | 0; //@line 10410
                            if (($$ph99 | 0) > ($67 | 0)) {
                                $$pr = $67; //@line 10413
                                $NPARMS$2$lcssa = $NPARMS$2$be; //@line 10413
                                break;
                            } else {
                                $$ph = $67; //@line 10416
                                $NPARMS$263$ph = $NPARMS$2$be; //@line 10416
                            }
                        }
                    }
                } else {
                    HEAP32[4236] = 1; //@line 10421
                    $$pr = 0; //@line 10422
                    $NPARMS$2$lcssa = $NPARMS$0; //@line 10422
                }
            } while (0);
            if ($BLANK$0) {
                HEAP32[4234] = 0; //@line 10427
                _putchar(10) | 0; //@line 10428
                HEAP32[4234] = $$pr; //@line 10429
            }
            if (!$$pr) {
                _putchar(10) | 0; //@line 10433
            } else {
                if (!(HEAP8[129] | 0)) {
                    _fMPINIT(); //@line 10438
                    $159 = HEAP32[4234] | 0; //@line 10440
                } else {
                    $159 = $$pr; //@line 10442
                }
                $$pre94 = $159 + 1 | 0; //@line 10445
                if (($159 | 0) >= 1) {
                    $I$01$i = 1; //@line 10447
                    do {
                        $161 = 17464 + $I$01$i | 0; //@line 10449
                        HEAP8[$161 >> 0] = HEAP8[128 + ((HEAP8[$161 >> 0] | 0) + 1) >> 0] | 0; //@line 10455
                        $I$01$i = $I$01$i + 1 | 0; //@line 10456
                    } while (($I$01$i | 0) != ($$pre94 | 0));
                }
                HEAP8[17464 + $$pre94 >> 0] = 0; //@line 10466
                _puts(17465) | 0; //@line 10467
            }
            $9 = HEAP32[30] | 0; //@line 10469
            $2 = HEAP32[$9 + ($K$0 << 2) >> 2] | 0; //@line 10471
            if (($2 | 0) <= -1) {
                label = 56; //@line 10476
                break;
            } else {
                $BLANK$0 = 0; //@line 10474
                $NPARMS$0 = $NPARMS$2$lcssa; //@line 10474
            }
        }
        if ((label | 0) == 56) {
            STACKTOP = sp; //@line 10481
            return;
        }
    }

    function _attack() {
        var $$0 = 0,
            $1 = 0,
            $101 = 0,
            $103 = 0,
            $110 = 0,
            $111 = 0,
            $112 = 0,
            $115 = 0,
            $122 = 0,
            $128 = 0,
            $139 = 0,
            $143 = 0,
            $147 = 0,
            $16 = 0,
            $160 = 0,
            $163 = 0,
            $167 = 0,
            $17 = 0,
            $18 = 0,
            $187 = 0,
            $188 = 0,
            $189 = 0,
            $198 = 0,
            $2 = 0,
            $204 = 0,
            $209 = 0,
            $210 = 0,
            $213 = 0,
            $214 = 0,
            $217 = 0,
            $218 = 0,
            $221 = 0,
            $222 = 0,
            $226 = 0,
            $29 = 0,
            $30 = 0,
            $31 = 0,
            $39 = 0,
            $40 = 0,
            $41 = 0,
            $49 = 0,
            $5 = 0,
            $50 = 0,
            $51 = 0,
            $53 = 0,
            $6 = 0,
            $63 = 0,
            $64 = 0,
            $65 = 0,
            $68 = 0,
            $70 = 0,
            $79 = 0,
            $8 = 0,
            $81 = 0,
            $9 = 0,
            $91 = 0,
            $92 = 0,
            $93 = 0,
            $95 = 0,
            label = 0;
        $1 = _fATDWRF(HEAP32[74] | 0) | 0; //@line 8399
        HEAP32[66] = $1; //@line 8400
        $2 = HEAP32[2864] | 0; //@line 8401
        if (!$2) {
            if (($1 | 0) > 0) {
                $5 = HEAP32[3558] | 0; //@line 8406
                HEAP32[2864] = $5; //@line 8407
                $16 = $5; //@line 8408
            } else {
                $16 = 0; //@line 8410
            }
            $6 = HEAP32[3446] | 0; //@line 8412
            $8 = HEAP32[6488 + ($6 << 2) >> 2] | 0; //@line 8414
            $9 = HEAP32[74] | 0; //@line 8415
            if (($8 | 0) == ($9 | 0)) {
                label = 6; //@line 8418
            } else {
                if (($8 | 0) == -1 ? 1 : (HEAP32[6896 + ($6 << 2) >> 2] | 0) == ($9 | 0)) {
                    label = 6; //@line 8426
                } else {
                    $29 = $16; //@line 8428
                }
            }
            if ((label | 0) == 6) {
                $17 = ($16 * 100 | 0) + $6 | 0; //@line 8433
                HEAP32[2864] = $17; //@line 8434
                $29 = $17; //@line 8435
            }
            $18 = HEAP32[4510] | 0; //@line 8437
            if ((HEAP32[6488 + ($18 << 2) >> 2] | 0) == ($9 | 0)) {
                label = 9; //@line 8442
            } else {
                if ((HEAP32[6896 + ($18 << 2) >> 2] | 0) == ($9 | 0)) {
                    label = 9; //@line 8448
                } else {
                    $39 = $29; //@line 8450
                }
            }
            if ((label | 0) == 9) {
                if (!(HEAP32[6048 + ($18 << 2) >> 2] | 0)) {
                    $30 = ($29 * 100 | 0) + $18 | 0; //@line 8459
                    HEAP32[2864] = $30; //@line 8460
                    $39 = $30; //@line 8461
                } else {
                    $39 = $29; //@line 8463
                }
            }
            $31 = HEAP32[3320] | 0; //@line 8466
            if ((HEAP32[6488 + ($31 << 2) >> 2] | 0) == ($9 | 0)) {
                label = 13; //@line 8471
            } else {
                if ((HEAP32[6896 + ($31 << 2) >> 2] | 0) == ($9 | 0)) {
                    label = 13; //@line 8477
                } else {
                    $49 = $39; //@line 8479
                }
            }
            if ((label | 0) == 13) {
                $40 = ($39 * 100 | 0) + $31 | 0; //@line 8484
                HEAP32[2864] = $40; //@line 8485
                $49 = $40; //@line 8486
            }
            $41 = HEAP32[3448] | 0; //@line 8488
            if ((HEAP32[6488 + ($41 << 2) >> 2] | 0) == ($9 | 0)) {
                label = 16; //@line 8493
            } else {
                if ((HEAP32[6896 + ($41 << 2) >> 2] | 0) == ($9 | 0)) {
                    label = 16; //@line 8499
                } else {
                    $63 = $49; //@line 8501
                }
            }
            if ((label | 0) == 16) {
                $50 = ($49 * 100 | 0) + $41 | 0; //@line 8506
                HEAP32[2864] = $50; //@line 8507
                $63 = $50; //@line 8508
            }
            $51 = HEAP32[2676] | 0; //@line 8510
            $53 = HEAP32[6488 + ($51 << 2) >> 2] | 0; //@line 8512
            if (($53 | 0) == ($9 | 0)) {
                label = 19; //@line 8515
            } else {
                if (($53 | 0) == -1 ? 1 : (HEAP32[6896 + ($51 << 2) >> 2] | 0) == ($9 | 0)) {
                    label = 19; //@line 8523
                } else {
                    $65 = $63; //@line 8525
                }
            }
            if ((label | 0) == 19) {
                if (!(HEAP32[6048 + ($51 << 2) >> 2] | 0)) {
                    $64 = ($63 * 100 | 0) + $51 | 0; //@line 8534
                    HEAP32[2864] = $64; //@line 8535
                    $65 = $64; //@line 8536
                } else {
                    $65 = $63; //@line 8538
                }
            }
            if (($65 | 0) > 100) {
                $$0 = 8e3; //@line 8543
                return $$0 | 0; //@line 8544
            }
            if (!$65) {
                $68 = HEAP32[3298] | 0; //@line 8548
                $70 = HEAP32[6488 + ($68 << 2) >> 2] | 0; //@line 8550
                if (($70 | 0) == ($9 | 0)) {
                    label = 25; //@line 8553
                } else {
                    if (($70 | 0) == -1 ? 1 : (HEAP32[6896 + ($68 << 2) >> 2] | 0) == ($9 | 0)) {
                        label = 25; //@line 8561
                    } else {
                        $91 = 0; //@line 8563
                    }
                }
                if ((label | 0) == 25) {
                    if ((HEAP32[3080] | 0) == (HEAP32[4834] | 0)) {
                        $91 = 0; //@line 8571
                    } else {
                        HEAP32[2864] = $68; //@line 8573
                        $91 = $68; //@line 8574
                    }
                }
                $79 = HEAP32[4844] | 0; //@line 8577
                $81 = HEAP32[6488 + ($79 << 2) >> 2] | 0; //@line 8579
                if (($81 | 0) == ($9 | 0)) {
                    label = 29; //@line 8582
                } else {
                    if (($81 | 0) == -1 ? 1 : (HEAP32[6896 + ($79 << 2) >> 2] | 0) == ($9 | 0)) {
                        label = 29; //@line 8590
                    } else {
                        $110 = $91; //@line 8592
                    }
                }
                if ((label | 0) == 29) {
                    if ((HEAP32[3080] | 0) == (HEAP32[4834] | 0)) {
                        $110 = $91; //@line 8600
                    } else {
                        $92 = ($91 * 100 | 0) + $79 | 0; //@line 8603
                        HEAP32[2864] = $92; //@line 8604
                        $110 = $92; //@line 8605
                    }
                }
                $93 = HEAP32[4470] | 0; //@line 8608
                $95 = HEAP32[6488 + ($93 << 2) >> 2] | 0; //@line 8610
                if (($95 | 0) == ($9 | 0)) {
                    label = 35; //@line 8613
                } else {
                    if (($95 | 0) == -1 ? 1 : (HEAP32[6896 + ($93 << 2) >> 2] | 0) == ($9 | 0)) {
                        label = 35; //@line 8621
                    } else {
                        $101 = HEAP32[3240] | 0; //@line 8623
                        $103 = HEAP32[6488 + ($101 << 2) >> 2] | 0; //@line 8625
                        if (($103 | 0) == ($9 | 0)) {
                            label = 35; //@line 8628
                        } else {
                            if (($103 | 0) == -1 ? 1 : (HEAP32[6896 + ($101 << 2) >> 2] | 0) == ($9 | 0)) {
                                label = 35; //@line 8636
                            } else {
                                $112 = $110; //@line 8638
                            }
                        }
                    }
                }
                if ((label | 0) == 35) {
                    $111 = ($110 * 100 | 0) + $93 | 0; //@line 8645
                    HEAP32[2864] = $111; //@line 8646
                    $112 = $111; //@line 8647
                }
                if (($112 | 0) > 100) {
                    $$0 = 8e3; //@line 8651
                    return $$0 | 0; //@line 8652
                } else {
                    $115 = $112; //@line 8654
                }
            } else {
                $115 = $65; //@line 8657
            }
        } else {
            $115 = $2; //@line 8660
        }
        do {
            if (($115 | 0) == (HEAP32[3298] | 0)) {
                HEAP32[3078] = 137; //@line 8666
                if (!(HEAP32[2870] | 0)) {
                    _fDSTROY($115); //@line 8670
                    HEAP32[6048 + (HEAP32[3298] << 2) >> 2] = 0; //@line 8673
                    HEAP32[3078] = 45; //@line 8674
                    $122 = HEAP32[2864] | 0; //@line 8676
                    break;
                } else {
                    $$0 = 2011; //@line 8679
                    return $$0 | 0; //@line 8680
                }
            } else {
                $122 = $115; //@line 8683
            }
        } while (0);
        if (($122 | 0) == (HEAP32[4844] | 0)) {
            _fPSPEAK($122, (HEAP32[6048 + ($122 << 2) >> 2] | 0) + 2 | 0); //@line 8692
            $128 = 6048 + (HEAP32[4844] << 2) | 0; //@line 8694
            HEAP32[$128 >> 2] = 3 - (HEAP32[$128 >> 2] | 0); //@line 8697
            $$0 = 2012; //@line 8698
            return $$0 | 0; //@line 8699
        }
        if (!$122) {
            HEAP32[3078] = 44; //@line 8703
        }
        if (($122 | 0) == (HEAP32[4470] | 0) | ($122 | 0) == (HEAP32[3240] | 0)) {
            HEAP32[3078] = 150; //@line 8711
        }
        if (($122 | 0) == (HEAP32[3446] | 0)) {
            HEAP32[3078] = 46; //@line 8716
        }
        $139 = ($122 | 0) == (HEAP32[3558] | 0); //@line 8719
        if ($139) {
            HEAP32[3078] = 49; //@line 8721
            if ($139 & (HEAP32[2870] | 0) != 0) {
                $$0 = 19e3; //@line 8726
                return $$0 | 0; //@line 8727
            }
        }
        $143 = ($122 | 0) == (HEAP32[4510] | 0); //@line 8731
        if ($143) {
            HEAP32[3078] = 167; //@line 8733
        }
        if (($122 | 0) == (HEAP32[3320] | 0)) {
            HEAP32[3078] = 157; //@line 8738
        }
        $147 = ($122 | 0) == (HEAP32[3448] | 0); //@line 8741
        if ($147) {
            HEAP32[3078] = 203; //@line 8743
            if ($147 & (HEAP32[66] | 0) > 0) {
                _fRSPEAK(HEAP32[3078] | 0); //@line 8749
                _fRSPEAK(6); //@line 8750
                _fDSTROY(HEAP32[3448] | 0); //@line 8752
                HEAP32[1614] = 0; //@line 8753
                HEAP32[66] = 1; //@line 8754
                $204 = HEAP32[74] | 0; //@line 8755
                if ((HEAP32[395] | 0) == ($204 | 0)) {
                    HEAP32[1614] = 1; //@line 8759
                    HEAP32[395] = 61; //@line 8760
                    HEAP32[383] = 0; //@line 8761
                    $210 = 1; //@line 8762
                } else {
                    $210 = 0; //@line 8764
                }
                if ((HEAP32[396] | 0) == ($204 | 0)) {
                    $209 = $210 + 1 | 0; //@line 8769
                    HEAP32[1614] = $209; //@line 8770
                    HEAP32[396] = 61; //@line 8771
                    HEAP32[384] = 0; //@line 8772
                    $214 = $209; //@line 8773
                } else {
                    $214 = $210; //@line 8775
                }
                if ((HEAP32[397] | 0) == ($204 | 0)) {
                    $213 = $214 + 1 | 0; //@line 8780
                    HEAP32[1614] = $213; //@line 8781
                    HEAP32[397] = 61; //@line 8782
                    HEAP32[385] = 0; //@line 8783
                    $218 = $213; //@line 8784
                } else {
                    $218 = $214; //@line 8786
                }
                if ((HEAP32[398] | 0) == ($204 | 0)) {
                    $217 = $218 + 1 | 0; //@line 8791
                    HEAP32[1614] = $217; //@line 8792
                    HEAP32[398] = 61; //@line 8793
                    HEAP32[386] = 0; //@line 8794
                    $222 = $217; //@line 8795
                } else {
                    $222 = $218; //@line 8797
                }
                if ((HEAP32[399] | 0) == ($204 | 0)) {
                    $221 = $222 + 1 | 0; //@line 8802
                    HEAP32[1614] = $221; //@line 8803
                    HEAP32[399] = 61; //@line 8804
                    HEAP32[387] = 0; //@line 8805
                    $226 = $221; //@line 8806
                } else {
                    $226 = $222; //@line 8808
                }
                HEAP32[66] = 6; //@line 8810
                HEAP32[3078] = (HEAP32[3078] | 0) + 1 + (($226 + 1 | 0) >>> 0 < 3 ? $226 : 0); //@line 8817
                $$0 = 2011; //@line 8818
                return $$0 | 0; //@line 8819
            }
        }
        if (($122 | 0) == (HEAP32[2676] | 0)) {
            HEAP32[3078] = (((HEAP32[6048 + ($122 << 2) >> 2] | 0) + 1 | 0) / 2 | 0) + 165; //@line 8830
        }
        if (!$143) {
            $$0 = 2011; //@line 8833
            return $$0 | 0; //@line 8834
        }
        if (HEAP32[6048 + ($122 << 2) >> 2] | 0) {
            $$0 = 2011; //@line 8840
            return $$0 | 0; //@line 8841
        }
        _fRSPEAK(49); //@line 8843
        HEAP32[3080] = 0; //@line 8844
        HEAP32[2864] = 0; //@line 8845
        _fGETIN(12968, 12976, 12984, 12992); //@line 8846
        $160 = HEAP32[3242] | 0; //@line 8847
        if (($160 | 0) != (_fMAKEWD(25) | 0)) {
            $163 = HEAP32[3242] | 0; //@line 8851
            if (($163 | 0) != (_fMAKEWD(250519) | 0)) {
                $$0 = 2607; //@line 8855
                return $$0 | 0; //@line 8856
            }
        }
        _fPSPEAK(HEAP32[4510] | 0, 3); //@line 8860
        $167 = HEAP32[4510] | 0; //@line 8861
        HEAP32[6048 + ($167 << 2) >> 2] = 1; //@line 8863
        HEAP32[6048 + (HEAP32[2872] << 2) >> 2] = 0; //@line 8866
        HEAP32[1614] = ((HEAP32[13296 + ($167 << 2) >> 2] | 0) + (HEAP32[320 + ($167 << 2) >> 2] | 0) | 0) / 2 | 0; //@line 8873
        _fMOVE($167 + 100 | 0, -1); //@line 8875
        _fMOVE((HEAP32[2872] | 0) + 100 | 0, 0); //@line 8878
        _fMOVE(HEAP32[4510] | 0, HEAP32[1614] | 0); //@line 8881
        _fMOVE(HEAP32[2872] | 0, HEAP32[1614] | 0); //@line 8884
        _fDROP(HEAP32[4464] | 0, HEAP32[1614] | 0); //@line 8887
        HEAP32[2864] = 1; //@line 8888
        $187 = 1; //@line 8889
        do {
            $188 = HEAP32[6488 + ($187 << 2) >> 2] | 0; //@line 8892
            $189 = HEAP32[4510] | 0; //@line 8893
            if (($188 | 0) == (HEAP32[320 + ($189 << 2) >> 2] | 0)) {
                label = 65; //@line 8898
            } else {
                if (($188 | 0) == (HEAP32[13296 + ($189 << 2) >> 2] | 0)) {
                    label = 65; //@line 8904
                } else {
                    $198 = $187; //@line 8906
                }
            }
            if ((label | 0) == 65) {
                label = 0; //@line 8910
                _fMOVE($187, HEAP32[1614] | 0); //@line 8912
                $198 = HEAP32[2864] | 0; //@line 8914
            }
            $187 = $198 + 1 | 0; //@line 8916
            HEAP32[2864] = $187; //@line 8917
        } while (($187 | 0) < 101);
        HEAP32[74] = HEAP32[1614]; //@line 8926
        HEAP32[1614] = HEAP32[3306]; //@line 8928
        $$0 = 8; //@line 8929
        return $$0 | 0; //@line 8930
    }

    function _fSAVWDS($W1, $W2, $W3, $W4, $W5, $W6, $W7) {
        $W1 = $W1 | 0;
        $W2 = $W2 | 0;
        $W3 = $W3 | 0;
        $W4 = $W4 | 0;
        $W5 = $W5 | 0;
        $W6 = $W6 | 0;
        $W7 = $W7 | 0;
        var $$pr$i = 0,
            $$pr$i1$pr = 0,
            $$pr$i17$pr$pr = 0,
            $$pr$i25$pr$pr$pr = 0,
            $$pr$i33$pr$pr$pr = 0,
            $$pr$i41$pr$pr$pr = 0,
            $$pr$i9$pr$pr = 0,
            $1 = 0,
            $10 = 0,
            $104 = 0,
            $105 = 0,
            $109 = 0,
            $112 = 0,
            $116 = 0,
            $117 = 0,
            $121 = 0,
            $123 = 0,
            $124 = 0,
            $126 = 0,
            $127 = 0,
            $13 = 0,
            $137 = 0,
            $138 = 0,
            $142 = 0,
            $145 = 0,
            $149 = 0,
            $150 = 0,
            $154 = 0,
            $156 = 0,
            $157 = 0,
            $159 = 0,
            $160 = 0,
            $17 = 0,
            $170 = 0,
            $171 = 0,
            $175 = 0,
            $178 = 0,
            $18 = 0,
            $182 = 0,
            $183 = 0,
            $187 = 0,
            $189 = 0,
            $190 = 0,
            $192 = 0,
            $193 = 0,
            $203 = 0,
            $204 = 0,
            $208 = 0,
            $211 = 0,
            $215 = 0,
            $216 = 0,
            $22 = 0,
            $220 = 0,
            $222 = 0,
            $223 = 0,
            $225 = 0,
            $24 = 0,
            $25 = 0,
            $27 = 0,
            $28 = 0,
            $38 = 0,
            $39 = 0,
            $43 = 0,
            $46 = 0,
            $5 = 0,
            $50 = 0,
            $51 = 0,
            $55 = 0,
            $57 = 0,
            $58 = 0,
            $6 = 0,
            $60 = 0,
            $61 = 0,
            $71 = 0,
            $72 = 0,
            $76 = 0,
            $79 = 0,
            $83 = 0,
            $84 = 0,
            $88 = 0,
            $90 = 0,
            $91 = 0,
            $93 = 0,
            $94 = 0;
        $$pr$i = HEAP32[4944] | 0; //@line 13170
        if (!$$pr$i) {
            return;
        }
        $1 = HEAP32[4946] | 0; //@line 13175
        if (($1 | 0) == 250) {
            _fSAVEIO(1, ($$pr$i | 0) > 0 & 1, 19792); //@line 13180
            $18 = HEAP32[4944] | 0; //@line 13183
            $6 = HEAP32[4946] | 0; //@line 13183
        } else {
            $18 = $$pr$i; //@line 13185
            $6 = $1; //@line 13185
        }
        $5 = ($6 | 0) % 250 | 0; //@line 13187
        $10 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13191
        $13 = (($10 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13194
        HEAP32[5198] = $13; //@line 13195
        $17 = ((($10 | 0) % 1234 | 0) * 765432 | 0) + (($13 | 0) % 123 | 0) | 0; //@line 13199
        HEAP32[5200] = $17; //@line 13200
        HEAP32[4946] = $5; //@line 13201
        if (($18 | 0) > 0) {
            $22 = (HEAP32[19792 + ($5 << 2) >> 2] | 0) + $17 | 0; //@line 13206
            HEAP32[$W1 >> 2] = $22; //@line 13207
            $$pr$i1$pr = HEAP32[4944] | 0; //@line 13211
            $24 = $22; //@line 13211
            $25 = HEAP32[5200] | 0; //@line 13211
            $27 = HEAP32[4946] | 0; //@line 13211
        } else {
            $$pr$i1$pr = $18; //@line 13214
            $24 = HEAP32[$W1 >> 2] | 0; //@line 13214
            $25 = $17; //@line 13214
            $27 = $5; //@line 13214
        }
        HEAP32[19792 + ($27 << 2) >> 2] = $24 - $25; //@line 13218
        $28 = $27 + 1 | 0; //@line 13219
        HEAP32[4946] = $28; //@line 13220
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$W1 >> 2] | 0) | 0) % 1e9 | 0; //@line 13226
        if (!$$pr$i1$pr) {
            return;
        }
        if (($28 | 0) == 250) {
            _fSAVEIO(1, ($$pr$i1$pr | 0) > 0 & 1, 19792); //@line 13235
            $39 = HEAP32[4946] | 0; //@line 13238
            $51 = HEAP32[4944] | 0; //@line 13238
        } else {
            $39 = $28; //@line 13240
            $51 = $$pr$i1$pr; //@line 13240
        }
        $38 = ($39 | 0) % 250 | 0; //@line 13242
        $43 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13246
        $46 = (($43 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13249
        HEAP32[5198] = $46; //@line 13250
        $50 = ((($43 | 0) % 1234 | 0) * 765432 | 0) + (($46 | 0) % 123 | 0) | 0; //@line 13254
        HEAP32[5200] = $50; //@line 13255
        HEAP32[4946] = $38; //@line 13256
        if (($51 | 0) > 0) {
            $55 = (HEAP32[19792 + ($38 << 2) >> 2] | 0) + $50 | 0; //@line 13261
            HEAP32[$W2 >> 2] = $55; //@line 13262
            $$pr$i9$pr$pr = HEAP32[4944] | 0; //@line 13266
            $57 = $55; //@line 13266
            $58 = HEAP32[5200] | 0; //@line 13266
            $60 = HEAP32[4946] | 0; //@line 13266
        } else {
            $$pr$i9$pr$pr = $51; //@line 13269
            $57 = HEAP32[$W2 >> 2] | 0; //@line 13269
            $58 = $50; //@line 13269
            $60 = $38; //@line 13269
        }
        HEAP32[19792 + ($60 << 2) >> 2] = $57 - $58; //@line 13273
        $61 = $60 + 1 | 0; //@line 13274
        HEAP32[4946] = $61; //@line 13275
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$W2 >> 2] | 0) | 0) % 1e9 | 0; //@line 13281
        if (!$$pr$i9$pr$pr) {
            return;
        }
        if (($61 | 0) == 250) {
            _fSAVEIO(1, ($$pr$i9$pr$pr | 0) > 0 & 1, 19792); //@line 13290
            $72 = HEAP32[4946] | 0; //@line 13293
            $84 = HEAP32[4944] | 0; //@line 13293
        } else {
            $72 = $61; //@line 13295
            $84 = $$pr$i9$pr$pr; //@line 13295
        }
        $71 = ($72 | 0) % 250 | 0; //@line 13297
        $76 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13301
        $79 = (($76 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13304
        HEAP32[5198] = $79; //@line 13305
        $83 = ((($76 | 0) % 1234 | 0) * 765432 | 0) + (($79 | 0) % 123 | 0) | 0; //@line 13309
        HEAP32[5200] = $83; //@line 13310
        HEAP32[4946] = $71; //@line 13311
        if (($84 | 0) > 0) {
            $88 = (HEAP32[19792 + ($71 << 2) >> 2] | 0) + $83 | 0; //@line 13316
            HEAP32[$W3 >> 2] = $88; //@line 13317
            $$pr$i17$pr$pr = HEAP32[4944] | 0; //@line 13321
            $90 = $88; //@line 13321
            $91 = HEAP32[5200] | 0; //@line 13321
            $93 = HEAP32[4946] | 0; //@line 13321
        } else {
            $$pr$i17$pr$pr = $84; //@line 13324
            $90 = HEAP32[$W3 >> 2] | 0; //@line 13324
            $91 = $83; //@line 13324
            $93 = $71; //@line 13324
        }
        HEAP32[19792 + ($93 << 2) >> 2] = $90 - $91; //@line 13328
        $94 = $93 + 1 | 0; //@line 13329
        HEAP32[4946] = $94; //@line 13330
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$W3 >> 2] | 0) | 0) % 1e9 | 0; //@line 13336
        if (!$$pr$i17$pr$pr) {
            return;
        }
        if (($94 | 0) == 250) {
            _fSAVEIO(1, ($$pr$i17$pr$pr | 0) > 0 & 1, 19792); //@line 13345
            $105 = HEAP32[4946] | 0; //@line 13348
            $117 = HEAP32[4944] | 0; //@line 13348
        } else {
            $105 = $94; //@line 13350
            $117 = $$pr$i17$pr$pr; //@line 13350
        }
        $104 = ($105 | 0) % 250 | 0; //@line 13352
        $109 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13356
        $112 = (($109 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13359
        HEAP32[5198] = $112; //@line 13360
        $116 = ((($109 | 0) % 1234 | 0) * 765432 | 0) + (($112 | 0) % 123 | 0) | 0; //@line 13364
        HEAP32[5200] = $116; //@line 13365
        HEAP32[4946] = $104; //@line 13366
        if (($117 | 0) > 0) {
            $121 = (HEAP32[19792 + ($104 << 2) >> 2] | 0) + $116 | 0; //@line 13371
            HEAP32[$W4 >> 2] = $121; //@line 13372
            $$pr$i25$pr$pr$pr = HEAP32[4944] | 0; //@line 13376
            $123 = $121; //@line 13376
            $124 = HEAP32[5200] | 0; //@line 13376
            $126 = HEAP32[4946] | 0; //@line 13376
        } else {
            $$pr$i25$pr$pr$pr = $117; //@line 13379
            $123 = HEAP32[$W4 >> 2] | 0; //@line 13379
            $124 = $116; //@line 13379
            $126 = $104; //@line 13379
        }
        HEAP32[19792 + ($126 << 2) >> 2] = $123 - $124; //@line 13383
        $127 = $126 + 1 | 0; //@line 13384
        HEAP32[4946] = $127; //@line 13385
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$W4 >> 2] | 0) | 0) % 1e9 | 0; //@line 13391
        if (!$$pr$i25$pr$pr$pr) {
            return;
        }
        if (($127 | 0) == 250) {
            _fSAVEIO(1, ($$pr$i25$pr$pr$pr | 0) > 0 & 1, 19792); //@line 13400
            $138 = HEAP32[4946] | 0; //@line 13403
            $150 = HEAP32[4944] | 0; //@line 13403
        } else {
            $138 = $127; //@line 13405
            $150 = $$pr$i25$pr$pr$pr; //@line 13405
        }
        $137 = ($138 | 0) % 250 | 0; //@line 13407
        $142 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13411
        $145 = (($142 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13414
        HEAP32[5198] = $145; //@line 13415
        $149 = ((($142 | 0) % 1234 | 0) * 765432 | 0) + (($145 | 0) % 123 | 0) | 0; //@line 13419
        HEAP32[5200] = $149; //@line 13420
        HEAP32[4946] = $137; //@line 13421
        if (($150 | 0) > 0) {
            $154 = (HEAP32[19792 + ($137 << 2) >> 2] | 0) + $149 | 0; //@line 13426
            HEAP32[$W5 >> 2] = $154; //@line 13427
            $$pr$i33$pr$pr$pr = HEAP32[4944] | 0; //@line 13431
            $156 = $154; //@line 13431
            $157 = HEAP32[5200] | 0; //@line 13431
            $159 = HEAP32[4946] | 0; //@line 13431
        } else {
            $$pr$i33$pr$pr$pr = $150; //@line 13434
            $156 = HEAP32[$W5 >> 2] | 0; //@line 13434
            $157 = $149; //@line 13434
            $159 = $137; //@line 13434
        }
        HEAP32[19792 + ($159 << 2) >> 2] = $156 - $157; //@line 13438
        $160 = $159 + 1 | 0; //@line 13439
        HEAP32[4946] = $160; //@line 13440
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$W5 >> 2] | 0) | 0) % 1e9 | 0; //@line 13446
        if (!$$pr$i33$pr$pr$pr) {
            return;
        }
        if (($160 | 0) == 250) {
            _fSAVEIO(1, ($$pr$i33$pr$pr$pr | 0) > 0 & 1, 19792); //@line 13455
            $171 = HEAP32[4946] | 0; //@line 13458
            $183 = HEAP32[4944] | 0; //@line 13458
        } else {
            $171 = $160; //@line 13460
            $183 = $$pr$i33$pr$pr$pr; //@line 13460
        }
        $170 = ($171 | 0) % 250 | 0; //@line 13462
        $175 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13466
        $178 = (($175 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13469
        HEAP32[5198] = $178; //@line 13470
        $182 = ((($175 | 0) % 1234 | 0) * 765432 | 0) + (($178 | 0) % 123 | 0) | 0; //@line 13474
        HEAP32[5200] = $182; //@line 13475
        HEAP32[4946] = $170; //@line 13476
        if (($183 | 0) > 0) {
            $187 = (HEAP32[19792 + ($170 << 2) >> 2] | 0) + $182 | 0; //@line 13481
            HEAP32[$W6 >> 2] = $187; //@line 13482
            $$pr$i41$pr$pr$pr = HEAP32[4944] | 0; //@line 13486
            $189 = $187; //@line 13486
            $190 = HEAP32[5200] | 0; //@line 13486
            $192 = HEAP32[4946] | 0; //@line 13486
        } else {
            $$pr$i41$pr$pr$pr = $183; //@line 13489
            $189 = HEAP32[$W6 >> 2] | 0; //@line 13489
            $190 = $182; //@line 13489
            $192 = $170; //@line 13489
        }
        HEAP32[19792 + ($192 << 2) >> 2] = $189 - $190; //@line 13493
        $193 = $192 + 1 | 0; //@line 13494
        HEAP32[4946] = $193; //@line 13495
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$W6 >> 2] | 0) | 0) % 1e9 | 0; //@line 13501
        if (!$$pr$i41$pr$pr$pr) {
            return;
        }
        if (($193 | 0) == 250) {
            _fSAVEIO(1, ($$pr$i41$pr$pr$pr | 0) > 0 & 1, 19792); //@line 13510
            $204 = HEAP32[4946] | 0; //@line 13513
            $216 = HEAP32[4944] | 0; //@line 13513
        } else {
            $204 = $193; //@line 13515
            $216 = $$pr$i41$pr$pr$pr; //@line 13515
        }
        $203 = ($204 | 0) % 250 | 0; //@line 13517
        $208 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13521
        $211 = (($208 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13524
        HEAP32[5198] = $211; //@line 13525
        $215 = ((($208 | 0) % 1234 | 0) * 765432 | 0) + (($211 | 0) % 123 | 0) | 0; //@line 13529
        HEAP32[5200] = $215; //@line 13530
        HEAP32[4946] = $203; //@line 13531
        if (($216 | 0) > 0) {
            $220 = (HEAP32[19792 + ($203 << 2) >> 2] | 0) + $215 | 0; //@line 13536
            HEAP32[$W7 >> 2] = $220; //@line 13537
            $222 = $220; //@line 13540
            $223 = HEAP32[5200] | 0; //@line 13540
            $225 = HEAP32[4946] | 0; //@line 13540
        } else {
            $222 = HEAP32[$W7 >> 2] | 0; //@line 13543
            $223 = $215; //@line 13543
            $225 = $203; //@line 13543
        }
        HEAP32[19792 + ($225 << 2) >> 2] = $222 - $223; //@line 13547
        HEAP32[4946] = $225 + 1; //@line 13549
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$W7 >> 2] | 0) | 0) % 1e9 | 0; //@line 13555
        return;
    }

    function _fGETTXT($SKIP, $ONEWRD, $UPPER, $HASH) {
        $SKIP = $SKIP | 0;
        $ONEWRD = $ONEWRD | 0;
        $UPPER = $UPPER | 0;
        $HASH = $HASH | 0;
        var $$0 = 0,
            $0 = 0,
            $100 = 0,
            $103 = 0,
            $104 = 0,
            $109 = 0,
            $11 = 0,
            $115 = 0,
            $116 = 0,
            $12 = 0,
            $16 = 0,
            $19 = 0,
            $20 = 0,
            $21 = 0,
            $24 = 0,
            $29 = 0,
            $3 = 0,
            $30 = 0,
            $33 = 0,
            $35 = 0,
            $40 = 0,
            $45 = 0,
            $55 = 0,
            $56 = 0,
            $61 = 0,
            $66 = 0,
            $67 = 0,
            $68 = 0,
            $7 = 0,
            $71 = 0,
            $72 = 0,
            $77 = 0,
            $8 = 0,
            $82 = 0,
            $83 = 0,
            $84 = 0,
            $87 = 0,
            $88 = 0,
            $93 = 0,
            $98 = 0,
            $99 = 0,
            $GETTXT$0$lcssa = 0,
            $GETTXT$03 = 0,
            $GETTXT$1 = 0,
            $GETTXT$1$us = 0,
            $GETTXT$1$us$1 = 0,
            $GETTXT$1$us$2 = 0,
            $GETTXT$1$us$3 = 0,
            $GETTXT$1$us$4 = 0,
            $GETTXT$2 = 0,
            $GETTXT$2$us = 0,
            $GETTXT$2$us$1 = 0,
            $GETTXT$2$us$2 = 0,
            $GETTXT$2$us$3 = 0,
            $I$04 = 0,
            $24$looptemp = 0;
        $0 = HEAP32[4236] | 0; //@line 12655
        if (($0 | 0) == (HEAP32[4926] | 0)) {
            $16 = $0; //@line 12659
        } else {
            HEAP32[4926] = -1; //@line 12661
            $16 = -1; //@line 12662
        }
        $3 = HEAP32[4234] | 0; //@line 12664
        if (($0 | 0) > ($3 | 0)) {
            $$0 = -1; //@line 12667
            return $$0 | 0; //@line 12668
        }
        L7: do {
            if (!$SKIP) {
                $8 = $0; //@line 12673
            } else {
                $24 = $0; //@line 12675
                while (1) {
                    if (HEAP8[17464 + $24 >> 0] | 0) {
                        $8 = $24; //@line 12681
                        break L7;
                    }
                    $24$looptemp = $24;
                    $24 = $24 + 1 | 0; //@line 12684
                    HEAP32[4236] = $24; //@line 12685
                    if (($24$looptemp | 0) >= ($3 | 0)) {
                        $$0 = -1; //@line 12690
                        break;
                    }
                }
                return $$0 | 0; //@line 12694
            }
        } while (0);
        $7 = ($UPPER | 0) != 0; //@line 12698
        L13: do {
            if (!$ONEWRD) {
                L15: do {
                    if (($8 | 0) > ($3 | 0)) {
                        $21 = $8; //@line 12704
                        $61 = $16; //@line 12704
                        $GETTXT$2$us = 0; //@line 12704
                    } else {
                        $11 = HEAP8[17464 + $8 >> 0] | 0; //@line 12707
                        $12 = $11 << 24 >> 24; //@line 12708
                        do {
                            if ($11 << 24 >> 24 > 62) {
                                if (($16 | 0) == ($8 | 0)) {
                                    HEAP32[4926] = -1; //@line 12715
                                    $GETTXT$1$us = -63 + $12 | 0; //@line 12716
                                    break;
                                } else {
                                    HEAP32[4926] = $8; //@line 12719
                                    $21 = $8; //@line 12720
                                    $61 = $8; //@line 12720
                                    $GETTXT$2$us = 63; //@line 12720
                                    break L15;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12724
                                $GETTXT$1$us = $7 & $11 << 24 >> 24 > 36 ? $12 + -26 | 0 : $12; //@line 12729
                            }
                        } while (0);
                        $19 = $8 + 1 | 0; //@line 12732
                        HEAP32[4236] = $19; //@line 12733
                        $21 = $19; //@line 12734
                        $61 = -1; //@line 12734
                        $GETTXT$2$us = $GETTXT$1$us; //@line 12734
                    }
                } while (0);
                $20 = $GETTXT$2$us << 6; //@line 12737
                L25: do {
                    if (($21 | 0) > ($3 | 0)) {
                        $68 = $21; //@line 12741
                        $77 = $61; //@line 12741
                        $GETTXT$2$us$1 = $20; //@line 12741
                    } else {
                        $55 = HEAP8[17464 + $21 >> 0] | 0; //@line 12744
                        $56 = $55 << 24 >> 24; //@line 12745
                        do {
                            if ($55 << 24 >> 24 > 62) {
                                if (($61 | 0) == ($21 | 0)) {
                                    HEAP32[4926] = -1; //@line 12753
                                    $GETTXT$1$us$1 = $20 + -63 + $56 | 0; //@line 12754
                                    break;
                                } else {
                                    HEAP32[4926] = $21; //@line 12758
                                    $68 = $21; //@line 12759
                                    $77 = $21; //@line 12759
                                    $GETTXT$2$us$1 = $20 | 63; //@line 12759
                                    break L25;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12763
                                $GETTXT$1$us$1 = ($7 & $55 << 24 >> 24 > 36 ? $56 + -26 | 0 : $56) + $20 | 0; //@line 12769
                            }
                        } while (0);
                        $66 = $21 + 1 | 0; //@line 12772
                        HEAP32[4236] = $66; //@line 12773
                        $68 = $66; //@line 12774
                        $77 = -1; //@line 12774
                        $GETTXT$2$us$1 = $GETTXT$1$us$1; //@line 12774
                    }
                } while (0);
                $67 = $GETTXT$2$us$1 << 6; //@line 12777
                L35: do {
                    if (($68 | 0) > ($3 | 0)) {
                        $84 = $68; //@line 12781
                        $93 = $77; //@line 12781
                        $GETTXT$2$us$2 = $67; //@line 12781
                    } else {
                        $71 = HEAP8[17464 + $68 >> 0] | 0; //@line 12784
                        $72 = $71 << 24 >> 24; //@line 12785
                        do {
                            if ($71 << 24 >> 24 > 62) {
                                if (($77 | 0) == ($68 | 0)) {
                                    HEAP32[4926] = -1; //@line 12793
                                    $GETTXT$1$us$2 = $67 + -63 + $72 | 0; //@line 12794
                                    break;
                                } else {
                                    HEAP32[4926] = $68; //@line 12798
                                    $84 = $68; //@line 12799
                                    $93 = $68; //@line 12799
                                    $GETTXT$2$us$2 = $67 | 63; //@line 12799
                                    break L35;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12803
                                $GETTXT$1$us$2 = ($7 & $71 << 24 >> 24 > 36 ? $72 + -26 | 0 : $72) + $67 | 0; //@line 12809
                            }
                        } while (0);
                        $82 = $68 + 1 | 0; //@line 12812
                        HEAP32[4236] = $82; //@line 12813
                        $84 = $82; //@line 12814
                        $93 = -1; //@line 12814
                        $GETTXT$2$us$2 = $GETTXT$1$us$2; //@line 12814
                    }
                } while (0);
                $83 = $GETTXT$2$us$2 << 6; //@line 12817
                L45: do {
                    if (($84 | 0) > ($3 | 0)) {
                        $100 = $84; //@line 12821
                        $109 = $93; //@line 12821
                        $GETTXT$2$us$3 = $83; //@line 12821
                    } else {
                        $87 = HEAP8[17464 + $84 >> 0] | 0; //@line 12824
                        $88 = $87 << 24 >> 24; //@line 12825
                        do {
                            if ($87 << 24 >> 24 > 62) {
                                if (($93 | 0) == ($84 | 0)) {
                                    HEAP32[4926] = -1; //@line 12833
                                    $GETTXT$1$us$3 = $83 + -63 + $88 | 0; //@line 12834
                                    break;
                                } else {
                                    HEAP32[4926] = $84; //@line 12838
                                    $100 = $84; //@line 12839
                                    $109 = $84; //@line 12839
                                    $GETTXT$2$us$3 = $83 | 63; //@line 12839
                                    break L45;
                                }
                            } else {
                                HEAP32[4926] = -1; //@line 12843
                                $GETTXT$1$us$3 = ($7 & $87 << 24 >> 24 > 36 ? $88 + -26 | 0 : $88) + $83 | 0; //@line 12849
                            }
                        } while (0);
                        $98 = $84 + 1 | 0; //@line 12852
                        HEAP32[4236] = $98; //@line 12853
                        $100 = $98; //@line 12854
                        $109 = -1; //@line 12854
                        $GETTXT$2$us$3 = $GETTXT$1$us$3; //@line 12854
                    }
                } while (0);
                $99 = $GETTXT$2$us$3 << 6; //@line 12857
                if (($100 | 0) > ($3 | 0)) {
                    $GETTXT$0$lcssa = $99; //@line 12860
                } else {
                    $103 = HEAP8[17464 + $100 >> 0] | 0; //@line 12863
                    $104 = $103 << 24 >> 24; //@line 12864
                    do {
                        if ($103 << 24 >> 24 > 62) {
                            if (($109 | 0) == ($100 | 0)) {
                                HEAP32[4926] = -1; //@line 12872
                                $GETTXT$1$us$4 = $99 + -63 + $104 | 0; //@line 12873
                                break;
                            } else {
                                HEAP32[4926] = $100; //@line 12877
                                $GETTXT$0$lcssa = $99 | 63; //@line 12878
                                break L13;
                            }
                        } else {
                            HEAP32[4926] = -1; //@line 12882
                            $GETTXT$1$us$4 = ($7 & $103 << 24 >> 24 > 36 ? $104 + -26 | 0 : $104) + $99 | 0; //@line 12888
                        }
                    } while (0);
                    HEAP32[4236] = $100 + 1; //@line 12892
                    $GETTXT$0$lcssa = $GETTXT$1$us$4; //@line 12893
                }
            } else {
                $30 = $8; //@line 12896
                $40 = $16; //@line 12896
                $GETTXT$03 = 0; //@line 12896
                $I$04 = 1; //@line 12896
                while (1) {
                    $29 = $GETTXT$03 << 6; //@line 12898
                    L65: do {
                        if (($30 | 0) > ($3 | 0)) {
                            $115 = $40; //@line 12902
                            $116 = $30; //@line 12902
                            $GETTXT$2 = $29; //@line 12902
                        } else {
                            $33 = HEAP8[17464 + $30 >> 0] | 0; //@line 12905
                            if (!($33 << 24 >> 24)) {
                                $115 = $40; //@line 12908
                                $116 = $30; //@line 12908
                                $GETTXT$2 = $29; //@line 12908
                            } else {
                                $35 = $33 << 24 >> 24; //@line 12910
                                do {
                                    if ($33 << 24 >> 24 > 62) {
                                        if (($40 | 0) == ($30 | 0)) {
                                            HEAP32[4926] = -1; //@line 12918
                                            $GETTXT$1 = $29 + -63 + $35 | 0; //@line 12919
                                            break;
                                        } else {
                                            HEAP32[4926] = $30; //@line 12923
                                            $115 = $30; //@line 12924
                                            $116 = $30; //@line 12924
                                            $GETTXT$2 = $29 | 63; //@line 12924
                                            break L65;
                                        }
                                    } else {
                                        HEAP32[4926] = -1; //@line 12928
                                        $GETTXT$1 = ($7 & $33 << 24 >> 24 > 36 ? $35 + -26 | 0 : $35) + $29 | 0; //@line 12934
                                    }
                                } while (0);
                                $45 = $30 + 1 | 0; //@line 12937
                                HEAP32[4236] = $45; //@line 12938
                                $115 = -1; //@line 12939
                                $116 = $45; //@line 12939
                                $GETTXT$2 = $GETTXT$1; //@line 12939
                            }
                        }
                    } while (0);
                    $I$04 = $I$04 + 1 | 0; //@line 12943
                    if (($I$04 | 0) == 6) {
                        $GETTXT$0$lcssa = $GETTXT$2; //@line 12946
                        break;
                    } else {
                        $30 = $116; //@line 12949
                        $40 = $115; //@line 12949
                        $GETTXT$03 = $GETTXT$2; //@line 12949
                    }
                }
            }
        } while (0);
        if (!$HASH) {
            $$0 = $GETTXT$0$lcssa; //@line 12956
            return $$0 | 0; //@line 12957
        }
        $$0 = $GETTXT$0$lcssa + $HASH + (((($HASH * 13579 | 0) + 5432 | 0) % 97531 | 0) * 12345 | 0) | 0; //@line 12965
        return $$0 | 0; //@line 12966
    }

    function _discard($just_do_it) {
        $just_do_it = $just_do_it | 0;
        var $$$ = 0,
            $$0 = 0,
            $1 = 0,
            $108 = 0,
            $111 = 0,
            $112 = 0,
            $113 = 0,
            $114 = 0,
            $118 = 0,
            $12 = 0,
            $120 = 0,
            $123 = 0,
            $125 = 0,
            $126 = 0,
            $135 = 0,
            $138 = 0,
            $151 = 0,
            $154 = 0,
            $16 = 0,
            $17 = 0,
            $176 = 0,
            $177 = 0,
            $181 = 0,
            $188 = 0,
            $189 = 0,
            $19 = 0,
            $20 = 0,
            $31 = 0,
            $33 = 0,
            $34 = 0,
            $36 = 0,
            $37 = 0,
            $42 = 0,
            $43 = 0,
            $45 = 0,
            $5 = 0,
            $51 = 0,
            $57 = 0,
            $58 = 0,
            $61 = 0,
            $72 = 0,
            $75 = 0,
            $83 = 0,
            $87 = 0,
            $89 = 0,
            $90 = 0,
            label = 0;
        L1: do {
            if (!$just_do_it) {
                $1 = HEAP32[3562] | 0; //@line 7991
                $5 = HEAP32[2864] | 0; //@line 7995
                if (($5 | 0) == (HEAP32[3444] | 0) ? (HEAP32[6488 + ($1 << 2) >> 2] | 0) == -1 : 0) {
                    if ((HEAP32[6488 + ($5 << 2) >> 2] | 0) == -1) {
                        $12 = $5; //@line 8004
                    } else {
                        HEAP32[2864] = $1; //@line 8006
                        $12 = $1; //@line 8007
                    }
                } else {
                    $12 = $5; //@line 8010
                }
                if ((HEAP32[6488 + ($12 << 2) >> 2] | 0) != -1) {
                    $$0 = 2011; //@line 8016
                    return $$0 | 0; //@line 8017
                }
                $16 = ($12 | 0) == (HEAP32[3298] | 0); //@line 8020
                do {
                    if ($16) {
                        $17 = HEAP32[3446] | 0; //@line 8023
                        $19 = HEAP32[6488 + ($17 << 2) >> 2] | 0; //@line 8025
                        $20 = HEAP32[74] | 0; //@line 8026
                        if (($19 | 0) != ($20 | 0)) {
                            if (!(($19 | 0) == -1 ? 1 : (HEAP32[6896 + ($17 << 2) >> 2] | 0) == ($20 | 0))) {
                                break;
                            }
                        }
                        _fRSPEAK(30); //@line 8038
                        if (!(HEAP32[2870] | 0)) {
                            _fDSTROY(HEAP32[3446] | 0); //@line 8043
                            HEAP32[6048 + (HEAP32[3446] << 2) >> 2] = 1; //@line 8046
                            break L1;
                        } else {
                            $$0 = 19e3; //@line 8049
                            return $$0 | 0; //@line 8050
                        }
                    }
                } while (0);
                do {
                    if (($12 | 0) == (HEAP32[1620] | 0) | ($12 | 0) == (HEAP32[4824] | 0) | ($12 | 0) == (HEAP32[4462] | 0) | ($12 | 0) == (HEAP32[78] | 0)) {
                        $72 = HEAP32[4468] | 0; //@line 8067
                        $75 = HEAP32[74] | 0; //@line 8070
                        if ((HEAP32[6488 + ($72 << 2) >> 2] | 0) != ($75 | 0)) {
                            if ((HEAP32[6896 + ($72 << 2) >> 2] | 0) != ($75 | 0)) {
                                break;
                            }
                        }
                        if (HEAP32[6048 + ($72 << 2) >> 2] | 0) {
                            _fRSPEAK(218); //@line 8084
                            $83 = HEAP32[2864] | 0; //@line 8085
                            HEAP32[6048 + ($83 << 2) >> 2] = 1; //@line 8087
                            HEAP32[6048 + (HEAP32[4468] << 2) >> 2] = 0; //@line 8090
                            $87 = HEAP32[2872] | 0; //@line 8091
                            $89 = HEAP32[6488 + ($87 << 2) >> 2] | 0; //@line 8093
                            $90 = HEAP32[74] | 0; //@line 8094
                            if (($89 | 0) != ($90 | 0)) {
                                if (!(($89 | 0) == -1 ? 1 : (HEAP32[6896 + ($87 << 2) >> 2] | 0) == ($90 | 0))) {
                                    break L1;
                                }
                            }
                            if (($83 | 0) == (HEAP32[1620] | 0)) {
                                if ((HEAP32[6048 + ($87 << 2) >> 2] | 0) == 2) {
                                    label = 29; //@line 8113
                                } else {
                                    $108 = HEAP32[4824] | 0; //@line 8116
                                }
                            } else {
                                label = 29; //@line 8119
                            }
                            if ((label | 0) == 29) {
                                if (($83 | 0) != (HEAP32[4824] | 0)) {
                                    break L1;
                                }
                                if ((HEAP32[6048 + ($87 << 2) >> 2] | 0) == 2) {
                                    $108 = $83; //@line 8131
                                } else {
                                    break L1;
                                }
                            }
                            $$$ = ($83 | 0) == ($108 | 0) ? 221 : ($89 | 0) == -1 ? 220 : 219; //@line 8139
                            HEAP32[3078] = $$$; //@line 8140
                            _fRSPEAK($$$); //@line 8141
                            if ((HEAP32[3078] | 0) == 220) {
                                break L1;
                            }
                            $111 = HEAP32[2872] | 0; //@line 8147
                            $112 = 6048 + ($111 << 2) | 0; //@line 8148
                            $113 = HEAP32[$112 >> 2] | 0; //@line 8149
                            $114 = 2 - $113 | 0; //@line 8150
                            HEAP32[1614] = $114; //@line 8151
                            HEAP32[$112 >> 2] = $114; //@line 8152
                            if (!$113) {
                                $118 = HEAP32[320 + (HEAP32[78] << 2) >> 2] | 0; //@line 8157
                                HEAP32[1614] = $118; //@line 8158
                                $120 = $118; //@line 8159
                            } else {
                                $120 = $114; //@line 8161
                            }
                            _fMOVE($111 + 100 | 0, $120); //@line 8164
                            break L1;
                        }
                    }
                } while (0);
                do {
                    if (($12 | 0) == (HEAP32[4476] | 0)) {
                        $123 = HEAP32[4844] | 0; //@line 8173
                        $125 = HEAP32[6488 + ($123 << 2) >> 2] | 0; //@line 8175
                        $126 = HEAP32[74] | 0; //@line 8176
                        if (($125 | 0) != ($126 | 0)) {
                            if (!(($125 | 0) == -1 ? 1 : (HEAP32[6896 + ($123 << 2) >> 2] | 0) == ($126 | 0))) {
                                break;
                            }
                        }
                        _fDSTROY($12); //@line 8188
                        _fDROP(HEAP32[3278] | 0, HEAP32[74] | 0); //@line 8191
                        _fPSPEAK(HEAP32[3278] | 0, 0); //@line 8193
                        $$0 = 2012; //@line 8194
                        return $$0 | 0; //@line 8195
                    }
                } while (0);
                do {
                    if ($16) {
                        $135 = HEAP32[4510] | 0; //@line 8200
                        $138 = HEAP32[74] | 0; //@line 8203
                        if ((HEAP32[6488 + ($135 << 2) >> 2] | 0) != ($138 | 0)) {
                            if ((HEAP32[6896 + ($135 << 2) >> 2] | 0) != ($138 | 0)) {
                                break;
                            }
                        }
                        if (!(HEAP32[6048 + ($135 << 2) >> 2] | 0)) {
                            _fRSPEAK(154); //@line 8217
                            _fDSTROY(HEAP32[3298] | 0); //@line 8219
                            HEAP32[6048 + (HEAP32[3298] << 2) >> 2] = 0; //@line 8222
                            $$0 = 2012; //@line 8223
                            return $$0 | 0; //@line 8224
                        }
                    }
                } while (0);
                do {
                    if (($12 | 0) == (HEAP32[2676] | 0)) {
                        $151 = HEAP32[3320] | 0; //@line 8232
                        $154 = HEAP32[74] | 0; //@line 8235
                        if ((HEAP32[6488 + ($151 << 2) >> 2] | 0) != ($154 | 0)) {
                            if ((HEAP32[6896 + ($151 << 2) >> 2] | 0) != ($154 | 0)) {
                                break;
                            }
                        }
                        _fRSPEAK(163); //@line 8245
                        _fMOVE(HEAP32[3320] | 0, 0); //@line 8247
                        _fMOVE((HEAP32[3320] | 0) + 100 | 0, 0); //@line 8250
                        _fMOVE(HEAP32[3322] | 0, HEAP32[320 + (HEAP32[3320] << 2) >> 2] | 0); //@line 8255
                        _fMOVE((HEAP32[3322] | 0) + 100 | 0, HEAP32[13296 + (HEAP32[3320] << 2) >> 2] | 0); //@line 8261
                        _fJUGGLE(HEAP32[3426] | 0); //@line 8263
                        HEAP32[6048 + (HEAP32[3320] << 2) >> 2] = 2; //@line 8266
                        break L1;
                    }
                } while (0);
                if (($12 | 0) == (HEAP32[4842] | 0)) {
                    $176 = HEAP32[74] | 0; //@line 8273
                    $177 = HEAP32[3564] | 0; //@line 8274
                    if (($176 | 0) != (HEAP32[320 + ($177 << 2) >> 2] | 0)) {
                        $181 = 6048 + ($12 << 2) | 0; //@line 8279
                        HEAP32[$181 >> 2] = 2; //@line 8280
                        if ((HEAP32[6488 + ($177 << 2) >> 2] | 0) == ($176 | 0)) {
                            label = 53; //@line 8285
                        } else {
                            if ((HEAP32[6896 + ($177 << 2) >> 2] | 0) == ($176 | 0)) {
                                label = 53; //@line 8291
                            } else {
                                $188 = 3; //@line 8293
                            }
                        }
                        if ((label | 0) == 53) {
                            HEAP32[$181 >> 2] = 0; //@line 8297
                            $188 = 1; //@line 8298
                        }
                        _fPSPEAK($12, $188); //@line 8300
                        $189 = HEAP32[4842] | 0; //@line 8301
                        if (!(HEAP32[6048 + ($189 << 2) >> 2] | 0)) {
                            break;
                        }
                        HEAP32[6896 + ($189 << 2) >> 2] = -1; //@line 8309
                        break;
                    }
                }
                _fRSPEAK(54); //@line 8313
            }
        } while (0);
        $31 = HEAP32[3454] | 0; //@line 8316
        $33 = HEAP32[6048 + ($31 << 2) >> 2] | 0; //@line 8318
        $34 = $33 >> 31 ^ $33; //@line 8320
        $36 = HEAP32[3280] | 0; //@line 8322
        $37 = Math_imul(1 - $34 | 0, $36) | 0; //@line 8323
        $42 = (Math_imul((HEAP32[3282] | 0) + $36 | 0, ($34 | 0) / 2 | 0) | 0) + $37 | 0; //@line 8328
        HEAP32[1614] = $42; //@line 8329
        $43 = HEAP32[2864] | 0; //@line 8330
        if (($42 | 0) == ($43 | 0)) {
            HEAP32[2864] = $31; //@line 8333
            $45 = $31; //@line 8334
        } else {
            $45 = $43; //@line 8336
        }
        if (($45 | 0) == ($31 | 0) & ($42 | 0) != 0) {
            HEAP32[6488 + ($42 << 2) >> 2] = 0; //@line 8343
        }
        if (($45 | 0) == (HEAP32[3296] | 0)) {
            $51 = HEAP32[3298] | 0; //@line 8348
            if ((HEAP32[6048 + ($51 << 2) >> 2] | 0) == 1) {
                _fDROP($51, HEAP32[74] | 0); //@line 8354
                $57 = HEAP32[2864] | 0; //@line 8356
            } else {
                $57 = $45; //@line 8358
            }
        } else {
            $57 = $45; //@line 8361
        }
        _fDROP($57, HEAP32[74] | 0); //@line 8364
        $58 = HEAP32[2864] | 0; //@line 8365
        if (($58 | 0) == (HEAP32[3298] | 0)) {
            $61 = 6048 + ($58 << 2) | 0; //@line 8369
            HEAP32[$61 >> 2] = 0; //@line 8370
            HEAP32[$61 >> 2] = ((HEAP32[74] | 0) + -145 | 0) >>> 0 < 22 ? 2 : 0; //@line 8375
            return 2012; //@line 8376
        } else {
            $$0 = 2012; //@line 8378
            return $$0 | 0; //@line 8379
        }
        return 0; //@line 8381
    }

    function _score($MODE) {
        $MODE = $MODE | 0;
        var $$$ = 0,
            $$lcssa = 0,
            $$lcssa40 = 0,
            $$lcssa41 = 0,
            $0 = 0,
            $10 = 0,
            $100 = 0,
            $102 = 0,
            $104 = 0,
            $105 = 0,
            $106 = 0,
            $107 = 0,
            $109 = 0,
            $117 = 0,
            $12 = 0,
            $124 = 0,
            $125 = 0,
            $126 = 0,
            $127 = 0,
            $128 = 0,
            $129 = 0,
            $13 = 0,
            $19 = 0,
            $2 = 0,
            $20 = 0,
            $21 = 0,
            $22 = 0,
            $26 = 0,
            $30 = 0,
            $31 = 0,
            $33 = 0,
            $34 = 0,
            $36 = 0,
            $4 = 0,
            $40 = 0,
            $41 = 0,
            $45 = 0,
            $46 = 0,
            $50 = 0,
            $51 = 0,
            $52 = 0,
            $53 = 0,
            $54 = 0,
            $55 = 0,
            $61 = 0,
            $62 = 0,
            $63 = 0,
            $64 = 0,
            $65 = 0,
            $66 = 0,
            $69 = 0,
            $74 = 0,
            $75 = 0,
            $81 = 0,
            $82 = 0,
            $85 = 0,
            $86 = 0,
            $87 = 0,
            $89 = 0,
            $90 = 0,
            $91 = 0,
            $98 = 0,
            $storemerge59 = 0,
            $storemerge59$lcssa = 0,
            $storemerge59$looptemp = 0;
        HEAP32[4828] = 0; //@line 9668
        HEAP32[4714] = 0; //@line 9669
        HEAP32[66] = 50; //@line 9670
        $0 = HEAP32[1616] | 0; //@line 9671
        if (($0 | 0) < 50) {
            $31 = 0; //@line 9674
            $34 = 0; //@line 9674
        } else {
            $2 = HEAP32[1510] | 0; //@line 9676
            $13 = 0; //@line 9677
            $22 = 0; //@line 9677
            $4 = 50; //@line 9677
            while (1) {
                if (!(HEAP32[17056 + ($4 << 2) >> 2] | 0)) {
                    $126 = $22; //@line 9683
                    $127 = $13; //@line 9683
                } else {
                    $$$ = ($4 | 0) > ($2 | 0) ? 16 : ($4 | 0) == ($2 | 0) ? 14 : 12; //@line 9688
                    HEAP32[1614] = $$$; //@line 9689
                    $10 = HEAP32[6048 + ($4 << 2) >> 2] | 0; //@line 9691
                    if (($10 | 0) > -1) {
                        $12 = $13 + 2 | 0; //@line 9694
                        HEAP32[4828] = $12; //@line 9695
                        $19 = $12; //@line 9696
                    } else {
                        $19 = $13; //@line 9698
                    }
                    if (($10 | 0) == 0 ? (HEAP32[6488 + ($4 << 2) >> 2] | 0) == 3 : 0) {
                        $20 = $19 + -2 + $$$ | 0; //@line 9707
                        HEAP32[4828] = $20; //@line 9708
                        $128 = $20; //@line 9709
                    } else {
                        $128 = $19; //@line 9711
                    }
                    $21 = $$$ + $22 | 0; //@line 9713
                    HEAP32[4714] = $21; //@line 9714
                    $126 = $21; //@line 9715
                    $127 = $128; //@line 9715
                }
                if (($4 | 0) < ($0 | 0)) {
                    $13 = $127; //@line 9720
                    $22 = $126; //@line 9720
                    $4 = $4 + 1 | 0; //@line 9720
                } else {
                    $$lcssa40 = $126; //@line 9722
                    $$lcssa41 = $127; //@line 9722
                    break;
                }
            }
            HEAP32[66] = $0 + 1; //@line 9727
            $31 = $$lcssa41; //@line 9728
            $34 = $$lcssa40; //@line 9728
        }
        $26 = HEAP32[3438] | 0; //@line 9730
        $30 = (($26 - (HEAP32[3436] | 0) | 0) * 10 | 0) + $31 | 0; //@line 9734
        HEAP32[4828] = $30; //@line 9735
        $33 = ($26 * 10 | 0) + $34 | 0; //@line 9737
        HEAP32[4714] = $33; //@line 9738
        if (!$MODE) {
            $36 = $30 + 4 | 0; //@line 9741
            HEAP32[4828] = $36; //@line 9742
            $41 = $36; //@line 9743
        } else {
            $41 = $30; //@line 9745
        }
        HEAP32[4714] = $33 + 4; //@line 9748
        if (!(HEAP32[390] | 0)) {
            $46 = $41; //@line 9752
        } else {
            $40 = $41 + 25 | 0; //@line 9754
            HEAP32[4828] = $40; //@line 9755
            $46 = $40; //@line 9756
        }
        HEAP32[4714] = $33 + 29; //@line 9759
        if (!(HEAP32[182] | 0)) {
            $52 = $46; //@line 9763
        } else {
            $45 = $46 + 25 | 0; //@line 9765
            HEAP32[4828] = $45; //@line 9766
            $52 = $45; //@line 9767
        }
        HEAP32[4714] = $33 + 54; //@line 9770
        do {
            if (!(HEAP32[2870] | 0)) {
                $62 = $52; //@line 9775
            } else {
                $50 = HEAP32[4466] | 0; //@line 9777
                if (($50 | 0) == 134) {
                    $54 = $52 + 30 | 0; //@line 9779
                    HEAP32[4828] = $54; //@line 9780
                    $62 = $54; //@line 9781
                    break;
                } else if (($50 | 0) == 133) {
                    $55 = $52 + 45 | 0; //@line 9784
                    HEAP32[4828] = $55; //@line 9785
                    $62 = $55; //@line 9786
                    break;
                } else if (($50 | 0) == 135) {
                    $53 = $52 + 25 | 0; //@line 9789
                    HEAP32[4828] = $53; //@line 9790
                    $62 = $53; //@line 9791
                    break;
                } else if (!$50) {
                    $51 = $52 + 10 | 0; //@line 9794
                    HEAP32[4828] = $51; //@line 9795
                    $62 = $51; //@line 9796
                    break;
                } else {
                    $62 = $52; //@line 9799
                    break;
                }
            }
        } while (0);
        HEAP32[4714] = $33 + 99; //@line 9805
        if ((HEAP32[6488 + (HEAP32[4712] << 2) >> 2] | 0) == 108) {
            $61 = $62 + 1 | 0; //@line 9811
            HEAP32[4828] = $61; //@line 9812
            $64 = $61; //@line 9813
        } else {
            $64 = $62; //@line 9815
        }
        $63 = $64 + 2 | 0; //@line 9817
        HEAP32[4828] = $63; //@line 9818
        $65 = $33 + 102 | 0; //@line 9819
        HEAP32[4714] = $65; //@line 9820
        HEAP32[66] = 1; //@line 9821
        $66 = HEAP32[3088] | 0; //@line 9822
        if (($66 | 0) < 1) {
            $82 = $63; //@line 9825
        } else {
            $69 = 1; //@line 9827
            $75 = $63; //@line 9827
            while (1) {
                if (!(HEAP32[12360 + ($69 << 2) >> 2] | 0)) {
                    $129 = $75; //@line 9833
                } else {
                    $74 = $75 - (HEAP32[12536 + ($69 * 20 | 0) + 8 >> 2] | 0) | 0; //@line 9837
                    HEAP32[4828] = $74; //@line 9838
                    $129 = $74; //@line 9839
                }
                if (($69 | 0) < ($66 | 0)) {
                    $69 = $69 + 1 | 0; //@line 9844
                    $75 = $129; //@line 9844
                } else {
                    $$lcssa = $129; //@line 9846
                    break;
                }
            }
            HEAP32[66] = $66 + 1; //@line 9851
            $82 = $$lcssa; //@line 9852
        }
        if (!(HEAP32[70] | 0)) {
            $86 = $82; //@line 9857
        } else {
            $81 = $82 + -5 | 0; //@line 9859
            HEAP32[4828] = $81; //@line 9860
            $86 = $81; //@line 9861
        }
        if (!(HEAP32[4472] | 0)) {
            $89 = $86; //@line 9866
        } else {
            $85 = $86 + -10 | 0; //@line 9868
            HEAP32[4828] = $85; //@line 9869
            $89 = $85; //@line 9870
        }
        $87 = HEAP32[3264] | 0; //@line 9872
        $90 = HEAP32[4826] | 0; //@line 9874
        $91 = $89 - $87 - $90 | 0; //@line 9875
        HEAP32[4828] = $91; //@line 9876
        if (($MODE | 0) < 0) {
            return;
        }
        if (($87 | 0) != 0 & ($91 + 1 + $87 | 0) >= ($65 | 0)) {
            _fRSPEAK(242); //@line 9887
            $100 = HEAP32[4826] | 0; //@line 9891
            $102 = HEAP32[4714] | 0; //@line 9891
            $98 = HEAP32[4828] | 0; //@line 9891
        } else {
            $100 = $90; //@line 9893
            $102 = $65; //@line 9893
            $98 = $91; //@line 9893
        }
        if (($100 | 0) != 0 & ($98 + 1 + $100 | 0) >= ($102 | 0)) {
            _fRSPEAK(143); //@line 9901
            $104 = HEAP32[4828] | 0; //@line 9904
            $105 = HEAP32[4714] | 0; //@line 9904
        } else {
            $104 = $98; //@line 9906
            $105 = $102; //@line 9906
        }
        _fSETPRM(1, $104, $105); //@line 9908
        $106 = HEAP32[3252] | 0; //@line 9909
        _fSETPRM(3, $106, $106); //@line 9910
        _fRSPEAK(262); //@line 9911
        HEAP32[66] = 1; //@line 9912
        $107 = HEAP32[4474] | 0; //@line 9913
        L59: do {
            if (($107 | 0) >= 1) {
                $109 = HEAP32[4828] | 0; //@line 9917
                $storemerge59 = 1; //@line 9918
                while (1) {
                    if ((HEAP32[17968 + ($storemerge59 << 2) >> 2] | 0) >= ($109 | 0)) {
                        $storemerge59$lcssa = $storemerge59; //@line 9924
                        break;
                    }
                    $storemerge59$looptemp = $storemerge59;
                    $storemerge59 = $storemerge59 + 1 | 0; //@line 9927
                    HEAP32[66] = $storemerge59; //@line 9928
                    if (($storemerge59$looptemp | 0) >= ($107 | 0)) {
                        break L59;
                    }
                }
                _fSPEAK(HEAP32[17912 + ($storemerge59$lcssa << 2) >> 2] | 0); //@line 9938
                HEAP32[3078] = 264; //@line 9939
                $117 = HEAP32[66] | 0; //@line 9940
                if (($117 | 0) >= (HEAP32[4474] | 0)) {
                    $125 = 264; //@line 9944
                    _fRSPEAK($125); //@line 9945
                    _exit(0); //@line 9946
                }
                $124 = (HEAP32[17968 + ($117 << 2) >> 2] | 0) + 1 - (HEAP32[4828] | 0) | 0; //@line 9953
                HEAP32[66] = $124; //@line 9954
                _fSETPRM(1, $124, $124); //@line 9955
                HEAP32[3078] = 263; //@line 9956
                $125 = 263; //@line 9957
                _fRSPEAK($125); //@line 9958
                _exit(0); //@line 9959
            }
        } while (0);
        HEAP32[3078] = 265; //@line 9963
        $125 = 265; //@line 9964
        _fRSPEAK($125); //@line 9965
        _exit(0); //@line 9966
    }

    function _fill() {
        var $$0 = 0,
            $0 = 0,
            $10 = 0,
            $104 = 0,
            $108 = 0,
            $115 = 0,
            $122 = 0,
            $134 = 0,
            $139 = 0,
            $143 = 0,
            $150 = 0,
            $157 = 0,
            $168 = 0,
            $17 = 0,
            $172 = 0,
            $175 = 0,
            $176 = 0,
            $177 = 0,
            $178 = 0,
            $180 = 0,
            $181 = 0,
            $183 = 0,
            $186 = 0,
            $189 = 0,
            $190 = 0,
            $198 = 0,
            $21 = 0,
            $26 = 0,
            $30 = 0,
            $37 = 0,
            $44 = 0,
            $45 = 0,
            $47 = 0,
            $5 = 0,
            $51 = 0,
            $53 = 0,
            $54 = 0,
            $6 = 0,
            $65 = 0,
            $66 = 0,
            $76 = 0,
            $77 = 0,
            $78 = 0,
            $80 = 0,
            $82 = 0,
            $83 = 0,
            $85 = 0,
            $88 = 0,
            $9 = 0,
            $99 = 0,
            label = 0;
        $0 = HEAP32[2864] | 0; //@line 9344
        if (($0 | 0) == (HEAP32[4842] | 0)) {
            HEAP32[3078] = 29; //@line 9348
            $99 = _fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0; //@line 9354
            $104 = _fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0; //@line 9359
            $108 = Math_imul(Math_imul(5 - $99 | 0, $104) | 0, HEAP32[3280] | 0) | 0; //@line 9363
            $115 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 9370
            $122 = (Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $115) | 0) + 1 | 0; //@line 9377
            if (($108 | 0) == (Math_imul(($122 | 0) / -2 | 0, (HEAP32[3282] | 0) + (HEAP32[3280] | 0) | 0) | 0)) {
                HEAP32[3078] = 144; //@line 9385
            }
            $134 = _fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0; //@line 9392
            $139 = _fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0; //@line 9397
            $143 = Math_imul(Math_imul(5 - $134 | 0, $139) | 0, HEAP32[3280] | 0) | 0; //@line 9401
            $150 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 9408
            $157 = (Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $150) | 0) + 1 | 0; //@line 9415
            if (($143 | 0) == (Math_imul(($157 | 0) / -2 | 0, (HEAP32[3282] | 0) + (HEAP32[3280] | 0) | 0) | 0)) {
                $$0 = 2011; //@line 9423
                return $$0 | 0; //@line 9424
            }
            if ((HEAP32[6488 + (HEAP32[4842] << 2) >> 2] | 0) != -1) {
                $$0 = 2011; //@line 9431
                return $$0 | 0; //@line 9432
            }
            _fRSPEAK(145); //@line 9434
            $168 = HEAP32[4842] | 0; //@line 9435
            HEAP32[6048 + ($168 << 2) >> 2] = 2; //@line 9437
            HEAP32[6896 + ($168 << 2) >> 2] = -1; //@line 9439
            $$0 = _discard(1) | 0; //@line 9441
            return $$0 | 0; //@line 9442
        }
        if (($0 | 0) == (HEAP32[4840] | 0)) {
            HEAP32[3078] = 213; //@line 9447
            $172 = 6048 + ($0 << 2) | 0; //@line 9448
            if (HEAP32[$172 >> 2] | 0) {
                $$0 = 2011; //@line 9452
                return $$0 | 0; //@line 9453
            }
            HEAP32[3078] = 144; //@line 9455
            $175 = HEAP32[3454] | 0; //@line 9456
            $176 = 6048 + ($175 << 2) | 0; //@line 9457
            $177 = HEAP32[$176 >> 2] | 0; //@line 9458
            $178 = $177 >> 31 ^ $177; //@line 9460
            $180 = HEAP32[3280] | 0; //@line 9462
            $181 = Math_imul(1 - $178 | 0, $180) | 0; //@line 9463
            $183 = HEAP32[3282] | 0; //@line 9465
            $186 = (Math_imul($183 + $180 | 0, ($178 | 0) / 2 | 0) | 0) + $181 | 0; //@line 9468
            HEAP32[1614] = $186; //@line 9469
            if (!$186) {
                $$0 = 2011; //@line 9472
                return $$0 | 0; //@line 9473
            }
            $189 = HEAP32[6488 + ($175 << 2) >> 2] | 0; //@line 9476
            $190 = HEAP32[74] | 0; //@line 9477
            if (($189 | 0) != ($190 | 0)) {
                if (!(($189 | 0) == -1 ? 1 : (HEAP32[6896 + ($175 << 2) >> 2] | 0) == ($190 | 0))) {
                    $$0 = 2011; //@line 9486
                    return $$0 | 0; //@line 9487
                }
            }
            HEAP32[6488 + ($186 << 2) >> 2] = 0; //@line 9491
            HEAP32[$176 >> 2] = 1; //@line 9492
            if (($186 | 0) == ($183 | 0)) {
                HEAP32[$172 >> 2] = 1; //@line 9495
                $198 = 212; //@line 9496
            } else {
                $198 = (HEAP32[$172 >> 2] | 0) + 211 | 0; //@line 9500
            }
            HEAP32[3078] = $198; //@line 9502
            $$0 = 2011; //@line 9503
            return $$0 | 0; //@line 9504
        }
        $5 = ($0 | 0) == 0; //@line 9506
        $6 = HEAP32[3454] | 0; //@line 9507
        if (!($5 | ($0 | 0) == ($6 | 0))) {
            $$0 = 2011; //@line 9511
            return $$0 | 0; //@line 9512
        }
        if ($5) {
            $9 = HEAP32[6488 + ($6 << 2) >> 2] | 0; //@line 9516
            $10 = HEAP32[74] | 0; //@line 9517
            if (($9 | 0) == ($10 | 0)) {
                $17 = $9; //@line 9520
            } else {
                if (($9 | 0) == -1 ? 1 : (HEAP32[6896 + ($6 << 2) >> 2] | 0) == ($10 | 0)) {
                    $17 = $10; //@line 9528
                } else {
                    $$0 = 8e3; //@line 9530
                    return $$0 | 0; //@line 9531
                }
            }
        } else {
            $17 = HEAP32[74] | 0; //@line 9536
        }
        HEAP32[3078] = 107; //@line 9538
        $21 = _fMOD(((HEAP32[752 + ($17 << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0; //@line 9543
        $26 = _fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0; //@line 9548
        $30 = Math_imul(Math_imul(5 - $21 | 0, $26) | 0, HEAP32[3280] | 0) | 0; //@line 9552
        $37 = (_fMOD(((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 2 | 0) << 1, 8) | 0) + -5 | 0; //@line 9559
        $44 = (Math_imul(_fMOD((HEAP32[752 + (HEAP32[74] << 2) >> 2] | 0) / 4 | 0, 2) | 0, $37) | 0) + 1 | 0; //@line 9566
        $45 = HEAP32[3280] | 0; //@line 9567
        $47 = (HEAP32[3282] | 0) + $45 | 0; //@line 9569
        if (($30 | 0) == (Math_imul(($44 | 0) / -2 | 0, $47) | 0)) {
            HEAP32[3078] = 106; //@line 9574
        }
        $51 = HEAP32[4840] | 0; //@line 9576
        $53 = HEAP32[6488 + ($51 << 2) >> 2] | 0; //@line 9578
        $54 = HEAP32[74] | 0; //@line 9579
        if (($53 | 0) == ($54 | 0)) {
            label = 12; //@line 9582
        } else {
            if (($53 | 0) == -1 ? 1 : (HEAP32[6896 + ($51 << 2) >> 2] | 0) == ($54 | 0)) {
                label = 12; //@line 9590
            }
        }
        if ((label | 0) == 12) {
            if (HEAP32[6048 + ($51 << 2) >> 2] | 0) {
                HEAP32[3078] = 214; //@line 9598
            }
        }
        $65 = HEAP32[6048 + (HEAP32[3454] << 2) >> 2] | 0; //@line 9603
        $66 = $65 >> 31 ^ $65; //@line 9605
        if ((Math_imul(1 - $66 | 0, $45) | 0) != (Math_imul(($66 | 0) / -2 | 0, $47) | 0)) {
            HEAP32[3078] = 105; //@line 9612
            $$0 = 2011; //@line 9613
            return $$0 | 0; //@line 9614
        }
        if ((HEAP32[3078] | 0) != 107) {
            $$0 = 2011; //@line 9619
            return $$0 | 0; //@line 9620
        }
        $76 = (_fMOD(HEAP32[752 + ($54 << 2) >> 2] | 0, 4) | 0) / 2 | 0; //@line 9625
        $77 = $76 << 1; //@line 9626
        $78 = HEAP32[3454] | 0; //@line 9627
        HEAP32[6048 + ($78 << 2) >> 2] = $77; //@line 9629
        $80 = $76 >> 30 ^ $77; //@line 9631
        $82 = HEAP32[3280] | 0; //@line 9633
        $83 = Math_imul(1 - $80 | 0, $82) | 0; //@line 9634
        $85 = HEAP32[3282] | 0; //@line 9636
        $88 = (Math_imul($85 + $82 | 0, ($80 | 0) / 2 | 0) | 0) + $83 | 0; //@line 9639
        HEAP32[1614] = $88; //@line 9640
        if ((HEAP32[6488 + ($78 << 2) >> 2] | 0) == -1) {
            HEAP32[6488 + ($88 << 2) >> 2] = -1; //@line 9646
        }
        if (($88 | 0) != ($85 | 0)) {
            $$0 = 2011; //@line 9650
            return $$0 | 0; //@line 9651
        }
        HEAP32[3078] = 108; //@line 9653
        $$0 = 2011; //@line 9654
        return $$0 | 0; //@line 9655
    }

    function _carry() {
        var $$0 = 0,
            $0 = 0,
            $100 = 0,
            $105 = 0,
            $106 = 0,
            $118 = 0,
            $35 = 0,
            $38 = 0,
            $40 = 0,
            $42 = 0,
            $44 = 0,
            $45 = 0,
            $52 = 0,
            $53 = 0,
            $64 = 0,
            $68 = 0,
            $69 = 0,
            $70 = 0,
            $71 = 0,
            $72 = 0,
            $81 = 0,
            $84 = 0,
            $87 = 0,
            $89 = 0,
            $9 = 0,
            $93 = 0,
            $94 = 0,
            $96 = 0,
            $97 = 0,
            $99 = 0,
            label = 0;
        $0 = HEAP32[2864] | 0; //@line 7688
        if ((HEAP32[6488 + ($0 << 2) >> 2] | 0) == -1) {
            $$0 = 2011; //@line 7693
            return $$0 | 0; //@line 7694
        }
        HEAP32[3078] = 25; //@line 7696
        if (($0 | 0) == (HEAP32[3292] | 0)) {
            if ((HEAP32[6048 + ($0 << 2) >> 2] | 0) < 1) {
                HEAP32[3078] = 115; //@line 7704
            }
        }
        $9 = HEAP32[2676] | 0; //@line 7707
        if (($0 | 0) == ($9 | 0)) {
            if ((HEAP32[6048 + ($0 << 2) >> 2] | 0) == 1) {
                HEAP32[3078] = 169; //@line 7714
            }
        }
        if (($0 | 0) == (HEAP32[2874] | 0)) {
            if (HEAP32[6048 + ($9 << 2) >> 2] | 0) {
                HEAP32[3078] = 170; //@line 7724
            }
        }
        if (($0 | 0) == (HEAP32[4840] | 0)) {
            HEAP32[3078] = 215; //@line 7730
        }
        if (($0 | 0) == (HEAP32[4468] | 0)) {
            HEAP32[3078] = 217; //@line 7735
        }
        if (($0 | 0) == (HEAP32[4464] | 0)) {
            HEAP32[3078] = 239; //@line 7740
        }
        if (($0 | 0) == (HEAP32[2872] | 0)) {
            if ((HEAP32[6048 + ($0 << 2) >> 2] | 0) == 2) {
                HEAP32[3078] = 222; //@line 7749
            }
        }
        if (($0 | 0) == (HEAP32[3560] | 0)) {
            HEAP32[3078] = 196; //@line 7755
        }
        if (($0 | 0) == (HEAP32[1830] | 0)) {
            HEAP32[3078] = 190; //@line 7760
            _fDSTROY($0); //@line 7761
            $35 = HEAP32[2864] | 0; //@line 7763
        } else {
            $35 = $0; //@line 7765
        }
        if (HEAP32[6896 + ($35 << 2) >> 2] | 0) {
            $$0 = 2011; //@line 7771
            return $$0 | 0; //@line 7772
        }
        $38 = HEAP32[3280] | 0; //@line 7774
        $40 = HEAP32[3282] | 0; //@line 7776
        do {
            if (($35 | 0) == ($38 | 0) | ($35 | 0) == ($40 | 0)) {
                HEAP32[1614] = $35; //@line 7781
                $42 = HEAP32[3454] | 0; //@line 7782
                HEAP32[2864] = $42; //@line 7783
                $44 = HEAP32[6488 + ($42 << 2) >> 2] | 0; //@line 7785
                $45 = HEAP32[74] | 0; //@line 7786
                if (($44 | 0) == ($45 | 0)) {
                    label = 28; //@line 7789
                } else {
                    if (($44 | 0) == -1 ? 1 : (HEAP32[6896 + ($42 << 2) >> 2] | 0) == ($45 | 0)) {
                        label = 28; //@line 7797
                    }
                }
                if ((label | 0) == 28) {
                    $52 = HEAP32[6048 + ($42 << 2) >> 2] | 0; //@line 7802
                    $53 = $52 >> 31 ^ $52; //@line 7804
                    if (((Math_imul($40 + $38 | 0, ($53 | 0) / 2 | 0) | 0) + (Math_imul(1 - $53 | 0, $38) | 0) | 0) == ($35 | 0)) {
                        $69 = $42; //@line 7813
                        break;
                    }
                }
                $64 = (HEAP32[6048 + ($42 << 2) >> 2] | 0) == 1; //@line 7820
                if (($44 | 0) != -1) {
                    if (!$64) {
                        HEAP32[3078] = 105; //@line 7823
                    }
                    HEAP32[3078] = 104; //@line 7825
                    $$0 = 2011; //@line 7826
                    return $$0 | 0; //@line 7827
                }
                if ($64) {
                    $$0 = _fill() | 0; //@line 7831
                    return $$0 | 0; //@line 7832
                } else {
                    HEAP32[3078] = 105; //@line 7834
                    $$0 = 2011; //@line 7835
                    return $$0 | 0; //@line 7836
                }
            } else {
                $69 = $35; //@line 7839
            }
        } while (0);
        HEAP32[3078] = 92; //@line 7842
        if ((HEAP32[3318] | 0) > 6) {
            $$0 = 2011; //@line 7846
            return $$0 | 0; //@line 7847
        }
        $68 = HEAP32[3298] | 0; //@line 7849
        $70 = ($69 | 0) == ($68 | 0); //@line 7850
        if ($70) {
            $71 = 6048 + ($69 << 2) | 0; //@line 7852
            $72 = HEAP32[$71 >> 2] | 0; //@line 7853
            if (($72 | 0) == 2) {
                HEAP32[3078] = 238; //@line 7855
                _fDSTROY($69); //@line 7856
                $$0 = 2011; //@line 7857
                return $$0 | 0; //@line 7858
            } else if (!(($72 | 0) == -2 | ($72 | 0) == 1)) {
                label = 39; //@line 7860
            }
            do {
                if ((label | 0) == 39) {
                    if ((HEAP32[6488 + (HEAP32[3296] << 2) >> 2] | 0) == -1) {
                        $81 = 92; //@line 7869
                    } else {
                        HEAP32[3078] = 27; //@line 7871
                        $81 = 26; //@line 7872
                    }
                    if ((HEAP32[6488 + (HEAP32[3444] << 2) >> 2] | 0) == -1) {
                        HEAP32[3078] = 26; //@line 7879
                        $$0 = 2011; //@line 7880
                        return $$0 | 0; //@line 7881
                    }
                    if (($81 | 0) == 26) {
                        $$0 = 2011; //@line 7885
                        return $$0 | 0; //@line 7886
                    } else {
                        HEAP32[$71 >> 2] = 1; //@line 7888
                        break;
                    }
                }
            } while (0);
            $89 = HEAP32[3296] | 0; //@line 7894
            label = 47; //@line 7895
        } else {
            $84 = HEAP32[3296] | 0; //@line 7897
            if ($70 | ($69 | 0) == ($84 | 0)) {
                $89 = $84; //@line 7901
                label = 47; //@line 7902
            } else {
                $93 = $69; //@line 7904
            }
        }
        if ((label | 0) == 47) {
            $87 = HEAP32[6048 + ($68 << 2) >> 2] | 0; //@line 7909
            if (($87 | 0) == -2 | ($87 | 0) == 1) {
                _fCARRY($89 + $68 - $69 | 0, HEAP32[74] | 0); //@line 7914
                $93 = HEAP32[2864] | 0; //@line 7916
            } else {
                $93 = $69; //@line 7918
            }
        }
        _fCARRY($93, HEAP32[74] | 0); //@line 7922
        $94 = HEAP32[3454] | 0; //@line 7923
        $96 = HEAP32[6048 + ($94 << 2) >> 2] | 0; //@line 7925
        $97 = $96 >> 31 ^ $96; //@line 7927
        $99 = HEAP32[3280] | 0; //@line 7929
        $100 = Math_imul(1 - $97 | 0, $99) | 0; //@line 7930
        $105 = (Math_imul((HEAP32[3282] | 0) + $99 | 0, ($97 | 0) / 2 | 0) | 0) + $100 | 0; //@line 7935
        HEAP32[1614] = $105; //@line 7936
        $106 = HEAP32[2864] | 0; //@line 7937
        if (($106 | 0) == ($94 | 0) & ($105 | 0) != 0) {
            HEAP32[6488 + ($105 << 2) >> 2] = -1; //@line 7943
        }
        if (!(($106 | 0) == (HEAP32[1620] | 0) | ($106 | 0) == (HEAP32[4824] | 0) | ($106 | 0) == (HEAP32[4462] | 0) | ($106 | 0) == (HEAP32[78] | 0))) {
            $$0 = 2009; //@line 7957
            return $$0 | 0; //@line 7958
        }
        $118 = 6048 + ($106 << 2) | 0; //@line 7960
        if (!(HEAP32[$118 >> 2] | 0)) {
            $$0 = 2009; //@line 7964
            return $$0 | 0; //@line 7965
        }
        HEAP32[$118 >> 2] = 0; //@line 7967
        HEAP32[6048 + (HEAP32[4468] << 2) >> 2] = 1; //@line 7970
        $$0 = 2009; //@line 7971
        return $$0 | 0; //@line 7972
    }

    function _fMPINIT() {
        var $$lcssa = 0,
            $$lcssa48 = 0,
            $$lcssa49 = 0,
            $$lcssa50 = 0,
            $$lcssa51 = 0,
            $$lcssa52 = 0,
            $$lcssa53 = 0,
            $$lcssa54 = 0,
            $$lcssa55 = 0,
            $$lcssa56 = 0,
            $$lcssa57 = 0,
            $$lcssa58 = 0,
            $$lcssa59 = 0,
            $$lcssa60 = 0,
            $1 = 0,
            $15 = 0,
            $16 = 0,
            $2 = 0,
            $22 = 0,
            $23 = 0,
            $29 = 0,
            $30 = 0,
            $36 = 0,
            $37 = 0,
            $43 = 0,
            $44 = 0,
            $50 = 0,
            $51 = 0,
            $57 = 0,
            $I$22 = 0,
            $J$0 = 0,
            $J$0$1 = 0,
            $J$0$2 = 0,
            $J$0$3 = 0,
            $J$0$4 = 0,
            $J$0$5 = 0,
            $J$0$6 = 0,
            $J$0$ph = 0,
            $J$0$ph$1 = 0,
            $J$0$ph$2 = 0,
            $J$0$ph$3 = 0,
            $J$0$ph$4 = 0,
            $J$0$ph$5 = 0,
            $J$0$ph$6 = 0,
            $VAL$1$ph = 0,
            $VAL$1$ph$1 = 0,
            $VAL$1$ph$2 = 0,
            $VAL$1$ph$3 = 0,
            $VAL$1$ph$4 = 0,
            $VAL$1$ph$5 = 0,
            $VAL$1$ph$6 = 0,
            dest = 0,
            stop = 0,
            $I$22$looptemp = 0;
        dest = 17569; //@line 14738
        stop = dest + 128 | 0; //@line 14738
        do {
            HEAP8[dest >> 0] = 255; //@line 14738
            dest = dest + 1 | 0; //@line 14738
        } while ((dest | 0) < (stop | 0));
        $J$0$ph = 32; //@line 14739
        $VAL$1$ph = 0; //@line 14739
        L1: while (1) {
            $J$0 = $J$0$ph; //@line 14741
            while (1) {
                if (($J$0 | 0) > 34) {
                    $J$0$ph$1 = 39; //@line 14745
                    $VAL$1$ph$1 = $VAL$1$ph; //@line 14745
                    break L1;
                }
                $1 = $J$0 + 1 | 0; //@line 14748
                $2 = 17568 + $1 | 0; //@line 14749
                if ((HEAP8[$2 >> 0] | 0) > -1) {
                    $J$0 = $1; //@line 14753
                } else {
                    $$lcssa59 = $1; //@line 14755
                    $$lcssa60 = $2; //@line 14755
                    break;
                }
            }
            HEAP8[$$lcssa60 >> 0] = $VAL$1$ph; //@line 14760
            $J$0$ph = $$lcssa59; //@line 14762
            $VAL$1$ph = $VAL$1$ph + 1 | 0; //@line 14762
        }
        L7: while (1) {
            $J$0$1 = $J$0$ph$1; //@line 14765
            while (1) {
                if (($J$0$1 | 0) > 46) {
                    $J$0$ph$2 = 65; //@line 14769
                    $VAL$1$ph$2 = $VAL$1$ph$1; //@line 14769
                    break L7;
                }
                $15 = $J$0$1 + 1 | 0; //@line 14772
                $16 = 17568 + $15 | 0; //@line 14773
                if ((HEAP8[$16 >> 0] | 0) > -1) {
                    $J$0$1 = $15; //@line 14777
                } else {
                    $$lcssa57 = $15; //@line 14779
                    $$lcssa58 = $16; //@line 14779
                    break;
                }
            }
            HEAP8[$$lcssa58 >> 0] = $VAL$1$ph$1; //@line 14784
            $J$0$ph$1 = $$lcssa57; //@line 14786
            $VAL$1$ph$1 = $VAL$1$ph$1 + 1 | 0; //@line 14786
        }
        L13: while (1) {
            $J$0$2 = $J$0$ph$2; //@line 14789
            while (1) {
                if (($J$0$2 | 0) > 90) {
                    $J$0$ph$3 = 97; //@line 14793
                    $VAL$1$ph$3 = $VAL$1$ph$2; //@line 14793
                    break L13;
                }
                $22 = $J$0$2 + 1 | 0; //@line 14796
                $23 = 17568 + $22 | 0; //@line 14797
                if ((HEAP8[$23 >> 0] | 0) > -1) {
                    $J$0$2 = $22; //@line 14801
                } else {
                    $$lcssa55 = $22; //@line 14803
                    $$lcssa56 = $23; //@line 14803
                    break;
                }
            }
            HEAP8[$$lcssa56 >> 0] = $VAL$1$ph$2; //@line 14808
            $J$0$ph$2 = $$lcssa55; //@line 14810
            $VAL$1$ph$2 = $VAL$1$ph$2 + 1 | 0; //@line 14810
        }
        L19: while (1) {
            $J$0$3 = $J$0$ph$3; //@line 14813
            while (1) {
                if (($J$0$3 | 0) > 122) {
                    $J$0$ph$4 = 37; //@line 14817
                    $VAL$1$ph$4 = $VAL$1$ph$3; //@line 14817
                    break L19;
                }
                $29 = $J$0$3 + 1 | 0; //@line 14820
                $30 = 17568 + $29 | 0; //@line 14821
                if ((HEAP8[$30 >> 0] | 0) > -1) {
                    $J$0$3 = $29; //@line 14825
                } else {
                    $$lcssa53 = $29; //@line 14827
                    $$lcssa54 = $30; //@line 14827
                    break;
                }
            }
            HEAP8[$$lcssa54 >> 0] = $VAL$1$ph$3; //@line 14832
            $J$0$ph$3 = $$lcssa53; //@line 14834
            $VAL$1$ph$3 = $VAL$1$ph$3 + 1 | 0; //@line 14834
        }
        L25: while (1) {
            $J$0$4 = $J$0$ph$4; //@line 14837
            while (1) {
                if (($J$0$4 | 0) > 37) {
                    $J$0$ph$5 = 48; //@line 14841
                    $VAL$1$ph$5 = $VAL$1$ph$4; //@line 14841
                    break L25;
                }
                $36 = $J$0$4 + 1 | 0; //@line 14844
                $37 = 17568 + $36 | 0; //@line 14845
                if ((HEAP8[$37 >> 0] | 0) > -1) {
                    $J$0$4 = $36; //@line 14849
                } else {
                    $$lcssa51 = $36; //@line 14851
                    $$lcssa52 = $37; //@line 14851
                    break;
                }
            }
            HEAP8[$$lcssa52 >> 0] = $VAL$1$ph$4; //@line 14856
            $J$0$ph$4 = $$lcssa51; //@line 14858
            $VAL$1$ph$4 = $VAL$1$ph$4 + 1 | 0; //@line 14858
        }
        L31: while (1) {
            $J$0$5 = $J$0$ph$5; //@line 14861
            while (1) {
                if (($J$0$5 | 0) > 57) {
                    $J$0$ph$6 = 0; //@line 14865
                    $VAL$1$ph$6 = $VAL$1$ph$5; //@line 14865
                    break L31;
                }
                $43 = $J$0$5 + 1 | 0; //@line 14868
                $44 = 17568 + $43 | 0; //@line 14869
                if ((HEAP8[$44 >> 0] | 0) > -1) {
                    $J$0$5 = $43; //@line 14873
                } else {
                    $$lcssa49 = $43; //@line 14875
                    $$lcssa50 = $44; //@line 14875
                    break;
                }
            }
            HEAP8[$$lcssa50 >> 0] = $VAL$1$ph$5; //@line 14880
            $J$0$ph$5 = $$lcssa49; //@line 14882
            $VAL$1$ph$5 = $VAL$1$ph$5 + 1 | 0; //@line 14882
        }
        L37: while (1) {
            $J$0$6 = $J$0$ph$6; //@line 14885
            while (1) {
                if (($J$0$6 | 0) > 126) {
                    break L37;
                }
                $50 = $J$0$6 + 1 | 0; //@line 14891
                $51 = 17568 + $50 | 0; //@line 14892
                if ((HEAP8[$51 >> 0] | 0) > -1) {
                    $J$0$6 = $50; //@line 14896
                } else {
                    $$lcssa = $50; //@line 14898
                    $$lcssa48 = $51; //@line 14898
                    break;
                }
            }
            HEAP8[$$lcssa48 >> 0] = $VAL$1$ph$6; //@line 14903
            $J$0$ph$6 = $$lcssa; //@line 14905
            $VAL$1$ph$6 = $VAL$1$ph$6 + 1 | 0; //@line 14905
        }
        HEAP8[17696] = HEAP8[17578] | 0; //@line 14908
        $57 = HEAP8[17601] | 0; //@line 14909
        HEAP8[17578] = $57; //@line 14910
        HEAP8[17579] = $57; //@line 14911
        $I$22 = 0; //@line 14912
        do {
            $I$22$looptemp = $I$22;
            $I$22 = $I$22 + 1 | 0; //@line 14914
            HEAP8[128 + ((HEAP8[17568 + $I$22 >> 0] | 0) + 1) >> 0] = $I$22$looptemp; //@line 14921
        } while (($I$22 | 0) != 127);
        return;
    }

    function _throw() {
        var $$0 = 0,
            $0 = 0,
            $11 = 0,
            $17 = 0,
            $20 = 0,
            $27 = 0,
            $29 = 0,
            $30 = 0,
            $4 = 0,
            $40 = 0,
            $42 = 0,
            $45 = 0,
            $53 = 0,
            $60 = 0,
            $67 = 0,
            $69 = 0,
            $79 = 0,
            $82 = 0,
            $85 = 0,
            $88 = 0,
            $93 = 0,
            label = 0;
        $0 = HEAP32[3562] | 0; //@line 8940
        $4 = HEAP32[2864] | 0; //@line 8944
        if (($4 | 0) == (HEAP32[3444] | 0) ? (HEAP32[6488 + ($0 << 2) >> 2] | 0) == -1 : 0) {
            if ((HEAP32[6488 + ($4 << 2) >> 2] | 0) == -1) {
                $11 = $4; //@line 8953
            } else {
                HEAP32[2864] = $0; //@line 8955
                $11 = $0; //@line 8956
            }
        } else {
            $11 = $4; //@line 8959
        }
        if ((HEAP32[6488 + ($11 << 2) >> 2] | 0) != -1) {
            $$0 = 2011; //@line 8965
            return $$0 | 0; //@line 8966
        }
        do {
            if (!(($11 | 0) < 50 | ($11 | 0) > (HEAP32[1616] | 0))) {
                $17 = HEAP32[3320] | 0; //@line 8974
                $20 = HEAP32[74] | 0; //@line 8977
                if ((HEAP32[6488 + ($17 << 2) >> 2] | 0) != ($20 | 0)) {
                    if ((HEAP32[6896 + ($17 << 2) >> 2] | 0) != ($20 | 0)) {
                        break;
                    }
                }
                HEAP32[3078] = 159; //@line 8987
                _fDROP($11, 0); //@line 8988
                _fMOVE(HEAP32[3320] | 0, 0); //@line 8990
                _fMOVE((HEAP32[3320] | 0) + 100 | 0, 0); //@line 8993
                _fDROP(HEAP32[3322] | 0, HEAP32[320 + (HEAP32[3320] << 2) >> 2] | 0); //@line 8998
                _fDROP((HEAP32[3322] | 0) + 100 | 0, HEAP32[13296 + (HEAP32[3320] << 2) >> 2] | 0); //@line 9004
                _fJUGGLE(HEAP32[3426] | 0); //@line 9006
                $$0 = 2011; //@line 9007
                return $$0 | 0; //@line 9008
            }
        } while (0);
        do {
            if (($11 | 0) == (HEAP32[4516] | 0)) {
                $27 = HEAP32[2676] | 0; //@line 9015
                $29 = HEAP32[6488 + ($27 << 2) >> 2] | 0; //@line 9017
                $30 = HEAP32[74] | 0; //@line 9018
                if (($29 | 0) != ($30 | 0)) {
                    if (!(($29 | 0) == -1 ? 1 : (HEAP32[6896 + ($27 << 2) >> 2] | 0) == ($30 | 0))) {
                        break;
                    }
                }
                HEAP32[2864] = $27; //@line 9030
                _feed() | 0; //@line 9031
                $$0 = 2011; //@line 9032
                return $$0 | 0; //@line 9033
            }
        } while (0);
        if (($11 | 0) != (HEAP32[404] | 0)) {
            $$0 = _discard(0) | 0; //@line 9040
            return $$0 | 0; //@line 9041
        }
        $40 = _fATDWRF(HEAP32[74] | 0) | 0; //@line 9044
        HEAP32[66] = $40; //@line 9045
        do {
            if (($40 | 0) > 0) {
                HEAP32[3078] = 48; //@line 9049
                $79 = _fRAN(7) | 0; //@line 9050
                if (($79 | 0) < (HEAP32[390] | 0)) {
                    $88 = HEAP32[3078] | 0; //@line 9055
                    break;
                }
                $82 = HEAP32[66] | 0; //@line 9058
                HEAP32[1528 + ($82 << 2) >> 2] = 0; //@line 9060
                HEAP32[1576 + ($82 << 2) >> 2] = 0; //@line 9062
                HEAP32[3078] = 47; //@line 9063
                $85 = HEAP32[4506] | 0; //@line 9064
                HEAP32[4506] = $85 + 1; //@line 9066
                if (!$85) {
                    HEAP32[3078] = 149; //@line 9069
                    $88 = 149; //@line 9070
                } else {
                    $88 = 47; //@line 9072
                }
            } else {
                HEAP32[3078] = 152; //@line 9075
                $42 = HEAP32[4510] | 0; //@line 9076
                $45 = HEAP32[74] | 0; //@line 9079
                if ((HEAP32[6488 + ($42 << 2) >> 2] | 0) == ($45 | 0)) {
                    label = 16; //@line 9082
                } else {
                    if ((HEAP32[6896 + ($42 << 2) >> 2] | 0) == ($45 | 0)) {
                        label = 16; //@line 9088
                    }
                }
                if ((label | 0) == 16) {
                    if (!(HEAP32[6048 + ($42 << 2) >> 2] | 0)) {
                        $88 = 152; //@line 9096
                        break;
                    }
                }
                HEAP32[3078] = 158; //@line 9100
                $53 = HEAP32[3320] | 0; //@line 9101
                if ((HEAP32[6488 + ($53 << 2) >> 2] | 0) == ($45 | 0)) {
                    $88 = 158; //@line 9106
                } else {
                    if ((HEAP32[6896 + ($53 << 2) >> 2] | 0) == ($45 | 0)) {
                        $88 = 158; //@line 9112
                    } else {
                        HEAP32[3078] = 203; //@line 9114
                        $60 = HEAP32[3448] | 0; //@line 9115
                        if ((HEAP32[6488 + ($60 << 2) >> 2] | 0) == ($45 | 0)) {
                            $88 = 203; //@line 9120
                        } else {
                            if ((HEAP32[6896 + ($60 << 2) >> 2] | 0) == ($45 | 0)) {
                                $88 = 203; //@line 9126
                            } else {
                                $67 = HEAP32[2676] | 0; //@line 9128
                                $69 = HEAP32[6488 + ($67 << 2) >> 2] | 0; //@line 9130
                                if (($69 | 0) == ($45 | 0)) {
                                    label = 23; //@line 9133
                                } else {
                                    if (($69 | 0) == -1 ? 1 : (HEAP32[6896 + ($67 << 2) >> 2] | 0) == ($45 | 0)) {
                                        label = 23; //@line 9141
                                    }
                                }
                                if ((label | 0) == 23) {
                                    if (!(HEAP32[6048 + ($67 << 2) >> 2] | 0)) {
                                        HEAP32[3078] = 164; //@line 9149
                                        _fDROP(HEAP32[404] | 0, $45); //@line 9151
                                        $93 = HEAP32[404] | 0; //@line 9152
                                        HEAP32[6896 + ($93 << 2) >> 2] = -1; //@line 9154
                                        HEAP32[6048 + ($93 << 2) >> 2] = 1; //@line 9156
                                        _fJUGGLE(HEAP32[2676] | 0); //@line 9158
                                        $$0 = 2011; //@line 9159
                                        return $$0 | 0; //@line 9160
                                    }
                                }
                                HEAP32[2864] = 0; //@line 9163
                                $$0 = _attack() | 0; //@line 9165
                                return $$0 | 0; //@line 9166
                            }
                        }
                    }
                }
            }
        } while (0);
        _fRSPEAK($88); //@line 9173
        _fDROP(HEAP32[404] | 0, HEAP32[74] | 0); //@line 9176
        HEAP32[1614] = HEAP32[3306]; //@line 9178
        $$0 = 8; //@line 9179
        return $$0 | 0; //@line 9180
    }

    function _quick_io() {
        var label = 0;
        if (!(HEAP32[4868] | 0)) {
            label = 3; //@line 4389
        } else {
            if ((_fread(18088, 4, 1, HEAP32[4862] | 0) | 0) == 1) {
                label = 3; //@line 4395
            } else {
                label = 5; //@line 4397
            }
        }
        if ((label | 0) == 3) {
            HEAP32[4870] = _fMOD(((HEAP32[4870] | 0) * 13 | 0) + (HEAP32[4522] | 0) | 0, 6e7) | 0; //@line 4406
            if (!(HEAP32[4868] | 0)) {
                _fwrite(18088, 4, 1, HEAP32[4862] | 0) | 0; //@line 4411
                label = 5; //@line 4412
            } else {
                label = 6; //@line 4414
            }
        }
        if ((label | 0) == 5) {
            if (!(HEAP32[4868] | 0)) {
                label = 7; //@line 4421
            } else {
                label = 6; //@line 4423
            }
        }
        if ((label | 0) == 6) {
            if ((_fread(19352, 4, 1, HEAP32[4862] | 0) | 0) == 1) {
                label = 7; //@line 4431
            } else {
                label = 9; //@line 4433
            }
        }
        if ((label | 0) == 7) {
            HEAP32[4870] = _fMOD(((HEAP32[4870] | 0) * 13 | 0) + (HEAP32[4838] | 0) | 0, 6e7) | 0; //@line 4442
            if (!(HEAP32[4868] | 0)) {
                _fwrite(19352, 4, 1, HEAP32[4862] | 0) | 0; //@line 4447
                label = 9; //@line 4448
            } else {
                label = 10; //@line 4450
            }
        }
        if ((label | 0) == 9) {
            if (!(HEAP32[4868] | 0)) {
                label = 11; //@line 4457
            } else {
                label = 10; //@line 4459
            }
        }
        if ((label | 0) == 10) {
            if ((_fread(17896, 4, 1, HEAP32[4862] | 0) | 0) == 1) {
                label = 11; //@line 4467
            } else {
                label = 13; //@line 4469
            }
        }
        if ((label | 0) == 11) {
            HEAP32[4870] = _fMOD(((HEAP32[4870] | 0) * 13 | 0) + (HEAP32[4474] | 0) | 0, 6e7) | 0; //@line 4478
            if (!(HEAP32[4868] | 0)) {
                _fwrite(17896, 4, 1, HEAP32[4862] | 0) | 0; //@line 4483
                label = 13; //@line 4484
            } else {
                label = 14; //@line 4486
            }
        }
        if ((label | 0) == 13) {
            if (!(HEAP32[4868] | 0)) {
                label = 15; //@line 4493
            } else {
                label = 14; //@line 4495
            }
        }
        if ((label | 0) == 14) {
            if ((_fread(13088, 4, 1, HEAP32[4862] | 0) | 0) == 1) {
                label = 15; //@line 4503
            } else {
                label = 17; //@line 4505
            }
        }
        if ((label | 0) == 15) {
            HEAP32[4870] = _fMOD(((HEAP32[4870] | 0) * 13 | 0) + (HEAP32[3272] | 0) | 0, 6e7) | 0; //@line 4514
            if (!(HEAP32[4868] | 0)) {
                _fwrite(13088, 4, 1, HEAP32[4862] | 0) | 0; //@line 4519
                label = 17; //@line 4520
            } else {
                label = 18; //@line 4522
            }
        }
        if ((label | 0) == 17) {
            if (!(HEAP32[4868] | 0)) {
                label = 19; //@line 4529
            } else {
                label = 18; //@line 4531
            }
        }
        if ((label | 0) == 18) {
            if ((_fread(19328, 4, 1, HEAP32[4862] | 0) | 0) == 1) {
                label = 19; //@line 4539
            } else {
                label = 21; //@line 4541
            }
        }
        if ((label | 0) == 19) {
            HEAP32[4870] = _fMOD(((HEAP32[4870] | 0) * 13 | 0) + (HEAP32[4832] | 0) | 0, 6e7) | 0; //@line 4550
            if (!(HEAP32[4868] | 0)) {
                _fwrite(19328, 4, 1, HEAP32[4862] | 0) | 0; //@line 4555
                label = 21; //@line 4556
            } else {
                label = 22; //@line 4558
            }
        }
        if ((label | 0) == 21) {
            if (!(HEAP32[4868] | 0)) {
                label = 23; //@line 4565
            } else {
                label = 22; //@line 4567
            }
        }
        if ((label | 0) == 22) {
            if ((_fread(12352, 4, 1, HEAP32[4862] | 0) | 0) == 1) {
                label = 23; //@line 4575
            }
        }
        if ((label | 0) == 23) {
            HEAP32[4870] = _fMOD(((HEAP32[4870] | 0) * 13 | 0) + (HEAP32[3088] | 0) | 0, 6e7) | 0; //@line 4584
            if (!(HEAP32[4868] | 0)) {
                _fwrite(12352, 4, 1, HEAP32[4862] | 0) | 0; //@line 4589
            }
        }
        _quick_array(17056, 100); //@line 4592
        _quick_array(9592, HEAP32[18] | 0); //@line 4594
        _quick_array(17912, HEAP32[8] | 0); //@line 4596
        _quick_array(18864, 100); //@line 4597
        _quick_array(13824, 100); //@line 4598
        _quick_array(7352, HEAP32[14] | 0); //@line 4600
        _quick_array(8848, HEAP32[14] | 0); //@line 4602
        _quick_array(752, HEAP32[14] | 0); //@line 4604
        _quick_array(1656, HEAP32[14] | 0); //@line 4606
        _quick_array(18104, HEAP32[14] | 0); //@line 4608
        _quick_array(HEAP32[30] | 0, HEAP32[12] | 0); //@line 4611
        _quick_array(17968, HEAP32[8] | 0); //@line 4613
        _quick_array(13032, HEAP32[20] | 0); //@line 4615
        _quick_array(13064, HEAP32[20] | 0); //@line 4617
        _quick_array(2400, HEAP32[22] | 0); //@line 4619
        _quick_array(15608, HEAP32[6] | 0); //@line 4621
        _quick_array(14280, HEAP32[6] | 0); //@line 4623
        _quick_array(320, 100); //@line 4624
        _quick_array(13296, 100); //@line 4625
        _quick_array(17704, HEAP32[24] | 0); //@line 4627
        _quick_array(12536, ((HEAP32[3088] | 0) * 5 | 0) + 4 | 0); //@line 4631
        return;
    }

    function _fPUTTXT($WORD, $sTATE, $CASE, $HASH) {
        $WORD = $WORD | 0;
        $sTATE = $sTATE | 0;
        $CASE = $CASE | 0;
        $HASH = $HASH | 0;
        var $$ = 0,
            $1 = 0,
            $16 = 0,
            $18 = 0,
            $21 = 0,
            $25 = 0,
            $26 = 0,
            $29 = 0,
            $38 = 0,
            $39 = 0,
            $4 = 0,
            $44 = 0,
            $48 = 0,
            $53 = 0,
            $58 = 0,
            $59 = 0,
            $6 = 0,
            $62 = 0,
            $71 = 0,
            $76 = 0,
            $I$02$us$i = 0,
            $I$02$us$i$us = 0,
            $I$05 = 0,
            $I$05$us = 0,
            $W$1$ph = 0,
            $W$16 = 0,
            $W$16$us = 0,
            $storemerge = 0,
            $storemerge$us = 0,
            $storemerge4 = 0,
            $storemerge4$us = 0,
            label = 0;
        $1 = ($CASE * 13 | 0) + 24 | 0; //@line 10506
        $4 = ($CASE | 0) < 0 ? 0 - $CASE | 0 : $CASE; //@line 10509
        $6 = ($4 * 26 | 0) + $1 | 0; //@line 10511
        $$ = ($4 | 0) > 1 ? $6 : $1; //@line 10513
        if (!$HASH) {
            $W$1$ph = $WORD; //@line 10516
        } else {
            $W$1$ph = $WORD - $HASH + (Math_imul((($HASH * 13579 | 0) + 5432 | 0) % 97531 | 0, -12345) | 0) | 0; //@line 10524
        }
        $16 = $CASE * 26 | 0; //@line 10527
        if (($4 | 0) < 2) {
            $I$05$us = 1; //@line 10529
            $W$16$us = $W$1$ph; //@line 10529
        } else {
            $I$05 = 1; //@line 10531
            $W$16 = $W$1$ph; //@line 10531
            while (1) {
                $53 = ($W$16 | 0) / 16777216 | 0; //@line 10533
                if (($W$16 & -16777216 | 0) != 1056964608 | (HEAP32[$sTATE >> 2] | 0) != 0) {
                    $58 = HEAP32[4236] | 0; //@line 10540
                    $59 = HEAP32[4234] | 0; //@line 10541
                    if (($59 | 0) >= ($58 | 0)) {
                        $I$02$us$i = $58; //@line 10544
                        while (1) {
                            $62 = $58 - $I$02$us$i + $59 | 0; //@line 10547
                            HEAP8[17464 + ($62 + 1) >> 0] = HEAP8[17464 + $62 >> 0] | 0; //@line 10552
                            if (($I$02$us$i | 0) < ($59 | 0)) {
                                $I$02$us$i = $I$02$us$i + 1 | 0; //@line 10556
                            } else {
                                break;
                            }
                        }
                    }
                    HEAP32[4234] = $59 + 1; //@line 10563
                    $71 = (HEAP32[$sTATE >> 2] | 0) + $53 | 0; //@line 10565
                    $storemerge4 = $71 - (($71 | 0) >= ($6 | 0) | ($71 | 0) < ($$ | 0) ? 0 : $16) | 0; //@line 10570
                    HEAP32[$sTATE >> 2] = $storemerge4; //@line 10571
                    $76 = HEAP32[4236] | 0; //@line 10573
                    HEAP8[17464 + $76 >> 0] = $storemerge4; //@line 10575
                    HEAP32[4236] = $76 + 1; //@line 10577
                    $storemerge = 0; //@line 10578
                } else {
                    $storemerge = 63; //@line 10580
                }
                HEAP32[$sTATE >> 2] = $storemerge; //@line 10582
                $I$05 = $I$05 + 1 | 0; //@line 10586
                if (($I$05 | 0) >= 6) {
                    break;
                } else {
                    $W$16 = $W$16 - ($53 << 24) << 6; //@line 10589
                }
            }
            return;
        }
        while (1) {
            $18 = HEAP32[$sTATE >> 2] | 0; //@line 10598
            if (($W$16$us | 0) < 1) {
                if (!$18) {
                    label = 17; //@line 10602
                    break;
                }
                $39 = ($W$16$us | 0) / 16777216 | 0; //@line 10606
                label = 8; //@line 10607
            } else {
                $21 = ($W$16$us | 0) / 16777216 | 0; //@line 10609
                if (($W$16$us & -16777216 | 0) != 1056964608 | ($18 | 0) != 0) {
                    $39 = $21; //@line 10615
                    label = 8; //@line 10616
                } else {
                    $48 = $21; //@line 10618
                    $storemerge$us = 63; //@line 10618
                }
            }
            if ((label | 0) == 8) {
                label = 0; //@line 10622
                $25 = HEAP32[4236] | 0; //@line 10623
                $26 = HEAP32[4234] | 0; //@line 10624
                if (($26 | 0) >= ($25 | 0)) {
                    $I$02$us$i$us = $25; //@line 10627
                    while (1) {
                        $29 = $25 - $I$02$us$i$us + $26 | 0; //@line 10630
                        HEAP8[17464 + ($29 + 1) >> 0] = HEAP8[17464 + $29 >> 0] | 0; //@line 10635
                        if (($I$02$us$i$us | 0) < ($26 | 0)) {
                            $I$02$us$i$us = $I$02$us$i$us + 1 | 0; //@line 10639
                        } else {
                            break;
                        }
                    }
                }
                HEAP32[4234] = $26 + 1; //@line 10646
                $38 = (HEAP32[$sTATE >> 2] | 0) + $39 | 0; //@line 10648
                $storemerge4$us = $38 - (($38 | 0) >= ($6 | 0) | ($38 | 0) < ($$ | 0) ? 0 : $16) | 0; //@line 10653
                HEAP32[$sTATE >> 2] = $storemerge4$us; //@line 10654
                $44 = HEAP32[4236] | 0; //@line 10656
                HEAP8[17464 + $44 >> 0] = $storemerge4$us; //@line 10658
                HEAP32[4236] = $44 + 1; //@line 10660
                $48 = $39; //@line 10661
                $storemerge$us = 0; //@line 10661
            }
            HEAP32[$sTATE >> 2] = $storemerge$us; //@line 10663
            $I$05$us = $I$05$us + 1 | 0; //@line 10667
            if (($I$05$us | 0) >= 6) {
                label = 17; //@line 10672
                break;
            } else {
                $W$16$us = $W$16$us - ($48 << 24) << 6; //@line 10670
            }
        }
        if ((label | 0) == 17) {
            return;
        }
    }

    function _fJUGGLE($OBJECT) {
        $OBJECT = $OBJECT | 0;
        var $$lcssa = 0,
            $$lcssa18 = 0,
            $$pr$i = 0,
            $$pr$i14 = 0,
            $0 = 0,
            $1 = 0,
            $11 = 0,
            $12 = 0,
            $16 = 0,
            $2 = 0,
            $25 = 0,
            $28 = 0,
            $29 = 0,
            $3 = 0,
            $30 = 0,
            $36 = 0,
            $37 = 0,
            $4 = 0,
            $41 = 0,
            $50 = 0,
            $6 = 0,
            $FROM$0$i = 0,
            $FROM$0$i2 = 0,
            $TEMP$0$i$i = 0,
            $TEMP$0$i$i4 = 0,
            label = 0;
        $0 = 6488 + ($OBJECT << 2) | 0; //@line 14089
        $1 = HEAP32[$0 >> 2] | 0; //@line 14090
        $2 = 6896 + ($OBJECT << 2) | 0; //@line 14091
        $3 = HEAP32[$2 >> 2] | 0; //@line 14092
        $4 = ($OBJECT | 0) > 100; //@line 14093
        $6 = 6896 + ($OBJECT + -100 << 2) | 0; //@line 14095
        $FROM$0$i = HEAP32[($4 ? $6 : $0) >> 2] | 0; //@line 14097
        do {
            if (($FROM$0$i + -1 | 0) >>> 0 < 300) {
                if ($4) {
                    $$pr$i14 = $1; //@line 14103
                } else {
                    if (($1 | 0) == -1) {
                        label = 11; //@line 14107
                        break;
                    }
                    HEAP32[$0 >> 2] = -1; //@line 14110
                    HEAP32[3318] = (HEAP32[3318] | 0) + 1; //@line 14113
                    $$pr$i14 = -1; //@line 14114
                }
                $11 = 10712 + ($FROM$0$i << 2) | 0; //@line 14116
                $12 = HEAP32[$11 >> 2] | 0; //@line 14117
                if (($12 | 0) == ($OBJECT | 0)) {
                    HEAP32[$11 >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14122
                    $$pr$i = $$pr$i14; //@line 14123
                    label = 9; //@line 14124
                    break;
                } else {
                    $TEMP$0$i$i = $12; //@line 14127
                }
                do {
                    $16 = 11504 + ($TEMP$0$i$i << 2) | 0; //@line 14130
                    $TEMP$0$i$i = HEAP32[$16 >> 2] | 0; //@line 14131
                } while (($TEMP$0$i$i | 0) != ($OBJECT | 0));
                $$lcssa18 = $16; //@line 14134
                HEAP32[$$lcssa18 >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14142
                $$pr$i = $$pr$i14; //@line 14143
                label = 9; //@line 14144
            } else {
                $$pr$i = $1; //@line 14146
                label = 9; //@line 14147
            }
        } while (0);
        do {
            if ((label | 0) == 9) {
                if ($4) {
                    HEAP32[$6 >> 2] = $1; //@line 14153
                    break;
                } else {
                    if (($$pr$i | 0) == -1) {
                        label = 11; //@line 14158
                        break;
                    } else {
                        label = 12; //@line 14161
                        break;
                    }
                }
            }
        } while (0);
        if ((label | 0) == 11) {
            HEAP32[3318] = (HEAP32[3318] | 0) + -1; //@line 14170
            label = 12; //@line 14171
        }
        if ((label | 0) == 12) {
            HEAP32[$0 >> 2] = $1; //@line 14174
        }
        if (($1 | 0) >= 1) {
            $25 = 10712 + ($1 << 2) | 0; //@line 14178
            HEAP32[11504 + ($OBJECT << 2) >> 2] = HEAP32[$25 >> 2]; //@line 14181
            HEAP32[$25 >> 2] = $OBJECT; //@line 14182
        }
        $28 = $OBJECT + 100 | 0; //@line 14184
        $29 = ($OBJECT | 0) > 0; //@line 14185
        $30 = 6488 + ($28 << 2) | 0; //@line 14186
        $FROM$0$i2 = HEAP32[($29 ? $2 : $30) >> 2] | 0; //@line 14188
        do {
            if (($FROM$0$i2 + -1 | 0) >>> 0 < 300) {
                if (!$29) {
                    if ((HEAP32[$30 >> 2] | 0) == -1) {
                        label = 26; //@line 14197
                        break;
                    }
                    HEAP32[$30 >> 2] = -1; //@line 14200
                    HEAP32[3318] = (HEAP32[3318] | 0) + 1; //@line 14203
                }
                $36 = 10712 + ($FROM$0$i2 << 2) | 0; //@line 14205
                $37 = HEAP32[$36 >> 2] | 0; //@line 14206
                if (($37 | 0) == ($28 | 0)) {
                    HEAP32[$36 >> 2] = HEAP32[11504 + ($28 << 2) >> 2]; //@line 14211
                    label = 24; //@line 14212
                    break;
                } else {
                    $TEMP$0$i$i4 = $37; //@line 14215
                }
                do {
                    $41 = 11504 + ($TEMP$0$i$i4 << 2) | 0; //@line 14218
                    $TEMP$0$i$i4 = HEAP32[$41 >> 2] | 0; //@line 14219
                } while (($TEMP$0$i$i4 | 0) != ($28 | 0));
                $$lcssa = $41; //@line 14222
                HEAP32[$$lcssa >> 2] = HEAP32[11504 + ($28 << 2) >> 2]; //@line 14230
                label = 24; //@line 14231
            } else {
                label = 24; //@line 14233
            }
        } while (0);
        do {
            if ((label | 0) == 24) {
                if ($29) {
                    HEAP32[$2 >> 2] = $3; //@line 14239
                    break;
                } else {
                    if ((HEAP32[$30 >> 2] | 0) == -1) {
                        label = 26; //@line 14245
                        break;
                    } else {
                        label = 27; //@line 14248
                        break;
                    }
                }
            }
        } while (0);
        if ((label | 0) == 26) {
            HEAP32[3318] = (HEAP32[3318] | 0) + -1; //@line 14257
            label = 27; //@line 14258
        }
        if ((label | 0) == 27) {
            HEAP32[$30 >> 2] = $3; //@line 14261
        }
        if (($3 | 0) < 1) {
            return;
        }
        $50 = 10712 + ($3 << 2) | 0; //@line 14267
        HEAP32[11504 + ($28 << 2) >> 2] = HEAP32[$50 >> 2]; //@line 14270
        HEAP32[$50 >> 2] = $28; //@line 14271
        return;
    }

    function _fSAVWRD($OP, $wORD) {
        $OP = $OP | 0;
        $wORD = $wORD | 0;
        var $$pr = 0,
            $10 = 0,
            $11 = 0,
            $15 = 0,
            $18 = 0,
            $22 = 0,
            $23 = 0,
            $27 = 0,
            $29 = 0,
            $3 = 0,
            $30 = 0,
            $32 = 0,
            $4 = 0,
            $44 = 0,
            $45 = 0,
            $46 = 0,
            $47 = 0,
            $50 = 0,
            $52 = 0,
            $53 = 0,
            $54 = 0,
            $55 = 0,
            $59 = 0,
            $6 = 0,
            $60 = 0;
        $$pr = HEAP32[4944] | 0; //@line 13568
        do {
            if ($OP) {
                $3 = ($$pr | 0) > 0 & 1; //@line 13573
                $4 = ($$pr | 0) < 0 ? -1 : $3; //@line 13574
                if (!$4) {
                    HEAP32[4944] = $OP; //@line 13576
                    _fSAVEIO(0, ($OP | 0) > 0 & 1, 19792); //@line 13579
                    HEAP32[4946] = 1; //@line 13580
                    if ((HEAP32[4944] | 0) > 0) {
                        _fSAVEIO(1, 1, 19792); //@line 13584
                        $47 = HEAP32[4948] | 0; //@line 13585
                        HEAP32[5198] = (7006652 - $47 | 0) % 1048576 | 0; //@line 13588
                        $46 = $47; //@line 13589
                    } else {
                        $44 = (HEAP32[$wORD >> 2] | 0) % 1048576 | 0; //@line 13592
                        HEAP32[5198] = $44; //@line 13593
                        $45 = 7006652 - $44 | 0; //@line 13594
                        HEAP32[4948] = $45; //@line 13595
                        $46 = $45; //@line 13596
                    }
                    HEAP32[5202] = $46; //@line 13598
                    return;
                } else if (!(($4 | 0) == 1 | ($4 | 0) == -1)) {
                    break;
                }
                $50 = HEAP32[4946] | 0; //@line 13603
                if (($50 | 0) == 250) {
                    _fSAVEIO(1, $3, 19792); //@line 13606
                    $53 = HEAP32[4946] | 0; //@line 13609
                    $55 = HEAP32[4944] | 0; //@line 13609
                } else {
                    $53 = $50; //@line 13611
                    $55 = $$pr; //@line 13611
                }
                $52 = ($53 | 0) % 250 | 0; //@line 13613
                $54 = $52 + 1 | 0; //@line 13614
                HEAP32[4946] = $54; //@line 13615
                if (($55 | 0) > 0) {
                    $60 = $54; //@line 13618
                } else {
                    HEAP32[19792 + ($52 << 2) >> 2] = HEAP32[5202]; //@line 13622
                    HEAP32[4946] = $54; //@line 13623
                    _fSAVEIO(1, 0, 19792); //@line 13624
                    $60 = HEAP32[4946] | 0; //@line 13626
                }
                $59 = $60 + -1 | 0; //@line 13628
                HEAP32[4946] = $59; //@line 13629
                HEAP32[$wORD >> 2] = (HEAP32[19792 + ($59 << 2) >> 2] | 0) - (HEAP32[5202] | 0); //@line 13634
                HEAP32[4946] = (HEAP32[4946] | 0) + 1; //@line 13637
                _fSAVEIO(-1, (HEAP32[4944] | 0) > 0 & 1, 19792); //@line 13641
                HEAP32[4944] = 0; //@line 13642
                return;
            }
        } while (0);
        if (!$$pr) {
            return;
        }
        $6 = HEAP32[4946] | 0; //@line 13650
        if (($6 | 0) == 250) {
            _fSAVEIO(1, ($$pr | 0) > 0 & 1, 19792); //@line 13655
            $11 = HEAP32[4946] | 0; //@line 13658
            $23 = HEAP32[4944] | 0; //@line 13658
        } else {
            $11 = $6; //@line 13660
            $23 = $$pr; //@line 13660
        }
        $10 = ($11 | 0) % 250 | 0; //@line 13662
        $15 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13666
        $18 = (($15 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13669
        HEAP32[5198] = $18; //@line 13670
        $22 = ((($15 | 0) % 1234 | 0) * 765432 | 0) + (($18 | 0) % 123 | 0) | 0; //@line 13674
        HEAP32[5200] = $22; //@line 13675
        HEAP32[4946] = $10; //@line 13676
        if (($23 | 0) > 0) {
            $27 = $22 + (HEAP32[19792 + ($10 << 2) >> 2] | 0) | 0; //@line 13681
            HEAP32[$wORD >> 2] = $27; //@line 13682
            $29 = $27; //@line 13685
            $30 = HEAP32[5200] | 0; //@line 13685
            $32 = HEAP32[4946] | 0; //@line 13685
        } else {
            $29 = HEAP32[$wORD >> 2] | 0; //@line 13688
            $30 = $22; //@line 13688
            $32 = $10; //@line 13688
        }
        HEAP32[19792 + ($32 << 2) >> 2] = $29 - $30; //@line 13692
        HEAP32[4946] = $32 + 1; //@line 13694
        HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$wORD >> 2] | 0) | 0) % 1e9 | 0; //@line 13700
        return;
    }

    function _feed() {
        var $0 = 0,
            $1 = 0,
            $16 = 0,
            $17 = 0,
            $27 = 0,
            $29 = 0,
            $3 = 0,
            $30 = 0,
            $41 = 0,
            $42 = 0,
            $44 = 0,
            $45 = 0,
            $53 = 0,
            $58 = 0,
            $6 = 0,
            $60 = 0,
            $61 = 0,
            $8 = 0;
        $0 = HEAP32[2864] | 0; //@line 9188
        $1 = HEAP32[3298] | 0; //@line 9189
        if (($0 | 0) == ($1 | 0)) {
            HEAP32[3078] = 100; //@line 9192
            return 2011; //@line 9193
        }
        $3 = HEAP32[3446] | 0; //@line 9195
        $6 = ($0 | 0) == (HEAP32[4510] | 0); //@line 9198
        $8 = ($0 | 0) == (HEAP32[3320] | 0); //@line 9201
        if (($0 | 0) == ($3 | 0) | $6 | $8) {
            HEAP32[3078] = 102; //@line 9204
            if ($6) {
                if (HEAP32[6048 + ($0 << 2) >> 2] | 0) {
                    HEAP32[3078] = 110; //@line 9210
                }
            }
            if ($8) {
                HEAP32[3078] = 182; //@line 9214
            }
            if (($0 | 0) != ($3 | 0) | (HEAP32[2870] | 0) != 0) {
                return 2011; //@line 9221
            }
            $16 = HEAP32[6488 + ($1 << 2) >> 2] | 0; //@line 9224
            $17 = HEAP32[74] | 0; //@line 9225
            if (($16 | 0) != ($17 | 0)) {
                if (!(($16 | 0) == -1 ? 1 : (HEAP32[6896 + ($1 << 2) >> 2] | 0) == ($17 | 0))) {
                    return 2011; //@line 9234
                }
            }
            HEAP32[3078] = 101; //@line 9237
            _fDSTROY($1); //@line 9238
            HEAP32[6048 + (HEAP32[3298] << 2) >> 2] = 0; //@line 9241
            return 2011; //@line 9242
        }
        if (($0 | 0) == (HEAP32[3558] | 0)) {
            $27 = HEAP32[4516] | 0; //@line 9247
            $29 = HEAP32[6488 + ($27 << 2) >> 2] | 0; //@line 9249
            $30 = HEAP32[74] | 0; //@line 9250
            if (($29 | 0) != ($30 | 0)) {
                if (!(($29 | 0) == -1 ? 1 : (HEAP32[6896 + ($27 << 2) >> 2] | 0) == ($30 | 0))) {
                    return 2011; //@line 9259
                }
            }
            HEAP32[3078] = 103; //@line 9262
            HEAP32[390] = (HEAP32[390] | 0) + 2; //@line 9265
            return 2011; //@line 9266
        }
        if (($0 | 0) == (HEAP32[2676] | 0)) {
            $41 = HEAP32[6048 + ($0 << 2) >> 2] | 0; //@line 9272
            if (($41 | 0) == 3) {
                HEAP32[3078] = 110; //@line 9274
            } else if (!$41) {
                HEAP32[3078] = 102; //@line 9276
            }
            $42 = HEAP32[4516] | 0; //@line 9278
            $44 = HEAP32[6488 + ($42 << 2) >> 2] | 0; //@line 9280
            $45 = HEAP32[74] | 0; //@line 9281
            if (($44 | 0) != ($45 | 0)) {
                if (!(($44 | 0) == -1 ? 1 : (HEAP32[6896 + ($42 << 2) >> 2] | 0) == ($45 | 0))) {
                    return 2011; //@line 9290
                }
            }
            _fDSTROY($42); //@line 9293
            HEAP32[6048 + (HEAP32[2676] << 2) >> 2] = 1; //@line 9296
            $53 = HEAP32[404] | 0; //@line 9297
            HEAP32[6896 + ($53 << 2) >> 2] = 0; //@line 9299
            HEAP32[6048 + ($53 << 2) >> 2] = 0; //@line 9301
            HEAP32[3078] = 168; //@line 9302
            return 2011; //@line 9303
        } else {
            if (($0 | 0) != (HEAP32[3448] | 0)) {
                HEAP32[3078] = 14; //@line 9308
                return 2011; //@line 9309
            }
            $58 = HEAP32[4516] | 0; //@line 9311
            $60 = HEAP32[6488 + ($58 << 2) >> 2] | 0; //@line 9313
            $61 = HEAP32[74] | 0; //@line 9314
            if (($60 | 0) != ($61 | 0)) {
                if (!(($60 | 0) == -1 ? 1 : (HEAP32[6896 + ($58 << 2) >> 2] | 0) == ($61 | 0))) {
                    return 2011; //@line 9323
                }
            }
            HEAP32[3078] = 202; //@line 9326
            return 2011; //@line 9327
        }
        return 0; //@line 9329
    }

    function _fRNDVOC($CHAR, $FORCE) {
        $CHAR = $CHAR | 0;
        $FORCE = $FORCE | 0;
        var $$lcssa = 0,
            $$lcssa$i = 0,
            $$lcssa28 = 0,
            $$lcssa30 = 0,
            $1 = 0,
            $11 = 0,
            $13 = 0,
            $15 = 0,
            $17 = 0,
            $24 = 0,
            $26 = 0,
            $31 = 0,
            $33 = 0,
            $39 = 0,
            $5 = 0,
            $8 = 0,
            $I$05 = 0,
            $I$13 = 0,
            $J$14 = 0,
            $RNDVOC$06 = 0,
            $RNDVOC$1 = 0,
            label = 0;
        if (!$FORCE) {
            $1 = HEAP32[5222] | 0; //@line 14622
            $I$05 = 1; //@line 14622
            $RNDVOC$06 = 0; //@line 14622
            while (1) {
                HEAP32[5220] = 1; //@line 14624
                if (!$1) {
                    _fDATIME(20880, 20896) | 0; //@line 14627
                    $5 = ((HEAP32[5224] | 0) + 5 | 0) % 1048576 | 0; //@line 14630
                    HEAP32[5222] = $5; //@line 14631
                    $8 = ((HEAP32[5220] | 0) % 1e3 | 0) + 1e3 | 0; //@line 14634
                    HEAP32[5220] = $8; //@line 14635
                    HEAP32[5224] = 1; //@line 14636
                    if (($8 | 0) < 1) {
                        $$lcssa$i = $5; //@line 14639
                    } else {
                        $17 = $8; //@line 14641
                        $39 = $5; //@line 14641
                        label = 6; //@line 14642
                    }
                } else {
                    HEAP32[5224] = 1; //@line 14645
                    $17 = 1; //@line 14646
                    $39 = $1; //@line 14646
                    label = 6; //@line 14647
                }
                if ((label | 0) == 6) {
                    label = 0; //@line 14650
                    $11 = $39; //@line 14651
                    $15 = 1; //@line 14651
                    while (1) {
                        $13 = (($11 * 1093 | 0) + 221587 | 0) % 1048576 | 0; //@line 14655
                        if (($15 | 0) < ($17 | 0)) {
                            $11 = $13; //@line 14659
                            $15 = $15 + 1 | 0; //@line 14659
                        } else {
                            $$lcssa30 = $13; //@line 14661
                            break;
                        }
                    }
                    HEAP32[5222] = $$lcssa30; //@line 14666
                    HEAP32[5224] = $17 + 1; //@line 14667
                    $$lcssa$i = $$lcssa30; //@line 14668
                }
                $24 = (($I$05 | 0) == 2 ? $CHAR : (($$lcssa$i * 26 | 0) / 1048576 | 0) + 11 | 0) + ($RNDVOC$06 << 6) | 0; //@line 14676
                $I$05 = $I$05 + 1 | 0; //@line 14677
                if (($I$05 | 0) == 6) {
                    $RNDVOC$1 = $24; //@line 14680
                    break;
                } else {
                    $1 = $$lcssa$i; //@line 14683
                    $RNDVOC$06 = $24; //@line 14683
                }
            }
        } else {
            $RNDVOC$1 = $FORCE; //@line 14687
        }
        $26 = HEAP32[6] | 0; //@line 14689
        if (($26 | 0) < 1) {
            _fBUG(5); //@line 14692
        } else {
            $I$13 = 1; //@line 14695
            $J$14 = 1e4; //@line 14695
        }
        while (1) {
            $J$14 = $J$14 + 7 | 0; //@line 14698
            $31 = 14280 + ($I$13 << 2) | 0; //@line 14699
            $33 = Math_imul($J$14, $J$14) | 0; //@line 14701
            if (((((HEAP32[$31 >> 2] | 0) - $33 | 0) / 262144 | 0 | 0) % 64 | 0 | 0) == ($CHAR | 0)) {
                $$lcssa = $31; //@line 14707
                $$lcssa28 = $33; //@line 14707
                label = 14; //@line 14708
                break;
            }
            if (($I$13 | 0) >= ($26 | 0)) {
                label = 13; //@line 14716
                break;
            } else {
                $I$13 = $I$13 + 1 | 0; //@line 14714
            }
        }
        if ((label | 0) == 13) {
            _fBUG(5); //@line 14721
        } else if ((label | 0) == 14) {
            HEAP32[$$lcssa >> 2] = $$lcssa28 + $RNDVOC$1; //@line 14726
            return $RNDVOC$1 | 0; //@line 14727
        }
        return 0; //@line 14729
    }

    function _fPUT($OBJECT, $WHERE, $PVAL) {
        $OBJECT = $OBJECT | 0;
        $WHERE = $WHERE | 0;
        $PVAL = $PVAL | 0;
        var $$lcssa = 0,
            $0 = 0,
            $10 = 0,
            $14 = 0,
            $2 = 0,
            $23 = 0,
            $26 = 0,
            $3 = 0,
            $9 = 0,
            $FROM$0$i = 0,
            $TEMP$0$i$i = 0,
            label = 0;
        $0 = ($OBJECT | 0) > 100; //@line 14362
        $2 = 6896 + ($OBJECT + -100 << 2) | 0; //@line 14364
        $3 = 6488 + ($OBJECT << 2) | 0; //@line 14365
        $FROM$0$i = HEAP32[($0 ? $2 : $3) >> 2] | 0; //@line 14367
        do {
            if (($FROM$0$i + -1 | 0) >>> 0 < 300) {
                if (!$0) {
                    if ((HEAP32[$3 >> 2] | 0) == -1) {
                        label = 11; //@line 14376
                        break;
                    }
                    HEAP32[$3 >> 2] = -1; //@line 14379
                    HEAP32[3318] = (HEAP32[3318] | 0) + 1; //@line 14382
                }
                $9 = 10712 + ($FROM$0$i << 2) | 0; //@line 14384
                $10 = HEAP32[$9 >> 2] | 0; //@line 14385
                if (($10 | 0) == ($OBJECT | 0)) {
                    HEAP32[$9 >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14390
                    label = 9; //@line 14391
                    break;
                } else {
                    $TEMP$0$i$i = $10; //@line 14394
                }
                do {
                    $14 = 11504 + ($TEMP$0$i$i << 2) | 0; //@line 14397
                    $TEMP$0$i$i = HEAP32[$14 >> 2] | 0; //@line 14398
                } while (($TEMP$0$i$i | 0) != ($OBJECT | 0));
                $$lcssa = $14; //@line 14401
                HEAP32[$$lcssa >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14409
                label = 9; //@line 14410
            } else {
                label = 9; //@line 14412
            }
        } while (0);
        do {
            if ((label | 0) == 9) {
                if ($0) {
                    HEAP32[$2 >> 2] = $WHERE; //@line 14418
                    break;
                } else {
                    if ((HEAP32[$3 >> 2] | 0) == -1) {
                        label = 11; //@line 14424
                        break;
                    } else {
                        label = 12; //@line 14427
                        break;
                    }
                }
            }
        } while (0);
        if ((label | 0) == 11) {
            HEAP32[3318] = (HEAP32[3318] | 0) + -1; //@line 14436
            label = 12; //@line 14437
        }
        if ((label | 0) == 12) {
            HEAP32[$3 >> 2] = $WHERE; //@line 14440
        }
        if (($WHERE | 0) < 1) {
            $26 = ~$PVAL; //@line 14444
            return $26 | 0; //@line 14445
        }
        $23 = 10712 + ($WHERE << 2) | 0; //@line 14447
        HEAP32[11504 + ($OBJECT << 2) >> 2] = HEAP32[$23 >> 2]; //@line 14450
        HEAP32[$23 >> 2] = $OBJECT; //@line 14451
        $26 = ~$PVAL; //@line 14452
        return $26 | 0; //@line 14453
    }

    function _fGETNUM($K) {
        console.log("_fGETNUM");
        $K = $K | 0;
        var $$0 = 0,
            $11 = 0,
            $12 = 0,
            $13 = 0,
            $16 = 0,
            $19 = 0,
            $24 = 0,
            $3 = 0,
            $4 = 0,
            $7 = 0,
            $8 = 0,
            $GETNUM$0 = 0,
            $GETNUM$1 = 0,
            $GETNUM$2 = 0,
            $SIGN$0 = 0,
            $SIGN$1 = 0,
            label = 0,
            $7$looptemp = 0;
        if ($K) {
            _fMAPLIN(($K | 0) > 0 & 1); //@line 13062
        }
        $3 = HEAP32[4236] | 0; //@line 13064
        $4 = HEAP32[4234] | 0; //@line 13065
        if (($3 | 0) > ($4 | 0)) {
            $$0 = 0; //@line 13068
            return $$0 | 0; //@line 13069
        } else {
            $7 = $3; //@line 13071
        }
        while (1) {
            $8 = HEAP8[17464 + $7 >> 0] | 0; //@line 13075
            if ($8 << 24 >> 24 == 9) {
                $12 = $7; //@line 13077
                $GETNUM$0 = 0; //@line 13077
                $SIGN$0 = -1; //@line 13077
                label = 6; //@line 13078
                break;
            } else if ($8 << 24 >> 24) {
                $13 = $7; //@line 13081
                $GETNUM$1 = 0; //@line 13081
                $SIGN$1 = 1; //@line 13081
                break;
            }
            $7$looptemp = $7;
            $7 = $7 + 1 | 0; //@line 13084
            HEAP32[4236] = $7; //@line 13085
            if (($7$looptemp | 0) >= ($4 | 0)) {
                $$0 = 0; //@line 13090
                label = 12; //@line 13091
                break;
            }
        }
        if ((label | 0) == 12) {
            return $$0 | 0; //@line 13096
        }
        while (1) {
            if ((label | 0) == 6) {
                label = 0; //@line 13100
                $11 = $12 + 1 | 0; //@line 13101
                HEAP32[4236] = $11; //@line 13102
                $13 = $11; //@line 13103
                $GETNUM$1 = $GETNUM$0; //@line 13103
                $SIGN$1 = $SIGN$0; //@line 13103
            }
            if (($13 | 0) > ($4 | 0)) {
                $GETNUM$2 = $GETNUM$1; //@line 13107
                break;
            }
            $16 = HEAP8[17464 + $13 >> 0] | 0; //@line 13111
            if (!($16 << 24 >> 24)) {
                $GETNUM$2 = $GETNUM$1; //@line 13114
                break;
            }
            $19 = ($16 << 24 >> 24) + -64 | 0; //@line 13118
            if ($16 << 24 >> 24 < 64 | ($19 | 0) > 9) {
                $GETNUM$2 = 0; //@line 13123
                break;
            }
            $12 = $13; //@line 13128
            $GETNUM$0 = $19 + ($GETNUM$1 * 10 | 0) | 0; //@line 13128
            $SIGN$0 = $SIGN$1; //@line 13128
            label = 6; //@line 13129
        }
        $24 = Math_imul($GETNUM$2, $SIGN$1) | 0; //@line 13131
        HEAP32[4236] = $13 + 1; //@line 13133
        $$0 = $24; //@line 13134
        return $$0 | 0; //@line 13135
    }

    function _fMOVE($OBJECT, $WHERE) {
        $OBJECT = $OBJECT | 0;
        $WHERE = $WHERE | 0;
        var $$lcssa = 0,
            $0 = 0,
            $10 = 0,
            $14 = 0,
            $2 = 0,
            $23 = 0,
            $3 = 0,
            $9 = 0,
            $FROM$0 = 0,
            $TEMP$0$i = 0,
            label = 0;
        $0 = ($OBJECT | 0) > 100; //@line 13991
        $2 = 6896 + ($OBJECT + -100 << 2) | 0; //@line 13993
        $3 = 6488 + ($OBJECT << 2) | 0; //@line 13994
        $FROM$0 = HEAP32[($0 ? $2 : $3) >> 2] | 0; //@line 13996
        do {
            if (($FROM$0 + -1 | 0) >>> 0 < 300) {
                if (!$0) {
                    if ((HEAP32[$3 >> 2] | 0) == -1) {
                        label = 11; //@line 14005
                        break;
                    }
                    HEAP32[$3 >> 2] = -1; //@line 14008
                    HEAP32[3318] = (HEAP32[3318] | 0) + 1; //@line 14011
                }
                $9 = 10712 + ($FROM$0 << 2) | 0; //@line 14013
                $10 = HEAP32[$9 >> 2] | 0; //@line 14014
                if (($10 | 0) == ($OBJECT | 0)) {
                    HEAP32[$9 >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14019
                    label = 9; //@line 14020
                    break;
                } else {
                    $TEMP$0$i = $10; //@line 14023
                }
                do {
                    $14 = 11504 + ($TEMP$0$i << 2) | 0; //@line 14026
                    $TEMP$0$i = HEAP32[$14 >> 2] | 0; //@line 14027
                } while (($TEMP$0$i | 0) != ($OBJECT | 0));
                $$lcssa = $14; //@line 14030
                HEAP32[$$lcssa >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14038
                label = 9; //@line 14039
            } else {
                label = 9; //@line 14041
            }
        } while (0);
        do {
            if ((label | 0) == 9) {
                if ($0) {
                    HEAP32[$2 >> 2] = $WHERE; //@line 14047
                    break;
                } else {
                    if ((HEAP32[$3 >> 2] | 0) == -1) {
                        label = 11; //@line 14053
                        break;
                    } else {
                        label = 12; //@line 14056
                        break;
                    }
                }
            }
        } while (0);
        if ((label | 0) == 11) {
            HEAP32[3318] = (HEAP32[3318] | 0) + -1; //@line 14065
            label = 12; //@line 14066
        }
        if ((label | 0) == 12) {
            HEAP32[$3 >> 2] = $WHERE; //@line 14069
        }
        if (($WHERE | 0) < 1) {
            return;
        }
        $23 = 10712 + ($WHERE << 2) | 0; //@line 14075
        HEAP32[11504 + ($OBJECT << 2) >> 2] = HEAP32[$23 >> 2]; //@line 14078
        HEAP32[$23 >> 2] = $OBJECT; //@line 14079
        return;
    }

    function _fMAPLIN($FIL) {
        console.log("_fMAPLIN");
        $FIL = $FIL | 0;
        var $10 = 0,
            $11 = 0,
            $12 = 0,
            $17 = 0,
            $2 = 0,
            $21 = 0,
            $23 = 0,
            $24 = 0,
            $6 = 0,
            $8 = 0,
            $I$02 = 0,
            label = 0;
        if (!(HEAP8[129] | 0)) {
            _fMPINIT(); //@line 12557
        }
        $2 = ($FIL | 0) != 0; //@line 12559
        if ($2) {
            label = 6; //@line 12561
        } else {
            _gets(17465) | 0; //@line 12563
            if (_feof(HEAP32[_stdin >> 2] | 0) | 0) {
                _score(1); //@line 12568
            }
        }
        while (1) {
            if ((label | 0) == 6) {
                label = 0; //@line 12573
                $6 = HEAP32[4928] | 0; //@line 12574
                if (!$6) {
                    $8 = _fopen(19720, 19736) | 0; //@line 12577
                    HEAP32[4928] = $8; //@line 12578
                    if (!$8) {
                        label = 8; //@line 12581
                        break;
                    } else {
                        $10 = $8; //@line 12584
                    }
                } else {
                    $10 = $6; //@line 12587
                }
                _fgets(17465, 100, $10 | 0) | 0; //@line 12589
            }
            HEAP32[4234] = 0; //@line 12591
            $23 = 0; //@line 12592
            $I$02 = 1; //@line 12592
            while (1) {
                $11 = 17464 + $I$02 | 0; //@line 12594
                $12 = HEAP8[$11 >> 0] | 0; //@line 12595
                if (!($12 << 24 >> 24)) {
                    $21 = $23; //@line 12598
                    break;
                }
                $17 = HEAP8[17568 + (($12 << 24 >> 24) + 1) >> 0] | 0; //@line 12604
                HEAP8[$11 >> 0] = $17; //@line 12605
                if (!($17 << 24 >> 24)) {
                    $24 = $23; //@line 12608
                } else {
                    HEAP32[4234] = $I$02; //@line 12610
                    $24 = $I$02; //@line 12611
                }
                $I$02 = $I$02 + 1 | 0; //@line 12613
                if (($I$02 | 0) >= 101) {
                    $21 = $24; //@line 12618
                    break;
                } else {
                    $23 = $24; //@line 12616
                }
            }
            HEAP32[4236] = 1; //@line 12622
            if ($2 & ($21 | 0) == 0) {
                label = 6; //@line 12626
            } else {
                label = 16; //@line 12628
                break;
            }
        }
        if ((label | 0) == 8) {
            _puts(19744) | 0; //@line 12633
            _exit(0); //@line 12634
        } else if ((label | 0) == 16) {
            return;
        }
    }

    function _fSAVARR($ARR, $N) {
        $ARR = $ARR | 0;
        $N = $N | 0;
        var $$pr$i = 0,
            $1 = 0,
            $12 = 0,
            $15 = 0,
            $19 = 0,
            $20 = 0,
            $24 = 0,
            $26 = 0,
            $27 = 0,
            $29 = 0,
            $3 = 0,
            $7 = 0,
            $8 = 0,
            $I$01 = 0;
        if (($N | 0) < 1) {
            return;
        } else {
            $I$01 = 1; //@line 13714
        }
        while (1) {
            $1 = $ARR + ($I$01 << 2) | 0; //@line 13717
            $$pr$i = HEAP32[4944] | 0; //@line 13718
            if ($$pr$i) {
                $3 = HEAP32[4946] | 0; //@line 13721
                if (($3 | 0) == 250) {
                    _fSAVEIO(1, ($$pr$i | 0) > 0 & 1, 19792); //@line 13726
                    $20 = HEAP32[4944] | 0; //@line 13729
                    $8 = HEAP32[4946] | 0; //@line 13729
                } else {
                    $20 = $$pr$i; //@line 13731
                    $8 = $3; //@line 13731
                }
                $7 = ($8 | 0) % 250 | 0; //@line 13733
                $12 = (((HEAP32[5198] | 0) * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13737
                $15 = (($12 * 1093 | 0) + 221573 | 0) % 1048576 | 0; //@line 13740
                HEAP32[5198] = $15; //@line 13741
                $19 = ((($12 | 0) % 1234 | 0) * 765432 | 0) + (($15 | 0) % 123 | 0) | 0; //@line 13745
                HEAP32[5200] = $19; //@line 13746
                HEAP32[4946] = $7; //@line 13747
                if (($20 | 0) > 0) {
                    $24 = (HEAP32[19792 + ($7 << 2) >> 2] | 0) + $19 | 0; //@line 13752
                    HEAP32[$1 >> 2] = $24; //@line 13753
                    $26 = $24; //@line 13756
                    $27 = HEAP32[5200] | 0; //@line 13756
                    $29 = HEAP32[4946] | 0; //@line 13756
                } else {
                    $26 = HEAP32[$1 >> 2] | 0; //@line 13759
                    $27 = $19; //@line 13759
                    $29 = $7; //@line 13759
                }
                HEAP32[19792 + ($29 << 2) >> 2] = $26 - $27; //@line 13763
                HEAP32[4946] = $29 + 1; //@line 13765
                HEAP32[5202] = (((HEAP32[5202] | 0) * 13 | 0) + (HEAP32[$1 >> 2] | 0) | 0) % 1e9 | 0; //@line 13771
            }
            if (($I$01 | 0) == ($N | 0)) {
                break;
            } else {
                $I$01 = $I$01 + 1 | 0; //@line 13778
            }
        }
        return;
    }

    function _fDSTROY($OBJECT) {
        $OBJECT = $OBJECT | 0;
        var $$lcssa = 0,
            $0 = 0,
            $10 = 0,
            $14 = 0,
            $2 = 0,
            $3 = 0,
            $9 = 0,
            $FROM$0$i = 0,
            $TEMP$0$i$i = 0,
            label = 0;
        $0 = ($OBJECT | 0) > 100; //@line 13908
        $2 = 6896 + ($OBJECT + -100 << 2) | 0; //@line 13910
        $3 = 6488 + ($OBJECT << 2) | 0; //@line 13911
        $FROM$0$i = HEAP32[($0 ? $2 : $3) >> 2] | 0; //@line 13913
        do {
            if (($FROM$0$i + -1 | 0) >>> 0 < 300) {
                if (!$0) {
                    if ((HEAP32[$3 >> 2] | 0) == -1) {
                        label = 11; //@line 13922
                        break;
                    }
                    HEAP32[$3 >> 2] = -1; //@line 13925
                    HEAP32[3318] = (HEAP32[3318] | 0) + 1; //@line 13928
                }
                $9 = 10712 + ($FROM$0$i << 2) | 0; //@line 13930
                $10 = HEAP32[$9 >> 2] | 0; //@line 13931
                if (($10 | 0) == ($OBJECT | 0)) {
                    HEAP32[$9 >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 13936
                    label = 9; //@line 13937
                    break;
                } else {
                    $TEMP$0$i$i = $10; //@line 13940
                }
                do {
                    $14 = 11504 + ($TEMP$0$i$i << 2) | 0; //@line 13943
                    $TEMP$0$i$i = HEAP32[$14 >> 2] | 0; //@line 13944
                } while (($TEMP$0$i$i | 0) != ($OBJECT | 0));
                $$lcssa = $14; //@line 13947
                HEAP32[$$lcssa >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 13955
                label = 9; //@line 13956
            } else {
                label = 9; //@line 13958
            }
        } while (0);
        do {
            if ((label | 0) == 9) {
                if (!$0) {
                    if ((HEAP32[$3 >> 2] | 0) == -1) {
                        label = 11; //@line 13967
                        break;
                    } else {
                        break;
                    }
                }
                HEAP32[$2 >> 2] = 0; //@line 13973
                return;
            }
        } while (0);
        if ((label | 0) == 11) {
            HEAP32[3318] = (HEAP32[3318] | 0) + -1; //@line 13980
        }
        HEAP32[$3 >> 2] = 0; //@line 13982
        return;
    }

    function _fSAVEIO($OP, $IN, $ARR) {
        $OP = $OP | 0;
        $IN = $IN | 0;
        $ARR = $ARR | 0;
        var $12 = 0,
            $3 = 0,
            $5 = 0,
            $6 = 0,
            $9 = 0,
            $NAME = 0,
            $vararg_buffer = 0,
            $vararg_buffer1 = 0,
            sp = 0;
        sp = STACKTOP; //@line 13788
        STACKTOP = STACKTOP + 64 | 0; //@line 13789
        $vararg_buffer1 = sp + 8 | 0; //@line 13790
        $vararg_buffer = sp; //@line 13791
        $NAME = sp + 12 | 0; //@line 13792
        $3 = ($OP | 0) < 0 ? -1 : ($OP | 0) > 0 & 1; //@line 13796
        if (($3 | 0) == 1) {
            $12 = HEAP32[5210] | 0; //@line 13799
            if (!$IN) {
                _fwrite($ARR | 0, 4, 250, $12 | 0) | 0; //@line 13801
                STACKTOP = sp; //@line 13802
                return;
            } else {
                _fread($ARR | 0, 4, 250, $12 | 0) | 0; //@line 13804
                STACKTOP = sp; //@line 13805
                return;
            }
        } else if (!$3) {
            _printf(20816, $vararg_buffer | 0) | 0; //@line 13808
            _gets($NAME | 0) | 0; //@line 13809
            $5 = ($IN | 0) != 0 ? 19736 : 20832; //@line 13811
            $6 = _fopen($NAME | 0, $5 | 0) | 0; //@line 13812
            HEAP32[5210] = $6; //@line 13813
            if ($6) {
                STACKTOP = sp; //@line 13816
                return;
            }
            do {
                _puts(20848) | 0; //@line 13819
                _printf(20816, $vararg_buffer1 | 0) | 0; //@line 13820
                _gets($NAME | 0) | 0; //@line 13821
                $9 = _fopen($NAME | 0, $5 | 0) | 0; //@line 13822
                HEAP32[5210] = $9; //@line 13823
            } while (($9 | 0) == 0);
            STACKTOP = sp; //@line 13829
            return;
        } else {
            _fclose(HEAP32[5210] | 0) | 0; //@line 13832
            STACKTOP = sp; //@line 13833
            return;
        }
    }

    function _fRAN($RANGE) {
        $RANGE = $RANGE | 0;
        var $$lcssa = 0,
            $$lcssa9 = 0,
            $0 = 0,
            $11 = 0,
            $13 = 0,
            $15 = 0,
            $17 = 0,
            $19 = 0,
            $20 = 0,
            $21 = 0,
            $5 = 0,
            $8 = 0;
        HEAP32[5220] = 1; //@line 14561
        $0 = HEAP32[5222] | 0; //@line 14562
        if (($RANGE | 0) > -1 & ($0 | 0) != 0) {
            HEAP32[5224] = 1; //@line 14567
            $17 = 1; //@line 14568
            $21 = $0; //@line 14568
        } else {
            _fDATIME(20880, 20896) | 0; //@line 14570
            $5 = ((HEAP32[5224] | 0) + 5 | 0) % 1048576 | 0; //@line 14573
            HEAP32[5222] = $5; //@line 14574
            $8 = ((HEAP32[5220] | 0) % 1e3 | 0) + 1e3 | 0; //@line 14577
            HEAP32[5220] = $8; //@line 14578
            HEAP32[5224] = 1; //@line 14579
            if (($8 | 0) < 1) {
                $$lcssa = $5; //@line 14582
                $19 = Math_imul($$lcssa, $RANGE) | 0; //@line 14583
                $20 = ($19 | 0) / 1048576 | 0; //@line 14584
                return $20 | 0; //@line 14585
            } else {
                $17 = $8; //@line 14587
                $21 = $5; //@line 14587
            }
        }
        $11 = $21; //@line 14590
        $15 = 1; //@line 14590
        while (1) {
            $13 = (($11 * 1093 | 0) + 221587 | 0) % 1048576 | 0; //@line 14594
            if (($15 | 0) < ($17 | 0)) {
                $11 = $13; //@line 14598
                $15 = $15 + 1 | 0; //@line 14598
            } else {
                $$lcssa9 = $13; //@line 14600
                break;
            }
        }
        HEAP32[5222] = $$lcssa9; //@line 14605
        HEAP32[5224] = $17 + 1; //@line 14606
        $$lcssa = $$lcssa9; //@line 14607
        $19 = Math_imul($$lcssa, $RANGE) | 0; //@line 14608
        $20 = ($19 | 0) / 1048576 | 0; //@line 14609
        return $20 | 0; //@line 14610
    }

    function _fYES($X, $Y, $Z) {
        $X = $X | 0;
        $Y = $Y | 0;
        $Z = $Z | 0;
        var $$0 = 0,
            $0 = 0,
            $1 = 0,
            $3 = 0,
            $JUNK1 = 0,
            $JUNK2 = 0,
            $JUNK3 = 0,
            $REPLY = 0,
            label = 0,
            sp = 0;
        sp = STACKTOP; //@line 12973
        STACKTOP = STACKTOP + 16 | 0; //@line 12974
        $REPLY = sp + 12 | 0; //@line 12975
        $JUNK1 = sp; //@line 12976
        $JUNK2 = sp + 4 | 0; //@line 12977
        $JUNK3 = sp + 8 | 0; //@line 12978
        $0 = ($X | 0) == 0; //@line 12979
        $1 = 9592 + ($X << 2) | 0; //@line 12980
        while (1) {
            if (!$0) {
                _fSPEAK(HEAP32[$1 >> 2] | 0); //@line 12984
            }
            _fGETIN($REPLY, $JUNK1, $JUNK2, $JUNK3); //@line 12986
            $3 = HEAP32[$REPLY >> 2] | 0; //@line 12987
            if (($3 | 0) == 402653184 | ($3 | 0) == 409206784) {
                label = 8; //@line 12989
                break;
            } else if (($3 | 0) == 587202560 | ($3 | 0) == 591253504) {
                label = 6; //@line 12992
                break;
            }
            _fSPEAK(HEAP32[2583] | 0); //@line 12996
        }
        if ((label | 0) == 6) {
            if (!$Y) {
                $$0 = 1; //@line 13001
            } else {
                _fSPEAK(HEAP32[9592 + ($Y << 2) >> 2] | 0); //@line 13005
                $$0 = 1; //@line 13006
            }
        } else if ((label | 0) == 8) {
            if (!$Z) {
                $$0 = 0; //@line 13012
            } else {
                _fSPEAK(HEAP32[9592 + ($Z << 2) >> 2] | 0); //@line 13016
                $$0 = 0; //@line 13017
            }
        }
        STACKTOP = sp; //@line 13020
        return $$0 | 0; //@line 13020
    }

    function _fVOCAB($ID, $INIT) {
        $ID = $ID | 0;
        $INIT = $INIT | 0;
        var $$lcssa13 = 0,
            $0 = 0,
            $2 = 0,
            $4 = 0,
            $HASH$03 = 0,
            $I$04 = 0,
            label = 0;
        $0 = HEAP32[6] | 0; //@line 13842
        if (($0 | 0) < 1) {
            _fBUG(21); //@line 13845
        }
        $2 = ($INIT | 0) < 0; //@line 13848
        $HASH$03 = 1e4; //@line 13849
        $I$04 = 1; //@line 13849
        while (1) {
            $4 = HEAP32[15608 + ($I$04 << 2) >> 2] | 0; //@line 13852
            if (($4 | 0) == -1) {
                label = 8; //@line 13855
                break;
            }
            $HASH$03 = $HASH$03 + 7 | 0; //@line 13858
            if ($2 | (($4 | 0) / 1e3 | 0 | 0) == ($INIT | 0)) {
                if ((HEAP32[14280 + ($I$04 << 2) >> 2] | 0) == ((Math_imul($HASH$03, $HASH$03) | 0) + $ID | 0)) {
                    $$lcssa13 = $4; //@line 13869
                    label = 10; //@line 13870
                    break;
                }
            }
            if (($I$04 | 0) >= ($0 | 0)) {
                label = 7; //@line 13879
                break;
            } else {
                $I$04 = $I$04 + 1 | 0; //@line 13877
            }
        }
        if ((label | 0) == 7) {
            _fBUG(21); //@line 13884
        } else if ((label | 0) == 8) {
            if ($2) {
                return -1;
            } else {
                _fBUG(5); //@line 13891
            }
        } else if ((label | 0) == 10) {
            return (($INIT | 0) > -1 ? ($$lcssa13 | 0) % 1e3 | 0 : $$lcssa13) | 0; //@line 13899
        }
        return 0; //@line 13901
    }

    function _fPSPEAK($MSG, $SKIP) {
        $MSG = $MSG | 0;
        $SKIP = $SKIP | 0;
        var $$lcssa = 0,
            $$lcssa8 = 0,
            $$pre = 0,
            $1 = 0,
            $3 = 0,
            $4 = 0,
            $7 = 0,
            $9 = 0,
            $I$02 = 0,
            $M$2 = 0;
        $1 = HEAP32[17056 + ($MSG << 2) >> 2] | 0; //@line 10695
        if (($SKIP | 0) < 0) {
            $M$2 = $1; //@line 10698
            _fSPEAK($M$2); //@line 10699
            return;
        }
        $3 = HEAP32[30] | 0; //@line 10702
        $$pre = HEAP32[$3 + ($1 << 2) >> 2] | 0; //@line 10705
        $I$02 = 0; //@line 10705
        while (1) {
            $4 = $$pre; //@line 10707
            while (1) {
                $7 = ($4 | 0) < 0 ? 0 - $4 | 0 : $4; //@line 10711
                $9 = HEAP32[$3 + ($7 << 2) >> 2] | 0; //@line 10713
                if (($9 | 0) > -1) {
                    $4 = $9; //@line 10716
                } else {
                    $$lcssa = $7; //@line 10718
                    $$lcssa8 = $9; //@line 10718
                    break;
                }
            }
            if (($I$02 | 0) == ($SKIP | 0)) {
                $M$2 = $$lcssa; //@line 10725
                break;
            } else {
                $$pre = $$lcssa8; //@line 10728
                $I$02 = $I$02 + 1 | 0; //@line 10728
            }
        }
        _fSPEAK($M$2); //@line 10731
        return;
    }

    function _fCARRY($OBJECT, $WHERE) {
        $OBJECT = $OBJECT | 0;
        $WHERE = $WHERE | 0;
        var $$lcssa = 0,
            $1 = 0,
            $11 = 0,
            $6 = 0,
            $7 = 0,
            $TEMP$0 = 0;
        do {
            if (($OBJECT | 0) <= 100) {
                $1 = 6488 + ($OBJECT << 2) | 0; //@line 14282
                if ((HEAP32[$1 >> 2] | 0) == -1) {
                    return;
                } else {
                    HEAP32[$1 >> 2] = -1; //@line 14288
                    HEAP32[3318] = (HEAP32[3318] | 0) + 1; //@line 14291
                    break;
                }
            }
        } while (0);
        $6 = 10712 + ($WHERE << 2) | 0; //@line 14296
        $7 = HEAP32[$6 >> 2] | 0; //@line 14297
        if (($7 | 0) == ($OBJECT | 0)) {
            HEAP32[$6 >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14302
            return;
        } else {
            $TEMP$0 = $7; //@line 14305
        }
        do {
            $11 = 11504 + ($TEMP$0 << 2) | 0; //@line 14308
            $TEMP$0 = HEAP32[$11 >> 2] | 0; //@line 14309
        } while (($TEMP$0 | 0) != ($OBJECT | 0));
        $$lcssa = $11; //@line 14312
        HEAP32[$$lcssa >> 2] = HEAP32[11504 + ($OBJECT << 2) >> 2]; //@line 14320
        return;
    }

    function _memcpy(dest, src, num) {
        dest = dest | 0;
        src = src | 0;
        num = num | 0;
        var ret = 0;
        if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 18276
        ret = dest | 0; //@line 18277
        if ((dest & 3) == (src & 3)) {
            while (dest & 3) {
                if (!num) return ret | 0; //@line 18280
                HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 18281
                dest = dest + 1 | 0; //@line 18282
                src = src + 1 | 0; //@line 18283
                num = num - 1 | 0; //@line 18284
            }
            while ((num | 0) >= 4) {
                HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 18287
                dest = dest + 4 | 0; //@line 18288
                src = src + 4 | 0; //@line 18289
                num = num - 4 | 0; //@line 18290
            }
        }
        while ((num | 0) > 0) {
            HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 18294
            dest = dest + 1 | 0; //@line 18295
            src = src + 1 | 0; //@line 18296
            num = num - 1 | 0; //@line 18297
        }
        return ret | 0; //@line 18299
    }

    function _fATDWRF($WHERE) {
        $WHERE = $WHERE | 0;
        var $$0 = 0,
            $10 = 0,
            $2 = 0,
            $4 = 0,
            $6 = 0,
            $8 = 0;
        if ((HEAP32[390] | 0) < 2) {
            $$0 = 0; //@line 14463
        } else {
            $2 = HEAP32[395] | 0; //@line 14465
            if (($2 | 0) == ($WHERE | 0)) {
                $$0 = 1; //@line 14468
            } else {
                $4 = HEAP32[396] | 0; //@line 14470
                if (($4 | 0) == ($WHERE | 0)) {
                    $$0 = 2; //@line 14473
                } else {
                    $6 = HEAP32[397] | 0; //@line 14475
                    if (($6 | 0) == ($WHERE | 0)) {
                        $$0 = 3; //@line 14478
                    } else {
                        $8 = HEAP32[398] | 0; //@line 14480
                        if (($8 | 0) == ($WHERE | 0)) {
                            $$0 = 4; //@line 14483
                        } else {
                            $10 = HEAP32[399] | 0; //@line 14485
                            if (($10 | 0) == ($WHERE | 0)) {
                                $$0 = 5; //@line 14488
                            } else {
                                $$0 = ($10 | ($8 | ($6 | $4)) | 0) == 0 ? (($2 | 0) == 0) << 31 >> 31 : 0; //@line 14497
                            }
                        }
                    }
                }
            }
        }
        return $$0 | 0; //@line 14504
    }

    function runPostSets() {}

    function _memset(ptr, value, num) {
        ptr = ptr | 0;
        value = value | 0;
        num = num | 0;
        var stop = 0,
            value4 = 0,
            stop4 = 0,
            unaligned = 0;
        stop = ptr + num | 0; //@line 18239
        if ((num | 0) >= 20) {
            value = value & 255; //@line 18242
            unaligned = ptr & 3; //@line 18243
            value4 = value | value << 8 | value << 16 | value << 24; //@line 18244
            stop4 = stop & ~3; //@line 18245
            if (unaligned) {
                unaligned = ptr + 4 - unaligned | 0; //@line 18247
                while ((ptr | 0) < (unaligned | 0)) {
                    HEAP8[ptr >> 0] = value; //@line 18249
                    ptr = ptr + 1 | 0; //@line 18250
                }
            }
            while ((ptr | 0) < (stop4 | 0)) {
                HEAP32[ptr >> 2] = value4; //@line 18254
                ptr = ptr + 4 | 0; //@line 18255
            }
        }
        while ((ptr | 0) < (stop | 0)) {
            HEAP8[ptr >> 0] = value; //@line 18259
            ptr = ptr + 1 | 0; //@line 18260
        }
        return ptr - num | 0; //@line 18262
    }

    function _fMAKEWD($LETTRS) {
        $LETTRS = $LETTRS | 0;
        var $$lcssa = 0,
            $3 = 0,
            $4 = 0,
            $I$0 = 0,
            $L$0 = 0,
            $MAKEWD$0 = 0,
            $MAKEWD$1 = 0,
            $MAKEWD$1$lcssa = 0;
        $I$0 = 1; //@line 13027
        $L$0 = $LETTRS; //@line 13027
        $MAKEWD$0 = 0; //@line 13027
        while (1) {
            $3 = (Math_imul((($L$0 | 0) % 50 | 0) + 10 | 0, $I$0) | 0) + $MAKEWD$0 | 0; //@line 13032
            $4 = $I$0 << 6; //@line 13033
            $MAKEWD$1 = $3 + ((($L$0 | 0) % 100 | 0 | 0) > 50 ? $I$0 * 320 | 0 : 0) | 0; //@line 13038
            if (($L$0 + 99 | 0) >>> 0 > 198) {
                $I$0 = $4; //@line 13043
                $L$0 = ($L$0 | 0) / 100 | 0; //@line 13043
                $MAKEWD$0 = $MAKEWD$1; //@line 13043
            } else {
                $$lcssa = $4; //@line 13045
                $MAKEWD$1$lcssa = $MAKEWD$1; //@line 13045
                break;
            }
        }
        return Math_imul(1073741824 / ($$lcssa | 0) | 0, $MAKEWD$1$lcssa) | 0; //@line 13051
    }

    function _quick_array($A, $N) {
        $A = $A | 0;
        $N = $N | 0;
        var $16 = 0,
            $2 = 0,
            $8 = 0,
            $I$02 = 0;
        if (HEAP32[4868] | 0) {
            $2 = $N + 1 | 0; //@line 4643
            if ((_fread($A | 0, 4, $2 | 0, HEAP32[4862] | 0) | 0) != ($2 | 0)) {
                _puts(19616) | 0; //@line 4648
            }
        }
        if (($N | 0) >= 1) {
            $8 = HEAP32[4870] | 0; //@line 4654
            $I$02 = 1; //@line 4654
            while (1) {
                $8 = _fMOD(($8 * 13 | 0) + (HEAP32[$A + ($I$02 << 2) >> 2] | 0) | 0, 6e7) | 0; //@line 4660
                HEAP32[4870] = $8; //@line 4661
                if (($I$02 | 0) == ($N | 0)) {
                    break;
                } else {
                    $I$02 = $I$02 + 1 | 0; //@line 4667
                }
            }
        }
        if (HEAP32[4868] | 0) {
            return;
        }
        $16 = $N + 1 | 0; //@line 4676
        if ((_fwrite($A | 0, 4, $16 | 0, HEAP32[4862] | 0) | 0) == ($16 | 0)) {
            return;
        }
        _puts(19632) | 0; //@line 4683
        return;
    }

    function _calloc($n_elements, $elem_size) {
        $n_elements = $n_elements | 0;
        $elem_size = $elem_size | 0;
        var $1 = 0,
            $6 = 0,
            $req$0 = 0;
        if (!$n_elements) {
            $req$0 = 0; //@line 18204
        } else {
            $1 = Math_imul($elem_size, $n_elements) | 0; //@line 18206
            if (($elem_size | $n_elements) >>> 0 > 65535) {
                $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; //@line 18213
            } else {
                $req$0 = $1; //@line 18215
            }
        }
        $6 = _malloc($req$0) | 0; //@line 18218
        if (!$6) {
            return $6 | 0; //@line 18221
        }
        if (!(HEAP32[$6 + -4 >> 2] & 3)) {
            return $6 | 0; //@line 18228
        }
        _memset($6 | 0, 0, $req$0 | 0) | 0; //@line 18230
        return $6 | 0; //@line 18231
    }

    function _fDROP($OBJECT, $WHERE) {
        $OBJECT = $OBJECT | 0;
        $WHERE = $WHERE | 0;
        var $1 = 0,
            $9 = 0;
        if (($OBJECT | 0) > 100) {
            HEAP32[6896 + ($OBJECT + -100 << 2) >> 2] = $WHERE; //@line 14332
        } else {
            $1 = 6488 + ($OBJECT << 2) | 0; //@line 14334
            if ((HEAP32[$1 >> 2] | 0) == -1) {
                HEAP32[3318] = (HEAP32[3318] | 0) + -1; //@line 14340
            }
            HEAP32[$1 >> 2] = $WHERE; //@line 14342
        }
        if (($WHERE | 0) < 1) {
            return;
        }
        $9 = 10712 + ($WHERE << 2) | 0; //@line 14348
        HEAP32[11504 + ($OBJECT << 2) >> 2] = HEAP32[$9 >> 2]; //@line 14351
        HEAP32[$9 >> 2] = $OBJECT; //@line 14352
        return;
    }

    function copyTempDouble(ptr) {
        ptr = ptr | 0;
        HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0]; //@line 40
        HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0]; //@line 41
        HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0]; //@line 42
        HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0]; //@line 43
        HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0]; //@line 44
        HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0]; //@line 45
        HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0]; //@line 46
        HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0]; //@line 47
    }

    function _fTSTBIT($MASK, $BIT) {
        $MASK = $MASK | 0;
        $BIT = $BIT | 0;
        var $$0$i = 0,
            $1 = 0,
            $I$01$i = 0,
            $SETBIT$02$i = 0;
        if (($BIT | 0) < 1) {
            $$0$i = 1; //@line 14537
        } else {
            $I$01$i = 1; //@line 14539
            $SETBIT$02$i = 1; //@line 14539
            while (1) {
                $1 = $SETBIT$02$i << 1; //@line 14541
                if (($I$01$i | 0) == ($BIT | 0)) {
                    $$0$i = $1; //@line 14545
                    break;
                } else {
                    $I$01$i = $I$01$i + 1 | 0; //@line 14548
                    $SETBIT$02$i = $1; //@line 14548
                }
            }
        }
        return (($MASK | 0) / ($$0$i | 0) | 0) & 1 | 0; //@line 14554
    }

    function _fSETBIT($BIT) {
        $BIT = $BIT | 0;
        var $$0 = 0,
            $1 = 0,
            $I$01 = 0,
            $SETBIT$02 = 0;
        if (($BIT | 0) < 1) {
            $$0 = 1; //@line 14512
            return $$0 | 0; //@line 14513
        } else {
            $I$01 = 1; //@line 14515
            $SETBIT$02 = 1; //@line 14515
        }
        while (1) {
            $1 = $SETBIT$02 << 1; //@line 14518
            if (($I$01 | 0) == ($BIT | 0)) {
                $$0 = $1; //@line 14522
                break;
            } else {
                $I$01 = $I$01 + 1 | 0; //@line 14525
                $SETBIT$02 = $1; //@line 14525
            }
        }
        return $$0 | 0; //@line 14528
    }

    function _fDATIME($X, $Y) {
        $X = $X | 0;
        $Y = $Y | 0;
        var $1 = 0,
            $rawtime = 0,
            sp = 0;
        sp = STACKTOP; //@line 14935
        STACKTOP = STACKTOP + 16 | 0; //@line 14936
        $rawtime = sp; //@line 14937
        _time($rawtime | 0) | 0; //@line 14938
        $1 = HEAP32[(_localtime($rawtime | 0) | 0) >> 2] | 0; //@line 14940
        HEAP32[$X >> 2] = $1; //@line 14941
        HEAP32[$Y >> 2] = $1; //@line 14942
        STACKTOP = sp; //@line 14943
        return 0; //@line 14943
    }

    function _fBUG($NUM) {
        $NUM = $NUM | 0;
        var $vararg_buffer = 0,
            sp = 0;
        sp = STACKTOP; //@line 10769
        STACKTOP = STACKTOP + 16 | 0; //@line 10770
        $vararg_buffer = sp; //@line 10771
        HEAP32[$vararg_buffer >> 2] = $NUM; //@line 10772
        _printf(19648, $vararg_buffer | 0) | 0; //@line 10773
        _exit(0); //@line 10774
    }

    function copyTempFloat(ptr) {
        ptr = ptr | 0;
        HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0]; //@line 33
        HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0]; //@line 34
        HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0]; //@line 35
        HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0]; //@line 36
    }

    function _fSETPRM($FIRST, $P1, $P2) {
        $FIRST = $FIRST | 0;
        $P1 = $P1 | 0;
        $P2 = $P2 | 0;
        if (($FIRST | 0) > 24) {
            _fBUG(29); //@line 10755
        } else {
            HEAP32[16952 + ($FIRST << 2) >> 2] = $P1; //@line 10759
            HEAP32[16952 + ($FIRST + 1 << 2) >> 2] = $P2; //@line 10762
            return;
        }
    }

    function stackAlloc(size) {
        size = size | 0;
        var ret = 0;
        ret = STACKTOP; //@line 3
        STACKTOP = STACKTOP + size | 0; //@line 4
        STACKTOP = STACKTOP + 15 & -16; //@line 5
        return ret | 0; //@line 7
    }

    function _strlen(ptr) {
        ptr = ptr | 0;
        var curr = 0;
        curr = ptr; //@line 18267
        while (HEAP8[curr >> 0] | 0) {
            curr = curr + 1 | 0; //@line 18269
        }
        return curr - ptr | 0; //@line 18271
    }

    function _fTYPE0() {
        var $0 = 0;
        $0 = HEAP32[4234] | 0; //@line 13140
        HEAP32[4234] = 0; //@line 13141
        _putchar(10) | 0; //@line 13142
        HEAP32[4234] = $0; //@line 13143
        return;
    }

    function establishStackSpace(stackBase, stackMax) {
        stackBase = stackBase | 0;
        stackMax = stackMax | 0;
        STACKTOP = stackBase; //@line 19
        STACK_MAX = stackMax; //@line 20
    }

    function setThrew(threw, value) {
        threw = threw | 0;
        value = value | 0;
        if (!__THREW__) {
            __THREW__ = threw; //@line 27
            threwValue = value; //@line 28
        }
    }

    function _fRSPEAK($I) {
        $I = $I | 0;
        if (!$I) {
            return;
        }
        _fSPEAK(HEAP32[9592 + ($I << 2) >> 2] | 0); //@line 10744
        return;
    }

    function _fMOD($N, $M) {
        $N = $N | 0;
        $M = $M | 0;
        return ($N | 0) % ($M | 0) | 0 | 0; //@line 10686
    }

    function _fIABS($N) {
        $N = $N | 0;
        return (($N | 0) < 0 ? 0 - $N | 0 : $N) | 0; //@line 10491
    }

    function setTempRet0(value) {
        value = value | 0;
        tempRet0 = value; //@line 52
    }

    function stackRestore(top) {
        top = top | 0;
        STACKTOP = top; //@line 14
    }

    function getTempRet0() {
        return tempRet0 | 0; //@line 55
    }

    function stackSave() {
        return STACKTOP | 0; //@line 10
    }

    // EMSCRIPTEN_END_FUNCS


    return {
        _strlen: _strlen,
        _free: _free,
        _main: _main,
        _memset: _memset,
        _malloc: _malloc,
        _memcpy: _memcpy,
        runPostSets: runPostSets,
        stackAlloc: stackAlloc,
        stackSave: stackSave,
        stackRestore: stackRestore,
        establishStackSpace: establishStackSpace,
        setThrew: setThrew,
        setTempRet0: setTempRet0,
        getTempRet0: getTempRet0
    };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
    if (typeof Module['locateFile'] === 'function') {
        memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
        memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
        var data = Module['readBinary'](memoryInitializer);
        HEAPU8.set(data, STATIC_BASE);
    } else {
        addRunDependency('memory initializer');
        var applyMemoryInitializer = function(data) {
            if (data.byteLength) data = new Uint8Array(data);
            HEAPU8.set(data, STATIC_BASE);
            removeRunDependency('memory initializer');
        }
        var request = Module['memoryInitializerRequest'];
        if (request) {
            // a network request has already been created, just use that
            if (request.response) {
                setTimeout(function() {
                    applyMemoryInitializer(request.response);
                }, 0); // it's already here; but, apply it asynchronously
            } else {
                request.addEventListener('load', function() { // wait for it
                    if (request.status !== 200 && request.status !== 0) {
                        console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
                    }
                    if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
                        console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
                    }
                    applyMemoryInitializer(request.response);
                });
            }
        } else {
            // fetch it from the network ourselves
            Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
                throw 'could not load memory initializer ' + memoryInitializer;
            });
        }
    }
}

function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!Module['calledRun']) run();
    if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
    assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
    assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

    args = args || [];

    ensureInitRuntime();

    var argc = args.length + 1;

    function pad() {
        for (var i = 0; i < 4 - 1; i++) {
            argv.push(0);
        }
    }
    var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL)];
    pad();
    for (var i = 0; i < argc - 1; i = i + 1) {
        argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
        pad();
    }
    argv.push(0);
    argv = allocate(argv, 'i32', ALLOC_NORMAL);

    initialStackTop = STACKTOP;

    try {

        var ret = Module['_main'](argc, argv, 0);


        // if we're not running an evented main loop, it's time to exit
        exit(ret, /* implicit = */ true);
    } catch (e) {
        if (e instanceof ExitStatus) {
            // exit() throws this once it's done to make sure execution
            // has been stopped completely
            return;
        } else if (e == 'SimulateInfiniteLoop') {
            // running an evented main loop, don't immediately exit
            Module['noExitRuntime'] = true;
            return;
        } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
        }
    } finally {
        calledMain = true;
    }
}




function run(args) {
    args = args || Module['arguments'];

    if (preloadStartTime === null) preloadStartTime = Date.now();

    if (runDependencies > 0) {
        return;
    }

    preRun();

    if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
    if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

    function doRun() {
        if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
        Module['calledRun'] = true;

        if (ABORT) return;

        ensureInitRuntime();

        preMain();

        if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
            Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
        }

        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

        if (Module['_main'] && shouldRunNow) Module['callMain'](args);

        postRun();
    }

    if (Module['setStatus']) {
        Module['setStatus']('Running...');
        setTimeout(function() {
            setTimeout(function() {
                Module['setStatus']('');
            }, 1);
            doRun();
        }, 1);
    } else {
        doRun();
    }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
    if (implicit && Module['noExitRuntime']) {
        return;
    }

    if (Module['noExitRuntime']) {} else {

        ABORT = true;
        EXITSTATUS = status;
        STACKTOP = initialStackTop;

        exitRuntime();

        if (Module['onExit']) Module['onExit'](status);
    }

    if (ENVIRONMENT_IS_NODE) {
        // Work around a node.js bug where stdout buffer is not flushed at process exit:
        // Instead of process.exit() directly, wait for stdout flush event.
        // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
        // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
        process['stdout']['once']('drain', function() {
            process['exit'](status);
        });
        console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
        // Work around another node bug where sometimes 'drain' is never fired - make another effort
        // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
        setTimeout(function() {
            process['exit'](status);
        }, 500);
    } else
    if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
        quit(status);
    }
    // if we reach here, we must throw an exception to halt the current execution
    throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
    if (what !== undefined) {
        Module.print(what);
        Module.printErr(what);
        what = JSON.stringify(what)
    } else {
        what = '';
    }

    ABORT = true;
    EXITSTATUS = 1;

    var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

    var output = 'abort(' + what + ') at ' + stackTrace() + extra;
    if (abortDecorators) {
        abortDecorators.forEach(function(decorator) {
            output = decorator(output, what);
        });
    }
    throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
        Module['preInit'].pop()();
    }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
    shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






//# sourceMappingURL=adventure.html.map